/*
 * ============================================================================
 * Copyright (c) 2011   Marvell International, Ltd. All Rights Reserved.
 *
 *                      Marvell Confidential
 * ============================================================================
 */
#ifndef IPP_API_H
#define IPP_API_H

#include <stdint.h>
#include <stdbool.h>
#include "error_types.h"
#include "oid_api.h"

#ifdef __cplusplus
extern "C" {
#endif

#define IPP_PORT            631

/**
 * @name Return codes
 *
 * NOTE: error code values 0 through -10 are reserved in error_types.h
 */
typedef error_type_t ipp_rcode_t;

#define IPP_OK              OK
#define IPP_FAIL            FAIL
#define IPP_LOW_MEM         -11  ///< The operation failed because system memory is low. A future attempt may succeed. 
#define IPP_WOULDBLOCK      -12
#define IPP_EOF             -13
#define IPP_TIMEOUT         -14
#define IPP_INVALID_LENGTH  -15
#define IPP_INVALID_INDEX   -16
#define IPP_ATTR_NOT_FOUND  -17
#define IPP_DUP_ATTR        -18 // a duplicate IPP attribute was detected
//@}


// partial list moved from ipp_const.h
// TODO update list w/all tags applicable to the attributes user may register
#define IPP_TAG_INTEGER                 ((uint8_t)0x21)
#define IPP_TAG_NAME_WITHOUT_LANGUAGE   ((uint8_t)0x42)
#define IPP_TAG_KEYWORD                 ((uint8_t)0x44)
#define IPP_TAG_URI                     ((uint8_t)0x45)


/** @brief IPP instance handle 
 * 
 * Unique handle generated by ipp_open() used to reference a particular IPP instance in 
 * successive API calls. 
 */
typedef struct ipp_instance_s *ipp_inst_hndl_t;

/** @brief IPP request handle 
 * 
 * Unique handle passed to the user in the callbacks of the user's registered translation 
 * functions while processing an IPP request. This handle should be used when calling IPP 
 * API support routines from the context of user-defined translation functions. 
 */
typedef struct ipp_request_s *ipp_req_hndl_t;

#define IPP_INVALID_HANDLE   0


// ipp attribute group flags
// each attribute must be assigned to one and only one group
typedef uint32_t ipp_flags_t;
#define IPP_GRP_JOB_TEMPLATE        0x00000001
#define IPP_GRP_DESCRIPTION         0x00000002
#define IPP_GRP_MASK                (IPP_GRP_JOB_TEMPLATE|IPP_GRP_DESCRIPTION)

// translation function callback
// buf [out] - caller-provided storage
// len [in/out] - total buf length is passed in and must be re-assigned to actual bytes written
// must return binary data ready for insertion into IPP stream, e.g. strings should not be NULL-terminated.
typedef int32_t(*ipp_translation_func_t)(ipp_req_hndl_t request_hndl, oid_t oid, uint32_t index, char *buf, uint32_t *len);

typedef struct {
    char *name;
    oid_t oid;
    uint8_t tag;
    ipp_translation_func_t trans_func;
    uint32_t flags;
} ipp_attribute_t;


void ipp_init(void);

// instance_name - storage must be maintained by user until corresponding ipp_close
ipp_inst_hndl_t ipp_open(const char *instance_name, const char *resource_str, int32_t port);
void ipp_close(ipp_inst_hndl_t instance_hndl);
bool ipp_chk_multiple_docs_per_job_supported();

// flags field of each ipp_attribute_t MUST be set to either IPP_GRP_JOB_TEMPLATE or IPP_GRP_DESCRIPTION
// retval IPP_DUP_ATTR - at least one duplicate attribute was detected and the request to add it was ignored
int32_t ipp_add_attributes(ipp_inst_hndl_t instance_hndl, ipp_attribute_t *attr_list, uint32_t attr_cnt); 

// same as ipp_add_attributes() except replace any pre-existing attributes
int32_t ipp_replace_attributes(ipp_inst_hndl_t instance_hndl, ipp_attribute_t *attr_list, uint32_t attr_cnt);

// feature names are advertized in an IPP response via the ipp-features-supported attribute
// feature_name - storage must be maintained by user until corresponding ipp_close
int32_t ipp_add_feature(ipp_inst_hndl_t instance_hndl, const char *feature_name);

// generates correct device hostname to use in an IPP response in the context of the current IPP request
// Intended to be called from user-registered translation function callbacks called in the context of an IPP request
#define IPP_MAX_HOSTNAME_SIZE 64
int32_t ipp_get_response_hostname(ipp_req_hndl_t request_hndl, char *buf, uint32_t len);


#ifdef __cplusplus
}
#endif

#endif  /* IPP_API_H */
