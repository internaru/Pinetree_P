 /*
 **************************************************************************************
 *
 * Copyright (c) 2011 Marvell International, Ltd.
 *
 **************************************************************************************
 *
 * Marvell Commercial License Option
 *
 * If you received this File from Marvell as part of a proprietary software release,
 * the File is considered Marvell Proprietary and Confidential Information, and is
 * licensed to you under the terms of the applicable Commercial License.
 *
 **************************************************************************************
 *
 * Marvell GPL License Option
 *
 * If you received this File from Marvell as part of a Linux distribution, this File
 * is licensed to you in accordance with the terms and conditions of the General Public
 * License Version 2, June 1991 (the "GPL License").  You can redistribute it and/or
 * modify it under the terms of the GPL License; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GPL License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see http://www.gnu.org/licenses/.
 *
 **************************************************************************************
 *
 * \file MVDO_regmasks.h
 * Generated using RegBuild 1.6.1
 *
 *************************************************************************
 */

#ifndef _MVDO_REGMASKS_H_
#define _MVDO_REGMASKS_H_

#include <stdint.h>

//====================================================================
//
//Register File: MVDO (MVDO)
/** \brief Register Descriptions for the MVDO superblock*/
//
//====================================================================

//====================================================================
//
//Register File: HiPS registers (HiPS)
/** \brief Top-level register file for HiPS block*/
//
//====================================================================

//====================================================================
//Register: HiPS Channel Enable (Chan_Enable)
/** \brief The HiPS Channel Enable Register is used to enable the HiPS clock to each HiPS channel inside the HiPS core.*/
//====================================================================

#define  HIPS_CHAN_ENABLE_RESERVED1_MASK 0xffffff00
#define  HIPS_CHAN_ENABLE_RESERVED1_SHIFT 8
#define  HIPS_CHAN_ENABLE_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_CHAN_ENABLE_RESERVED1_MASK) >> HIPS_CHAN_ENABLE_RESERVED1_SHIFT)
#define  HIPS_CHAN_ENABLE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_CHAN_ENABLE_RESERVED1_MASK) | (((uint32_t)val) << HIPS_CHAN_ENABLE_RESERVED1_SHIFT))

#define  HIPS_CHAN_ENABLE_CH_ENABLE_MASK 0xff
#define  HIPS_CHAN_ENABLE_CH_ENABLE_SHIFT 0
#define  HIPS_CHAN_ENABLE_CH_ENABLE_MASK_SHIFT(reg) (((reg) & HIPS_CHAN_ENABLE_CH_ENABLE_MASK) >> HIPS_CHAN_ENABLE_CH_ENABLE_SHIFT)
#define  HIPS_CHAN_ENABLE_CH_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPS_CHAN_ENABLE_CH_ENABLE_MASK) | (((uint32_t)val) << HIPS_CHAN_ENABLE_CH_ENABLE_SHIFT))

//====================================================================
//Register: HiPS FWBIST Control (FWBIST_Control)
/** \brief The HiPS FWBIST Control Register is used to control the activation and diagnostic mode of HiPS FWBIST operation.*/
//====================================================================

#define  HIPS_FWBIST_CONTROL_RESERVED1_MASK 0xfffffffc
#define  HIPS_FWBIST_CONTROL_RESERVED1_SHIFT 2
#define  HIPS_FWBIST_CONTROL_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_CONTROL_RESERVED1_MASK) >> HIPS_FWBIST_CONTROL_RESERVED1_SHIFT)
#define  HIPS_FWBIST_CONTROL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_CONTROL_RESERVED1_MASK) | (((uint32_t)val) << HIPS_FWBIST_CONTROL_RESERVED1_SHIFT))

#define  HIPS_FWBIST_CONTROL_DIAGNOSTIC_MASK 0x2
#define  HIPS_FWBIST_CONTROL_DIAGNOSTIC_SHIFT 1
#define  HIPS_FWBIST_CONTROL_DIAGNOSTIC_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_CONTROL_DIAGNOSTIC_MASK) >> HIPS_FWBIST_CONTROL_DIAGNOSTIC_SHIFT)
#define  HIPS_FWBIST_CONTROL_DIAGNOSTIC_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_CONTROL_DIAGNOSTIC_MASK) | (((uint32_t)val) << HIPS_FWBIST_CONTROL_DIAGNOSTIC_SHIFT))

#define  HIPS_FWBIST_CONTROL_ACTIVATE_MASK 0x1
#define  HIPS_FWBIST_CONTROL_ACTIVATE_SHIFT 0
#define  HIPS_FWBIST_CONTROL_ACTIVATE_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_CONTROL_ACTIVATE_MASK) >> HIPS_FWBIST_CONTROL_ACTIVATE_SHIFT)
#define  HIPS_FWBIST_CONTROL_ACTIVATE_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_CONTROL_ACTIVATE_MASK) | (((uint32_t)val) << HIPS_FWBIST_CONTROL_ACTIVATE_SHIFT))

//====================================================================
//Register: HiPS FWBIST Enable (FWBIST_Enable)
/** \brief The HiPS FWBIST Enable Register is used to enable HiPS FWBIST for each HiPS channel inside the HiPS core.*/
//====================================================================

#define  HIPS_FWBIST_ENABLE_RESERVED1_MASK 0xffffff00
#define  HIPS_FWBIST_ENABLE_RESERVED1_SHIFT 8
#define  HIPS_FWBIST_ENABLE_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_ENABLE_RESERVED1_MASK) >> HIPS_FWBIST_ENABLE_RESERVED1_SHIFT)
#define  HIPS_FWBIST_ENABLE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_ENABLE_RESERVED1_MASK) | (((uint32_t)val) << HIPS_FWBIST_ENABLE_RESERVED1_SHIFT))

#define  HIPS_FWBIST_ENABLE_ENABLE_MASK 0xff
#define  HIPS_FWBIST_ENABLE_ENABLE_SHIFT 0
#define  HIPS_FWBIST_ENABLE_ENABLE_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_ENABLE_ENABLE_MASK) >> HIPS_FWBIST_ENABLE_ENABLE_SHIFT)
#define  HIPS_FWBIST_ENABLE_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_ENABLE_ENABLE_MASK) | (((uint32_t)val) << HIPS_FWBIST_ENABLE_ENABLE_SHIFT))

//====================================================================
//Register: HiPS FWBIST Error (FWBIST_Error)
/** \brief The HiPS FWBIST Error Register is used to determine if an error occurred during HiPS FWBIST diagnostic mode for each HiPS channel inside the HiPS core.*/
//====================================================================

#define  HIPS_FWBIST_ERROR_RESERVED1_MASK 0xffffff00
#define  HIPS_FWBIST_ERROR_RESERVED1_SHIFT 8
#define  HIPS_FWBIST_ERROR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_ERROR_RESERVED1_MASK) >> HIPS_FWBIST_ERROR_RESERVED1_SHIFT)
#define  HIPS_FWBIST_ERROR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_ERROR_RESERVED1_MASK) | (((uint32_t)val) << HIPS_FWBIST_ERROR_RESERVED1_SHIFT))

#define  HIPS_FWBIST_ERROR_ERROR_MASK 0xff
#define  HIPS_FWBIST_ERROR_ERROR_SHIFT 0
#define  HIPS_FWBIST_ERROR_ERROR_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_ERROR_ERROR_MASK) >> HIPS_FWBIST_ERROR_ERROR_SHIFT)
#define  HIPS_FWBIST_ERROR_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_ERROR_ERROR_MASK) | (((uint32_t)val) << HIPS_FWBIST_ERROR_ERROR_SHIFT))

//====================================================================
//Register: HiPS FWBIST Done (FWBIST_Done)
/** \brief The HiPS FWBIST Done Register is used to determine if the HiPS FWBIST finished for each HiPS channel inside the HiPS core.*/
//====================================================================

#define  HIPS_FWBIST_DONE_RESERVED1_MASK 0xffffff00
#define  HIPS_FWBIST_DONE_RESERVED1_SHIFT 8
#define  HIPS_FWBIST_DONE_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DONE_RESERVED1_MASK) >> HIPS_FWBIST_DONE_RESERVED1_SHIFT)
#define  HIPS_FWBIST_DONE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DONE_RESERVED1_MASK) | (((uint32_t)val) << HIPS_FWBIST_DONE_RESERVED1_SHIFT))

#define  HIPS_FWBIST_DONE_DONE_MASK 0xff
#define  HIPS_FWBIST_DONE_DONE_SHIFT 0
#define  HIPS_FWBIST_DONE_DONE_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DONE_DONE_MASK) >> HIPS_FWBIST_DONE_DONE_SHIFT)
#define  HIPS_FWBIST_DONE_DONE_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DONE_DONE_MASK) | (((uint32_t)val) << HIPS_FWBIST_DONE_DONE_SHIFT))

//====================================================================
//Register: HiPS FWBIST PassnFail (FWBIST_PassnFail)
/** \brief The HiPS FWBIST PassnFail Register is used to determine if the HiPS FWBIST passed or failed for each HiPS channel inside the HiPS core.*/
//====================================================================

#define  HIPS_FWBIST_PASSNFAIL_RESERVED1_MASK 0xffffff00
#define  HIPS_FWBIST_PASSNFAIL_RESERVED1_SHIFT 8
#define  HIPS_FWBIST_PASSNFAIL_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_PASSNFAIL_RESERVED1_MASK) >> HIPS_FWBIST_PASSNFAIL_RESERVED1_SHIFT)
#define  HIPS_FWBIST_PASSNFAIL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_PASSNFAIL_RESERVED1_MASK) | (((uint32_t)val) << HIPS_FWBIST_PASSNFAIL_RESERVED1_SHIFT))

#define  HIPS_FWBIST_PASSNFAIL_PNF_MASK 0xff
#define  HIPS_FWBIST_PASSNFAIL_PNF_SHIFT 0
#define  HIPS_FWBIST_PASSNFAIL_PNF_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_PASSNFAIL_PNF_MASK) >> HIPS_FWBIST_PASSNFAIL_PNF_SHIFT)
#define  HIPS_FWBIST_PASSNFAIL_PNF_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_PASSNFAIL_PNF_MASK) | (((uint32_t)val) << HIPS_FWBIST_PASSNFAIL_PNF_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 1 of 8) (FWBIST_Diagnostic_Table0)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 1 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE0_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE0_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 2 of 8) (FWBIST_Diagnostic_Table1)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 2 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE1_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE1_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 3 of 8) (FWBIST_Diagnostic_Table2)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 3 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE2_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE2_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 4 of 8) (FWBIST_Diagnostic_Table3)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 4 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE3_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE3_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 5 of 8) (FWBIST_Diagnostic_Table4)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 5 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE4_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE4_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 6 of 8) (FWBIST_Diagnostic_Table5)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 6 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE5_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE5_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 7 of 8) (FWBIST_Diagnostic_Table6)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 7 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE6_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE6_EXPECTED_SHIFT))

//====================================================================
//Register: HiPS FWBIST Diagnostic Values Table (Instance 8 of 8) (FWBIST_Diagnostic_Table7)
/** \brief The HiPS FWBIST Diagnostic Values Table stores the diagnostic data for each HiPS channel when an error occurs. (Instance 8 of 8)*/
//====================================================================

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_MASK 0xffff0000
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_SHIFT 16
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE7_ACTUAL_SHIFT))

#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_MASK 0xffff
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_SHIFT 0
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_MASK_SHIFT(reg) (((reg) & HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_MASK) >> HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_SHIFT)
#define  HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_REPLACE_VAL(reg,val) (((reg) & ~HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_MASK) | (((uint32_t)val) << HIPS_FWBIST_DIAGNOSTIC_TABLE7_EXPECTED_SHIFT))

//====================================================================
//
//Register File: HVSync registers (HVSync)
/** \brief Top-level register file for HVSync block*/
//
//====================================================================

//====================================================================
//Register: HVSync Configuration Register (CFG)
/** \brief Register used to configure various aspects of the HVSync block.*/
//====================================================================

#define  HVSYNC_CFG_RESERVED1_MASK 0xfffffe00
#define  HVSYNC_CFG_RESERVED1_SHIFT 9
#define  HVSYNC_CFG_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_CFG_RESERVED1_MASK) >> HVSYNC_CFG_RESERVED1_SHIFT)
#define  HVSYNC_CFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_CFG_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_CFG_RESERVED1_SHIFT))

#define  HVSYNC_CFG_MIRRORSEL_MASK 0x1fe
#define  HVSYNC_CFG_MIRRORSEL_SHIFT 1
#define  HVSYNC_CFG_MIRRORSEL_MASK_SHIFT(reg) (((reg) & HVSYNC_CFG_MIRRORSEL_MASK) >> HVSYNC_CFG_MIRRORSEL_SHIFT)
#define  HVSYNC_CFG_MIRRORSEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_CFG_MIRRORSEL_MASK) | (((uint32_t)val) << HVSYNC_CFG_MIRRORSEL_SHIFT))

#define  HVSYNC_CFG_HVSYNCENABLE_MASK 0x1
#define  HVSYNC_CFG_HVSYNCENABLE_SHIFT 0
#define  HVSYNC_CFG_HVSYNCENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_CFG_HVSYNCENABLE_MASK) >> HVSYNC_CFG_HVSYNCENABLE_SHIFT)
#define  HVSYNC_CFG_HVSYNCENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_CFG_HVSYNCENABLE_MASK) | (((uint32_t)val) << HVSYNC_CFG_HVSYNCENABLE_SHIFT))

//====================================================================
//Register: Mirror Configuration Register (Instance 1 of 2) (MIR_CFG0)
/** \brief Used to configure various aspects of the mirror measurement hardware. (Instance 1 of 2)*/
//====================================================================

#define  HVSYNC_MIR_CFG0_RESERVED1_MASK 0xfffffe00
#define  HVSYNC_MIR_CFG0_RESERVED1_SHIFT 9
#define  HVSYNC_MIR_CFG0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG0_RESERVED1_MASK) >> HVSYNC_MIR_CFG0_RESERVED1_SHIFT)
#define  HVSYNC_MIR_CFG0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG0_RESERVED1_SHIFT))

#define  HVSYNC_MIR_CFG0_TOPSRC_MASK 0x180
#define  HVSYNC_MIR_CFG0_TOPSRC_SHIFT 7
#define  HVSYNC_MIR_CFG0_TOPSRC_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG0_TOPSRC_MASK) >> HVSYNC_MIR_CFG0_TOPSRC_SHIFT)
#define  HVSYNC_MIR_CFG0_TOPSRC_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG0_TOPSRC_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG0_TOPSRC_SHIFT))

#define  HVSYNC_MIR_CFG0_HSYNCSRC_MASK 0x60
#define  HVSYNC_MIR_CFG0_HSYNCSRC_SHIFT 5
#define  HVSYNC_MIR_CFG0_HSYNCSRC_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG0_HSYNCSRC_MASK) >> HVSYNC_MIR_CFG0_HSYNCSRC_SHIFT)
#define  HVSYNC_MIR_CFG0_HSYNCSRC_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG0_HSYNCSRC_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG0_HSYNCSRC_SHIFT))

#define  HVSYNC_MIR_CFG0_NUMFACETS_MASK 0x1e
#define  HVSYNC_MIR_CFG0_NUMFACETS_SHIFT 1
#define  HVSYNC_MIR_CFG0_NUMFACETS_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG0_NUMFACETS_MASK) >> HVSYNC_MIR_CFG0_NUMFACETS_SHIFT)
#define  HVSYNC_MIR_CFG0_NUMFACETS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG0_NUMFACETS_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG0_NUMFACETS_SHIFT))

#define  HVSYNC_MIR_CFG0_MEASRST_MASK 0x1
#define  HVSYNC_MIR_CFG0_MEASRST_SHIFT 0
#define  HVSYNC_MIR_CFG0_MEASRST_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG0_MEASRST_MASK) >> HVSYNC_MIR_CFG0_MEASRST_SHIFT)
#define  HVSYNC_MIR_CFG0_MEASRST_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG0_MEASRST_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG0_MEASRST_SHIFT))

//====================================================================
//Register: Mirror Configuration Register (Instance 2 of 2) (MIR_CFG1)
/** \brief Used to configure various aspects of the mirror measurement hardware. (Instance 2 of 2)*/
//====================================================================

#define  HVSYNC_MIR_CFG1_RESERVED1_MASK 0xfffffe00
#define  HVSYNC_MIR_CFG1_RESERVED1_SHIFT 9
#define  HVSYNC_MIR_CFG1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG1_RESERVED1_MASK) >> HVSYNC_MIR_CFG1_RESERVED1_SHIFT)
#define  HVSYNC_MIR_CFG1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG1_RESERVED1_SHIFT))

#define  HVSYNC_MIR_CFG1_TOPSRC_MASK 0x180
#define  HVSYNC_MIR_CFG1_TOPSRC_SHIFT 7
#define  HVSYNC_MIR_CFG1_TOPSRC_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG1_TOPSRC_MASK) >> HVSYNC_MIR_CFG1_TOPSRC_SHIFT)
#define  HVSYNC_MIR_CFG1_TOPSRC_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG1_TOPSRC_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG1_TOPSRC_SHIFT))

#define  HVSYNC_MIR_CFG1_HSYNCSRC_MASK 0x60
#define  HVSYNC_MIR_CFG1_HSYNCSRC_SHIFT 5
#define  HVSYNC_MIR_CFG1_HSYNCSRC_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG1_HSYNCSRC_MASK) >> HVSYNC_MIR_CFG1_HSYNCSRC_SHIFT)
#define  HVSYNC_MIR_CFG1_HSYNCSRC_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG1_HSYNCSRC_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG1_HSYNCSRC_SHIFT))

#define  HVSYNC_MIR_CFG1_NUMFACETS_MASK 0x1e
#define  HVSYNC_MIR_CFG1_NUMFACETS_SHIFT 1
#define  HVSYNC_MIR_CFG1_NUMFACETS_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG1_NUMFACETS_MASK) >> HVSYNC_MIR_CFG1_NUMFACETS_SHIFT)
#define  HVSYNC_MIR_CFG1_NUMFACETS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG1_NUMFACETS_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG1_NUMFACETS_SHIFT))

#define  HVSYNC_MIR_CFG1_MEASRST_MASK 0x1
#define  HVSYNC_MIR_CFG1_MEASRST_SHIFT 0
#define  HVSYNC_MIR_CFG1_MEASRST_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_CFG1_MEASRST_MASK) >> HVSYNC_MIR_CFG1_MEASRST_SHIFT)
#define  HVSYNC_MIR_CFG1_MEASRST_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_CFG1_MEASRST_MASK) | (((uint32_t)val) << HVSYNC_MIR_CFG1_MEASRST_SHIFT))

//====================================================================
//Register: Mirror Status Register (Instance 1 of 2) (MIR_STA0)
/** \brief Facet Tracker/Timer Status (Instance 1 of 2)*/
//====================================================================

#define  HVSYNC_MIR_STA0_RESERVED1_MASK 0xffffff00
#define  HVSYNC_MIR_STA0_RESERVED1_SHIFT 8
#define  HVSYNC_MIR_STA0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA0_RESERVED1_MASK) >> HVSYNC_MIR_STA0_RESERVED1_SHIFT)
#define  HVSYNC_MIR_STA0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA0_RESERVED1_SHIFT))

#define  HVSYNC_MIR_STA0_CURRFACET_MASK 0xf0
#define  HVSYNC_MIR_STA0_CURRFACET_SHIFT 4
#define  HVSYNC_MIR_STA0_CURRFACET_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA0_CURRFACET_MASK) >> HVSYNC_MIR_STA0_CURRFACET_SHIFT)
#define  HVSYNC_MIR_STA0_CURRFACET_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA0_CURRFACET_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA0_CURRFACET_SHIFT))

#define  HVSYNC_MIR_STA0_RESERVED2_MASK 0xc
#define  HVSYNC_MIR_STA0_RESERVED2_SHIFT 2
#define  HVSYNC_MIR_STA0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA0_RESERVED2_MASK) >> HVSYNC_MIR_STA0_RESERVED2_SHIFT)
#define  HVSYNC_MIR_STA0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA0_RESERVED2_SHIFT))

#define  HVSYNC_MIR_STA0_TOPFIRST_MASK 0x2
#define  HVSYNC_MIR_STA0_TOPFIRST_SHIFT 1
#define  HVSYNC_MIR_STA0_TOPFIRST_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA0_TOPFIRST_MASK) >> HVSYNC_MIR_STA0_TOPFIRST_SHIFT)
#define  HVSYNC_MIR_STA0_TOPFIRST_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA0_TOPFIRST_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA0_TOPFIRST_SHIFT))

#define  HVSYNC_MIR_STA0_MEASACTIVE_MASK 0x1
#define  HVSYNC_MIR_STA0_MEASACTIVE_SHIFT 0
#define  HVSYNC_MIR_STA0_MEASACTIVE_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA0_MEASACTIVE_MASK) >> HVSYNC_MIR_STA0_MEASACTIVE_SHIFT)
#define  HVSYNC_MIR_STA0_MEASACTIVE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA0_MEASACTIVE_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA0_MEASACTIVE_SHIFT))

//====================================================================
//Register: Mirror Status Register (Instance 2 of 2) (MIR_STA1)
/** \brief Facet Tracker/Timer Status (Instance 2 of 2)*/
//====================================================================

#define  HVSYNC_MIR_STA1_RESERVED1_MASK 0xffffff00
#define  HVSYNC_MIR_STA1_RESERVED1_SHIFT 8
#define  HVSYNC_MIR_STA1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA1_RESERVED1_MASK) >> HVSYNC_MIR_STA1_RESERVED1_SHIFT)
#define  HVSYNC_MIR_STA1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA1_RESERVED1_SHIFT))

#define  HVSYNC_MIR_STA1_CURRFACET_MASK 0xf0
#define  HVSYNC_MIR_STA1_CURRFACET_SHIFT 4
#define  HVSYNC_MIR_STA1_CURRFACET_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA1_CURRFACET_MASK) >> HVSYNC_MIR_STA1_CURRFACET_SHIFT)
#define  HVSYNC_MIR_STA1_CURRFACET_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA1_CURRFACET_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA1_CURRFACET_SHIFT))

#define  HVSYNC_MIR_STA1_RESERVED2_MASK 0xc
#define  HVSYNC_MIR_STA1_RESERVED2_SHIFT 2
#define  HVSYNC_MIR_STA1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA1_RESERVED2_MASK) >> HVSYNC_MIR_STA1_RESERVED2_SHIFT)
#define  HVSYNC_MIR_STA1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA1_RESERVED2_SHIFT))

#define  HVSYNC_MIR_STA1_TOPFIRST_MASK 0x2
#define  HVSYNC_MIR_STA1_TOPFIRST_SHIFT 1
#define  HVSYNC_MIR_STA1_TOPFIRST_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA1_TOPFIRST_MASK) >> HVSYNC_MIR_STA1_TOPFIRST_SHIFT)
#define  HVSYNC_MIR_STA1_TOPFIRST_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA1_TOPFIRST_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA1_TOPFIRST_SHIFT))

#define  HVSYNC_MIR_STA1_MEASACTIVE_MASK 0x1
#define  HVSYNC_MIR_STA1_MEASACTIVE_SHIFT 0
#define  HVSYNC_MIR_STA1_MEASACTIVE_MASK_SHIFT(reg) (((reg) & HVSYNC_MIR_STA1_MEASACTIVE_MASK) >> HVSYNC_MIR_STA1_MEASACTIVE_SHIFT)
#define  HVSYNC_MIR_STA1_MEASACTIVE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MIR_STA1_MEASACTIVE_MASK) | (((uint32_t)val) << HVSYNC_MIR_STA1_MEASACTIVE_SHIFT))

//====================================================================
//Register: Facet Tracker Reset Register (Instance 1 of 2) (FT_RST0)
/** \brief Used to manually reset the facet tracker counter. (Instance 1 of 2)*/
//====================================================================

#define  HVSYNC_FT_RST0_RESERVED1_MASK 0xfffffffe
#define  HVSYNC_FT_RST0_RESERVED1_SHIFT 1
#define  HVSYNC_FT_RST0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_FT_RST0_RESERVED1_MASK) >> HVSYNC_FT_RST0_RESERVED1_SHIFT)
#define  HVSYNC_FT_RST0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_FT_RST0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_FT_RST0_RESERVED1_SHIFT))

#define  HVSYNC_FT_RST0_RESETFT_MASK 0x1
#define  HVSYNC_FT_RST0_RESETFT_SHIFT 0
#define  HVSYNC_FT_RST0_RESETFT_MASK_SHIFT(reg) (((reg) & HVSYNC_FT_RST0_RESETFT_MASK) >> HVSYNC_FT_RST0_RESETFT_SHIFT)
#define  HVSYNC_FT_RST0_RESETFT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_FT_RST0_RESETFT_MASK) | (((uint32_t)val) << HVSYNC_FT_RST0_RESETFT_SHIFT))

//====================================================================
//Register: Facet Tracker Reset Register (Instance 2 of 2) (FT_RST1)
/** \brief Used to manually reset the facet tracker counter. (Instance 2 of 2)*/
//====================================================================

#define  HVSYNC_FT_RST1_RESERVED1_MASK 0xfffffffe
#define  HVSYNC_FT_RST1_RESERVED1_SHIFT 1
#define  HVSYNC_FT_RST1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_FT_RST1_RESERVED1_MASK) >> HVSYNC_FT_RST1_RESERVED1_SHIFT)
#define  HVSYNC_FT_RST1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_FT_RST1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_FT_RST1_RESERVED1_SHIFT))

#define  HVSYNC_FT_RST1_RESETFT_MASK 0x1
#define  HVSYNC_FT_RST1_RESETFT_SHIFT 0
#define  HVSYNC_FT_RST1_RESETFT_MASK_SHIFT(reg) (((reg) & HVSYNC_FT_RST1_RESETFT_MASK) >> HVSYNC_FT_RST1_RESETFT_SHIFT)
#define  HVSYNC_FT_RST1_RESETFT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_FT_RST1_RESETFT_MASK) | (((uint32_t)val) << HVSYNC_FT_RST1_RESETFT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 1 of 8) (OUT_SEL0)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 1 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL0_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL0_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL0_RESERVED1_MASK) >> HVSYNC_OUT_SEL0_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL0_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL0_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL0_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL0_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL0_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL0_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL0_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL0_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL0_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL0_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL0_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL0_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL0_TOPOUT_MASK) >> HVSYNC_OUT_SEL0_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL0_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL0_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL0_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL0_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL0_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL0_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL0_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL0_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL0_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL0_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL0_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 2 of 8) (OUT_SEL1)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 2 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL1_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL1_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL1_RESERVED1_MASK) >> HVSYNC_OUT_SEL1_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL1_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL1_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL1_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL1_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL1_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL1_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL1_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL1_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL1_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL1_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL1_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL1_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL1_TOPOUT_MASK) >> HVSYNC_OUT_SEL1_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL1_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL1_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL1_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL1_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL1_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL1_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL1_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL1_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL1_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL1_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL1_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 3 of 8) (OUT_SEL2)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 3 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL2_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL2_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL2_RESERVED1_MASK) >> HVSYNC_OUT_SEL2_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL2_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL2_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL2_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL2_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL2_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL2_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL2_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL2_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL2_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL2_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL2_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL2_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL2_TOPOUT_MASK) >> HVSYNC_OUT_SEL2_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL2_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL2_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL2_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL2_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL2_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL2_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL2_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL2_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL2_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL2_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL2_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 4 of 8) (OUT_SEL3)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 4 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL3_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL3_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL3_RESERVED1_MASK) >> HVSYNC_OUT_SEL3_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL3_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL3_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL3_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL3_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL3_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL3_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL3_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL3_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL3_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL3_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL3_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL3_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL3_TOPOUT_MASK) >> HVSYNC_OUT_SEL3_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL3_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL3_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL3_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL3_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL3_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL3_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL3_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL3_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL3_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL3_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL3_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 5 of 8) (OUT_SEL4)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 5 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL4_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL4_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL4_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL4_RESERVED1_MASK) >> HVSYNC_OUT_SEL4_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL4_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL4_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL4_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL4_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL4_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL4_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL4_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL4_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL4_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL4_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL4_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL4_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL4_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL4_TOPOUT_MASK) >> HVSYNC_OUT_SEL4_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL4_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL4_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL4_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL4_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL4_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL4_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL4_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL4_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL4_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL4_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL4_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 6 of 8) (OUT_SEL5)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 6 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL5_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL5_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL5_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL5_RESERVED1_MASK) >> HVSYNC_OUT_SEL5_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL5_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL5_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL5_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL5_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL5_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL5_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL5_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL5_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL5_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL5_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL5_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL5_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL5_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL5_TOPOUT_MASK) >> HVSYNC_OUT_SEL5_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL5_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL5_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL5_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL5_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL5_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL5_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL5_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL5_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL5_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL5_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL5_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 7 of 8) (OUT_SEL6)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 7 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL6_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL6_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL6_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL6_RESERVED1_MASK) >> HVSYNC_OUT_SEL6_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL6_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL6_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL6_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL6_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL6_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL6_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL6_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL6_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL6_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL6_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL6_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL6_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL6_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL6_TOPOUT_MASK) >> HVSYNC_OUT_SEL6_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL6_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL6_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL6_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL6_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL6_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL6_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL6_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL6_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL6_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL6_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL6_HSYNCOUT_SHIFT))

//====================================================================
//Register: Output Select Register (Instance 8 of 8) (OUT_SEL7)
/** \brief This register is used to select the source for the HSYNC, Top, and GalvoRtoL outputs to the respective video channel.
      OUT_SEL[0] supplies HSYNC, Top, and GalvoRtoL to video channel 0, OUT_SEL[1] to video channel 1, etc.
      <br>
      HSYNCA refers to the first active edge on HSYNC
      <br>
      HSYNCB refers to the second active edge on HSYNC
      <br>
      HSYNCC refers to the third active edge on HSYNC
      <br>
      HSYNCD refers to the fourth active edge on HSYNC
      <br>
      0-3 refer to which of the 4 HSYNC filters supplied the HSYNC. (Instance 8 of 8)*/
//====================================================================

#define  HVSYNC_OUT_SEL7_RESERVED1_MASK 0xffffff00
#define  HVSYNC_OUT_SEL7_RESERVED1_SHIFT 8
#define  HVSYNC_OUT_SEL7_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL7_RESERVED1_MASK) >> HVSYNC_OUT_SEL7_RESERVED1_SHIFT)
#define  HVSYNC_OUT_SEL7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL7_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL7_RESERVED1_SHIFT))

#define  HVSYNC_OUT_SEL7_GALVORTOLOUT_MASK 0xc0
#define  HVSYNC_OUT_SEL7_GALVORTOLOUT_SHIFT 6
#define  HVSYNC_OUT_SEL7_GALVORTOLOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL7_GALVORTOLOUT_MASK) >> HVSYNC_OUT_SEL7_GALVORTOLOUT_SHIFT)
#define  HVSYNC_OUT_SEL7_GALVORTOLOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL7_GALVORTOLOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL7_GALVORTOLOUT_SHIFT))

#define  HVSYNC_OUT_SEL7_TOPOUT_MASK 0x30
#define  HVSYNC_OUT_SEL7_TOPOUT_SHIFT 4
#define  HVSYNC_OUT_SEL7_TOPOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL7_TOPOUT_MASK) >> HVSYNC_OUT_SEL7_TOPOUT_SHIFT)
#define  HVSYNC_OUT_SEL7_TOPOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL7_TOPOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL7_TOPOUT_SHIFT))

#define  HVSYNC_OUT_SEL7_HSYNCOUT_MASK 0xf
#define  HVSYNC_OUT_SEL7_HSYNCOUT_SHIFT 0
#define  HVSYNC_OUT_SEL7_HSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_OUT_SEL7_HSYNCOUT_MASK) >> HVSYNC_OUT_SEL7_HSYNCOUT_SHIFT)
#define  HVSYNC_OUT_SEL7_HSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_OUT_SEL7_HSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_OUT_SEL7_HSYNCOUT_SHIFT))

//====================================================================
//Register: Top Queue Status Register (TQSTAT)
/** \brief Reflects the status of the Top Queue counters for each of the video channels
    If the respective status is 1, indicates the counter is available
    <br>
    TopQStatX[0] = TopCntrA[chanX] status
    <br>
    TopQStatX[2] = TopCntrC[chanX] status
    <br>
    TopQStatX[3] = TopCntrD[chanX] status*/
//====================================================================

#define  HVSYNC_TQSTAT_RESERVED1_MASK 0xffff0000
#define  HVSYNC_TQSTAT_RESERVED1_SHIFT 16
#define  HVSYNC_TQSTAT_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSTAT_RESERVED1_MASK) >> HVSYNC_TQSTAT_RESERVED1_SHIFT)
#define  HVSYNC_TQSTAT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSTAT_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TQSTAT_RESERVED1_SHIFT))

#define  HVSYNC_TQSTAT_TOPQSTAT3_MASK 0xf000
#define  HVSYNC_TQSTAT_TOPQSTAT3_SHIFT 12
#define  HVSYNC_TQSTAT_TOPQSTAT3_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSTAT_TOPQSTAT3_MASK) >> HVSYNC_TQSTAT_TOPQSTAT3_SHIFT)
#define  HVSYNC_TQSTAT_TOPQSTAT3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSTAT_TOPQSTAT3_MASK) | (((uint32_t)val) << HVSYNC_TQSTAT_TOPQSTAT3_SHIFT))

#define  HVSYNC_TQSTAT_TOPQSTAT2_MASK 0xf00
#define  HVSYNC_TQSTAT_TOPQSTAT2_SHIFT 8
#define  HVSYNC_TQSTAT_TOPQSTAT2_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSTAT_TOPQSTAT2_MASK) >> HVSYNC_TQSTAT_TOPQSTAT2_SHIFT)
#define  HVSYNC_TQSTAT_TOPQSTAT2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSTAT_TOPQSTAT2_MASK) | (((uint32_t)val) << HVSYNC_TQSTAT_TOPQSTAT2_SHIFT))

#define  HVSYNC_TQSTAT_TOPQSTAT1_MASK 0xf0
#define  HVSYNC_TQSTAT_TOPQSTAT1_SHIFT 4
#define  HVSYNC_TQSTAT_TOPQSTAT1_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSTAT_TOPQSTAT1_MASK) >> HVSYNC_TQSTAT_TOPQSTAT1_SHIFT)
#define  HVSYNC_TQSTAT_TOPQSTAT1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSTAT_TOPQSTAT1_MASK) | (((uint32_t)val) << HVSYNC_TQSTAT_TOPQSTAT1_SHIFT))

#define  HVSYNC_TQSTAT_TOPQSTAT0_MASK 0xf
#define  HVSYNC_TQSTAT_TOPQSTAT0_SHIFT 0
#define  HVSYNC_TQSTAT_TOPQSTAT0_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSTAT_TOPQSTAT0_MASK) >> HVSYNC_TQSTAT_TOPQSTAT0_SHIFT)
#define  HVSYNC_TQSTAT_TOPQSTAT0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSTAT_TOPQSTAT0_MASK) | (((uint32_t)val) << HVSYNC_TQSTAT_TOPQSTAT0_SHIFT))

//====================================================================
//Register: Top Queue HSYNC select Register (TQSEL)
/** \brief Used to select the input HSYNC to the Top Queue module*/
//====================================================================

#define  HVSYNC_TQSEL_RESERVED1_MASK 0xfffff000
#define  HVSYNC_TQSEL_RESERVED1_SHIFT 12
#define  HVSYNC_TQSEL_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSEL_RESERVED1_MASK) >> HVSYNC_TQSEL_RESERVED1_SHIFT)
#define  HVSYNC_TQSEL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSEL_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TQSEL_RESERVED1_SHIFT))

#define  HVSYNC_TQSEL_TOPQHSYNCSEL3_MASK 0xe00
#define  HVSYNC_TQSEL_TOPQHSYNCSEL3_SHIFT 9
#define  HVSYNC_TQSEL_TOPQHSYNCSEL3_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSEL_TOPQHSYNCSEL3_MASK) >> HVSYNC_TQSEL_TOPQHSYNCSEL3_SHIFT)
#define  HVSYNC_TQSEL_TOPQHSYNCSEL3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSEL_TOPQHSYNCSEL3_MASK) | (((uint32_t)val) << HVSYNC_TQSEL_TOPQHSYNCSEL3_SHIFT))

#define  HVSYNC_TQSEL_TOPQHSYNCSEL2_MASK 0x1c0
#define  HVSYNC_TQSEL_TOPQHSYNCSEL2_SHIFT 6
#define  HVSYNC_TQSEL_TOPQHSYNCSEL2_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSEL_TOPQHSYNCSEL2_MASK) >> HVSYNC_TQSEL_TOPQHSYNCSEL2_SHIFT)
#define  HVSYNC_TQSEL_TOPQHSYNCSEL2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSEL_TOPQHSYNCSEL2_MASK) | (((uint32_t)val) << HVSYNC_TQSEL_TOPQHSYNCSEL2_SHIFT))

#define  HVSYNC_TQSEL_TOPQHSYNCSEL1_MASK 0x38
#define  HVSYNC_TQSEL_TOPQHSYNCSEL1_SHIFT 3
#define  HVSYNC_TQSEL_TOPQHSYNCSEL1_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSEL_TOPQHSYNCSEL1_MASK) >> HVSYNC_TQSEL_TOPQHSYNCSEL1_SHIFT)
#define  HVSYNC_TQSEL_TOPQHSYNCSEL1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSEL_TOPQHSYNCSEL1_MASK) | (((uint32_t)val) << HVSYNC_TQSEL_TOPQHSYNCSEL1_SHIFT))

#define  HVSYNC_TQSEL_TOPQHSYNCSEL0_MASK 0x7
#define  HVSYNC_TQSEL_TOPQHSYNCSEL0_SHIFT 0
#define  HVSYNC_TQSEL_TOPQHSYNCSEL0_MASK_SHIFT(reg) (((reg) & HVSYNC_TQSEL_TOPQHSYNCSEL0_MASK) >> HVSYNC_TQSEL_TOPQHSYNCSEL0_SHIFT)
#define  HVSYNC_TQSEL_TOPQHSYNCSEL0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TQSEL_TOPQHSYNCSEL0_MASK) | (((uint32_t)val) << HVSYNC_TQSEL_TOPQHSYNCSEL0_SHIFT))

//====================================================================
//Register: HVSync Interrupt Enable Register (HVSIER)
/** \brief HVSync Interrupt Enable Register.*/
//====================================================================

#define  HVSYNC_HVSIER_RESERVED1_MASK 0x80000000
#define  HVSYNC_HVSIER_RESERVED1_SHIFT 31
#define  HVSYNC_HVSIER_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_RESERVED1_MASK) >> HVSYNC_HVSIER_RESERVED1_SHIFT)
#define  HVSYNC_HVSIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_RESERVED1_SHIFT))

#define  HVSYNC_HVSIER_MISSEDHSYNCINT_MASK 0x78000000
#define  HVSYNC_HVSIER_MISSEDHSYNCINT_SHIFT 27
#define  HVSYNC_HVSIER_MISSEDHSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_MISSEDHSYNCINT_MASK) >> HVSYNC_HVSIER_MISSEDHSYNCINT_SHIFT)
#define  HVSYNC_HVSIER_MISSEDHSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_MISSEDHSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_MISSEDHSYNCINT_SHIFT))

#define  HVSYNC_HVSIER_TOPDLYINT_MASK 0x7f80000
#define  HVSYNC_HVSIER_TOPDLYINT_SHIFT 19
#define  HVSYNC_HVSIER_TOPDLYINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_TOPDLYINT_MASK) >> HVSYNC_HVSIER_TOPDLYINT_SHIFT)
#define  HVSYNC_HVSIER_TOPDLYINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_TOPDLYINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_TOPDLYINT_SHIFT))

#define  HVSYNC_HVSIER_BOTINT_MASK 0x40000
#define  HVSYNC_HVSIER_BOTINT_SHIFT 18
#define  HVSYNC_HVSIER_BOTINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_BOTINT_MASK) >> HVSYNC_HVSIER_BOTINT_SHIFT)
#define  HVSYNC_HVSIER_BOTINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_BOTINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_BOTINT_SHIFT))

#define  HVSYNC_HVSIER_FTDONEINT_MASK 0x30000
#define  HVSYNC_HVSIER_FTDONEINT_SHIFT 16
#define  HVSYNC_HVSIER_FTDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_FTDONEINT_MASK) >> HVSYNC_HVSIER_FTDONEINT_SHIFT)
#define  HVSYNC_HVSIER_FTDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_FTDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_FTDONEINT_SHIFT))

#define  HVSYNC_HVSIER_TOPMEASDONEINT_MASK 0xc000
#define  HVSYNC_HVSIER_TOPMEASDONEINT_SHIFT 14
#define  HVSYNC_HVSIER_TOPMEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_TOPMEASDONEINT_MASK) >> HVSYNC_HVSIER_TOPMEASDONEINT_SHIFT)
#define  HVSYNC_HVSIER_TOPMEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_TOPMEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_TOPMEASDONEINT_SHIFT))

#define  HVSYNC_HVSIER_MEASDONEINT_MASK 0x3000
#define  HVSYNC_HVSIER_MEASDONEINT_SHIFT 12
#define  HVSYNC_HVSIER_MEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_MEASDONEINT_MASK) >> HVSYNC_HVSIER_MEASDONEINT_SHIFT)
#define  HVSYNC_HVSIER_MEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_MEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_MEASDONEINT_SHIFT))

#define  HVSYNC_HVSIER_TOPQFULLINT_MASK 0xf00
#define  HVSYNC_HVSIER_TOPQFULLINT_SHIFT 8
#define  HVSYNC_HVSIER_TOPQFULLINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_TOPQFULLINT_MASK) >> HVSYNC_HVSIER_TOPQFULLINT_SHIFT)
#define  HVSYNC_HVSIER_TOPQFULLINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_TOPQFULLINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_TOPQFULLINT_SHIFT))

#define  HVSYNC_HVSIER_TOPINT_MASK 0xf0
#define  HVSYNC_HVSIER_TOPINT_SHIFT 4
#define  HVSYNC_HVSIER_TOPINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_TOPINT_MASK) >> HVSYNC_HVSIER_TOPINT_SHIFT)
#define  HVSYNC_HVSIER_TOPINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_TOPINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_TOPINT_SHIFT))

#define  HVSYNC_HVSIER_HSYNCINT_MASK 0xf
#define  HVSYNC_HVSIER_HSYNCINT_SHIFT 0
#define  HVSYNC_HVSIER_HSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIER_HSYNCINT_MASK) >> HVSYNC_HVSIER_HSYNCINT_SHIFT)
#define  HVSYNC_HVSIER_HSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIER_HSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIER_HSYNCINT_SHIFT))

//====================================================================
//Register: HVSync Interrupt Pending Register (HVSIPR)
/** \brief HVSync Interrupt Pending Register.*/
//====================================================================

#define  HVSYNC_HVSIPR_RESERVED1_MASK 0x80000000
#define  HVSYNC_HVSIPR_RESERVED1_SHIFT 31
#define  HVSYNC_HVSIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_RESERVED1_MASK) >> HVSYNC_HVSIPR_RESERVED1_SHIFT)
#define  HVSYNC_HVSIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_RESERVED1_SHIFT))

#define  HVSYNC_HVSIPR_MISSEDHSYNCINT_MASK 0x78000000
#define  HVSYNC_HVSIPR_MISSEDHSYNCINT_SHIFT 27
#define  HVSYNC_HVSIPR_MISSEDHSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_MISSEDHSYNCINT_MASK) >> HVSYNC_HVSIPR_MISSEDHSYNCINT_SHIFT)
#define  HVSYNC_HVSIPR_MISSEDHSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_MISSEDHSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_MISSEDHSYNCINT_SHIFT))

#define  HVSYNC_HVSIPR_TOPDLYINT_MASK 0x7f80000
#define  HVSYNC_HVSIPR_TOPDLYINT_SHIFT 19
#define  HVSYNC_HVSIPR_TOPDLYINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_TOPDLYINT_MASK) >> HVSYNC_HVSIPR_TOPDLYINT_SHIFT)
#define  HVSYNC_HVSIPR_TOPDLYINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_TOPDLYINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_TOPDLYINT_SHIFT))

#define  HVSYNC_HVSIPR_BOTINT_MASK 0x40000
#define  HVSYNC_HVSIPR_BOTINT_SHIFT 18
#define  HVSYNC_HVSIPR_BOTINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_BOTINT_MASK) >> HVSYNC_HVSIPR_BOTINT_SHIFT)
#define  HVSYNC_HVSIPR_BOTINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_BOTINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_BOTINT_SHIFT))

#define  HVSYNC_HVSIPR_FTDONEINT_MASK 0x30000
#define  HVSYNC_HVSIPR_FTDONEINT_SHIFT 16
#define  HVSYNC_HVSIPR_FTDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_FTDONEINT_MASK) >> HVSYNC_HVSIPR_FTDONEINT_SHIFT)
#define  HVSYNC_HVSIPR_FTDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_FTDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_FTDONEINT_SHIFT))

#define  HVSYNC_HVSIPR_TOPMEASDONEINT_MASK 0xc000
#define  HVSYNC_HVSIPR_TOPMEASDONEINT_SHIFT 14
#define  HVSYNC_HVSIPR_TOPMEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_TOPMEASDONEINT_MASK) >> HVSYNC_HVSIPR_TOPMEASDONEINT_SHIFT)
#define  HVSYNC_HVSIPR_TOPMEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_TOPMEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_TOPMEASDONEINT_SHIFT))

#define  HVSYNC_HVSIPR_MEASDONEINT_MASK 0x3000
#define  HVSYNC_HVSIPR_MEASDONEINT_SHIFT 12
#define  HVSYNC_HVSIPR_MEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_MEASDONEINT_MASK) >> HVSYNC_HVSIPR_MEASDONEINT_SHIFT)
#define  HVSYNC_HVSIPR_MEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_MEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_MEASDONEINT_SHIFT))

#define  HVSYNC_HVSIPR_TOPQFULLINT_MASK 0xf00
#define  HVSYNC_HVSIPR_TOPQFULLINT_SHIFT 8
#define  HVSYNC_HVSIPR_TOPQFULLINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_TOPQFULLINT_MASK) >> HVSYNC_HVSIPR_TOPQFULLINT_SHIFT)
#define  HVSYNC_HVSIPR_TOPQFULLINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_TOPQFULLINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_TOPQFULLINT_SHIFT))

#define  HVSYNC_HVSIPR_TOPINT_MASK 0xf0
#define  HVSYNC_HVSIPR_TOPINT_SHIFT 4
#define  HVSYNC_HVSIPR_TOPINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_TOPINT_MASK) >> HVSYNC_HVSIPR_TOPINT_SHIFT)
#define  HVSYNC_HVSIPR_TOPINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_TOPINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_TOPINT_SHIFT))

#define  HVSYNC_HVSIPR_HSYNCINT_MASK 0xf
#define  HVSYNC_HVSIPR_HSYNCINT_SHIFT 0
#define  HVSYNC_HVSIPR_HSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIPR_HSYNCINT_MASK) >> HVSYNC_HVSIPR_HSYNCINT_SHIFT)
#define  HVSYNC_HVSIPR_HSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIPR_HSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIPR_HSYNCINT_SHIFT))

//====================================================================
//Register: HVSync Interrupt Acknowledge Register (HVSIAR)
/** \brief HVSync Interrupt Acknowledge Register.*/
//====================================================================

#define  HVSYNC_HVSIAR_RESERVED1_MASK 0x80000000
#define  HVSYNC_HVSIAR_RESERVED1_SHIFT 31
#define  HVSYNC_HVSIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_RESERVED1_MASK) >> HVSYNC_HVSIAR_RESERVED1_SHIFT)
#define  HVSYNC_HVSIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_RESERVED1_SHIFT))

#define  HVSYNC_HVSIAR_MISSEDHSYNCINT_MASK 0x78000000
#define  HVSYNC_HVSIAR_MISSEDHSYNCINT_SHIFT 27
#define  HVSYNC_HVSIAR_MISSEDHSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_MISSEDHSYNCINT_MASK) >> HVSYNC_HVSIAR_MISSEDHSYNCINT_SHIFT)
#define  HVSYNC_HVSIAR_MISSEDHSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_MISSEDHSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_MISSEDHSYNCINT_SHIFT))

#define  HVSYNC_HVSIAR_TOPDLYINT_MASK 0x7f80000
#define  HVSYNC_HVSIAR_TOPDLYINT_SHIFT 19
#define  HVSYNC_HVSIAR_TOPDLYINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_TOPDLYINT_MASK) >> HVSYNC_HVSIAR_TOPDLYINT_SHIFT)
#define  HVSYNC_HVSIAR_TOPDLYINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_TOPDLYINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_TOPDLYINT_SHIFT))

#define  HVSYNC_HVSIAR_BOTINT_MASK 0x40000
#define  HVSYNC_HVSIAR_BOTINT_SHIFT 18
#define  HVSYNC_HVSIAR_BOTINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_BOTINT_MASK) >> HVSYNC_HVSIAR_BOTINT_SHIFT)
#define  HVSYNC_HVSIAR_BOTINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_BOTINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_BOTINT_SHIFT))

#define  HVSYNC_HVSIAR_FTDONEINT_MASK 0x30000
#define  HVSYNC_HVSIAR_FTDONEINT_SHIFT 16
#define  HVSYNC_HVSIAR_FTDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_FTDONEINT_MASK) >> HVSYNC_HVSIAR_FTDONEINT_SHIFT)
#define  HVSYNC_HVSIAR_FTDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_FTDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_FTDONEINT_SHIFT))

#define  HVSYNC_HVSIAR_TOPMEASDONEINT_MASK 0xc000
#define  HVSYNC_HVSIAR_TOPMEASDONEINT_SHIFT 14
#define  HVSYNC_HVSIAR_TOPMEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_TOPMEASDONEINT_MASK) >> HVSYNC_HVSIAR_TOPMEASDONEINT_SHIFT)
#define  HVSYNC_HVSIAR_TOPMEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_TOPMEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_TOPMEASDONEINT_SHIFT))

#define  HVSYNC_HVSIAR_MEASDONEINT_MASK 0x3000
#define  HVSYNC_HVSIAR_MEASDONEINT_SHIFT 12
#define  HVSYNC_HVSIAR_MEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_MEASDONEINT_MASK) >> HVSYNC_HVSIAR_MEASDONEINT_SHIFT)
#define  HVSYNC_HVSIAR_MEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_MEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_MEASDONEINT_SHIFT))

#define  HVSYNC_HVSIAR_TOPQFULLINT_MASK 0xf00
#define  HVSYNC_HVSIAR_TOPQFULLINT_SHIFT 8
#define  HVSYNC_HVSIAR_TOPQFULLINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_TOPQFULLINT_MASK) >> HVSYNC_HVSIAR_TOPQFULLINT_SHIFT)
#define  HVSYNC_HVSIAR_TOPQFULLINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_TOPQFULLINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_TOPQFULLINT_SHIFT))

#define  HVSYNC_HVSIAR_TOPINT_MASK 0xf0
#define  HVSYNC_HVSIAR_TOPINT_SHIFT 4
#define  HVSYNC_HVSIAR_TOPINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_TOPINT_MASK) >> HVSYNC_HVSIAR_TOPINT_SHIFT)
#define  HVSYNC_HVSIAR_TOPINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_TOPINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_TOPINT_SHIFT))

#define  HVSYNC_HVSIAR_HSYNCINT_MASK 0xf
#define  HVSYNC_HVSIAR_HSYNCINT_SHIFT 0
#define  HVSYNC_HVSIAR_HSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIAR_HSYNCINT_MASK) >> HVSYNC_HVSIAR_HSYNCINT_SHIFT)
#define  HVSYNC_HVSIAR_HSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIAR_HSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIAR_HSYNCINT_SHIFT))

//====================================================================
//Register: HVSync Interrupt Force Register (HVSIFR)
/** \brief HVSync Interrupt Force Register.*/
//====================================================================

#define  HVSYNC_HVSIFR_RESERVED1_MASK 0x80000000
#define  HVSYNC_HVSIFR_RESERVED1_SHIFT 31
#define  HVSYNC_HVSIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_RESERVED1_MASK) >> HVSYNC_HVSIFR_RESERVED1_SHIFT)
#define  HVSYNC_HVSIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_RESERVED1_SHIFT))

#define  HVSYNC_HVSIFR_MISSEDHSYNCINT_MASK 0x78000000
#define  HVSYNC_HVSIFR_MISSEDHSYNCINT_SHIFT 27
#define  HVSYNC_HVSIFR_MISSEDHSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_MISSEDHSYNCINT_MASK) >> HVSYNC_HVSIFR_MISSEDHSYNCINT_SHIFT)
#define  HVSYNC_HVSIFR_MISSEDHSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_MISSEDHSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_MISSEDHSYNCINT_SHIFT))

#define  HVSYNC_HVSIFR_TOPDLYINT_MASK 0x7f80000
#define  HVSYNC_HVSIFR_TOPDLYINT_SHIFT 19
#define  HVSYNC_HVSIFR_TOPDLYINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_TOPDLYINT_MASK) >> HVSYNC_HVSIFR_TOPDLYINT_SHIFT)
#define  HVSYNC_HVSIFR_TOPDLYINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_TOPDLYINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_TOPDLYINT_SHIFT))

#define  HVSYNC_HVSIFR_BOTINT_MASK 0x40000
#define  HVSYNC_HVSIFR_BOTINT_SHIFT 18
#define  HVSYNC_HVSIFR_BOTINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_BOTINT_MASK) >> HVSYNC_HVSIFR_BOTINT_SHIFT)
#define  HVSYNC_HVSIFR_BOTINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_BOTINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_BOTINT_SHIFT))

#define  HVSYNC_HVSIFR_FTDONEINT_MASK 0x30000
#define  HVSYNC_HVSIFR_FTDONEINT_SHIFT 16
#define  HVSYNC_HVSIFR_FTDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_FTDONEINT_MASK) >> HVSYNC_HVSIFR_FTDONEINT_SHIFT)
#define  HVSYNC_HVSIFR_FTDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_FTDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_FTDONEINT_SHIFT))

#define  HVSYNC_HVSIFR_TOPMEASDONEINT_MASK 0xc000
#define  HVSYNC_HVSIFR_TOPMEASDONEINT_SHIFT 14
#define  HVSYNC_HVSIFR_TOPMEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_TOPMEASDONEINT_MASK) >> HVSYNC_HVSIFR_TOPMEASDONEINT_SHIFT)
#define  HVSYNC_HVSIFR_TOPMEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_TOPMEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_TOPMEASDONEINT_SHIFT))

#define  HVSYNC_HVSIFR_MEASDONEINT_MASK 0x3000
#define  HVSYNC_HVSIFR_MEASDONEINT_SHIFT 12
#define  HVSYNC_HVSIFR_MEASDONEINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_MEASDONEINT_MASK) >> HVSYNC_HVSIFR_MEASDONEINT_SHIFT)
#define  HVSYNC_HVSIFR_MEASDONEINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_MEASDONEINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_MEASDONEINT_SHIFT))

#define  HVSYNC_HVSIFR_TOPQFULLINT_MASK 0xf00
#define  HVSYNC_HVSIFR_TOPQFULLINT_SHIFT 8
#define  HVSYNC_HVSIFR_TOPQFULLINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_TOPQFULLINT_MASK) >> HVSYNC_HVSIFR_TOPQFULLINT_SHIFT)
#define  HVSYNC_HVSIFR_TOPQFULLINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_TOPQFULLINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_TOPQFULLINT_SHIFT))

#define  HVSYNC_HVSIFR_TOPINT_MASK 0xf0
#define  HVSYNC_HVSIFR_TOPINT_SHIFT 4
#define  HVSYNC_HVSIFR_TOPINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_TOPINT_MASK) >> HVSYNC_HVSIFR_TOPINT_SHIFT)
#define  HVSYNC_HVSIFR_TOPINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_TOPINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_TOPINT_SHIFT))

#define  HVSYNC_HVSIFR_HSYNCINT_MASK 0xf
#define  HVSYNC_HVSIFR_HSYNCINT_SHIFT 0
#define  HVSYNC_HVSIFR_HSYNCINT_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSIFR_HSYNCINT_MASK) >> HVSYNC_HVSIFR_HSYNCINT_SHIFT)
#define  HVSYNC_HVSIFR_HSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSIFR_HSYNCINT_MASK) | (((uint32_t)val) << HVSYNC_HVSIFR_HSYNCINT_SHIFT))

//====================================================================
//Register: Top Margin Register (Instance 1 of 4) (HVSTPMR0)
/** \brief Top Margins Register (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HVSTPMR0_RESERVED1_MASK 0xffff0000
#define  HVSYNC_HVSTPMR0_RESERVED1_SHIFT 16
#define  HVSYNC_HVSTPMR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR0_RESERVED1_MASK) >> HVSYNC_HVSTPMR0_RESERVED1_SHIFT)
#define  HVSYNC_HVSTPMR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR0_RESERVED1_SHIFT))

#define  HVSYNC_HVSTPMR0_TOPMARGIN_MASK 0xffff
#define  HVSYNC_HVSTPMR0_TOPMARGIN_SHIFT 0
#define  HVSYNC_HVSTPMR0_TOPMARGIN_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR0_TOPMARGIN_MASK) >> HVSYNC_HVSTPMR0_TOPMARGIN_SHIFT)
#define  HVSYNC_HVSTPMR0_TOPMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR0_TOPMARGIN_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR0_TOPMARGIN_SHIFT))

//====================================================================
//Register: Top Margin Register (Instance 2 of 4) (HVSTPMR1)
/** \brief Top Margins Register (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HVSTPMR1_RESERVED1_MASK 0xffff0000
#define  HVSYNC_HVSTPMR1_RESERVED1_SHIFT 16
#define  HVSYNC_HVSTPMR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR1_RESERVED1_MASK) >> HVSYNC_HVSTPMR1_RESERVED1_SHIFT)
#define  HVSYNC_HVSTPMR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR1_RESERVED1_SHIFT))

#define  HVSYNC_HVSTPMR1_TOPMARGIN_MASK 0xffff
#define  HVSYNC_HVSTPMR1_TOPMARGIN_SHIFT 0
#define  HVSYNC_HVSTPMR1_TOPMARGIN_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR1_TOPMARGIN_MASK) >> HVSYNC_HVSTPMR1_TOPMARGIN_SHIFT)
#define  HVSYNC_HVSTPMR1_TOPMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR1_TOPMARGIN_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR1_TOPMARGIN_SHIFT))

//====================================================================
//Register: Top Margin Register (Instance 3 of 4) (HVSTPMR2)
/** \brief Top Margins Register (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HVSTPMR2_RESERVED1_MASK 0xffff0000
#define  HVSYNC_HVSTPMR2_RESERVED1_SHIFT 16
#define  HVSYNC_HVSTPMR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR2_RESERVED1_MASK) >> HVSYNC_HVSTPMR2_RESERVED1_SHIFT)
#define  HVSYNC_HVSTPMR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR2_RESERVED1_SHIFT))

#define  HVSYNC_HVSTPMR2_TOPMARGIN_MASK 0xffff
#define  HVSYNC_HVSTPMR2_TOPMARGIN_SHIFT 0
#define  HVSYNC_HVSTPMR2_TOPMARGIN_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR2_TOPMARGIN_MASK) >> HVSYNC_HVSTPMR2_TOPMARGIN_SHIFT)
#define  HVSYNC_HVSTPMR2_TOPMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR2_TOPMARGIN_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR2_TOPMARGIN_SHIFT))

//====================================================================
//Register: Top Margin Register (Instance 4 of 4) (HVSTPMR3)
/** \brief Top Margins Register (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HVSTPMR3_RESERVED1_MASK 0xffff0000
#define  HVSYNC_HVSTPMR3_RESERVED1_SHIFT 16
#define  HVSYNC_HVSTPMR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR3_RESERVED1_MASK) >> HVSYNC_HVSTPMR3_RESERVED1_SHIFT)
#define  HVSYNC_HVSTPMR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR3_RESERVED1_SHIFT))

#define  HVSYNC_HVSTPMR3_TOPMARGIN_MASK 0xffff
#define  HVSYNC_HVSTPMR3_TOPMARGIN_SHIFT 0
#define  HVSYNC_HVSTPMR3_TOPMARGIN_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTPMR3_TOPMARGIN_MASK) >> HVSYNC_HVSTPMR3_TOPMARGIN_SHIFT)
#define  HVSYNC_HVSTPMR3_TOPMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTPMR3_TOPMARGIN_MASK) | (((uint32_t)val) << HVSYNC_HVSTPMR3_TOPMARGIN_SHIFT))

//====================================================================
//Register: HSYNC Filter Configuration Register (Instance 1 of 4) (HFCR0)
/** \brief Configures the HSYNC Filter (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HFCR0_RESERVED1_MASK 0xf0000000
#define  HVSYNC_HFCR0_RESERVED1_SHIFT 28
#define  HVSYNC_HFCR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_RESERVED1_MASK) >> HVSYNC_HFCR0_RESERVED1_SHIFT)
#define  HVSYNC_HFCR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_RESERVED1_SHIFT))

#define  HVSYNC_HFCR0_HIGHSTABLE_MASK 0xf800000
#define  HVSYNC_HFCR0_HIGHSTABLE_SHIFT 23
#define  HVSYNC_HFCR0_HIGHSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_HIGHSTABLE_MASK) >> HVSYNC_HFCR0_HIGHSTABLE_SHIFT)
#define  HVSYNC_HFCR0_HIGHSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_HIGHSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_HIGHSTABLE_SHIFT))

#define  HVSYNC_HFCR0_LOWSTABLE_MASK 0x7c0000
#define  HVSYNC_HFCR0_LOWSTABLE_SHIFT 18
#define  HVSYNC_HFCR0_LOWSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_LOWSTABLE_MASK) >> HVSYNC_HFCR0_LOWSTABLE_SHIFT)
#define  HVSYNC_HFCR0_LOWSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_LOWSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_LOWSTABLE_SHIFT))

#define  HVSYNC_HFCR0_H2LTHRESH_MASK 0x3e000
#define  HVSYNC_HFCR0_H2LTHRESH_SHIFT 13
#define  HVSYNC_HFCR0_H2LTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_H2LTHRESH_MASK) >> HVSYNC_HFCR0_H2LTHRESH_SHIFT)
#define  HVSYNC_HFCR0_H2LTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_H2LTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_H2LTHRESH_SHIFT))

#define  HVSYNC_HFCR0_L2HTHRESH_MASK 0x1f00
#define  HVSYNC_HFCR0_L2HTHRESH_SHIFT 8
#define  HVSYNC_HFCR0_L2HTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_L2HTHRESH_MASK) >> HVSYNC_HFCR0_L2HTHRESH_SHIFT)
#define  HVSYNC_HFCR0_L2HTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_L2HTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_L2HTHRESH_SHIFT))

#define  HVSYNC_HFCR0_RESERVED2_MASK 0x80
#define  HVSYNC_HFCR0_RESERVED2_SHIFT 7
#define  HVSYNC_HFCR0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_RESERVED2_MASK) >> HVSYNC_HFCR0_RESERVED2_SHIFT)
#define  HVSYNC_HFCR0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_RESERVED2_SHIFT))

#define  HVSYNC_HFCR0_ENGHSYNCOUT_MASK 0x70
#define  HVSYNC_HFCR0_ENGHSYNCOUT_SHIFT 4
#define  HVSYNC_HFCR0_ENGHSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_ENGHSYNCOUT_MASK) >> HVSYNC_HFCR0_ENGHSYNCOUT_SHIFT)
#define  HVSYNC_HFCR0_ENGHSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_ENGHSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_ENGHSYNCOUT_SHIFT))

#define  HVSYNC_HFCR0_NUMEDGE_MASK 0xc
#define  HVSYNC_HFCR0_NUMEDGE_SHIFT 2
#define  HVSYNC_HFCR0_NUMEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_NUMEDGE_MASK) >> HVSYNC_HFCR0_NUMEDGE_SHIFT)
#define  HVSYNC_HFCR0_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_NUMEDGE_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_NUMEDGE_SHIFT))

#define  HVSYNC_HFCR0_HSYNCEDGESEL_MASK 0x2
#define  HVSYNC_HFCR0_HSYNCEDGESEL_SHIFT 1
#define  HVSYNC_HFCR0_HSYNCEDGESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_HSYNCEDGESEL_MASK) >> HVSYNC_HFCR0_HSYNCEDGESEL_SHIFT)
#define  HVSYNC_HFCR0_HSYNCEDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_HSYNCEDGESEL_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_HSYNCEDGESEL_SHIFT))

#define  HVSYNC_HFCR0_HSYNCENABLE_MASK 0x1
#define  HVSYNC_HFCR0_HSYNCENABLE_SHIFT 0
#define  HVSYNC_HFCR0_HSYNCENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR0_HSYNCENABLE_MASK) >> HVSYNC_HFCR0_HSYNCENABLE_SHIFT)
#define  HVSYNC_HFCR0_HSYNCENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR0_HSYNCENABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR0_HSYNCENABLE_SHIFT))

//====================================================================
//Register: HSYNC Filter Configuration Register (Instance 2 of 4) (HFCR1)
/** \brief Configures the HSYNC Filter (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HFCR1_RESERVED1_MASK 0xf0000000
#define  HVSYNC_HFCR1_RESERVED1_SHIFT 28
#define  HVSYNC_HFCR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_RESERVED1_MASK) >> HVSYNC_HFCR1_RESERVED1_SHIFT)
#define  HVSYNC_HFCR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_RESERVED1_SHIFT))

#define  HVSYNC_HFCR1_HIGHSTABLE_MASK 0xf800000
#define  HVSYNC_HFCR1_HIGHSTABLE_SHIFT 23
#define  HVSYNC_HFCR1_HIGHSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_HIGHSTABLE_MASK) >> HVSYNC_HFCR1_HIGHSTABLE_SHIFT)
#define  HVSYNC_HFCR1_HIGHSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_HIGHSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_HIGHSTABLE_SHIFT))

#define  HVSYNC_HFCR1_LOWSTABLE_MASK 0x7c0000
#define  HVSYNC_HFCR1_LOWSTABLE_SHIFT 18
#define  HVSYNC_HFCR1_LOWSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_LOWSTABLE_MASK) >> HVSYNC_HFCR1_LOWSTABLE_SHIFT)
#define  HVSYNC_HFCR1_LOWSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_LOWSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_LOWSTABLE_SHIFT))

#define  HVSYNC_HFCR1_H2LTHRESH_MASK 0x3e000
#define  HVSYNC_HFCR1_H2LTHRESH_SHIFT 13
#define  HVSYNC_HFCR1_H2LTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_H2LTHRESH_MASK) >> HVSYNC_HFCR1_H2LTHRESH_SHIFT)
#define  HVSYNC_HFCR1_H2LTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_H2LTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_H2LTHRESH_SHIFT))

#define  HVSYNC_HFCR1_L2HTHRESH_MASK 0x1f00
#define  HVSYNC_HFCR1_L2HTHRESH_SHIFT 8
#define  HVSYNC_HFCR1_L2HTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_L2HTHRESH_MASK) >> HVSYNC_HFCR1_L2HTHRESH_SHIFT)
#define  HVSYNC_HFCR1_L2HTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_L2HTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_L2HTHRESH_SHIFT))

#define  HVSYNC_HFCR1_RESERVED2_MASK 0x80
#define  HVSYNC_HFCR1_RESERVED2_SHIFT 7
#define  HVSYNC_HFCR1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_RESERVED2_MASK) >> HVSYNC_HFCR1_RESERVED2_SHIFT)
#define  HVSYNC_HFCR1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_RESERVED2_SHIFT))

#define  HVSYNC_HFCR1_ENGHSYNCOUT_MASK 0x70
#define  HVSYNC_HFCR1_ENGHSYNCOUT_SHIFT 4
#define  HVSYNC_HFCR1_ENGHSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_ENGHSYNCOUT_MASK) >> HVSYNC_HFCR1_ENGHSYNCOUT_SHIFT)
#define  HVSYNC_HFCR1_ENGHSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_ENGHSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_ENGHSYNCOUT_SHIFT))

#define  HVSYNC_HFCR1_NUMEDGE_MASK 0xc
#define  HVSYNC_HFCR1_NUMEDGE_SHIFT 2
#define  HVSYNC_HFCR1_NUMEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_NUMEDGE_MASK) >> HVSYNC_HFCR1_NUMEDGE_SHIFT)
#define  HVSYNC_HFCR1_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_NUMEDGE_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_NUMEDGE_SHIFT))

#define  HVSYNC_HFCR1_HSYNCEDGESEL_MASK 0x2
#define  HVSYNC_HFCR1_HSYNCEDGESEL_SHIFT 1
#define  HVSYNC_HFCR1_HSYNCEDGESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_HSYNCEDGESEL_MASK) >> HVSYNC_HFCR1_HSYNCEDGESEL_SHIFT)
#define  HVSYNC_HFCR1_HSYNCEDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_HSYNCEDGESEL_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_HSYNCEDGESEL_SHIFT))

#define  HVSYNC_HFCR1_HSYNCENABLE_MASK 0x1
#define  HVSYNC_HFCR1_HSYNCENABLE_SHIFT 0
#define  HVSYNC_HFCR1_HSYNCENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR1_HSYNCENABLE_MASK) >> HVSYNC_HFCR1_HSYNCENABLE_SHIFT)
#define  HVSYNC_HFCR1_HSYNCENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR1_HSYNCENABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR1_HSYNCENABLE_SHIFT))

//====================================================================
//Register: HSYNC Filter Configuration Register (Instance 3 of 4) (HFCR2)
/** \brief Configures the HSYNC Filter (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HFCR2_RESERVED1_MASK 0xf0000000
#define  HVSYNC_HFCR2_RESERVED1_SHIFT 28
#define  HVSYNC_HFCR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_RESERVED1_MASK) >> HVSYNC_HFCR2_RESERVED1_SHIFT)
#define  HVSYNC_HFCR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_RESERVED1_SHIFT))

#define  HVSYNC_HFCR2_HIGHSTABLE_MASK 0xf800000
#define  HVSYNC_HFCR2_HIGHSTABLE_SHIFT 23
#define  HVSYNC_HFCR2_HIGHSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_HIGHSTABLE_MASK) >> HVSYNC_HFCR2_HIGHSTABLE_SHIFT)
#define  HVSYNC_HFCR2_HIGHSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_HIGHSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_HIGHSTABLE_SHIFT))

#define  HVSYNC_HFCR2_LOWSTABLE_MASK 0x7c0000
#define  HVSYNC_HFCR2_LOWSTABLE_SHIFT 18
#define  HVSYNC_HFCR2_LOWSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_LOWSTABLE_MASK) >> HVSYNC_HFCR2_LOWSTABLE_SHIFT)
#define  HVSYNC_HFCR2_LOWSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_LOWSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_LOWSTABLE_SHIFT))

#define  HVSYNC_HFCR2_H2LTHRESH_MASK 0x3e000
#define  HVSYNC_HFCR2_H2LTHRESH_SHIFT 13
#define  HVSYNC_HFCR2_H2LTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_H2LTHRESH_MASK) >> HVSYNC_HFCR2_H2LTHRESH_SHIFT)
#define  HVSYNC_HFCR2_H2LTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_H2LTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_H2LTHRESH_SHIFT))

#define  HVSYNC_HFCR2_L2HTHRESH_MASK 0x1f00
#define  HVSYNC_HFCR2_L2HTHRESH_SHIFT 8
#define  HVSYNC_HFCR2_L2HTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_L2HTHRESH_MASK) >> HVSYNC_HFCR2_L2HTHRESH_SHIFT)
#define  HVSYNC_HFCR2_L2HTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_L2HTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_L2HTHRESH_SHIFT))

#define  HVSYNC_HFCR2_RESERVED2_MASK 0x80
#define  HVSYNC_HFCR2_RESERVED2_SHIFT 7
#define  HVSYNC_HFCR2_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_RESERVED2_MASK) >> HVSYNC_HFCR2_RESERVED2_SHIFT)
#define  HVSYNC_HFCR2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_RESERVED2_SHIFT))

#define  HVSYNC_HFCR2_ENGHSYNCOUT_MASK 0x70
#define  HVSYNC_HFCR2_ENGHSYNCOUT_SHIFT 4
#define  HVSYNC_HFCR2_ENGHSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_ENGHSYNCOUT_MASK) >> HVSYNC_HFCR2_ENGHSYNCOUT_SHIFT)
#define  HVSYNC_HFCR2_ENGHSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_ENGHSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_ENGHSYNCOUT_SHIFT))

#define  HVSYNC_HFCR2_NUMEDGE_MASK 0xc
#define  HVSYNC_HFCR2_NUMEDGE_SHIFT 2
#define  HVSYNC_HFCR2_NUMEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_NUMEDGE_MASK) >> HVSYNC_HFCR2_NUMEDGE_SHIFT)
#define  HVSYNC_HFCR2_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_NUMEDGE_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_NUMEDGE_SHIFT))

#define  HVSYNC_HFCR2_HSYNCEDGESEL_MASK 0x2
#define  HVSYNC_HFCR2_HSYNCEDGESEL_SHIFT 1
#define  HVSYNC_HFCR2_HSYNCEDGESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_HSYNCEDGESEL_MASK) >> HVSYNC_HFCR2_HSYNCEDGESEL_SHIFT)
#define  HVSYNC_HFCR2_HSYNCEDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_HSYNCEDGESEL_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_HSYNCEDGESEL_SHIFT))

#define  HVSYNC_HFCR2_HSYNCENABLE_MASK 0x1
#define  HVSYNC_HFCR2_HSYNCENABLE_SHIFT 0
#define  HVSYNC_HFCR2_HSYNCENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR2_HSYNCENABLE_MASK) >> HVSYNC_HFCR2_HSYNCENABLE_SHIFT)
#define  HVSYNC_HFCR2_HSYNCENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR2_HSYNCENABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR2_HSYNCENABLE_SHIFT))

//====================================================================
//Register: HSYNC Filter Configuration Register (Instance 4 of 4) (HFCR3)
/** \brief Configures the HSYNC Filter (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HFCR3_RESERVED1_MASK 0xf0000000
#define  HVSYNC_HFCR3_RESERVED1_SHIFT 28
#define  HVSYNC_HFCR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_RESERVED1_MASK) >> HVSYNC_HFCR3_RESERVED1_SHIFT)
#define  HVSYNC_HFCR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_RESERVED1_SHIFT))

#define  HVSYNC_HFCR3_HIGHSTABLE_MASK 0xf800000
#define  HVSYNC_HFCR3_HIGHSTABLE_SHIFT 23
#define  HVSYNC_HFCR3_HIGHSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_HIGHSTABLE_MASK) >> HVSYNC_HFCR3_HIGHSTABLE_SHIFT)
#define  HVSYNC_HFCR3_HIGHSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_HIGHSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_HIGHSTABLE_SHIFT))

#define  HVSYNC_HFCR3_LOWSTABLE_MASK 0x7c0000
#define  HVSYNC_HFCR3_LOWSTABLE_SHIFT 18
#define  HVSYNC_HFCR3_LOWSTABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_LOWSTABLE_MASK) >> HVSYNC_HFCR3_LOWSTABLE_SHIFT)
#define  HVSYNC_HFCR3_LOWSTABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_LOWSTABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_LOWSTABLE_SHIFT))

#define  HVSYNC_HFCR3_H2LTHRESH_MASK 0x3e000
#define  HVSYNC_HFCR3_H2LTHRESH_SHIFT 13
#define  HVSYNC_HFCR3_H2LTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_H2LTHRESH_MASK) >> HVSYNC_HFCR3_H2LTHRESH_SHIFT)
#define  HVSYNC_HFCR3_H2LTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_H2LTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_H2LTHRESH_SHIFT))

#define  HVSYNC_HFCR3_L2HTHRESH_MASK 0x1f00
#define  HVSYNC_HFCR3_L2HTHRESH_SHIFT 8
#define  HVSYNC_HFCR3_L2HTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_L2HTHRESH_MASK) >> HVSYNC_HFCR3_L2HTHRESH_SHIFT)
#define  HVSYNC_HFCR3_L2HTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_L2HTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_L2HTHRESH_SHIFT))

#define  HVSYNC_HFCR3_RESERVED2_MASK 0x80
#define  HVSYNC_HFCR3_RESERVED2_SHIFT 7
#define  HVSYNC_HFCR3_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_RESERVED2_MASK) >> HVSYNC_HFCR3_RESERVED2_SHIFT)
#define  HVSYNC_HFCR3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_RESERVED2_SHIFT))

#define  HVSYNC_HFCR3_ENGHSYNCOUT_MASK 0x70
#define  HVSYNC_HFCR3_ENGHSYNCOUT_SHIFT 4
#define  HVSYNC_HFCR3_ENGHSYNCOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_ENGHSYNCOUT_MASK) >> HVSYNC_HFCR3_ENGHSYNCOUT_SHIFT)
#define  HVSYNC_HFCR3_ENGHSYNCOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_ENGHSYNCOUT_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_ENGHSYNCOUT_SHIFT))

#define  HVSYNC_HFCR3_NUMEDGE_MASK 0xc
#define  HVSYNC_HFCR3_NUMEDGE_SHIFT 2
#define  HVSYNC_HFCR3_NUMEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_NUMEDGE_MASK) >> HVSYNC_HFCR3_NUMEDGE_SHIFT)
#define  HVSYNC_HFCR3_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_NUMEDGE_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_NUMEDGE_SHIFT))

#define  HVSYNC_HFCR3_HSYNCEDGESEL_MASK 0x2
#define  HVSYNC_HFCR3_HSYNCEDGESEL_SHIFT 1
#define  HVSYNC_HFCR3_HSYNCEDGESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_HSYNCEDGESEL_MASK) >> HVSYNC_HFCR3_HSYNCEDGESEL_SHIFT)
#define  HVSYNC_HFCR3_HSYNCEDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_HSYNCEDGESEL_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_HSYNCEDGESEL_SHIFT))

#define  HVSYNC_HFCR3_HSYNCENABLE_MASK 0x1
#define  HVSYNC_HFCR3_HSYNCENABLE_SHIFT 0
#define  HVSYNC_HFCR3_HSYNCENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFCR3_HSYNCENABLE_MASK) >> HVSYNC_HFCR3_HSYNCENABLE_SHIFT)
#define  HVSYNC_HFCR3_HSYNCENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFCR3_HSYNCENABLE_MASK) | (((uint32_t)val) << HVSYNC_HFCR3_HSYNCENABLE_SHIFT))

//====================================================================
//Register: HSYNC FIR Configuration Register (Instance 1 of 4) (HFFCR0)
/** \brief Configures the HSYNC FIR Filter (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HFFCR0_RESERVED1_MASK 0xff000000
#define  HVSYNC_HFFCR0_RESERVED1_SHIFT 24
#define  HVSYNC_HFFCR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_RESERVED1_MASK) >> HVSYNC_HFFCR0_RESERVED1_SHIFT)
#define  HVSYNC_HFFCR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_RESERVED1_SHIFT))

#define  HVSYNC_HFFCR0_H2LFIRTHRESH_MASK 0xf00000
#define  HVSYNC_HFFCR0_H2LFIRTHRESH_SHIFT 20
#define  HVSYNC_HFFCR0_H2LFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_H2LFIRTHRESH_MASK) >> HVSYNC_HFFCR0_H2LFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR0_H2LFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_H2LFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_H2LFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR0_L2HFIRTHRESH_MASK 0xf0000
#define  HVSYNC_HFFCR0_L2HFIRTHRESH_SHIFT 16
#define  HVSYNC_HFFCR0_L2HFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_L2HFIRTHRESH_MASK) >> HVSYNC_HFFCR0_L2HFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR0_L2HFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_L2HFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_L2HFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR0_RESERVED2_MASK 0xc000
#define  HVSYNC_HFFCR0_RESERVED2_SHIFT 14
#define  HVSYNC_HFFCR0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_RESERVED2_MASK) >> HVSYNC_HFFCR0_RESERVED2_SHIFT)
#define  HVSYNC_HFFCR0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_RESERVED2_SHIFT))

#define  HVSYNC_HFFCR0_WEIGHT4_MASK 0x3000
#define  HVSYNC_HFFCR0_WEIGHT4_SHIFT 12
#define  HVSYNC_HFFCR0_WEIGHT4_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_WEIGHT4_MASK) >> HVSYNC_HFFCR0_WEIGHT4_SHIFT)
#define  HVSYNC_HFFCR0_WEIGHT4_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_WEIGHT4_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_WEIGHT4_SHIFT))

#define  HVSYNC_HFFCR0_WEIGHT3_MASK 0xc00
#define  HVSYNC_HFFCR0_WEIGHT3_SHIFT 10
#define  HVSYNC_HFFCR0_WEIGHT3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_WEIGHT3_MASK) >> HVSYNC_HFFCR0_WEIGHT3_SHIFT)
#define  HVSYNC_HFFCR0_WEIGHT3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_WEIGHT3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_WEIGHT3_SHIFT))

#define  HVSYNC_HFFCR0_WEIGHT2_MASK 0x300
#define  HVSYNC_HFFCR0_WEIGHT2_SHIFT 8
#define  HVSYNC_HFFCR0_WEIGHT2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_WEIGHT2_MASK) >> HVSYNC_HFFCR0_WEIGHT2_SHIFT)
#define  HVSYNC_HFFCR0_WEIGHT2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_WEIGHT2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_WEIGHT2_SHIFT))

#define  HVSYNC_HFFCR0_WEIGHT1_MASK 0xc0
#define  HVSYNC_HFFCR0_WEIGHT1_SHIFT 6
#define  HVSYNC_HFFCR0_WEIGHT1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_WEIGHT1_MASK) >> HVSYNC_HFFCR0_WEIGHT1_SHIFT)
#define  HVSYNC_HFFCR0_WEIGHT1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_WEIGHT1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_WEIGHT1_SHIFT))

#define  HVSYNC_HFFCR0_WEIGHT0_MASK 0x30
#define  HVSYNC_HFFCR0_WEIGHT0_SHIFT 4
#define  HVSYNC_HFFCR0_WEIGHT0_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_WEIGHT0_MASK) >> HVSYNC_HFFCR0_WEIGHT0_SHIFT)
#define  HVSYNC_HFFCR0_WEIGHT0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_WEIGHT0_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_WEIGHT0_SHIFT))

#define  HVSYNC_HFFCR0_RESERVED3_MASK 0xe
#define  HVSYNC_HFFCR0_RESERVED3_SHIFT 1
#define  HVSYNC_HFFCR0_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_RESERVED3_MASK) >> HVSYNC_HFFCR0_RESERVED3_SHIFT)
#define  HVSYNC_HFFCR0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_RESERVED3_SHIFT))

#define  HVSYNC_HFFCR0_FIRBYPASS_MASK 0x1
#define  HVSYNC_HFFCR0_FIRBYPASS_SHIFT 0
#define  HVSYNC_HFFCR0_FIRBYPASS_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR0_FIRBYPASS_MASK) >> HVSYNC_HFFCR0_FIRBYPASS_SHIFT)
#define  HVSYNC_HFFCR0_FIRBYPASS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR0_FIRBYPASS_MASK) | (((uint32_t)val) << HVSYNC_HFFCR0_FIRBYPASS_SHIFT))

//====================================================================
//Register: HSYNC FIR Configuration Register (Instance 2 of 4) (HFFCR1)
/** \brief Configures the HSYNC FIR Filter (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HFFCR1_RESERVED1_MASK 0xff000000
#define  HVSYNC_HFFCR1_RESERVED1_SHIFT 24
#define  HVSYNC_HFFCR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_RESERVED1_MASK) >> HVSYNC_HFFCR1_RESERVED1_SHIFT)
#define  HVSYNC_HFFCR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_RESERVED1_SHIFT))

#define  HVSYNC_HFFCR1_H2LFIRTHRESH_MASK 0xf00000
#define  HVSYNC_HFFCR1_H2LFIRTHRESH_SHIFT 20
#define  HVSYNC_HFFCR1_H2LFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_H2LFIRTHRESH_MASK) >> HVSYNC_HFFCR1_H2LFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR1_H2LFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_H2LFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_H2LFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR1_L2HFIRTHRESH_MASK 0xf0000
#define  HVSYNC_HFFCR1_L2HFIRTHRESH_SHIFT 16
#define  HVSYNC_HFFCR1_L2HFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_L2HFIRTHRESH_MASK) >> HVSYNC_HFFCR1_L2HFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR1_L2HFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_L2HFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_L2HFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR1_RESERVED2_MASK 0xc000
#define  HVSYNC_HFFCR1_RESERVED2_SHIFT 14
#define  HVSYNC_HFFCR1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_RESERVED2_MASK) >> HVSYNC_HFFCR1_RESERVED2_SHIFT)
#define  HVSYNC_HFFCR1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_RESERVED2_SHIFT))

#define  HVSYNC_HFFCR1_WEIGHT4_MASK 0x3000
#define  HVSYNC_HFFCR1_WEIGHT4_SHIFT 12
#define  HVSYNC_HFFCR1_WEIGHT4_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_WEIGHT4_MASK) >> HVSYNC_HFFCR1_WEIGHT4_SHIFT)
#define  HVSYNC_HFFCR1_WEIGHT4_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_WEIGHT4_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_WEIGHT4_SHIFT))

#define  HVSYNC_HFFCR1_WEIGHT3_MASK 0xc00
#define  HVSYNC_HFFCR1_WEIGHT3_SHIFT 10
#define  HVSYNC_HFFCR1_WEIGHT3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_WEIGHT3_MASK) >> HVSYNC_HFFCR1_WEIGHT3_SHIFT)
#define  HVSYNC_HFFCR1_WEIGHT3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_WEIGHT3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_WEIGHT3_SHIFT))

#define  HVSYNC_HFFCR1_WEIGHT2_MASK 0x300
#define  HVSYNC_HFFCR1_WEIGHT2_SHIFT 8
#define  HVSYNC_HFFCR1_WEIGHT2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_WEIGHT2_MASK) >> HVSYNC_HFFCR1_WEIGHT2_SHIFT)
#define  HVSYNC_HFFCR1_WEIGHT2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_WEIGHT2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_WEIGHT2_SHIFT))

#define  HVSYNC_HFFCR1_WEIGHT1_MASK 0xc0
#define  HVSYNC_HFFCR1_WEIGHT1_SHIFT 6
#define  HVSYNC_HFFCR1_WEIGHT1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_WEIGHT1_MASK) >> HVSYNC_HFFCR1_WEIGHT1_SHIFT)
#define  HVSYNC_HFFCR1_WEIGHT1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_WEIGHT1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_WEIGHT1_SHIFT))

#define  HVSYNC_HFFCR1_WEIGHT0_MASK 0x30
#define  HVSYNC_HFFCR1_WEIGHT0_SHIFT 4
#define  HVSYNC_HFFCR1_WEIGHT0_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_WEIGHT0_MASK) >> HVSYNC_HFFCR1_WEIGHT0_SHIFT)
#define  HVSYNC_HFFCR1_WEIGHT0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_WEIGHT0_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_WEIGHT0_SHIFT))

#define  HVSYNC_HFFCR1_RESERVED3_MASK 0xe
#define  HVSYNC_HFFCR1_RESERVED3_SHIFT 1
#define  HVSYNC_HFFCR1_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_RESERVED3_MASK) >> HVSYNC_HFFCR1_RESERVED3_SHIFT)
#define  HVSYNC_HFFCR1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_RESERVED3_SHIFT))

#define  HVSYNC_HFFCR1_FIRBYPASS_MASK 0x1
#define  HVSYNC_HFFCR1_FIRBYPASS_SHIFT 0
#define  HVSYNC_HFFCR1_FIRBYPASS_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR1_FIRBYPASS_MASK) >> HVSYNC_HFFCR1_FIRBYPASS_SHIFT)
#define  HVSYNC_HFFCR1_FIRBYPASS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR1_FIRBYPASS_MASK) | (((uint32_t)val) << HVSYNC_HFFCR1_FIRBYPASS_SHIFT))

//====================================================================
//Register: HSYNC FIR Configuration Register (Instance 3 of 4) (HFFCR2)
/** \brief Configures the HSYNC FIR Filter (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HFFCR2_RESERVED1_MASK 0xff000000
#define  HVSYNC_HFFCR2_RESERVED1_SHIFT 24
#define  HVSYNC_HFFCR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_RESERVED1_MASK) >> HVSYNC_HFFCR2_RESERVED1_SHIFT)
#define  HVSYNC_HFFCR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_RESERVED1_SHIFT))

#define  HVSYNC_HFFCR2_H2LFIRTHRESH_MASK 0xf00000
#define  HVSYNC_HFFCR2_H2LFIRTHRESH_SHIFT 20
#define  HVSYNC_HFFCR2_H2LFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_H2LFIRTHRESH_MASK) >> HVSYNC_HFFCR2_H2LFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR2_H2LFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_H2LFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_H2LFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR2_L2HFIRTHRESH_MASK 0xf0000
#define  HVSYNC_HFFCR2_L2HFIRTHRESH_SHIFT 16
#define  HVSYNC_HFFCR2_L2HFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_L2HFIRTHRESH_MASK) >> HVSYNC_HFFCR2_L2HFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR2_L2HFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_L2HFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_L2HFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR2_RESERVED2_MASK 0xc000
#define  HVSYNC_HFFCR2_RESERVED2_SHIFT 14
#define  HVSYNC_HFFCR2_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_RESERVED2_MASK) >> HVSYNC_HFFCR2_RESERVED2_SHIFT)
#define  HVSYNC_HFFCR2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_RESERVED2_SHIFT))

#define  HVSYNC_HFFCR2_WEIGHT4_MASK 0x3000
#define  HVSYNC_HFFCR2_WEIGHT4_SHIFT 12
#define  HVSYNC_HFFCR2_WEIGHT4_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_WEIGHT4_MASK) >> HVSYNC_HFFCR2_WEIGHT4_SHIFT)
#define  HVSYNC_HFFCR2_WEIGHT4_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_WEIGHT4_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_WEIGHT4_SHIFT))

#define  HVSYNC_HFFCR2_WEIGHT3_MASK 0xc00
#define  HVSYNC_HFFCR2_WEIGHT3_SHIFT 10
#define  HVSYNC_HFFCR2_WEIGHT3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_WEIGHT3_MASK) >> HVSYNC_HFFCR2_WEIGHT3_SHIFT)
#define  HVSYNC_HFFCR2_WEIGHT3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_WEIGHT3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_WEIGHT3_SHIFT))

#define  HVSYNC_HFFCR2_WEIGHT2_MASK 0x300
#define  HVSYNC_HFFCR2_WEIGHT2_SHIFT 8
#define  HVSYNC_HFFCR2_WEIGHT2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_WEIGHT2_MASK) >> HVSYNC_HFFCR2_WEIGHT2_SHIFT)
#define  HVSYNC_HFFCR2_WEIGHT2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_WEIGHT2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_WEIGHT2_SHIFT))

#define  HVSYNC_HFFCR2_WEIGHT1_MASK 0xc0
#define  HVSYNC_HFFCR2_WEIGHT1_SHIFT 6
#define  HVSYNC_HFFCR2_WEIGHT1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_WEIGHT1_MASK) >> HVSYNC_HFFCR2_WEIGHT1_SHIFT)
#define  HVSYNC_HFFCR2_WEIGHT1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_WEIGHT1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_WEIGHT1_SHIFT))

#define  HVSYNC_HFFCR2_WEIGHT0_MASK 0x30
#define  HVSYNC_HFFCR2_WEIGHT0_SHIFT 4
#define  HVSYNC_HFFCR2_WEIGHT0_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_WEIGHT0_MASK) >> HVSYNC_HFFCR2_WEIGHT0_SHIFT)
#define  HVSYNC_HFFCR2_WEIGHT0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_WEIGHT0_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_WEIGHT0_SHIFT))

#define  HVSYNC_HFFCR2_RESERVED3_MASK 0xe
#define  HVSYNC_HFFCR2_RESERVED3_SHIFT 1
#define  HVSYNC_HFFCR2_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_RESERVED3_MASK) >> HVSYNC_HFFCR2_RESERVED3_SHIFT)
#define  HVSYNC_HFFCR2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_RESERVED3_SHIFT))

#define  HVSYNC_HFFCR2_FIRBYPASS_MASK 0x1
#define  HVSYNC_HFFCR2_FIRBYPASS_SHIFT 0
#define  HVSYNC_HFFCR2_FIRBYPASS_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR2_FIRBYPASS_MASK) >> HVSYNC_HFFCR2_FIRBYPASS_SHIFT)
#define  HVSYNC_HFFCR2_FIRBYPASS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR2_FIRBYPASS_MASK) | (((uint32_t)val) << HVSYNC_HFFCR2_FIRBYPASS_SHIFT))

//====================================================================
//Register: HSYNC FIR Configuration Register (Instance 4 of 4) (HFFCR3)
/** \brief Configures the HSYNC FIR Filter (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HFFCR3_RESERVED1_MASK 0xff000000
#define  HVSYNC_HFFCR3_RESERVED1_SHIFT 24
#define  HVSYNC_HFFCR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_RESERVED1_MASK) >> HVSYNC_HFFCR3_RESERVED1_SHIFT)
#define  HVSYNC_HFFCR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_RESERVED1_SHIFT))

#define  HVSYNC_HFFCR3_H2LFIRTHRESH_MASK 0xf00000
#define  HVSYNC_HFFCR3_H2LFIRTHRESH_SHIFT 20
#define  HVSYNC_HFFCR3_H2LFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_H2LFIRTHRESH_MASK) >> HVSYNC_HFFCR3_H2LFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR3_H2LFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_H2LFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_H2LFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR3_L2HFIRTHRESH_MASK 0xf0000
#define  HVSYNC_HFFCR3_L2HFIRTHRESH_SHIFT 16
#define  HVSYNC_HFFCR3_L2HFIRTHRESH_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_L2HFIRTHRESH_MASK) >> HVSYNC_HFFCR3_L2HFIRTHRESH_SHIFT)
#define  HVSYNC_HFFCR3_L2HFIRTHRESH_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_L2HFIRTHRESH_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_L2HFIRTHRESH_SHIFT))

#define  HVSYNC_HFFCR3_RESERVED2_MASK 0xc000
#define  HVSYNC_HFFCR3_RESERVED2_SHIFT 14
#define  HVSYNC_HFFCR3_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_RESERVED2_MASK) >> HVSYNC_HFFCR3_RESERVED2_SHIFT)
#define  HVSYNC_HFFCR3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_RESERVED2_SHIFT))

#define  HVSYNC_HFFCR3_WEIGHT4_MASK 0x3000
#define  HVSYNC_HFFCR3_WEIGHT4_SHIFT 12
#define  HVSYNC_HFFCR3_WEIGHT4_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_WEIGHT4_MASK) >> HVSYNC_HFFCR3_WEIGHT4_SHIFT)
#define  HVSYNC_HFFCR3_WEIGHT4_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_WEIGHT4_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_WEIGHT4_SHIFT))

#define  HVSYNC_HFFCR3_WEIGHT3_MASK 0xc00
#define  HVSYNC_HFFCR3_WEIGHT3_SHIFT 10
#define  HVSYNC_HFFCR3_WEIGHT3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_WEIGHT3_MASK) >> HVSYNC_HFFCR3_WEIGHT3_SHIFT)
#define  HVSYNC_HFFCR3_WEIGHT3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_WEIGHT3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_WEIGHT3_SHIFT))

#define  HVSYNC_HFFCR3_WEIGHT2_MASK 0x300
#define  HVSYNC_HFFCR3_WEIGHT2_SHIFT 8
#define  HVSYNC_HFFCR3_WEIGHT2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_WEIGHT2_MASK) >> HVSYNC_HFFCR3_WEIGHT2_SHIFT)
#define  HVSYNC_HFFCR3_WEIGHT2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_WEIGHT2_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_WEIGHT2_SHIFT))

#define  HVSYNC_HFFCR3_WEIGHT1_MASK 0xc0
#define  HVSYNC_HFFCR3_WEIGHT1_SHIFT 6
#define  HVSYNC_HFFCR3_WEIGHT1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_WEIGHT1_MASK) >> HVSYNC_HFFCR3_WEIGHT1_SHIFT)
#define  HVSYNC_HFFCR3_WEIGHT1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_WEIGHT1_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_WEIGHT1_SHIFT))

#define  HVSYNC_HFFCR3_WEIGHT0_MASK 0x30
#define  HVSYNC_HFFCR3_WEIGHT0_SHIFT 4
#define  HVSYNC_HFFCR3_WEIGHT0_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_WEIGHT0_MASK) >> HVSYNC_HFFCR3_WEIGHT0_SHIFT)
#define  HVSYNC_HFFCR3_WEIGHT0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_WEIGHT0_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_WEIGHT0_SHIFT))

#define  HVSYNC_HFFCR3_RESERVED3_MASK 0xe
#define  HVSYNC_HFFCR3_RESERVED3_SHIFT 1
#define  HVSYNC_HFFCR3_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_RESERVED3_MASK) >> HVSYNC_HFFCR3_RESERVED3_SHIFT)
#define  HVSYNC_HFFCR3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_RESERVED3_SHIFT))

#define  HVSYNC_HFFCR3_FIRBYPASS_MASK 0x1
#define  HVSYNC_HFFCR3_FIRBYPASS_SHIFT 0
#define  HVSYNC_HFFCR3_FIRBYPASS_MASK_SHIFT(reg) (((reg) & HVSYNC_HFFCR3_FIRBYPASS_MASK) >> HVSYNC_HFFCR3_FIRBYPASS_SHIFT)
#define  HVSYNC_HFFCR3_FIRBYPASS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFFCR3_FIRBYPASS_MASK) | (((uint32_t)val) << HVSYNC_HFFCR3_FIRBYPASS_SHIFT))

//====================================================================
//Register: HSYNC Lockout Register (Instance 1 of 4) (HLOR0)
/** \brief  (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HLOR0_RESERVED1_MASK 0xfff00000
#define  HVSYNC_HLOR0_RESERVED1_SHIFT 20
#define  HVSYNC_HLOR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR0_RESERVED1_MASK) >> HVSYNC_HLOR0_RESERVED1_SHIFT)
#define  HVSYNC_HLOR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HLOR0_RESERVED1_SHIFT))

#define  HVSYNC_HLOR0_HSYNCLOCKOUT_MASK 0xfffff
#define  HVSYNC_HLOR0_HSYNCLOCKOUT_SHIFT 0
#define  HVSYNC_HLOR0_HSYNCLOCKOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR0_HSYNCLOCKOUT_MASK) >> HVSYNC_HLOR0_HSYNCLOCKOUT_SHIFT)
#define  HVSYNC_HLOR0_HSYNCLOCKOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR0_HSYNCLOCKOUT_MASK) | (((uint32_t)val) << HVSYNC_HLOR0_HSYNCLOCKOUT_SHIFT))

//====================================================================
//Register: HSYNC Lockout Register (Instance 2 of 4) (HLOR1)
/** \brief  (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HLOR1_RESERVED1_MASK 0xfff00000
#define  HVSYNC_HLOR1_RESERVED1_SHIFT 20
#define  HVSYNC_HLOR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR1_RESERVED1_MASK) >> HVSYNC_HLOR1_RESERVED1_SHIFT)
#define  HVSYNC_HLOR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HLOR1_RESERVED1_SHIFT))

#define  HVSYNC_HLOR1_HSYNCLOCKOUT_MASK 0xfffff
#define  HVSYNC_HLOR1_HSYNCLOCKOUT_SHIFT 0
#define  HVSYNC_HLOR1_HSYNCLOCKOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR1_HSYNCLOCKOUT_MASK) >> HVSYNC_HLOR1_HSYNCLOCKOUT_SHIFT)
#define  HVSYNC_HLOR1_HSYNCLOCKOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR1_HSYNCLOCKOUT_MASK) | (((uint32_t)val) << HVSYNC_HLOR1_HSYNCLOCKOUT_SHIFT))

//====================================================================
//Register: HSYNC Lockout Register (Instance 3 of 4) (HLOR2)
/** \brief  (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HLOR2_RESERVED1_MASK 0xfff00000
#define  HVSYNC_HLOR2_RESERVED1_SHIFT 20
#define  HVSYNC_HLOR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR2_RESERVED1_MASK) >> HVSYNC_HLOR2_RESERVED1_SHIFT)
#define  HVSYNC_HLOR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HLOR2_RESERVED1_SHIFT))

#define  HVSYNC_HLOR2_HSYNCLOCKOUT_MASK 0xfffff
#define  HVSYNC_HLOR2_HSYNCLOCKOUT_SHIFT 0
#define  HVSYNC_HLOR2_HSYNCLOCKOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR2_HSYNCLOCKOUT_MASK) >> HVSYNC_HLOR2_HSYNCLOCKOUT_SHIFT)
#define  HVSYNC_HLOR2_HSYNCLOCKOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR2_HSYNCLOCKOUT_MASK) | (((uint32_t)val) << HVSYNC_HLOR2_HSYNCLOCKOUT_SHIFT))

//====================================================================
//Register: HSYNC Lockout Register (Instance 4 of 4) (HLOR3)
/** \brief  (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HLOR3_RESERVED1_MASK 0xfff00000
#define  HVSYNC_HLOR3_RESERVED1_SHIFT 20
#define  HVSYNC_HLOR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR3_RESERVED1_MASK) >> HVSYNC_HLOR3_RESERVED1_SHIFT)
#define  HVSYNC_HLOR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HLOR3_RESERVED1_SHIFT))

#define  HVSYNC_HLOR3_HSYNCLOCKOUT_MASK 0xfffff
#define  HVSYNC_HLOR3_HSYNCLOCKOUT_SHIFT 0
#define  HVSYNC_HLOR3_HSYNCLOCKOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HLOR3_HSYNCLOCKOUT_MASK) >> HVSYNC_HLOR3_HSYNCLOCKOUT_SHIFT)
#define  HVSYNC_HLOR3_HSYNCLOCKOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HLOR3_HSYNCLOCKOUT_MASK) | (((uint32_t)val) << HVSYNC_HLOR3_HSYNCLOCKOUT_SHIFT))

//====================================================================
//Register: HSYNC Capture Configuration Register (Instance 1 of 4) (HCCR0)
/** \brief This register configures the HSYNC filter capture hardware. This is only used for debug purposes. (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HCCR0_RESERVED1_MASK 0xfffffc00
#define  HVSYNC_HCCR0_RESERVED1_SHIFT 10
#define  HVSYNC_HCCR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR0_RESERVED1_MASK) >> HVSYNC_HCCR0_RESERVED1_SHIFT)
#define  HVSYNC_HCCR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HCCR0_RESERVED1_SHIFT))

#define  HVSYNC_HCCR0_XLO_MASK 0x200
#define  HVSYNC_HCCR0_XLO_SHIFT 9
#define  HVSYNC_HCCR0_XLO_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR0_XLO_MASK) >> HVSYNC_HCCR0_XLO_SHIFT)
#define  HVSYNC_HCCR0_XLO_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR0_XLO_MASK) | (((uint32_t)val) << HVSYNC_HCCR0_XLO_SHIFT))

#define  HVSYNC_HCCR0_DELAYSAMPLE_MASK 0x1f0
#define  HVSYNC_HCCR0_DELAYSAMPLE_SHIFT 4
#define  HVSYNC_HCCR0_DELAYSAMPLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR0_DELAYSAMPLE_MASK) >> HVSYNC_HCCR0_DELAYSAMPLE_SHIFT)
#define  HVSYNC_HCCR0_DELAYSAMPLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR0_DELAYSAMPLE_MASK) | (((uint32_t)val) << HVSYNC_HCCR0_DELAYSAMPLE_SHIFT))

#define  HVSYNC_HCCR0_CAPTURESEL_MASK 0xf
#define  HVSYNC_HCCR0_CAPTURESEL_SHIFT 0
#define  HVSYNC_HCCR0_CAPTURESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR0_CAPTURESEL_MASK) >> HVSYNC_HCCR0_CAPTURESEL_SHIFT)
#define  HVSYNC_HCCR0_CAPTURESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR0_CAPTURESEL_MASK) | (((uint32_t)val) << HVSYNC_HCCR0_CAPTURESEL_SHIFT))

//====================================================================
//Register: HSYNC Capture Configuration Register (Instance 2 of 4) (HCCR1)
/** \brief This register configures the HSYNC filter capture hardware. This is only used for debug purposes. (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HCCR1_RESERVED1_MASK 0xfffffc00
#define  HVSYNC_HCCR1_RESERVED1_SHIFT 10
#define  HVSYNC_HCCR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR1_RESERVED1_MASK) >> HVSYNC_HCCR1_RESERVED1_SHIFT)
#define  HVSYNC_HCCR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HCCR1_RESERVED1_SHIFT))

#define  HVSYNC_HCCR1_XLO_MASK 0x200
#define  HVSYNC_HCCR1_XLO_SHIFT 9
#define  HVSYNC_HCCR1_XLO_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR1_XLO_MASK) >> HVSYNC_HCCR1_XLO_SHIFT)
#define  HVSYNC_HCCR1_XLO_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR1_XLO_MASK) | (((uint32_t)val) << HVSYNC_HCCR1_XLO_SHIFT))

#define  HVSYNC_HCCR1_DELAYSAMPLE_MASK 0x1f0
#define  HVSYNC_HCCR1_DELAYSAMPLE_SHIFT 4
#define  HVSYNC_HCCR1_DELAYSAMPLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR1_DELAYSAMPLE_MASK) >> HVSYNC_HCCR1_DELAYSAMPLE_SHIFT)
#define  HVSYNC_HCCR1_DELAYSAMPLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR1_DELAYSAMPLE_MASK) | (((uint32_t)val) << HVSYNC_HCCR1_DELAYSAMPLE_SHIFT))

#define  HVSYNC_HCCR1_CAPTURESEL_MASK 0xf
#define  HVSYNC_HCCR1_CAPTURESEL_SHIFT 0
#define  HVSYNC_HCCR1_CAPTURESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR1_CAPTURESEL_MASK) >> HVSYNC_HCCR1_CAPTURESEL_SHIFT)
#define  HVSYNC_HCCR1_CAPTURESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR1_CAPTURESEL_MASK) | (((uint32_t)val) << HVSYNC_HCCR1_CAPTURESEL_SHIFT))

//====================================================================
//Register: HSYNC Capture Configuration Register (Instance 3 of 4) (HCCR2)
/** \brief This register configures the HSYNC filter capture hardware. This is only used for debug purposes. (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HCCR2_RESERVED1_MASK 0xfffffc00
#define  HVSYNC_HCCR2_RESERVED1_SHIFT 10
#define  HVSYNC_HCCR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR2_RESERVED1_MASK) >> HVSYNC_HCCR2_RESERVED1_SHIFT)
#define  HVSYNC_HCCR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HCCR2_RESERVED1_SHIFT))

#define  HVSYNC_HCCR2_XLO_MASK 0x200
#define  HVSYNC_HCCR2_XLO_SHIFT 9
#define  HVSYNC_HCCR2_XLO_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR2_XLO_MASK) >> HVSYNC_HCCR2_XLO_SHIFT)
#define  HVSYNC_HCCR2_XLO_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR2_XLO_MASK) | (((uint32_t)val) << HVSYNC_HCCR2_XLO_SHIFT))

#define  HVSYNC_HCCR2_DELAYSAMPLE_MASK 0x1f0
#define  HVSYNC_HCCR2_DELAYSAMPLE_SHIFT 4
#define  HVSYNC_HCCR2_DELAYSAMPLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR2_DELAYSAMPLE_MASK) >> HVSYNC_HCCR2_DELAYSAMPLE_SHIFT)
#define  HVSYNC_HCCR2_DELAYSAMPLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR2_DELAYSAMPLE_MASK) | (((uint32_t)val) << HVSYNC_HCCR2_DELAYSAMPLE_SHIFT))

#define  HVSYNC_HCCR2_CAPTURESEL_MASK 0xf
#define  HVSYNC_HCCR2_CAPTURESEL_SHIFT 0
#define  HVSYNC_HCCR2_CAPTURESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR2_CAPTURESEL_MASK) >> HVSYNC_HCCR2_CAPTURESEL_SHIFT)
#define  HVSYNC_HCCR2_CAPTURESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR2_CAPTURESEL_MASK) | (((uint32_t)val) << HVSYNC_HCCR2_CAPTURESEL_SHIFT))

//====================================================================
//Register: HSYNC Capture Configuration Register (Instance 4 of 4) (HCCR3)
/** \brief This register configures the HSYNC filter capture hardware. This is only used for debug purposes. (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HCCR3_RESERVED1_MASK 0xfffffc00
#define  HVSYNC_HCCR3_RESERVED1_SHIFT 10
#define  HVSYNC_HCCR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR3_RESERVED1_MASK) >> HVSYNC_HCCR3_RESERVED1_SHIFT)
#define  HVSYNC_HCCR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HCCR3_RESERVED1_SHIFT))

#define  HVSYNC_HCCR3_XLO_MASK 0x200
#define  HVSYNC_HCCR3_XLO_SHIFT 9
#define  HVSYNC_HCCR3_XLO_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR3_XLO_MASK) >> HVSYNC_HCCR3_XLO_SHIFT)
#define  HVSYNC_HCCR3_XLO_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR3_XLO_MASK) | (((uint32_t)val) << HVSYNC_HCCR3_XLO_SHIFT))

#define  HVSYNC_HCCR3_DELAYSAMPLE_MASK 0x1f0
#define  HVSYNC_HCCR3_DELAYSAMPLE_SHIFT 4
#define  HVSYNC_HCCR3_DELAYSAMPLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR3_DELAYSAMPLE_MASK) >> HVSYNC_HCCR3_DELAYSAMPLE_SHIFT)
#define  HVSYNC_HCCR3_DELAYSAMPLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR3_DELAYSAMPLE_MASK) | (((uint32_t)val) << HVSYNC_HCCR3_DELAYSAMPLE_SHIFT))

#define  HVSYNC_HCCR3_CAPTURESEL_MASK 0xf
#define  HVSYNC_HCCR3_CAPTURESEL_SHIFT 0
#define  HVSYNC_HCCR3_CAPTURESEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HCCR3_CAPTURESEL_MASK) >> HVSYNC_HCCR3_CAPTURESEL_SHIFT)
#define  HVSYNC_HCCR3_CAPTURESEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HCCR3_CAPTURESEL_MASK) | (((uint32_t)val) << HVSYNC_HCCR3_CAPTURESEL_SHIFT))

//====================================================================
//Register: HSYNC Edge Capture Register (Instance 1 of 4) (HECR0)
/** \brief Contains the two 16-bit values of the HiPS sampled HSYNC used in detecting the HSYNC edge (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HECR0_SAMPLE1_MASK 0xffff0000
#define  HVSYNC_HECR0_SAMPLE1_SHIFT 16
#define  HVSYNC_HECR0_SAMPLE1_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR0_SAMPLE1_MASK) >> HVSYNC_HECR0_SAMPLE1_SHIFT)
#define  HVSYNC_HECR0_SAMPLE1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR0_SAMPLE1_MASK) | (((uint32_t)val) << HVSYNC_HECR0_SAMPLE1_SHIFT))

#define  HVSYNC_HECR0_SAMPLE0_MASK 0xffff
#define  HVSYNC_HECR0_SAMPLE0_SHIFT 0
#define  HVSYNC_HECR0_SAMPLE0_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR0_SAMPLE0_MASK) >> HVSYNC_HECR0_SAMPLE0_SHIFT)
#define  HVSYNC_HECR0_SAMPLE0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR0_SAMPLE0_MASK) | (((uint32_t)val) << HVSYNC_HECR0_SAMPLE0_SHIFT))

//====================================================================
//Register: HSYNC Edge Capture Register (Instance 2 of 4) (HECR1)
/** \brief Contains the two 16-bit values of the HiPS sampled HSYNC used in detecting the HSYNC edge (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HECR1_SAMPLE1_MASK 0xffff0000
#define  HVSYNC_HECR1_SAMPLE1_SHIFT 16
#define  HVSYNC_HECR1_SAMPLE1_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR1_SAMPLE1_MASK) >> HVSYNC_HECR1_SAMPLE1_SHIFT)
#define  HVSYNC_HECR1_SAMPLE1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR1_SAMPLE1_MASK) | (((uint32_t)val) << HVSYNC_HECR1_SAMPLE1_SHIFT))

#define  HVSYNC_HECR1_SAMPLE0_MASK 0xffff
#define  HVSYNC_HECR1_SAMPLE0_SHIFT 0
#define  HVSYNC_HECR1_SAMPLE0_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR1_SAMPLE0_MASK) >> HVSYNC_HECR1_SAMPLE0_SHIFT)
#define  HVSYNC_HECR1_SAMPLE0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR1_SAMPLE0_MASK) | (((uint32_t)val) << HVSYNC_HECR1_SAMPLE0_SHIFT))

//====================================================================
//Register: HSYNC Edge Capture Register (Instance 3 of 4) (HECR2)
/** \brief Contains the two 16-bit values of the HiPS sampled HSYNC used in detecting the HSYNC edge (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HECR2_SAMPLE1_MASK 0xffff0000
#define  HVSYNC_HECR2_SAMPLE1_SHIFT 16
#define  HVSYNC_HECR2_SAMPLE1_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR2_SAMPLE1_MASK) >> HVSYNC_HECR2_SAMPLE1_SHIFT)
#define  HVSYNC_HECR2_SAMPLE1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR2_SAMPLE1_MASK) | (((uint32_t)val) << HVSYNC_HECR2_SAMPLE1_SHIFT))

#define  HVSYNC_HECR2_SAMPLE0_MASK 0xffff
#define  HVSYNC_HECR2_SAMPLE0_SHIFT 0
#define  HVSYNC_HECR2_SAMPLE0_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR2_SAMPLE0_MASK) >> HVSYNC_HECR2_SAMPLE0_SHIFT)
#define  HVSYNC_HECR2_SAMPLE0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR2_SAMPLE0_MASK) | (((uint32_t)val) << HVSYNC_HECR2_SAMPLE0_SHIFT))

//====================================================================
//Register: HSYNC Edge Capture Register (Instance 4 of 4) (HECR3)
/** \brief Contains the two 16-bit values of the HiPS sampled HSYNC used in detecting the HSYNC edge (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HECR3_SAMPLE1_MASK 0xffff0000
#define  HVSYNC_HECR3_SAMPLE1_SHIFT 16
#define  HVSYNC_HECR3_SAMPLE1_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR3_SAMPLE1_MASK) >> HVSYNC_HECR3_SAMPLE1_SHIFT)
#define  HVSYNC_HECR3_SAMPLE1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR3_SAMPLE1_MASK) | (((uint32_t)val) << HVSYNC_HECR3_SAMPLE1_SHIFT))

#define  HVSYNC_HECR3_SAMPLE0_MASK 0xffff
#define  HVSYNC_HECR3_SAMPLE0_SHIFT 0
#define  HVSYNC_HECR3_SAMPLE0_MASK_SHIFT(reg) (((reg) & HVSYNC_HECR3_SAMPLE0_MASK) >> HVSYNC_HECR3_SAMPLE0_SHIFT)
#define  HVSYNC_HECR3_SAMPLE0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HECR3_SAMPLE0_MASK) | (((uint32_t)val) << HVSYNC_HECR3_SAMPLE0_SHIFT))

//====================================================================
//Register: HSYNC Offset Capture Register (Instance 1 of 4) (HOCR0)
/** \brief  (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HOCR0_RESERVED1_MASK 0xffc00000
#define  HVSYNC_HOCR0_RESERVED1_SHIFT 22
#define  HVSYNC_HOCR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR0_RESERVED1_MASK) >> HVSYNC_HOCR0_RESERVED1_SHIFT)
#define  HVSYNC_HOCR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HOCR0_RESERVED1_SHIFT))

#define  HVSYNC_HOCR0_LOCKOUTEDGE_MASK 0x200000
#define  HVSYNC_HOCR0_LOCKOUTEDGE_SHIFT 21
#define  HVSYNC_HOCR0_LOCKOUTEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR0_LOCKOUTEDGE_MASK) >> HVSYNC_HOCR0_LOCKOUTEDGE_SHIFT)
#define  HVSYNC_HOCR0_LOCKOUTEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR0_LOCKOUTEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR0_LOCKOUTEDGE_SHIFT))

#define  HVSYNC_HOCR0_FALSEEDGE_MASK 0x100000
#define  HVSYNC_HOCR0_FALSEEDGE_SHIFT 20
#define  HVSYNC_HOCR0_FALSEEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR0_FALSEEDGE_MASK) >> HVSYNC_HOCR0_FALSEEDGE_SHIFT)
#define  HVSYNC_HOCR0_FALSEEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR0_FALSEEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR0_FALSEEDGE_SHIFT))

#define  HVSYNC_HOCR0_OFFSETCAP_MASK 0xf0000
#define  HVSYNC_HOCR0_OFFSETCAP_SHIFT 16
#define  HVSYNC_HOCR0_OFFSETCAP_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR0_OFFSETCAP_MASK) >> HVSYNC_HOCR0_OFFSETCAP_SHIFT)
#define  HVSYNC_HOCR0_OFFSETCAP_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR0_OFFSETCAP_MASK) | (((uint32_t)val) << HVSYNC_HOCR0_OFFSETCAP_SHIFT))

#define  HVSYNC_HOCR0_SAMPLE2_MASK 0xffff
#define  HVSYNC_HOCR0_SAMPLE2_SHIFT 0
#define  HVSYNC_HOCR0_SAMPLE2_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR0_SAMPLE2_MASK) >> HVSYNC_HOCR0_SAMPLE2_SHIFT)
#define  HVSYNC_HOCR0_SAMPLE2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR0_SAMPLE2_MASK) | (((uint32_t)val) << HVSYNC_HOCR0_SAMPLE2_SHIFT))

//====================================================================
//Register: HSYNC Offset Capture Register (Instance 2 of 4) (HOCR1)
/** \brief  (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HOCR1_RESERVED1_MASK 0xffc00000
#define  HVSYNC_HOCR1_RESERVED1_SHIFT 22
#define  HVSYNC_HOCR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR1_RESERVED1_MASK) >> HVSYNC_HOCR1_RESERVED1_SHIFT)
#define  HVSYNC_HOCR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HOCR1_RESERVED1_SHIFT))

#define  HVSYNC_HOCR1_LOCKOUTEDGE_MASK 0x200000
#define  HVSYNC_HOCR1_LOCKOUTEDGE_SHIFT 21
#define  HVSYNC_HOCR1_LOCKOUTEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR1_LOCKOUTEDGE_MASK) >> HVSYNC_HOCR1_LOCKOUTEDGE_SHIFT)
#define  HVSYNC_HOCR1_LOCKOUTEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR1_LOCKOUTEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR1_LOCKOUTEDGE_SHIFT))

#define  HVSYNC_HOCR1_FALSEEDGE_MASK 0x100000
#define  HVSYNC_HOCR1_FALSEEDGE_SHIFT 20
#define  HVSYNC_HOCR1_FALSEEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR1_FALSEEDGE_MASK) >> HVSYNC_HOCR1_FALSEEDGE_SHIFT)
#define  HVSYNC_HOCR1_FALSEEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR1_FALSEEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR1_FALSEEDGE_SHIFT))

#define  HVSYNC_HOCR1_OFFSETCAP_MASK 0xf0000
#define  HVSYNC_HOCR1_OFFSETCAP_SHIFT 16
#define  HVSYNC_HOCR1_OFFSETCAP_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR1_OFFSETCAP_MASK) >> HVSYNC_HOCR1_OFFSETCAP_SHIFT)
#define  HVSYNC_HOCR1_OFFSETCAP_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR1_OFFSETCAP_MASK) | (((uint32_t)val) << HVSYNC_HOCR1_OFFSETCAP_SHIFT))

#define  HVSYNC_HOCR1_SAMPLE2_MASK 0xffff
#define  HVSYNC_HOCR1_SAMPLE2_SHIFT 0
#define  HVSYNC_HOCR1_SAMPLE2_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR1_SAMPLE2_MASK) >> HVSYNC_HOCR1_SAMPLE2_SHIFT)
#define  HVSYNC_HOCR1_SAMPLE2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR1_SAMPLE2_MASK) | (((uint32_t)val) << HVSYNC_HOCR1_SAMPLE2_SHIFT))

//====================================================================
//Register: HSYNC Offset Capture Register (Instance 3 of 4) (HOCR2)
/** \brief  (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HOCR2_RESERVED1_MASK 0xffc00000
#define  HVSYNC_HOCR2_RESERVED1_SHIFT 22
#define  HVSYNC_HOCR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR2_RESERVED1_MASK) >> HVSYNC_HOCR2_RESERVED1_SHIFT)
#define  HVSYNC_HOCR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HOCR2_RESERVED1_SHIFT))

#define  HVSYNC_HOCR2_LOCKOUTEDGE_MASK 0x200000
#define  HVSYNC_HOCR2_LOCKOUTEDGE_SHIFT 21
#define  HVSYNC_HOCR2_LOCKOUTEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR2_LOCKOUTEDGE_MASK) >> HVSYNC_HOCR2_LOCKOUTEDGE_SHIFT)
#define  HVSYNC_HOCR2_LOCKOUTEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR2_LOCKOUTEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR2_LOCKOUTEDGE_SHIFT))

#define  HVSYNC_HOCR2_FALSEEDGE_MASK 0x100000
#define  HVSYNC_HOCR2_FALSEEDGE_SHIFT 20
#define  HVSYNC_HOCR2_FALSEEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR2_FALSEEDGE_MASK) >> HVSYNC_HOCR2_FALSEEDGE_SHIFT)
#define  HVSYNC_HOCR2_FALSEEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR2_FALSEEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR2_FALSEEDGE_SHIFT))

#define  HVSYNC_HOCR2_OFFSETCAP_MASK 0xf0000
#define  HVSYNC_HOCR2_OFFSETCAP_SHIFT 16
#define  HVSYNC_HOCR2_OFFSETCAP_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR2_OFFSETCAP_MASK) >> HVSYNC_HOCR2_OFFSETCAP_SHIFT)
#define  HVSYNC_HOCR2_OFFSETCAP_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR2_OFFSETCAP_MASK) | (((uint32_t)val) << HVSYNC_HOCR2_OFFSETCAP_SHIFT))

#define  HVSYNC_HOCR2_SAMPLE2_MASK 0xffff
#define  HVSYNC_HOCR2_SAMPLE2_SHIFT 0
#define  HVSYNC_HOCR2_SAMPLE2_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR2_SAMPLE2_MASK) >> HVSYNC_HOCR2_SAMPLE2_SHIFT)
#define  HVSYNC_HOCR2_SAMPLE2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR2_SAMPLE2_MASK) | (((uint32_t)val) << HVSYNC_HOCR2_SAMPLE2_SHIFT))

//====================================================================
//Register: HSYNC Offset Capture Register (Instance 4 of 4) (HOCR3)
/** \brief  (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HOCR3_RESERVED1_MASK 0xffc00000
#define  HVSYNC_HOCR3_RESERVED1_SHIFT 22
#define  HVSYNC_HOCR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR3_RESERVED1_MASK) >> HVSYNC_HOCR3_RESERVED1_SHIFT)
#define  HVSYNC_HOCR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HOCR3_RESERVED1_SHIFT))

#define  HVSYNC_HOCR3_LOCKOUTEDGE_MASK 0x200000
#define  HVSYNC_HOCR3_LOCKOUTEDGE_SHIFT 21
#define  HVSYNC_HOCR3_LOCKOUTEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR3_LOCKOUTEDGE_MASK) >> HVSYNC_HOCR3_LOCKOUTEDGE_SHIFT)
#define  HVSYNC_HOCR3_LOCKOUTEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR3_LOCKOUTEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR3_LOCKOUTEDGE_SHIFT))

#define  HVSYNC_HOCR3_FALSEEDGE_MASK 0x100000
#define  HVSYNC_HOCR3_FALSEEDGE_SHIFT 20
#define  HVSYNC_HOCR3_FALSEEDGE_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR3_FALSEEDGE_MASK) >> HVSYNC_HOCR3_FALSEEDGE_SHIFT)
#define  HVSYNC_HOCR3_FALSEEDGE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR3_FALSEEDGE_MASK) | (((uint32_t)val) << HVSYNC_HOCR3_FALSEEDGE_SHIFT))

#define  HVSYNC_HOCR3_OFFSETCAP_MASK 0xf0000
#define  HVSYNC_HOCR3_OFFSETCAP_SHIFT 16
#define  HVSYNC_HOCR3_OFFSETCAP_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR3_OFFSETCAP_MASK) >> HVSYNC_HOCR3_OFFSETCAP_SHIFT)
#define  HVSYNC_HOCR3_OFFSETCAP_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR3_OFFSETCAP_MASK) | (((uint32_t)val) << HVSYNC_HOCR3_OFFSETCAP_SHIFT))

#define  HVSYNC_HOCR3_SAMPLE2_MASK 0xffff
#define  HVSYNC_HOCR3_SAMPLE2_SHIFT 0
#define  HVSYNC_HOCR3_SAMPLE2_MASK_SHIFT(reg) (((reg) & HVSYNC_HOCR3_SAMPLE2_MASK) >> HVSYNC_HOCR3_SAMPLE2_SHIFT)
#define  HVSYNC_HOCR3_SAMPLE2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HOCR3_SAMPLE2_MASK) | (((uint32_t)val) << HVSYNC_HOCR3_SAMPLE2_SHIFT))

//====================================================================
//Register: HSYNC Filter Status Register (Instance 1 of 4) (HFSR0)
/** \brief  (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HFSR0_RESERVED1_MASK 0xfffff800
#define  HVSYNC_HFSR0_RESERVED1_SHIFT 11
#define  HVSYNC_HFSR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_RESERVED1_MASK) >> HVSYNC_HFSR0_RESERVED1_SHIFT)
#define  HVSYNC_HFSR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_RESERVED1_SHIFT))

#define  HVSYNC_HFSR0_HSYNCV_STATE_MASK 0x700
#define  HVSYNC_HFSR0_HSYNCV_STATE_SHIFT 8
#define  HVSYNC_HFSR0_HSYNCV_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_HSYNCV_STATE_MASK) >> HVSYNC_HFSR0_HSYNCV_STATE_SHIFT)
#define  HVSYNC_HFSR0_HSYNCV_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_HSYNCV_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_HSYNCV_STATE_SHIFT))

#define  HVSYNC_HFSR0_RESERVED2_MASK 0x80
#define  HVSYNC_HFSR0_RESERVED2_SHIFT 7
#define  HVSYNC_HFSR0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_RESERVED2_MASK) >> HVSYNC_HFSR0_RESERVED2_SHIFT)
#define  HVSYNC_HFSR0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_RESERVED2_SHIFT))

#define  HVSYNC_HFSR0_HSYNCS_STATE_MASK 0x70
#define  HVSYNC_HFSR0_HSYNCS_STATE_SHIFT 4
#define  HVSYNC_HFSR0_HSYNCS_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_HSYNCS_STATE_MASK) >> HVSYNC_HFSR0_HSYNCS_STATE_SHIFT)
#define  HVSYNC_HFSR0_HSYNCS_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_HSYNCS_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_HSYNCS_STATE_SHIFT))

#define  HVSYNC_HFSR0_RESERVED3_MASK 0xc
#define  HVSYNC_HFSR0_RESERVED3_SHIFT 2
#define  HVSYNC_HFSR0_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_RESERVED3_MASK) >> HVSYNC_HFSR0_RESERVED3_SHIFT)
#define  HVSYNC_HFSR0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_RESERVED3_SHIFT))

#define  HVSYNC_HFSR0_HSYNC_STATE_MASK 0x3
#define  HVSYNC_HFSR0_HSYNC_STATE_SHIFT 0
#define  HVSYNC_HFSR0_HSYNC_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR0_HSYNC_STATE_MASK) >> HVSYNC_HFSR0_HSYNC_STATE_SHIFT)
#define  HVSYNC_HFSR0_HSYNC_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR0_HSYNC_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR0_HSYNC_STATE_SHIFT))

//====================================================================
//Register: HSYNC Filter Status Register (Instance 2 of 4) (HFSR1)
/** \brief  (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HFSR1_RESERVED1_MASK 0xfffff800
#define  HVSYNC_HFSR1_RESERVED1_SHIFT 11
#define  HVSYNC_HFSR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_RESERVED1_MASK) >> HVSYNC_HFSR1_RESERVED1_SHIFT)
#define  HVSYNC_HFSR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_RESERVED1_SHIFT))

#define  HVSYNC_HFSR1_HSYNCV_STATE_MASK 0x700
#define  HVSYNC_HFSR1_HSYNCV_STATE_SHIFT 8
#define  HVSYNC_HFSR1_HSYNCV_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_HSYNCV_STATE_MASK) >> HVSYNC_HFSR1_HSYNCV_STATE_SHIFT)
#define  HVSYNC_HFSR1_HSYNCV_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_HSYNCV_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_HSYNCV_STATE_SHIFT))

#define  HVSYNC_HFSR1_RESERVED2_MASK 0x80
#define  HVSYNC_HFSR1_RESERVED2_SHIFT 7
#define  HVSYNC_HFSR1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_RESERVED2_MASK) >> HVSYNC_HFSR1_RESERVED2_SHIFT)
#define  HVSYNC_HFSR1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_RESERVED2_SHIFT))

#define  HVSYNC_HFSR1_HSYNCS_STATE_MASK 0x70
#define  HVSYNC_HFSR1_HSYNCS_STATE_SHIFT 4
#define  HVSYNC_HFSR1_HSYNCS_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_HSYNCS_STATE_MASK) >> HVSYNC_HFSR1_HSYNCS_STATE_SHIFT)
#define  HVSYNC_HFSR1_HSYNCS_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_HSYNCS_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_HSYNCS_STATE_SHIFT))

#define  HVSYNC_HFSR1_RESERVED3_MASK 0xc
#define  HVSYNC_HFSR1_RESERVED3_SHIFT 2
#define  HVSYNC_HFSR1_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_RESERVED3_MASK) >> HVSYNC_HFSR1_RESERVED3_SHIFT)
#define  HVSYNC_HFSR1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_RESERVED3_SHIFT))

#define  HVSYNC_HFSR1_HSYNC_STATE_MASK 0x3
#define  HVSYNC_HFSR1_HSYNC_STATE_SHIFT 0
#define  HVSYNC_HFSR1_HSYNC_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR1_HSYNC_STATE_MASK) >> HVSYNC_HFSR1_HSYNC_STATE_SHIFT)
#define  HVSYNC_HFSR1_HSYNC_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR1_HSYNC_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR1_HSYNC_STATE_SHIFT))

//====================================================================
//Register: HSYNC Filter Status Register (Instance 3 of 4) (HFSR2)
/** \brief  (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HFSR2_RESERVED1_MASK 0xfffff800
#define  HVSYNC_HFSR2_RESERVED1_SHIFT 11
#define  HVSYNC_HFSR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_RESERVED1_MASK) >> HVSYNC_HFSR2_RESERVED1_SHIFT)
#define  HVSYNC_HFSR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_RESERVED1_SHIFT))

#define  HVSYNC_HFSR2_HSYNCV_STATE_MASK 0x700
#define  HVSYNC_HFSR2_HSYNCV_STATE_SHIFT 8
#define  HVSYNC_HFSR2_HSYNCV_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_HSYNCV_STATE_MASK) >> HVSYNC_HFSR2_HSYNCV_STATE_SHIFT)
#define  HVSYNC_HFSR2_HSYNCV_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_HSYNCV_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_HSYNCV_STATE_SHIFT))

#define  HVSYNC_HFSR2_RESERVED2_MASK 0x80
#define  HVSYNC_HFSR2_RESERVED2_SHIFT 7
#define  HVSYNC_HFSR2_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_RESERVED2_MASK) >> HVSYNC_HFSR2_RESERVED2_SHIFT)
#define  HVSYNC_HFSR2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_RESERVED2_SHIFT))

#define  HVSYNC_HFSR2_HSYNCS_STATE_MASK 0x70
#define  HVSYNC_HFSR2_HSYNCS_STATE_SHIFT 4
#define  HVSYNC_HFSR2_HSYNCS_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_HSYNCS_STATE_MASK) >> HVSYNC_HFSR2_HSYNCS_STATE_SHIFT)
#define  HVSYNC_HFSR2_HSYNCS_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_HSYNCS_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_HSYNCS_STATE_SHIFT))

#define  HVSYNC_HFSR2_RESERVED3_MASK 0xc
#define  HVSYNC_HFSR2_RESERVED3_SHIFT 2
#define  HVSYNC_HFSR2_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_RESERVED3_MASK) >> HVSYNC_HFSR2_RESERVED3_SHIFT)
#define  HVSYNC_HFSR2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_RESERVED3_SHIFT))

#define  HVSYNC_HFSR2_HSYNC_STATE_MASK 0x3
#define  HVSYNC_HFSR2_HSYNC_STATE_SHIFT 0
#define  HVSYNC_HFSR2_HSYNC_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR2_HSYNC_STATE_MASK) >> HVSYNC_HFSR2_HSYNC_STATE_SHIFT)
#define  HVSYNC_HFSR2_HSYNC_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR2_HSYNC_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR2_HSYNC_STATE_SHIFT))

//====================================================================
//Register: HSYNC Filter Status Register (Instance 4 of 4) (HFSR3)
/** \brief  (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HFSR3_RESERVED1_MASK 0xfffff800
#define  HVSYNC_HFSR3_RESERVED1_SHIFT 11
#define  HVSYNC_HFSR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_RESERVED1_MASK) >> HVSYNC_HFSR3_RESERVED1_SHIFT)
#define  HVSYNC_HFSR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_RESERVED1_SHIFT))

#define  HVSYNC_HFSR3_HSYNCV_STATE_MASK 0x700
#define  HVSYNC_HFSR3_HSYNCV_STATE_SHIFT 8
#define  HVSYNC_HFSR3_HSYNCV_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_HSYNCV_STATE_MASK) >> HVSYNC_HFSR3_HSYNCV_STATE_SHIFT)
#define  HVSYNC_HFSR3_HSYNCV_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_HSYNCV_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_HSYNCV_STATE_SHIFT))

#define  HVSYNC_HFSR3_RESERVED2_MASK 0x80
#define  HVSYNC_HFSR3_RESERVED2_SHIFT 7
#define  HVSYNC_HFSR3_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_RESERVED2_MASK) >> HVSYNC_HFSR3_RESERVED2_SHIFT)
#define  HVSYNC_HFSR3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_RESERVED2_SHIFT))

#define  HVSYNC_HFSR3_HSYNCS_STATE_MASK 0x70
#define  HVSYNC_HFSR3_HSYNCS_STATE_SHIFT 4
#define  HVSYNC_HFSR3_HSYNCS_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_HSYNCS_STATE_MASK) >> HVSYNC_HFSR3_HSYNCS_STATE_SHIFT)
#define  HVSYNC_HFSR3_HSYNCS_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_HSYNCS_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_HSYNCS_STATE_SHIFT))

#define  HVSYNC_HFSR3_RESERVED3_MASK 0xc
#define  HVSYNC_HFSR3_RESERVED3_SHIFT 2
#define  HVSYNC_HFSR3_RESERVED3_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_RESERVED3_MASK) >> HVSYNC_HFSR3_RESERVED3_SHIFT)
#define  HVSYNC_HFSR3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_RESERVED3_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_RESERVED3_SHIFT))

#define  HVSYNC_HFSR3_HSYNC_STATE_MASK 0x3
#define  HVSYNC_HFSR3_HSYNC_STATE_SHIFT 0
#define  HVSYNC_HFSR3_HSYNC_STATE_MASK_SHIFT(reg) (((reg) & HVSYNC_HFSR3_HSYNC_STATE_MASK) >> HVSYNC_HFSR3_HSYNC_STATE_SHIFT)
#define  HVSYNC_HFSR3_HSYNC_STATE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HFSR3_HSYNC_STATE_MASK) | (((uint32_t)val) << HVSYNC_HFSR3_HSYNC_STATE_SHIFT))

//====================================================================
//Register: HSYNC SOS To EOS Time (Instance 1 of 4) (HSET0)
/** \brief This register sets the count value used by the HSYNC filter to differentiate
        between a Start of Scan (SOS) and End of Scan (EOS) pulse.
        <br>
        If the time from EOS to SOS is less than the time from SOS to EOS, the EOStoSOS field
        should be set to a time that is greater than EOS to SOS but less than SOS to EOS. The
        EOSGr bit should be set to 0.
        <br>
        If the time from SOS to EOS is less than the time from EOS to SOS, the EOStoSOS field
        should be set to a time that is greater than SOS to EOS but less than EOS to SOS. The
        EOSGr bit should be set to 1.
        <br>
        The value is in 156.25MHz clock periods. If the HSYNC signal does not contain
        an EOS this register must be set to zero. (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HSET0_RESERVED1_MASK 0xfff80000
#define  HVSYNC_HSET0_RESERVED1_SHIFT 19
#define  HVSYNC_HSET0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET0_RESERVED1_MASK) >> HVSYNC_HSET0_RESERVED1_SHIFT)
#define  HVSYNC_HSET0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HSET0_RESERVED1_SHIFT))

#define  HVSYNC_HSET0_EOSGR_MASK 0x40000
#define  HVSYNC_HSET0_EOSGR_SHIFT 18
#define  HVSYNC_HSET0_EOSGR_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET0_EOSGR_MASK) >> HVSYNC_HSET0_EOSGR_SHIFT)
#define  HVSYNC_HSET0_EOSGR_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET0_EOSGR_MASK) | (((uint32_t)val) << HVSYNC_HSET0_EOSGR_SHIFT))

#define  HVSYNC_HSET0_EOSTOSOS_MASK 0x3ffff
#define  HVSYNC_HSET0_EOSTOSOS_SHIFT 0
#define  HVSYNC_HSET0_EOSTOSOS_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET0_EOSTOSOS_MASK) >> HVSYNC_HSET0_EOSTOSOS_SHIFT)
#define  HVSYNC_HSET0_EOSTOSOS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET0_EOSTOSOS_MASK) | (((uint32_t)val) << HVSYNC_HSET0_EOSTOSOS_SHIFT))

//====================================================================
//Register: HSYNC SOS To EOS Time (Instance 2 of 4) (HSET1)
/** \brief This register sets the count value used by the HSYNC filter to differentiate
        between a Start of Scan (SOS) and End of Scan (EOS) pulse.
        <br>
        If the time from EOS to SOS is less than the time from SOS to EOS, the EOStoSOS field
        should be set to a time that is greater than EOS to SOS but less than SOS to EOS. The
        EOSGr bit should be set to 0.
        <br>
        If the time from SOS to EOS is less than the time from EOS to SOS, the EOStoSOS field
        should be set to a time that is greater than SOS to EOS but less than EOS to SOS. The
        EOSGr bit should be set to 1.
        <br>
        The value is in 156.25MHz clock periods. If the HSYNC signal does not contain
        an EOS this register must be set to zero. (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HSET1_RESERVED1_MASK 0xfff80000
#define  HVSYNC_HSET1_RESERVED1_SHIFT 19
#define  HVSYNC_HSET1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET1_RESERVED1_MASK) >> HVSYNC_HSET1_RESERVED1_SHIFT)
#define  HVSYNC_HSET1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HSET1_RESERVED1_SHIFT))

#define  HVSYNC_HSET1_EOSGR_MASK 0x40000
#define  HVSYNC_HSET1_EOSGR_SHIFT 18
#define  HVSYNC_HSET1_EOSGR_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET1_EOSGR_MASK) >> HVSYNC_HSET1_EOSGR_SHIFT)
#define  HVSYNC_HSET1_EOSGR_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET1_EOSGR_MASK) | (((uint32_t)val) << HVSYNC_HSET1_EOSGR_SHIFT))

#define  HVSYNC_HSET1_EOSTOSOS_MASK 0x3ffff
#define  HVSYNC_HSET1_EOSTOSOS_SHIFT 0
#define  HVSYNC_HSET1_EOSTOSOS_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET1_EOSTOSOS_MASK) >> HVSYNC_HSET1_EOSTOSOS_SHIFT)
#define  HVSYNC_HSET1_EOSTOSOS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET1_EOSTOSOS_MASK) | (((uint32_t)val) << HVSYNC_HSET1_EOSTOSOS_SHIFT))

//====================================================================
//Register: HSYNC SOS To EOS Time (Instance 3 of 4) (HSET2)
/** \brief This register sets the count value used by the HSYNC filter to differentiate
        between a Start of Scan (SOS) and End of Scan (EOS) pulse.
        <br>
        If the time from EOS to SOS is less than the time from SOS to EOS, the EOStoSOS field
        should be set to a time that is greater than EOS to SOS but less than SOS to EOS. The
        EOSGr bit should be set to 0.
        <br>
        If the time from SOS to EOS is less than the time from EOS to SOS, the EOStoSOS field
        should be set to a time that is greater than SOS to EOS but less than EOS to SOS. The
        EOSGr bit should be set to 1.
        <br>
        The value is in 156.25MHz clock periods. If the HSYNC signal does not contain
        an EOS this register must be set to zero. (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HSET2_RESERVED1_MASK 0xfff80000
#define  HVSYNC_HSET2_RESERVED1_SHIFT 19
#define  HVSYNC_HSET2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET2_RESERVED1_MASK) >> HVSYNC_HSET2_RESERVED1_SHIFT)
#define  HVSYNC_HSET2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HSET2_RESERVED1_SHIFT))

#define  HVSYNC_HSET2_EOSGR_MASK 0x40000
#define  HVSYNC_HSET2_EOSGR_SHIFT 18
#define  HVSYNC_HSET2_EOSGR_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET2_EOSGR_MASK) >> HVSYNC_HSET2_EOSGR_SHIFT)
#define  HVSYNC_HSET2_EOSGR_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET2_EOSGR_MASK) | (((uint32_t)val) << HVSYNC_HSET2_EOSGR_SHIFT))

#define  HVSYNC_HSET2_EOSTOSOS_MASK 0x3ffff
#define  HVSYNC_HSET2_EOSTOSOS_SHIFT 0
#define  HVSYNC_HSET2_EOSTOSOS_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET2_EOSTOSOS_MASK) >> HVSYNC_HSET2_EOSTOSOS_SHIFT)
#define  HVSYNC_HSET2_EOSTOSOS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET2_EOSTOSOS_MASK) | (((uint32_t)val) << HVSYNC_HSET2_EOSTOSOS_SHIFT))

//====================================================================
//Register: HSYNC SOS To EOS Time (Instance 4 of 4) (HSET3)
/** \brief This register sets the count value used by the HSYNC filter to differentiate
        between a Start of Scan (SOS) and End of Scan (EOS) pulse.
        <br>
        If the time from EOS to SOS is less than the time from SOS to EOS, the EOStoSOS field
        should be set to a time that is greater than EOS to SOS but less than SOS to EOS. The
        EOSGr bit should be set to 0.
        <br>
        If the time from SOS to EOS is less than the time from EOS to SOS, the EOStoSOS field
        should be set to a time that is greater than SOS to EOS but less than EOS to SOS. The
        EOSGr bit should be set to 1.
        <br>
        The value is in 156.25MHz clock periods. If the HSYNC signal does not contain
        an EOS this register must be set to zero. (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HSET3_RESERVED1_MASK 0xfff80000
#define  HVSYNC_HSET3_RESERVED1_SHIFT 19
#define  HVSYNC_HSET3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET3_RESERVED1_MASK) >> HVSYNC_HSET3_RESERVED1_SHIFT)
#define  HVSYNC_HSET3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HSET3_RESERVED1_SHIFT))

#define  HVSYNC_HSET3_EOSGR_MASK 0x40000
#define  HVSYNC_HSET3_EOSGR_SHIFT 18
#define  HVSYNC_HSET3_EOSGR_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET3_EOSGR_MASK) >> HVSYNC_HSET3_EOSGR_SHIFT)
#define  HVSYNC_HSET3_EOSGR_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET3_EOSGR_MASK) | (((uint32_t)val) << HVSYNC_HSET3_EOSGR_SHIFT))

#define  HVSYNC_HSET3_EOSTOSOS_MASK 0x3ffff
#define  HVSYNC_HSET3_EOSTOSOS_SHIFT 0
#define  HVSYNC_HSET3_EOSTOSOS_MASK_SHIFT(reg) (((reg) & HVSYNC_HSET3_EOSTOSOS_MASK) >> HVSYNC_HSET3_EOSTOSOS_SHIFT)
#define  HVSYNC_HSET3_EOSTOSOS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HSET3_EOSTOSOS_MASK) | (((uint32_t)val) << HVSYNC_HSET3_EOSTOSOS_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 1 of 8) (MASK_CFG0)
/** \brief Configures the HSYNC Masking block (Instance 1 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG0_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG0_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG0_RESERVED1_MASK) >> HVSYNC_MASK_CFG0_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG0_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG0_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG0_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG0_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG0_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG0_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG0_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG0_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG0_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG0_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG0_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG0_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG0_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG0_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG0_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG0_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG0_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 2 of 8) (MASK_CFG1)
/** \brief Configures the HSYNC Masking block (Instance 2 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG1_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG1_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG1_RESERVED1_MASK) >> HVSYNC_MASK_CFG1_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG1_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG1_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG1_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG1_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG1_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG1_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG1_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG1_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG1_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG1_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG1_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG1_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG1_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG1_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG1_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG1_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG1_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 3 of 8) (MASK_CFG2)
/** \brief Configures the HSYNC Masking block (Instance 3 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG2_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG2_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG2_RESERVED1_MASK) >> HVSYNC_MASK_CFG2_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG2_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG2_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG2_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG2_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG2_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG2_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG2_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG2_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG2_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG2_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG2_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG2_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG2_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG2_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG2_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG2_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG2_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 4 of 8) (MASK_CFG3)
/** \brief Configures the HSYNC Masking block (Instance 4 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG3_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG3_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG3_RESERVED1_MASK) >> HVSYNC_MASK_CFG3_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG3_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG3_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG3_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG3_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG3_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG3_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG3_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG3_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG3_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG3_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG3_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG3_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG3_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG3_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG3_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG3_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG3_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 5 of 8) (MASK_CFG4)
/** \brief Configures the HSYNC Masking block (Instance 5 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG4_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG4_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG4_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG4_RESERVED1_MASK) >> HVSYNC_MASK_CFG4_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG4_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG4_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG4_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG4_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG4_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG4_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG4_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG4_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG4_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG4_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG4_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG4_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG4_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG4_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG4_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG4_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG4_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG4_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 6 of 8) (MASK_CFG5)
/** \brief Configures the HSYNC Masking block (Instance 6 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG5_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG5_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG5_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG5_RESERVED1_MASK) >> HVSYNC_MASK_CFG5_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG5_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG5_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG5_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG5_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG5_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG5_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG5_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG5_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG5_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG5_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG5_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG5_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG5_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG5_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG5_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG5_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG5_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG5_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 7 of 8) (MASK_CFG6)
/** \brief Configures the HSYNC Masking block (Instance 7 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG6_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG6_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG6_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG6_RESERVED1_MASK) >> HVSYNC_MASK_CFG6_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG6_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG6_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG6_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG6_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG6_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG6_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG6_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG6_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG6_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG6_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG6_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG6_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG6_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG6_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG6_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG6_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG6_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG6_MASKINGENABLE_SHIFT))

//====================================================================
//Register: HSYNC Masking Configuration Register (Instance 8 of 8) (MASK_CFG7)
/** \brief Configures the HSYNC Masking block (Instance 8 of 8)*/
//====================================================================

#define  HVSYNC_MASK_CFG7_RESERVED1_MASK 0xfffff800
#define  HVSYNC_MASK_CFG7_RESERVED1_SHIFT 11
#define  HVSYNC_MASK_CFG7_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG7_RESERVED1_MASK) >> HVSYNC_MASK_CFG7_RESERVED1_SHIFT)
#define  HVSYNC_MASK_CFG7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG7_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG7_RESERVED1_SHIFT))

#define  HVSYNC_MASK_CFG7_MASKINGCOUNT_MASK 0x700
#define  HVSYNC_MASK_CFG7_MASKINGCOUNT_SHIFT 8
#define  HVSYNC_MASK_CFG7_MASKINGCOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG7_MASKINGCOUNT_MASK) >> HVSYNC_MASK_CFG7_MASKINGCOUNT_SHIFT)
#define  HVSYNC_MASK_CFG7_MASKINGCOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG7_MASKINGCOUNT_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG7_MASKINGCOUNT_SHIFT))

#define  HVSYNC_MASK_CFG7_MASKINGENABLE_MASK 0xff
#define  HVSYNC_MASK_CFG7_MASKINGENABLE_SHIFT 0
#define  HVSYNC_MASK_CFG7_MASKINGENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_MASK_CFG7_MASKINGENABLE_MASK) >> HVSYNC_MASK_CFG7_MASKINGENABLE_SHIFT)
#define  HVSYNC_MASK_CFG7_MASKINGENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_MASK_CFG7_MASKINGENABLE_MASK) | (((uint32_t)val) << HVSYNC_MASK_CFG7_MASKINGENABLE_SHIFT))

//====================================================================
//Register: Top Time Register (Instance 1 of 2) (TOP_TM0)
/** \brief Time from last HSYNC to receipt of Top (Instance 1 of 2)*/
//====================================================================

#define  HVSYNC_TOP_TM0_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TOP_TM0_RESERVED1_SHIFT 22
#define  HVSYNC_TOP_TM0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM0_RESERVED1_MASK) >> HVSYNC_TOP_TM0_RESERVED1_SHIFT)
#define  HVSYNC_TOP_TM0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM0_RESERVED1_SHIFT))

#define  HVSYNC_TOP_TM0_TOPTIMECOUNT_MASK 0x3ffff0
#define  HVSYNC_TOP_TM0_TOPTIMECOUNT_SHIFT 4
#define  HVSYNC_TOP_TM0_TOPTIMECOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM0_TOPTIMECOUNT_MASK) >> HVSYNC_TOP_TM0_TOPTIMECOUNT_SHIFT)
#define  HVSYNC_TOP_TM0_TOPTIMECOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM0_TOPTIMECOUNT_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM0_TOPTIMECOUNT_SHIFT))

#define  HVSYNC_TOP_TM0_RESERVED2_MASK 0xf
#define  HVSYNC_TOP_TM0_RESERVED2_SHIFT 0
#define  HVSYNC_TOP_TM0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM0_RESERVED2_MASK) >> HVSYNC_TOP_TM0_RESERVED2_SHIFT)
#define  HVSYNC_TOP_TM0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM0_RESERVED2_SHIFT))

//====================================================================
//Register: Top Time Register (Instance 2 of 2) (TOP_TM1)
/** \brief Time from last HSYNC to receipt of Top (Instance 2 of 2)*/
//====================================================================

#define  HVSYNC_TOP_TM1_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TOP_TM1_RESERVED1_SHIFT 22
#define  HVSYNC_TOP_TM1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM1_RESERVED1_MASK) >> HVSYNC_TOP_TM1_RESERVED1_SHIFT)
#define  HVSYNC_TOP_TM1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM1_RESERVED1_SHIFT))

#define  HVSYNC_TOP_TM1_TOPTIMECOUNT_MASK 0x3ffff0
#define  HVSYNC_TOP_TM1_TOPTIMECOUNT_SHIFT 4
#define  HVSYNC_TOP_TM1_TOPTIMECOUNT_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM1_TOPTIMECOUNT_MASK) >> HVSYNC_TOP_TM1_TOPTIMECOUNT_SHIFT)
#define  HVSYNC_TOP_TM1_TOPTIMECOUNT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM1_TOPTIMECOUNT_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM1_TOPTIMECOUNT_SHIFT))

#define  HVSYNC_TOP_TM1_RESERVED2_MASK 0xf
#define  HVSYNC_TOP_TM1_RESERVED2_SHIFT 0
#define  HVSYNC_TOP_TM1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_TOP_TM1_RESERVED2_MASK) >> HVSYNC_TOP_TM1_RESERVED2_SHIFT)
#define  HVSYNC_TOP_TM1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TOP_TM1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_TOP_TM1_RESERVED2_SHIFT))

//====================================================================
//Register: HVSync Status Register (HVSTAT)
/** \brief HVSync status register*/
//====================================================================

#define  HVSYNC_HVSTAT_RESERVED1_MASK 0xfffffff0
#define  HVSYNC_HVSTAT_RESERVED1_SHIFT 4
#define  HVSYNC_HVSTAT_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTAT_RESERVED1_MASK) >> HVSYNC_HVSTAT_RESERVED1_SHIFT)
#define  HVSYNC_HVSTAT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTAT_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HVSTAT_RESERVED1_SHIFT))

#define  HVSYNC_HVSTAT_GALVORTOL_MASK 0xf
#define  HVSYNC_HVSTAT_GALVORTOL_SHIFT 0
#define  HVSYNC_HVSTAT_GALVORTOL_MASK_SHIFT(reg) (((reg) & HVSYNC_HVSTAT_GALVORTOL_MASK) >> HVSYNC_HVSTAT_GALVORTOL_SHIFT)
#define  HVSYNC_HVSTAT_GALVORTOL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HVSTAT_GALVORTOL_MASK) | (((uint32_t)val) << HVSYNC_HVSTAT_GALVORTOL_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 1 of 12) (TM0_CNT0)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 1 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT0_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT0_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT0_RESERVED1_MASK) >> HVSYNC_TM0_CNT0_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT0_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT0_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT0_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT0_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT0_FACETTIME_MASK) >> HVSYNC_TM0_CNT0_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT0_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT0_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT0_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 2 of 12) (TM0_CNT1)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 2 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT1_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT1_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT1_RESERVED1_MASK) >> HVSYNC_TM0_CNT1_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT1_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT1_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT1_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT1_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT1_FACETTIME_MASK) >> HVSYNC_TM0_CNT1_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT1_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT1_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT1_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 3 of 12) (TM0_CNT2)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 3 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT2_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT2_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT2_RESERVED1_MASK) >> HVSYNC_TM0_CNT2_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT2_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT2_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT2_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT2_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT2_FACETTIME_MASK) >> HVSYNC_TM0_CNT2_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT2_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT2_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT2_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 4 of 12) (TM0_CNT3)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 4 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT3_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT3_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT3_RESERVED1_MASK) >> HVSYNC_TM0_CNT3_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT3_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT3_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT3_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT3_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT3_FACETTIME_MASK) >> HVSYNC_TM0_CNT3_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT3_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT3_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT3_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 5 of 12) (TM0_CNT4)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 5 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT4_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT4_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT4_RESERVED1_MASK) >> HVSYNC_TM0_CNT4_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT4_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT4_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT4_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT4_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT4_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT4_FACETTIME_MASK) >> HVSYNC_TM0_CNT4_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT4_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT4_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT4_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 6 of 12) (TM0_CNT5)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 6 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT5_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT5_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT5_RESERVED1_MASK) >> HVSYNC_TM0_CNT5_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT5_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT5_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT5_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT5_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT5_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT5_FACETTIME_MASK) >> HVSYNC_TM0_CNT5_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT5_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT5_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT5_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 7 of 12) (TM0_CNT6)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 7 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT6_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT6_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT6_RESERVED1_MASK) >> HVSYNC_TM0_CNT6_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT6_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT6_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT6_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT6_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT6_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT6_FACETTIME_MASK) >> HVSYNC_TM0_CNT6_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT6_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT6_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT6_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 8 of 12) (TM0_CNT7)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 8 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT7_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT7_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT7_RESERVED1_MASK) >> HVSYNC_TM0_CNT7_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT7_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT7_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT7_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT7_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT7_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT7_FACETTIME_MASK) >> HVSYNC_TM0_CNT7_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT7_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT7_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT7_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 9 of 12) (TM0_CNT8)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 9 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT8_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT8_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT8_RESERVED1_MASK) >> HVSYNC_TM0_CNT8_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT8_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT8_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT8_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT8_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT8_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT8_FACETTIME_MASK) >> HVSYNC_TM0_CNT8_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT8_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT8_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT8_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 10 of 12) (TM0_CNT9)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 10 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT9_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT9_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT9_RESERVED1_MASK) >> HVSYNC_TM0_CNT9_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT9_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT9_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT9_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT9_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT9_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT9_FACETTIME_MASK) >> HVSYNC_TM0_CNT9_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT9_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT9_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT9_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 11 of 12) (TM0_CNT10)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 11 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT10_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT10_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT10_RESERVED1_MASK) >> HVSYNC_TM0_CNT10_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT10_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT10_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT10_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT10_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT10_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT10_FACETTIME_MASK) >> HVSYNC_TM0_CNT10_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT10_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT10_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT10_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 12 of 12) (TM0_CNT11)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 12 of 12)*/
//====================================================================

#define  HVSYNC_TM0_CNT11_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM0_CNT11_RESERVED1_SHIFT 22
#define  HVSYNC_TM0_CNT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT11_RESERVED1_MASK) >> HVSYNC_TM0_CNT11_RESERVED1_SHIFT)
#define  HVSYNC_TM0_CNT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT11_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT11_RESERVED1_SHIFT))

#define  HVSYNC_TM0_CNT11_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM0_CNT11_FACETTIME_SHIFT 0
#define  HVSYNC_TM0_CNT11_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM0_CNT11_FACETTIME_MASK) >> HVSYNC_TM0_CNT11_FACETTIME_SHIFT)
#define  HVSYNC_TM0_CNT11_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM0_CNT11_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM0_CNT11_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 1 of 12) (TM1_CNT0)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 1 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT0_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT0_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT0_RESERVED1_MASK) >> HVSYNC_TM1_CNT0_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT0_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT0_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT0_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT0_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT0_FACETTIME_MASK) >> HVSYNC_TM1_CNT0_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT0_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT0_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT0_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 2 of 12) (TM1_CNT1)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 2 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT1_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT1_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT1_RESERVED1_MASK) >> HVSYNC_TM1_CNT1_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT1_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT1_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT1_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT1_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT1_FACETTIME_MASK) >> HVSYNC_TM1_CNT1_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT1_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT1_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT1_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 3 of 12) (TM1_CNT2)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 3 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT2_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT2_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT2_RESERVED1_MASK) >> HVSYNC_TM1_CNT2_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT2_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT2_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT2_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT2_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT2_FACETTIME_MASK) >> HVSYNC_TM1_CNT2_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT2_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT2_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT2_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 4 of 12) (TM1_CNT3)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 4 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT3_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT3_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT3_RESERVED1_MASK) >> HVSYNC_TM1_CNT3_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT3_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT3_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT3_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT3_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT3_FACETTIME_MASK) >> HVSYNC_TM1_CNT3_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT3_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT3_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT3_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 5 of 12) (TM1_CNT4)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 5 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT4_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT4_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT4_RESERVED1_MASK) >> HVSYNC_TM1_CNT4_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT4_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT4_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT4_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT4_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT4_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT4_FACETTIME_MASK) >> HVSYNC_TM1_CNT4_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT4_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT4_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT4_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 6 of 12) (TM1_CNT5)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 6 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT5_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT5_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT5_RESERVED1_MASK) >> HVSYNC_TM1_CNT5_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT5_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT5_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT5_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT5_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT5_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT5_FACETTIME_MASK) >> HVSYNC_TM1_CNT5_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT5_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT5_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT5_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 7 of 12) (TM1_CNT6)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 7 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT6_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT6_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT6_RESERVED1_MASK) >> HVSYNC_TM1_CNT6_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT6_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT6_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT6_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT6_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT6_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT6_FACETTIME_MASK) >> HVSYNC_TM1_CNT6_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT6_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT6_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT6_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 8 of 12) (TM1_CNT7)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 8 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT7_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT7_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT7_RESERVED1_MASK) >> HVSYNC_TM1_CNT7_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT7_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT7_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT7_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT7_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT7_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT7_FACETTIME_MASK) >> HVSYNC_TM1_CNT7_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT7_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT7_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT7_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 9 of 12) (TM1_CNT8)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 9 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT8_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT8_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT8_RESERVED1_MASK) >> HVSYNC_TM1_CNT8_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT8_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT8_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT8_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT8_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT8_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT8_FACETTIME_MASK) >> HVSYNC_TM1_CNT8_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT8_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT8_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT8_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 10 of 12) (TM1_CNT9)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 10 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT9_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT9_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT9_RESERVED1_MASK) >> HVSYNC_TM1_CNT9_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT9_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT9_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT9_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT9_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT9_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT9_FACETTIME_MASK) >> HVSYNC_TM1_CNT9_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT9_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT9_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT9_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 11 of 12) (TM1_CNT10)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 11 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT10_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT10_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT10_RESERVED1_MASK) >> HVSYNC_TM1_CNT10_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT10_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT10_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT10_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT10_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT10_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT10_FACETTIME_MASK) >> HVSYNC_TM1_CNT10_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT10_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT10_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT10_FACETTIME_SHIFT))

//====================================================================
//Register: Facet Time Register (Instance 12 of 12) (TM1_CNT11)
/** \brief Facet Time Register - Contains the last valid time for this facet. The register is not synchronized to the system clock domain. The value may not be stable if the register is being updated when read. It should be read multiple times to make sure the data is valid. (Instance 12 of 12)*/
//====================================================================

#define  HVSYNC_TM1_CNT11_RESERVED1_MASK 0xffc00000
#define  HVSYNC_TM1_CNT11_RESERVED1_SHIFT 22
#define  HVSYNC_TM1_CNT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT11_RESERVED1_MASK) >> HVSYNC_TM1_CNT11_RESERVED1_SHIFT)
#define  HVSYNC_TM1_CNT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT11_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT11_RESERVED1_SHIFT))

#define  HVSYNC_TM1_CNT11_FACETTIME_MASK 0x3fffff
#define  HVSYNC_TM1_CNT11_FACETTIME_SHIFT 0
#define  HVSYNC_TM1_CNT11_FACETTIME_MASK_SHIFT(reg) (((reg) & HVSYNC_TM1_CNT11_FACETTIME_MASK) >> HVSYNC_TM1_CNT11_FACETTIME_SHIFT)
#define  HVSYNC_TM1_CNT11_FACETTIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_TM1_CNT11_FACETTIME_MASK) | (((uint32_t)val) << HVSYNC_TM1_CNT11_FACETTIME_SHIFT))

//====================================================================
//Register: HSYNC Delay Register (Instance 1 of 2) (HDLR0)
/** \brief  (Instance 1 of 2)*/
//====================================================================

#define  HVSYNC_HDLR0_RESERVED1_MASK 0xffe00000
#define  HVSYNC_HDLR0_RESERVED1_SHIFT 21
#define  HVSYNC_HDLR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR0_RESERVED1_MASK) >> HVSYNC_HDLR0_RESERVED1_SHIFT)
#define  HVSYNC_HDLR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HDLR0_RESERVED1_SHIFT))

#define  HVSYNC_HDLR0_HDLYINPUTSEL_MASK 0x100000
#define  HVSYNC_HDLR0_HDLYINPUTSEL_SHIFT 20
#define  HVSYNC_HDLR0_HDLYINPUTSEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR0_HDLYINPUTSEL_MASK) >> HVSYNC_HDLR0_HDLYINPUTSEL_SHIFT)
#define  HVSYNC_HDLR0_HDLYINPUTSEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR0_HDLYINPUTSEL_MASK) | (((uint32_t)val) << HVSYNC_HDLR0_HDLYINPUTSEL_SHIFT))

#define  HVSYNC_HDLR0_RESERVED2_MASK 0xc0000
#define  HVSYNC_HDLR0_RESERVED2_SHIFT 18
#define  HVSYNC_HDLR0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR0_RESERVED2_MASK) >> HVSYNC_HDLR0_RESERVED2_SHIFT)
#define  HVSYNC_HDLR0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HDLR0_RESERVED2_SHIFT))

#define  HVSYNC_HDLR0_HSYNCDLY_MASK 0x3ffff
#define  HVSYNC_HDLR0_HSYNCDLY_SHIFT 0
#define  HVSYNC_HDLR0_HSYNCDLY_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR0_HSYNCDLY_MASK) >> HVSYNC_HDLR0_HSYNCDLY_SHIFT)
#define  HVSYNC_HDLR0_HSYNCDLY_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR0_HSYNCDLY_MASK) | (((uint32_t)val) << HVSYNC_HDLR0_HSYNCDLY_SHIFT))

//====================================================================
//Register: HSYNC Delay Register (Instance 2 of 2) (HDLR1)
/** \brief  (Instance 2 of 2)*/
//====================================================================

#define  HVSYNC_HDLR1_RESERVED1_MASK 0xffe00000
#define  HVSYNC_HDLR1_RESERVED1_SHIFT 21
#define  HVSYNC_HDLR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR1_RESERVED1_MASK) >> HVSYNC_HDLR1_RESERVED1_SHIFT)
#define  HVSYNC_HDLR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HDLR1_RESERVED1_SHIFT))

#define  HVSYNC_HDLR1_HDLYINPUTSEL_MASK 0x100000
#define  HVSYNC_HDLR1_HDLYINPUTSEL_SHIFT 20
#define  HVSYNC_HDLR1_HDLYINPUTSEL_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR1_HDLYINPUTSEL_MASK) >> HVSYNC_HDLR1_HDLYINPUTSEL_SHIFT)
#define  HVSYNC_HDLR1_HDLYINPUTSEL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR1_HDLYINPUTSEL_MASK) | (((uint32_t)val) << HVSYNC_HDLR1_HDLYINPUTSEL_SHIFT))

#define  HVSYNC_HDLR1_RESERVED2_MASK 0xc0000
#define  HVSYNC_HDLR1_RESERVED2_SHIFT 18
#define  HVSYNC_HDLR1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR1_RESERVED2_MASK) >> HVSYNC_HDLR1_RESERVED2_SHIFT)
#define  HVSYNC_HDLR1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HDLR1_RESERVED2_SHIFT))

#define  HVSYNC_HDLR1_HSYNCDLY_MASK 0x3ffff
#define  HVSYNC_HDLR1_HSYNCDLY_SHIFT 0
#define  HVSYNC_HDLR1_HSYNCDLY_MASK_SHIFT(reg) (((reg) & HVSYNC_HDLR1_HSYNCDLY_MASK) >> HVSYNC_HDLR1_HSYNCDLY_SHIFT)
#define  HVSYNC_HDLR1_HSYNCDLY_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HDLR1_HSYNCDLY_MASK) | (((uint32_t)val) << HVSYNC_HDLR1_HSYNCDLY_SHIFT))

//====================================================================
//Register: HVSync Edge Timer Data Register (ETDATA)
/** \brief Register access to Edge Timer data FIFO*/
//====================================================================

#define  HVSYNC_ETDATA_RESERVED1_MASK 0xfc000000
#define  HVSYNC_ETDATA_RESERVED1_SHIFT 26
#define  HVSYNC_ETDATA_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_ETDATA_RESERVED1_MASK) >> HVSYNC_ETDATA_RESERVED1_SHIFT)
#define  HVSYNC_ETDATA_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETDATA_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_ETDATA_RESERVED1_SHIFT))

#define  HVSYNC_ETDATA_EDGETYPE_MASK 0x3000000
#define  HVSYNC_ETDATA_EDGETYPE_SHIFT 24
#define  HVSYNC_ETDATA_EDGETYPE_MASK_SHIFT(reg) (((reg) & HVSYNC_ETDATA_EDGETYPE_MASK) >> HVSYNC_ETDATA_EDGETYPE_SHIFT)
#define  HVSYNC_ETDATA_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETDATA_EDGETYPE_MASK) | (((uint32_t)val) << HVSYNC_ETDATA_EDGETYPE_SHIFT))

#define  HVSYNC_ETDATA_EDGESOURCE_MASK 0xc00000
#define  HVSYNC_ETDATA_EDGESOURCE_SHIFT 22
#define  HVSYNC_ETDATA_EDGESOURCE_MASK_SHIFT(reg) (((reg) & HVSYNC_ETDATA_EDGESOURCE_MASK) >> HVSYNC_ETDATA_EDGESOURCE_SHIFT)
#define  HVSYNC_ETDATA_EDGESOURCE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETDATA_EDGESOURCE_MASK) | (((uint32_t)val) << HVSYNC_ETDATA_EDGESOURCE_SHIFT))

#define  HVSYNC_ETDATA_EDGETIME_MASK 0x3fffff
#define  HVSYNC_ETDATA_EDGETIME_SHIFT 0
#define  HVSYNC_ETDATA_EDGETIME_MASK_SHIFT(reg) (((reg) & HVSYNC_ETDATA_EDGETIME_MASK) >> HVSYNC_ETDATA_EDGETIME_SHIFT)
#define  HVSYNC_ETDATA_EDGETIME_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETDATA_EDGETIME_MASK) | (((uint32_t)val) << HVSYNC_ETDATA_EDGETIME_SHIFT))

//====================================================================
//Register: HVSync Edge Timer Configuration Register (ETCFG)
/** \brief Used to configure the Edge Timer measurement hardware*/
//====================================================================

#define  HVSYNC_ETCFG_RESERVED1_MASK 0xffffc000
#define  HVSYNC_ETCFG_RESERVED1_SHIFT 14
#define  HVSYNC_ETCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_RESERVED1_MASK) >> HVSYNC_ETCFG_RESERVED1_SHIFT)
#define  HVSYNC_ETCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_RESERVED1_SHIFT))

#define  HVSYNC_ETCFG_EDGEFIFOACCESS_MASK 0x2000
#define  HVSYNC_ETCFG_EDGEFIFOACCESS_SHIFT 13
#define  HVSYNC_ETCFG_EDGEFIFOACCESS_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGEFIFOACCESS_MASK) >> HVSYNC_ETCFG_EDGEFIFOACCESS_SHIFT)
#define  HVSYNC_ETCFG_EDGEFIFOACCESS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGEFIFOACCESS_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGEFIFOACCESS_SHIFT))

#define  HVSYNC_ETCFG_EDGETMRRST_MASK 0x1000
#define  HVSYNC_ETCFG_EDGETMRRST_SHIFT 12
#define  HVSYNC_ETCFG_EDGETMRRST_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGETMRRST_MASK) >> HVSYNC_ETCFG_EDGETMRRST_SHIFT)
#define  HVSYNC_ETCFG_EDGETMRRST_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGETMRRST_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGETMRRST_SHIFT))

#define  HVSYNC_ETCFG_EDGETIMEREN_MASK 0xf00
#define  HVSYNC_ETCFG_EDGETIMEREN_SHIFT 8
#define  HVSYNC_ETCFG_EDGETIMEREN_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGETIMEREN_MASK) >> HVSYNC_ETCFG_EDGETIMEREN_SHIFT)
#define  HVSYNC_ETCFG_EDGETIMEREN_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGETIMEREN_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGETIMEREN_SHIFT))

#define  HVSYNC_ETCFG_EDGEMASK3_MASK 0xc0
#define  HVSYNC_ETCFG_EDGEMASK3_SHIFT 6
#define  HVSYNC_ETCFG_EDGEMASK3_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGEMASK3_MASK) >> HVSYNC_ETCFG_EDGEMASK3_SHIFT)
#define  HVSYNC_ETCFG_EDGEMASK3_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGEMASK3_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGEMASK3_SHIFT))

#define  HVSYNC_ETCFG_EDGEMASK2_MASK 0x30
#define  HVSYNC_ETCFG_EDGEMASK2_SHIFT 4
#define  HVSYNC_ETCFG_EDGEMASK2_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGEMASK2_MASK) >> HVSYNC_ETCFG_EDGEMASK2_SHIFT)
#define  HVSYNC_ETCFG_EDGEMASK2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGEMASK2_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGEMASK2_SHIFT))

#define  HVSYNC_ETCFG_EDGEMASK1_MASK 0xc
#define  HVSYNC_ETCFG_EDGEMASK1_SHIFT 2
#define  HVSYNC_ETCFG_EDGEMASK1_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGEMASK1_MASK) >> HVSYNC_ETCFG_EDGEMASK1_SHIFT)
#define  HVSYNC_ETCFG_EDGEMASK1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGEMASK1_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGEMASK1_SHIFT))

#define  HVSYNC_ETCFG_EDGEMASK0_MASK 0x3
#define  HVSYNC_ETCFG_EDGEMASK0_SHIFT 0
#define  HVSYNC_ETCFG_EDGEMASK0_MASK_SHIFT(reg) (((reg) & HVSYNC_ETCFG_EDGEMASK0_MASK) >> HVSYNC_ETCFG_EDGEMASK0_SHIFT)
#define  HVSYNC_ETCFG_EDGEMASK0_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETCFG_EDGEMASK0_MASK) | (((uint32_t)val) << HVSYNC_ETCFG_EDGEMASK0_SHIFT))

//====================================================================
//Register: HVSync Edge Timer FIFO Status Register (ETSTAT)
/** \brief Status of Edge Timer data FIFO*/
//====================================================================

#define  HVSYNC_ETSTAT_RESERVED1_MASK 0xffffffe0
#define  HVSYNC_ETSTAT_RESERVED1_SHIFT 5
#define  HVSYNC_ETSTAT_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_RESERVED1_MASK) >> HVSYNC_ETSTAT_RESERVED1_SHIFT)
#define  HVSYNC_ETSTAT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_RESERVED1_SHIFT))

#define  HVSYNC_ETSTAT_EDGELOSS_MASK 0x10
#define  HVSYNC_ETSTAT_EDGELOSS_SHIFT 4
#define  HVSYNC_ETSTAT_EDGELOSS_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_EDGELOSS_MASK) >> HVSYNC_ETSTAT_EDGELOSS_SHIFT)
#define  HVSYNC_ETSTAT_EDGELOSS_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_EDGELOSS_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_EDGELOSS_SHIFT))

#define  HVSYNC_ETSTAT_ALMOSTFULL_MASK 0x8
#define  HVSYNC_ETSTAT_ALMOSTFULL_SHIFT 3
#define  HVSYNC_ETSTAT_ALMOSTFULL_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_ALMOSTFULL_MASK) >> HVSYNC_ETSTAT_ALMOSTFULL_SHIFT)
#define  HVSYNC_ETSTAT_ALMOSTFULL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_ALMOSTFULL_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_ALMOSTFULL_SHIFT))

#define  HVSYNC_ETSTAT_FULL_MASK 0x4
#define  HVSYNC_ETSTAT_FULL_SHIFT 2
#define  HVSYNC_ETSTAT_FULL_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_FULL_MASK) >> HVSYNC_ETSTAT_FULL_SHIFT)
#define  HVSYNC_ETSTAT_FULL_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_FULL_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_FULL_SHIFT))

#define  HVSYNC_ETSTAT_ALMOSTEMPTY_MASK 0x2
#define  HVSYNC_ETSTAT_ALMOSTEMPTY_SHIFT 1
#define  HVSYNC_ETSTAT_ALMOSTEMPTY_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_ALMOSTEMPTY_MASK) >> HVSYNC_ETSTAT_ALMOSTEMPTY_SHIFT)
#define  HVSYNC_ETSTAT_ALMOSTEMPTY_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_ALMOSTEMPTY_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_ALMOSTEMPTY_SHIFT))

#define  HVSYNC_ETSTAT_EMPTY_MASK 0x1
#define  HVSYNC_ETSTAT_EMPTY_SHIFT 0
#define  HVSYNC_ETSTAT_EMPTY_MASK_SHIFT(reg) (((reg) & HVSYNC_ETSTAT_EMPTY_MASK) >> HVSYNC_ETSTAT_EMPTY_SHIFT)
#define  HVSYNC_ETSTAT_EMPTY_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_ETSTAT_EMPTY_MASK) | (((uint32_t)val) << HVSYNC_ETSTAT_EMPTY_SHIFT))

//====================================================================
//Register: HSYNC Watchdog Configuration Register (Instance 1 of 4) (HWCR0)
/** \brief Used to configure the HSYNC Watchdog Timer hardware (Instance 1 of 4)*/
//====================================================================

#define  HVSYNC_HWCR0_RESERVED1_MASK 0xff000000
#define  HVSYNC_HWCR0_RESERVED1_SHIFT 24
#define  HVSYNC_HWCR0_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_RESERVED1_MASK) >> HVSYNC_HWCR0_RESERVED1_SHIFT)
#define  HVSYNC_HWCR0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_RESERVED1_SHIFT))

#define  HVSYNC_HWCR0_HTIMEOUT_MASK 0xfffff0
#define  HVSYNC_HWCR0_HTIMEOUT_SHIFT 4
#define  HVSYNC_HWCR0_HTIMEOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_HTIMEOUT_MASK) >> HVSYNC_HWCR0_HTIMEOUT_SHIFT)
#define  HVSYNC_HWCR0_HTIMEOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_HTIMEOUT_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_HTIMEOUT_SHIFT))

#define  HVSYNC_HWCR0_RESERVED2_MASK 0x8
#define  HVSYNC_HWCR0_RESERVED2_SHIFT 3
#define  HVSYNC_HWCR0_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_RESERVED2_MASK) >> HVSYNC_HWCR0_RESERVED2_SHIFT)
#define  HVSYNC_HWCR0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_RESERVED2_SHIFT))

#define  HVSYNC_HWCR0_FILTERFB_MASK 0x4
#define  HVSYNC_HWCR0_FILTERFB_SHIFT 2
#define  HVSYNC_HWCR0_FILTERFB_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_FILTERFB_MASK) >> HVSYNC_HWCR0_FILTERFB_SHIFT)
#define  HVSYNC_HWCR0_FILTERFB_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_FILTERFB_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_FILTERFB_SHIFT))

#define  HVSYNC_HWCR0_ALLOW_MASK 0x2
#define  HVSYNC_HWCR0_ALLOW_SHIFT 1
#define  HVSYNC_HWCR0_ALLOW_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_ALLOW_MASK) >> HVSYNC_HWCR0_ALLOW_SHIFT)
#define  HVSYNC_HWCR0_ALLOW_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_ALLOW_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_ALLOW_SHIFT))

#define  HVSYNC_HWCR0_ENABLE_MASK 0x1
#define  HVSYNC_HWCR0_ENABLE_SHIFT 0
#define  HVSYNC_HWCR0_ENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR0_ENABLE_MASK) >> HVSYNC_HWCR0_ENABLE_SHIFT)
#define  HVSYNC_HWCR0_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR0_ENABLE_MASK) | (((uint32_t)val) << HVSYNC_HWCR0_ENABLE_SHIFT))

//====================================================================
//Register: HSYNC Watchdog Configuration Register (Instance 2 of 4) (HWCR1)
/** \brief Used to configure the HSYNC Watchdog Timer hardware (Instance 2 of 4)*/
//====================================================================

#define  HVSYNC_HWCR1_RESERVED1_MASK 0xff000000
#define  HVSYNC_HWCR1_RESERVED1_SHIFT 24
#define  HVSYNC_HWCR1_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_RESERVED1_MASK) >> HVSYNC_HWCR1_RESERVED1_SHIFT)
#define  HVSYNC_HWCR1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_RESERVED1_SHIFT))

#define  HVSYNC_HWCR1_HTIMEOUT_MASK 0xfffff0
#define  HVSYNC_HWCR1_HTIMEOUT_SHIFT 4
#define  HVSYNC_HWCR1_HTIMEOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_HTIMEOUT_MASK) >> HVSYNC_HWCR1_HTIMEOUT_SHIFT)
#define  HVSYNC_HWCR1_HTIMEOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_HTIMEOUT_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_HTIMEOUT_SHIFT))

#define  HVSYNC_HWCR1_RESERVED2_MASK 0x8
#define  HVSYNC_HWCR1_RESERVED2_SHIFT 3
#define  HVSYNC_HWCR1_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_RESERVED2_MASK) >> HVSYNC_HWCR1_RESERVED2_SHIFT)
#define  HVSYNC_HWCR1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_RESERVED2_SHIFT))

#define  HVSYNC_HWCR1_FILTERFB_MASK 0x4
#define  HVSYNC_HWCR1_FILTERFB_SHIFT 2
#define  HVSYNC_HWCR1_FILTERFB_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_FILTERFB_MASK) >> HVSYNC_HWCR1_FILTERFB_SHIFT)
#define  HVSYNC_HWCR1_FILTERFB_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_FILTERFB_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_FILTERFB_SHIFT))

#define  HVSYNC_HWCR1_ALLOW_MASK 0x2
#define  HVSYNC_HWCR1_ALLOW_SHIFT 1
#define  HVSYNC_HWCR1_ALLOW_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_ALLOW_MASK) >> HVSYNC_HWCR1_ALLOW_SHIFT)
#define  HVSYNC_HWCR1_ALLOW_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_ALLOW_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_ALLOW_SHIFT))

#define  HVSYNC_HWCR1_ENABLE_MASK 0x1
#define  HVSYNC_HWCR1_ENABLE_SHIFT 0
#define  HVSYNC_HWCR1_ENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR1_ENABLE_MASK) >> HVSYNC_HWCR1_ENABLE_SHIFT)
#define  HVSYNC_HWCR1_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR1_ENABLE_MASK) | (((uint32_t)val) << HVSYNC_HWCR1_ENABLE_SHIFT))

//====================================================================
//Register: HSYNC Watchdog Configuration Register (Instance 3 of 4) (HWCR2)
/** \brief Used to configure the HSYNC Watchdog Timer hardware (Instance 3 of 4)*/
//====================================================================

#define  HVSYNC_HWCR2_RESERVED1_MASK 0xff000000
#define  HVSYNC_HWCR2_RESERVED1_SHIFT 24
#define  HVSYNC_HWCR2_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_RESERVED1_MASK) >> HVSYNC_HWCR2_RESERVED1_SHIFT)
#define  HVSYNC_HWCR2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_RESERVED1_SHIFT))

#define  HVSYNC_HWCR2_HTIMEOUT_MASK 0xfffff0
#define  HVSYNC_HWCR2_HTIMEOUT_SHIFT 4
#define  HVSYNC_HWCR2_HTIMEOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_HTIMEOUT_MASK) >> HVSYNC_HWCR2_HTIMEOUT_SHIFT)
#define  HVSYNC_HWCR2_HTIMEOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_HTIMEOUT_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_HTIMEOUT_SHIFT))

#define  HVSYNC_HWCR2_RESERVED2_MASK 0x8
#define  HVSYNC_HWCR2_RESERVED2_SHIFT 3
#define  HVSYNC_HWCR2_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_RESERVED2_MASK) >> HVSYNC_HWCR2_RESERVED2_SHIFT)
#define  HVSYNC_HWCR2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_RESERVED2_SHIFT))

#define  HVSYNC_HWCR2_FILTERFB_MASK 0x4
#define  HVSYNC_HWCR2_FILTERFB_SHIFT 2
#define  HVSYNC_HWCR2_FILTERFB_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_FILTERFB_MASK) >> HVSYNC_HWCR2_FILTERFB_SHIFT)
#define  HVSYNC_HWCR2_FILTERFB_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_FILTERFB_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_FILTERFB_SHIFT))

#define  HVSYNC_HWCR2_ALLOW_MASK 0x2
#define  HVSYNC_HWCR2_ALLOW_SHIFT 1
#define  HVSYNC_HWCR2_ALLOW_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_ALLOW_MASK) >> HVSYNC_HWCR2_ALLOW_SHIFT)
#define  HVSYNC_HWCR2_ALLOW_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_ALLOW_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_ALLOW_SHIFT))

#define  HVSYNC_HWCR2_ENABLE_MASK 0x1
#define  HVSYNC_HWCR2_ENABLE_SHIFT 0
#define  HVSYNC_HWCR2_ENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR2_ENABLE_MASK) >> HVSYNC_HWCR2_ENABLE_SHIFT)
#define  HVSYNC_HWCR2_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR2_ENABLE_MASK) | (((uint32_t)val) << HVSYNC_HWCR2_ENABLE_SHIFT))

//====================================================================
//Register: HSYNC Watchdog Configuration Register (Instance 4 of 4) (HWCR3)
/** \brief Used to configure the HSYNC Watchdog Timer hardware (Instance 4 of 4)*/
//====================================================================

#define  HVSYNC_HWCR3_RESERVED1_MASK 0xff000000
#define  HVSYNC_HWCR3_RESERVED1_SHIFT 24
#define  HVSYNC_HWCR3_RESERVED1_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_RESERVED1_MASK) >> HVSYNC_HWCR3_RESERVED1_SHIFT)
#define  HVSYNC_HWCR3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_RESERVED1_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_RESERVED1_SHIFT))

#define  HVSYNC_HWCR3_HTIMEOUT_MASK 0xfffff0
#define  HVSYNC_HWCR3_HTIMEOUT_SHIFT 4
#define  HVSYNC_HWCR3_HTIMEOUT_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_HTIMEOUT_MASK) >> HVSYNC_HWCR3_HTIMEOUT_SHIFT)
#define  HVSYNC_HWCR3_HTIMEOUT_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_HTIMEOUT_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_HTIMEOUT_SHIFT))

#define  HVSYNC_HWCR3_RESERVED2_MASK 0x8
#define  HVSYNC_HWCR3_RESERVED2_SHIFT 3
#define  HVSYNC_HWCR3_RESERVED2_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_RESERVED2_MASK) >> HVSYNC_HWCR3_RESERVED2_SHIFT)
#define  HVSYNC_HWCR3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_RESERVED2_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_RESERVED2_SHIFT))

#define  HVSYNC_HWCR3_FILTERFB_MASK 0x4
#define  HVSYNC_HWCR3_FILTERFB_SHIFT 2
#define  HVSYNC_HWCR3_FILTERFB_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_FILTERFB_MASK) >> HVSYNC_HWCR3_FILTERFB_SHIFT)
#define  HVSYNC_HWCR3_FILTERFB_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_FILTERFB_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_FILTERFB_SHIFT))

#define  HVSYNC_HWCR3_ALLOW_MASK 0x2
#define  HVSYNC_HWCR3_ALLOW_SHIFT 1
#define  HVSYNC_HWCR3_ALLOW_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_ALLOW_MASK) >> HVSYNC_HWCR3_ALLOW_SHIFT)
#define  HVSYNC_HWCR3_ALLOW_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_ALLOW_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_ALLOW_SHIFT))

#define  HVSYNC_HWCR3_ENABLE_MASK 0x1
#define  HVSYNC_HWCR3_ENABLE_SHIFT 0
#define  HVSYNC_HWCR3_ENABLE_MASK_SHIFT(reg) (((reg) & HVSYNC_HWCR3_ENABLE_MASK) >> HVSYNC_HWCR3_ENABLE_SHIFT)
#define  HVSYNC_HWCR3_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HVSYNC_HWCR3_ENABLE_MASK) | (((uint32_t)val) << HVSYNC_HWCR3_ENABLE_SHIFT))

//====================================================================
//
//Register File: MVDO Top registers (MVDO_top)
//
//====================================================================

//====================================================================
//Register: MVDO Interrupt Status Register (MVDOInt)
/** \brief Contains the status of current MVDO interrupts*/
//====================================================================

#define  MVDO_TOP_MVDOINT_RESERVED1_MASK 0xfffffe00
#define  MVDO_TOP_MVDOINT_RESERVED1_SHIFT 9
#define  MVDO_TOP_MVDOINT_RESERVED1_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOINT_RESERVED1_MASK) >> MVDO_TOP_MVDOINT_RESERVED1_SHIFT)
#define  MVDO_TOP_MVDOINT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOINT_RESERVED1_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOINT_RESERVED1_SHIFT))

#define  MVDO_TOP_MVDOINT_HVSYNCINT_MASK 0x100
#define  MVDO_TOP_MVDOINT_HVSYNCINT_SHIFT 8
#define  MVDO_TOP_MVDOINT_HVSYNCINT_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOINT_HVSYNCINT_MASK) >> MVDO_TOP_MVDOINT_HVSYNCINT_SHIFT)
#define  MVDO_TOP_MVDOINT_HVSYNCINT_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOINT_HVSYNCINT_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOINT_HVSYNCINT_SHIFT))

#define  MVDO_TOP_MVDOINT_VDOINT_MASK 0xff
#define  MVDO_TOP_MVDOINT_VDOINT_SHIFT 0
#define  MVDO_TOP_MVDOINT_VDOINT_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOINT_VDOINT_MASK) >> MVDO_TOP_MVDOINT_VDOINT_SHIFT)
#define  MVDO_TOP_MVDOINT_VDOINT_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOINT_VDOINT_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOINT_VDOINT_SHIFT))

//====================================================================
//Register: MVDO Parameter Register (MVDOPR)
/** \brief Contains the parameter settings for this instantiation of MVDO*/
//====================================================================

#define  MVDO_TOP_MVDOPR_RESERVED1_MASK 0xfff80000
#define  MVDO_TOP_MVDOPR_RESERVED1_SHIFT 19
#define  MVDO_TOP_MVDOPR_RESERVED1_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_RESERVED1_MASK) >> MVDO_TOP_MVDOPR_RESERVED1_SHIFT)
#define  MVDO_TOP_MVDOPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_RESERVED1_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_RESERVED1_SHIFT))

#define  MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_MASK 0x70000
#define  MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_SHIFT 16
#define  MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_MASK) >> MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_SHIFT)
#define  MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_TOPQUEUEDEPTH_SHIFT))

#define  MVDO_TOP_MVDOPR_HSYNCINSERT_MASK 0x8000
#define  MVDO_TOP_MVDOPR_HSYNCINSERT_SHIFT 15
#define  MVDO_TOP_MVDOPR_HSYNCINSERT_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_HSYNCINSERT_MASK) >> MVDO_TOP_MVDOPR_HSYNCINSERT_SHIFT)
#define  MVDO_TOP_MVDOPR_HSYNCINSERT_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_HSYNCINSERT_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_HSYNCINSERT_SHIFT))

#define  MVDO_TOP_MVDOPR_EDGETIMER_MASK 0x4000
#define  MVDO_TOP_MVDOPR_EDGETIMER_SHIFT 14
#define  MVDO_TOP_MVDOPR_EDGETIMER_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_EDGETIMER_MASK) >> MVDO_TOP_MVDOPR_EDGETIMER_SHIFT)
#define  MVDO_TOP_MVDOPR_EDGETIMER_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_EDGETIMER_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_EDGETIMER_SHIFT))

#define  MVDO_TOP_MVDOPR_NUMMIRROR_MASK 0x3000
#define  MVDO_TOP_MVDOPR_NUMMIRROR_SHIFT 12
#define  MVDO_TOP_MVDOPR_NUMMIRROR_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_NUMMIRROR_MASK) >> MVDO_TOP_MVDOPR_NUMMIRROR_SHIFT)
#define  MVDO_TOP_MVDOPR_NUMMIRROR_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_NUMMIRROR_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_NUMMIRROR_SHIFT))

#define  MVDO_TOP_MVDOPR_MAXFACET_MASK 0xf00
#define  MVDO_TOP_MVDOPR_MAXFACET_SHIFT 8
#define  MVDO_TOP_MVDOPR_MAXFACET_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_MAXFACET_MASK) >> MVDO_TOP_MVDOPR_MAXFACET_SHIFT)
#define  MVDO_TOP_MVDOPR_MAXFACET_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_MAXFACET_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_MAXFACET_SHIFT))

#define  MVDO_TOP_MVDOPR_RESERVED2_MASK 0x80
#define  MVDO_TOP_MVDOPR_RESERVED2_SHIFT 7
#define  MVDO_TOP_MVDOPR_RESERVED2_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_RESERVED2_MASK) >> MVDO_TOP_MVDOPR_RESERVED2_SHIFT)
#define  MVDO_TOP_MVDOPR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_RESERVED2_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_RESERVED2_SHIFT))

#define  MVDO_TOP_MVDOPR_NUMHSYNCIN_MASK 0x70
#define  MVDO_TOP_MVDOPR_NUMHSYNCIN_SHIFT 4
#define  MVDO_TOP_MVDOPR_NUMHSYNCIN_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_NUMHSYNCIN_MASK) >> MVDO_TOP_MVDOPR_NUMHSYNCIN_SHIFT)
#define  MVDO_TOP_MVDOPR_NUMHSYNCIN_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_NUMHSYNCIN_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_NUMHSYNCIN_SHIFT))

#define  MVDO_TOP_MVDOPR_NUMCHAN_MASK 0xf
#define  MVDO_TOP_MVDOPR_NUMCHAN_SHIFT 0
#define  MVDO_TOP_MVDOPR_NUMCHAN_MASK_SHIFT(reg) (((reg) & MVDO_TOP_MVDOPR_NUMCHAN_MASK) >> MVDO_TOP_MVDOPR_NUMCHAN_SHIFT)
#define  MVDO_TOP_MVDOPR_NUMCHAN_REPLACE_VAL(reg,val) (((reg) & ~MVDO_TOP_MVDOPR_NUMCHAN_MASK) | (((uint32_t)val) << MVDO_TOP_MVDOPR_NUMCHAN_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 1 of 8) (SVDO0)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO0_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO0_SCFG_RESERVED1_SHIFT 30
#define  SVDO0_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED1_MASK) >> SVDO0_SCFG_RESERVED1_SHIFT)
#define  SVDO0_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED1_SHIFT))

#define  SVDO0_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO0_SCFG_BURSTSZ_SHIFT 28
#define  SVDO0_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_BURSTSZ_MASK) >> SVDO0_SCFG_BURSTSZ_SHIFT)
#define  SVDO0_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO0_SCFG_BURSTSZ_SHIFT))

#define  SVDO0_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO0_SCFG_RESERVED2_SHIFT 26
#define  SVDO0_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED2_MASK) >> SVDO0_SCFG_RESERVED2_SHIFT)
#define  SVDO0_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED2_SHIFT))

#define  SVDO0_SCFG_SERP_MASK 0x2000000
#define  SVDO0_SCFG_SERP_SHIFT 25
#define  SVDO0_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_SERP_MASK) >> SVDO0_SCFG_SERP_SHIFT)
#define  SVDO0_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO0_SCFG_SERP_SHIFT))

#define  SVDO0_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO0_SCFG_BOT2TOP_SHIFT 24
#define  SVDO0_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_BOT2TOP_MASK) >> SVDO0_SCFG_BOT2TOP_SHIFT)
#define  SVDO0_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO0_SCFG_BOT2TOP_SHIFT))

#define  SVDO0_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO0_SCFG_RESERVED3_SHIFT 22
#define  SVDO0_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED3_MASK) >> SVDO0_SCFG_RESERVED3_SHIFT)
#define  SVDO0_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED3_SHIFT))

#define  SVDO0_SCFG_BPP_MASK 0x300000
#define  SVDO0_SCFG_BPP_SHIFT 20
#define  SVDO0_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_BPP_MASK) >> SVDO0_SCFG_BPP_SHIFT)
#define  SVDO0_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO0_SCFG_BPP_SHIFT))

#define  SVDO0_SCFG_RESERVED4_MASK 0x80000
#define  SVDO0_SCFG_RESERVED4_SHIFT 19
#define  SVDO0_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED4_MASK) >> SVDO0_SCFG_RESERVED4_SHIFT)
#define  SVDO0_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED4_SHIFT))

#define  SVDO0_SCFG_LINESKIP_MASK 0x70000
#define  SVDO0_SCFG_LINESKIP_SHIFT 16
#define  SVDO0_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_LINESKIP_MASK) >> SVDO0_SCFG_LINESKIP_SHIFT)
#define  SVDO0_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO0_SCFG_LINESKIP_SHIFT))

#define  SVDO0_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO0_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO0_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_PIXDOUBLE_MASK) >> SVDO0_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO0_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO0_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO0_SCFG_PCODEREF_MASK 0x4000
#define  SVDO0_SCFG_PCODEREF_SHIFT 14
#define  SVDO0_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_PCODEREF_MASK) >> SVDO0_SCFG_PCODEREF_SHIFT)
#define  SVDO0_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO0_SCFG_PCODEREF_SHIFT))

#define  SVDO0_SCFG_INITJUST_MASK 0x2000
#define  SVDO0_SCFG_INITJUST_SHIFT 13
#define  SVDO0_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_INITJUST_MASK) >> SVDO0_SCFG_INITJUST_SHIFT)
#define  SVDO0_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO0_SCFG_INITJUST_SHIFT))

#define  SVDO0_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO0_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO0_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_FORCEDJUST_MASK) >> SVDO0_SCFG_FORCEDJUST_SHIFT)
#define  SVDO0_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO0_SCFG_FORCEDJUST_SHIFT))

#define  SVDO0_SCFG_RESERVED5_MASK 0x800
#define  SVDO0_SCFG_RESERVED5_SHIFT 11
#define  SVDO0_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED5_MASK) >> SVDO0_SCFG_RESERVED5_SHIFT)
#define  SVDO0_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED5_SHIFT))

#define  SVDO0_SCFG_DATASOURCE_MASK 0x400
#define  SVDO0_SCFG_DATASOURCE_SHIFT 10
#define  SVDO0_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_DATASOURCE_MASK) >> SVDO0_SCFG_DATASOURCE_SHIFT)
#define  SVDO0_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO0_SCFG_DATASOURCE_SHIFT))

#define  SVDO0_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO0_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO0_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_TOGGLEJUST_MASK) >> SVDO0_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO0_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO0_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO0_SCFG_RESERVED6_MASK 0xc0
#define  SVDO0_SCFG_RESERVED6_SHIFT 6
#define  SVDO0_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED6_MASK) >> SVDO0_SCFG_RESERVED6_SHIFT)
#define  SVDO0_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED6_SHIFT))

#define  SVDO0_SCFG_LINEREPL_MASK 0x30
#define  SVDO0_SCFG_LINEREPL_SHIFT 4
#define  SVDO0_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_LINEREPL_MASK) >> SVDO0_SCFG_LINEREPL_SHIFT)
#define  SVDO0_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO0_SCFG_LINEREPL_SHIFT))

#define  SVDO0_SCFG_RESERVED7_MASK 0xc
#define  SVDO0_SCFG_RESERVED7_SHIFT 2
#define  SVDO0_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESERVED7_MASK) >> SVDO0_SCFG_RESERVED7_SHIFT)
#define  SVDO0_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESERVED7_SHIFT))

#define  SVDO0_SCFG_RESETDMA_MASK 0x2
#define  SVDO0_SCFG_RESETDMA_SHIFT 1
#define  SVDO0_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_RESETDMA_MASK) >> SVDO0_SCFG_RESETDMA_SHIFT)
#define  SVDO0_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO0_SCFG_RESETDMA_SHIFT))

#define  SVDO0_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO0_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO0_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO0_SCFG_SVDOENABLE_MASK) >> SVDO0_SCFG_SVDOENABLE_SHIFT)
#define  SVDO0_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO0_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO0_STAT_SKIPST_MASK 0xe0000000
#define  SVDO0_STAT_SKIPST_SHIFT 29
#define  SVDO0_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_SKIPST_MASK) >> SVDO0_STAT_SKIPST_SHIFT)
#define  SVDO0_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO0_STAT_SKIPST_SHIFT))

#define  SVDO0_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO0_STAT_PIXPIPEST_SHIFT 26
#define  SVDO0_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_PIXPIPEST_MASK) >> SVDO0_STAT_PIXPIPEST_SHIFT)
#define  SVDO0_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO0_STAT_PIXPIPEST_SHIFT))

#define  SVDO0_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO0_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO0_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_DATAFIFOENT_MASK) >> SVDO0_STAT_DATAFIFOENT_SHIFT)
#define  SVDO0_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO0_STAT_DATAFIFOENT_SHIFT))

#define  SVDO0_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO0_STAT_REFIFOENT_SHIFT 16
#define  SVDO0_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_REFIFOENT_MASK) >> SVDO0_STAT_REFIFOENT_SHIFT)
#define  SVDO0_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO0_STAT_REFIFOENT_SHIFT))

#define  SVDO0_STAT_ADDRST_MASK 0xc000
#define  SVDO0_STAT_ADDRST_SHIFT 14
#define  SVDO0_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_ADDRST_MASK) >> SVDO0_STAT_ADDRST_SHIFT)
#define  SVDO0_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO0_STAT_ADDRST_SHIFT))

#define  SVDO0_STAT_DATAST_MASK 0x3800
#define  SVDO0_STAT_DATAST_SHIFT 11
#define  SVDO0_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_DATAST_MASK) >> SVDO0_STAT_DATAST_SHIFT)
#define  SVDO0_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO0_STAT_DATAST_SHIFT))

#define  SVDO0_STAT_CMDST_MASK 0x700
#define  SVDO0_STAT_CMDST_SHIFT 8
#define  SVDO0_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_CMDST_MASK) >> SVDO0_STAT_CMDST_SHIFT)
#define  SVDO0_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO0_STAT_CMDST_SHIFT))

#define  SVDO0_STAT_DMAOWN_MASK 0x80
#define  SVDO0_STAT_DMAOWN_SHIFT 7
#define  SVDO0_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_DMAOWN_MASK) >> SVDO0_STAT_DMAOWN_SHIFT)
#define  SVDO0_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO0_STAT_DMAOWN_SHIFT))

#define  SVDO0_STAT_DMAACTIVE_MASK 0x40
#define  SVDO0_STAT_DMAACTIVE_SHIFT 6
#define  SVDO0_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_DMAACTIVE_MASK) >> SVDO0_STAT_DMAACTIVE_SHIFT)
#define  SVDO0_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO0_STAT_DMAACTIVE_SHIFT))

#define  SVDO0_STAT_LASTBUFFER_MASK 0x20
#define  SVDO0_STAT_LASTBUFFER_SHIFT 5
#define  SVDO0_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_LASTBUFFER_MASK) >> SVDO0_STAT_LASTBUFFER_SHIFT)
#define  SVDO0_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO0_STAT_LASTBUFFER_SHIFT))

#define  SVDO0_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO0_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO0_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_FIRSTBUFFER_MASK) >> SVDO0_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO0_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO0_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO0_STAT_RTOL_MASK 0x8
#define  SVDO0_STAT_RTOL_SHIFT 3
#define  SVDO0_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_RTOL_MASK) >> SVDO0_STAT_RTOL_SHIFT)
#define  SVDO0_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO0_STAT_RTOL_SHIFT))

#define  SVDO0_STAT_BLANK_MASK 0x4
#define  SVDO0_STAT_BLANK_SHIFT 2
#define  SVDO0_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_BLANK_MASK) >> SVDO0_STAT_BLANK_SHIFT)
#define  SVDO0_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO0_STAT_BLANK_SHIFT))

#define  SVDO0_STAT_INTONFINISH_MASK 0x2
#define  SVDO0_STAT_INTONFINISH_SHIFT 1
#define  SVDO0_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_INTONFINISH_MASK) >> SVDO0_STAT_INTONFINISH_SHIFT)
#define  SVDO0_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO0_STAT_INTONFINISH_SHIFT))

#define  SVDO0_STAT_STOPONFINISH_MASK 0x1
#define  SVDO0_STAT_STOPONFINISH_SHIFT 0
#define  SVDO0_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO0_STAT_STOPONFINISH_MASK) >> SVDO0_STAT_STOPONFINISH_SHIFT)
#define  SVDO0_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO0_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO0_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO0_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO0_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO0_VDWR_WRDESCADDR_MASK) >> SVDO0_VDWR_WRDESCADDR_SHIFT)
#define  SVDO0_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO0_VDWR_WRDESCADDR_SHIFT))

#define  SVDO0_VDWR_RESERVED1_MASK 0xf
#define  SVDO0_VDWR_RESERVED1_SHIFT 0
#define  SVDO0_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VDWR_RESERVED1_MASK) >> SVDO0_VDWR_RESERVED1_SHIFT)
#define  SVDO0_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO0_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO0_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO0_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO0_VDAR_CURRDESCADDR_MASK) >> SVDO0_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO0_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO0_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO0_VDAR_RESERVED1_MASK 0xf
#define  SVDO0_VDAR_RESERVED1_SHIFT 0
#define  SVDO0_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VDAR_RESERVED1_MASK) >> SVDO0_VDAR_RESERVED1_SHIFT)
#define  SVDO0_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO0_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO0_VDBR_RESERVED1_SHIFT 16
#define  SVDO0_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VDBR_RESERVED1_MASK) >> SVDO0_VDBR_RESERVED1_SHIFT)
#define  SVDO0_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VDBR_RESERVED1_SHIFT))

#define  SVDO0_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO0_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO0_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO0_VDBR_BYTESLEFT_MASK) >> SVDO0_VDBR_BYTESLEFT_SHIFT)
#define  SVDO0_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO0_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO0_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO0_VDLR_RESERVED1_SHIFT 14
#define  SVDO0_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VDLR_RESERVED1_MASK) >> SVDO0_VDLR_RESERVED1_SHIFT)
#define  SVDO0_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VDLR_RESERVED1_SHIFT))

#define  SVDO0_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO0_VDLR_LINESLEFT_SHIFT 0
#define  SVDO0_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO0_VDLR_LINESLEFT_MASK) >> SVDO0_VDLR_LINESLEFT_SHIFT)
#define  SVDO0_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO0_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO0_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO0_VDNR_DESCADDR_SHIFT 4
#define  SVDO0_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO0_VDNR_DESCADDR_MASK) >> SVDO0_VDNR_DESCADDR_SHIFT)
#define  SVDO0_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO0_VDNR_DESCADDR_SHIFT))

#define  SVDO0_VDNR_RESERVED1_MASK 0xf
#define  SVDO0_VDNR_RESERVED1_SHIFT 0
#define  SVDO0_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VDNR_RESERVED1_MASK) >> SVDO0_VDNR_RESERVED1_SHIFT)
#define  SVDO0_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO0_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO0_VIER_RESERVED1_SHIFT 8
#define  SVDO0_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_RESERVED1_MASK) >> SVDO0_VIER_RESERVED1_SHIFT)
#define  SVDO0_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VIER_RESERVED1_SHIFT))

#define  SVDO0_VIER_TOPERRINT_MASK 0x80
#define  SVDO0_VIER_TOPERRINT_SHIFT 7
#define  SVDO0_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_TOPERRINT_MASK) >> SVDO0_VIER_TOPERRINT_SHIFT)
#define  SVDO0_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO0_VIER_TOPERRINT_SHIFT))

#define  SVDO0_VIER_BOTERRINT_MASK 0x40
#define  SVDO0_VIER_BOTERRINT_SHIFT 6
#define  SVDO0_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_BOTERRINT_MASK) >> SVDO0_VIER_BOTERRINT_SHIFT)
#define  SVDO0_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO0_VIER_BOTERRINT_SHIFT))

#define  SVDO0_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO0_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO0_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_HSYNCERRINT_MASK) >> SVDO0_VIER_HSYNCERRINT_SHIFT)
#define  SVDO0_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO0_VIER_HSYNCERRINT_SHIFT))

#define  SVDO0_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO0_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO0_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_BENDERUNDERRUNINT_MASK) >> SVDO0_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO0_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO0_VIER_EOIINT_MASK 0x8
#define  SVDO0_VIER_EOIINT_SHIFT 3
#define  SVDO0_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_EOIINT_MASK) >> SVDO0_VIER_EOIINT_SHIFT)
#define  SVDO0_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO0_VIER_EOIINT_SHIFT))

#define  SVDO0_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO0_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO0_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_PTUNDERRUNINT_MASK) >> SVDO0_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO0_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO0_VIER_DESCINT_MASK 0x2
#define  SVDO0_VIER_DESCINT_SHIFT 1
#define  SVDO0_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_DESCINT_MASK) >> SVDO0_VIER_DESCINT_SHIFT)
#define  SVDO0_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO0_VIER_DESCINT_SHIFT))

#define  SVDO0_VIER_OWNINT_MASK 0x1
#define  SVDO0_VIER_OWNINT_SHIFT 0
#define  SVDO0_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIER_OWNINT_MASK) >> SVDO0_VIER_OWNINT_SHIFT)
#define  SVDO0_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO0_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO0_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO0_VIPR_RESERVED1_SHIFT 8
#define  SVDO0_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_RESERVED1_MASK) >> SVDO0_VIPR_RESERVED1_SHIFT)
#define  SVDO0_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VIPR_RESERVED1_SHIFT))

#define  SVDO0_VIPR_TOPERRINT_MASK 0x80
#define  SVDO0_VIPR_TOPERRINT_SHIFT 7
#define  SVDO0_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_TOPERRINT_MASK) >> SVDO0_VIPR_TOPERRINT_SHIFT)
#define  SVDO0_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_TOPERRINT_SHIFT))

#define  SVDO0_VIPR_BOTERRINT_MASK 0x40
#define  SVDO0_VIPR_BOTERRINT_SHIFT 6
#define  SVDO0_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_BOTERRINT_MASK) >> SVDO0_VIPR_BOTERRINT_SHIFT)
#define  SVDO0_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_BOTERRINT_SHIFT))

#define  SVDO0_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO0_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO0_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_HSYNCERRINT_MASK) >> SVDO0_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO0_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO0_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO0_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO0_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO0_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO0_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO0_VIPR_EOIINT_MASK 0x8
#define  SVDO0_VIPR_EOIINT_SHIFT 3
#define  SVDO0_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_EOIINT_MASK) >> SVDO0_VIPR_EOIINT_SHIFT)
#define  SVDO0_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_EOIINT_SHIFT))

#define  SVDO0_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO0_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO0_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_PTUNDERRUNINT_MASK) >> SVDO0_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO0_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO0_VIPR_DESCINT_MASK 0x2
#define  SVDO0_VIPR_DESCINT_SHIFT 1
#define  SVDO0_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_DESCINT_MASK) >> SVDO0_VIPR_DESCINT_SHIFT)
#define  SVDO0_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_DESCINT_SHIFT))

#define  SVDO0_VIPR_OWNINT_MASK 0x1
#define  SVDO0_VIPR_OWNINT_SHIFT 0
#define  SVDO0_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIPR_OWNINT_MASK) >> SVDO0_VIPR_OWNINT_SHIFT)
#define  SVDO0_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO0_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO0_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO0_VIAR_RESERVED1_SHIFT 8
#define  SVDO0_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_RESERVED1_MASK) >> SVDO0_VIAR_RESERVED1_SHIFT)
#define  SVDO0_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VIAR_RESERVED1_SHIFT))

#define  SVDO0_VIAR_TOPERRINT_MASK 0x80
#define  SVDO0_VIAR_TOPERRINT_SHIFT 7
#define  SVDO0_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_TOPERRINT_MASK) >> SVDO0_VIAR_TOPERRINT_SHIFT)
#define  SVDO0_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_TOPERRINT_SHIFT))

#define  SVDO0_VIAR_BOTERRINT_MASK 0x40
#define  SVDO0_VIAR_BOTERRINT_SHIFT 6
#define  SVDO0_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_BOTERRINT_MASK) >> SVDO0_VIAR_BOTERRINT_SHIFT)
#define  SVDO0_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_BOTERRINT_SHIFT))

#define  SVDO0_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO0_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO0_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_HSYNCERRINT_MASK) >> SVDO0_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO0_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO0_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO0_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO0_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO0_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO0_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO0_VIAR_EOIINT_MASK 0x8
#define  SVDO0_VIAR_EOIINT_SHIFT 3
#define  SVDO0_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_EOIINT_MASK) >> SVDO0_VIAR_EOIINT_SHIFT)
#define  SVDO0_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_EOIINT_SHIFT))

#define  SVDO0_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO0_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO0_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_PTUNDERRUNINT_MASK) >> SVDO0_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO0_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO0_VIAR_DESCINT_MASK 0x2
#define  SVDO0_VIAR_DESCINT_SHIFT 1
#define  SVDO0_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_DESCINT_MASK) >> SVDO0_VIAR_DESCINT_SHIFT)
#define  SVDO0_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_DESCINT_SHIFT))

#define  SVDO0_VIAR_OWNINT_MASK 0x1
#define  SVDO0_VIAR_OWNINT_SHIFT 0
#define  SVDO0_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIAR_OWNINT_MASK) >> SVDO0_VIAR_OWNINT_SHIFT)
#define  SVDO0_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO0_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO0_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO0_VIFR_RESERVED1_SHIFT 8
#define  SVDO0_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_RESERVED1_MASK) >> SVDO0_VIFR_RESERVED1_SHIFT)
#define  SVDO0_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VIFR_RESERVED1_SHIFT))

#define  SVDO0_VIFR_TOPERRINT_MASK 0x80
#define  SVDO0_VIFR_TOPERRINT_SHIFT 7
#define  SVDO0_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_TOPERRINT_MASK) >> SVDO0_VIFR_TOPERRINT_SHIFT)
#define  SVDO0_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_TOPERRINT_SHIFT))

#define  SVDO0_VIFR_BOTERRINT_MASK 0x40
#define  SVDO0_VIFR_BOTERRINT_SHIFT 6
#define  SVDO0_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_BOTERRINT_MASK) >> SVDO0_VIFR_BOTERRINT_SHIFT)
#define  SVDO0_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_BOTERRINT_SHIFT))

#define  SVDO0_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO0_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO0_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_HSYNCERRINT_MASK) >> SVDO0_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO0_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO0_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO0_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO0_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO0_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO0_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO0_VIFR_EOIINT_MASK 0x8
#define  SVDO0_VIFR_EOIINT_SHIFT 3
#define  SVDO0_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_EOIINT_MASK) >> SVDO0_VIFR_EOIINT_SHIFT)
#define  SVDO0_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_EOIINT_SHIFT))

#define  SVDO0_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO0_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO0_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_PTUNDERRUNINT_MASK) >> SVDO0_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO0_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO0_VIFR_DESCINT_MASK 0x2
#define  SVDO0_VIFR_DESCINT_SHIFT 1
#define  SVDO0_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_DESCINT_MASK) >> SVDO0_VIFR_DESCINT_SHIFT)
#define  SVDO0_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_DESCINT_SHIFT))

#define  SVDO0_VIFR_OWNINT_MASK 0x1
#define  SVDO0_VIFR_OWNINT_SHIFT 0
#define  SVDO0_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO0_VIFR_OWNINT_MASK) >> SVDO0_VIFR_OWNINT_SHIFT)
#define  SVDO0_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO0_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO0_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO0_VLWR_RESERVED1_SHIFT 16
#define  SVDO0_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VLWR_RESERVED1_MASK) >> SVDO0_VLWR_RESERVED1_SHIFT)
#define  SVDO0_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VLWR_RESERVED1_SHIFT))

#define  SVDO0_VLWR_LINEWID_MASK 0xfffc
#define  SVDO0_VLWR_LINEWID_SHIFT 2
#define  SVDO0_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO0_VLWR_LINEWID_MASK) >> SVDO0_VLWR_LINEWID_SHIFT)
#define  SVDO0_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO0_VLWR_LINEWID_SHIFT))

#define  SVDO0_VLWR_RESERVED2_MASK 0x3
#define  SVDO0_VLWR_RESERVED2_SHIFT 0
#define  SVDO0_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO0_VLWR_RESERVED2_MASK) >> SVDO0_VLWR_RESERVED2_SHIFT)
#define  SVDO0_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO0_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO0_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO0_VTCA_TCACCUM_SHIFT 0
#define  SVDO0_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO0_VTCA_TCACCUM_MASK) >> SVDO0_VTCA_TCACCUM_SHIFT)
#define  SVDO0_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO0_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO0_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO0_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO0_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO0_VTCP_TCNONBLANKPIX_MASK) >> SVDO0_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO0_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO0_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO0_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO0_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO0_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO0_VSAR_SOURCEADDR_MASK) >> SVDO0_VSAR_SOURCEADDR_SHIFT)
#define  SVDO0_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO0_VSAR_SOURCEADDR_SHIFT))

#define  SVDO0_VSAR_RESERVED1_MASK 0x3
#define  SVDO0_VSAR_RESERVED1_SHIFT 0
#define  SVDO0_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VSAR_RESERVED1_MASK) >> SVDO0_VSAR_RESERVED1_SHIFT)
#define  SVDO0_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO0_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO0_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO0_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO0_VPKR_LASTLINEPIXVAL_MASK) >> SVDO0_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO0_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO0_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO0_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO0_VPKR_RESERVED1_SHIFT 24
#define  SVDO0_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO0_VPKR_RESERVED1_MASK) >> SVDO0_VPKR_RESERVED1_SHIFT)
#define  SVDO0_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO0_VPKR_RESERVED1_SHIFT))

#define  SVDO0_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO0_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO0_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO0_VPKR_ENDSKIPLEN_MASK) >> SVDO0_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO0_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO0_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO0_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO0_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO0_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO0_VPKR_STARTSKIPLEN_MASK) >> SVDO0_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO0_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO0_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO0_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST0_JUSTLUT_SHIFT 0
#define  SVDO0_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST0_JUSTLUT_MASK) >> SVDO0_JUST0_JUSTLUT_SHIFT)
#define  SVDO0_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO0_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST1_JUSTLUT_SHIFT 0
#define  SVDO0_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST1_JUSTLUT_MASK) >> SVDO0_JUST1_JUSTLUT_SHIFT)
#define  SVDO0_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO0_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST2_JUSTLUT_SHIFT 0
#define  SVDO0_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST2_JUSTLUT_MASK) >> SVDO0_JUST2_JUSTLUT_SHIFT)
#define  SVDO0_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO0_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST3_JUSTLUT_SHIFT 0
#define  SVDO0_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST3_JUSTLUT_MASK) >> SVDO0_JUST3_JUSTLUT_SHIFT)
#define  SVDO0_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO0_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST4_JUSTLUT_SHIFT 0
#define  SVDO0_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST4_JUSTLUT_MASK) >> SVDO0_JUST4_JUSTLUT_SHIFT)
#define  SVDO0_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO0_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST5_JUSTLUT_SHIFT 0
#define  SVDO0_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST5_JUSTLUT_MASK) >> SVDO0_JUST5_JUSTLUT_SHIFT)
#define  SVDO0_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO0_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST6_JUSTLUT_SHIFT 0
#define  SVDO0_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST6_JUSTLUT_MASK) >> SVDO0_JUST6_JUSTLUT_SHIFT)
#define  SVDO0_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO0_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST7_JUSTLUT_SHIFT 0
#define  SVDO0_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST7_JUSTLUT_MASK) >> SVDO0_JUST7_JUSTLUT_SHIFT)
#define  SVDO0_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO0_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST8_JUSTLUT_SHIFT 0
#define  SVDO0_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST8_JUSTLUT_MASK) >> SVDO0_JUST8_JUSTLUT_SHIFT)
#define  SVDO0_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO0_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST9_JUSTLUT_SHIFT 0
#define  SVDO0_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST9_JUSTLUT_MASK) >> SVDO0_JUST9_JUSTLUT_SHIFT)
#define  SVDO0_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO0_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST10_JUSTLUT_SHIFT 0
#define  SVDO0_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST10_JUSTLUT_MASK) >> SVDO0_JUST10_JUSTLUT_SHIFT)
#define  SVDO0_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO0_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST11_JUSTLUT_SHIFT 0
#define  SVDO0_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST11_JUSTLUT_MASK) >> SVDO0_JUST11_JUSTLUT_SHIFT)
#define  SVDO0_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO0_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST12_JUSTLUT_SHIFT 0
#define  SVDO0_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST12_JUSTLUT_MASK) >> SVDO0_JUST12_JUSTLUT_SHIFT)
#define  SVDO0_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO0_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST13_JUSTLUT_SHIFT 0
#define  SVDO0_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST13_JUSTLUT_MASK) >> SVDO0_JUST13_JUSTLUT_SHIFT)
#define  SVDO0_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO0_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST14_JUSTLUT_SHIFT 0
#define  SVDO0_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST14_JUSTLUT_MASK) >> SVDO0_JUST14_JUSTLUT_SHIFT)
#define  SVDO0_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO0_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO0_JUST15_JUSTLUT_SHIFT 0
#define  SVDO0_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO0_JUST15_JUSTLUT_MASK) >> SVDO0_JUST15_JUSTLUT_SHIFT)
#define  SVDO0_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO0_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO0_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE0_PCODELUT_SHIFT 0
#define  SVDO0_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE0_PCODELUT_MASK) >> SVDO0_PCODE0_PCODELUT_SHIFT)
#define  SVDO0_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO0_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE1_PCODELUT_SHIFT 0
#define  SVDO0_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE1_PCODELUT_MASK) >> SVDO0_PCODE1_PCODELUT_SHIFT)
#define  SVDO0_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO0_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE2_PCODELUT_SHIFT 0
#define  SVDO0_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE2_PCODELUT_MASK) >> SVDO0_PCODE2_PCODELUT_SHIFT)
#define  SVDO0_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO0_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE3_PCODELUT_SHIFT 0
#define  SVDO0_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE3_PCODELUT_MASK) >> SVDO0_PCODE3_PCODELUT_SHIFT)
#define  SVDO0_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO0_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE4_PCODELUT_SHIFT 0
#define  SVDO0_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE4_PCODELUT_MASK) >> SVDO0_PCODE4_PCODELUT_SHIFT)
#define  SVDO0_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO0_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE5_PCODELUT_SHIFT 0
#define  SVDO0_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE5_PCODELUT_MASK) >> SVDO0_PCODE5_PCODELUT_SHIFT)
#define  SVDO0_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO0_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE6_PCODELUT_SHIFT 0
#define  SVDO0_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE6_PCODELUT_MASK) >> SVDO0_PCODE6_PCODELUT_SHIFT)
#define  SVDO0_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO0_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE7_PCODELUT_SHIFT 0
#define  SVDO0_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE7_PCODELUT_MASK) >> SVDO0_PCODE7_PCODELUT_SHIFT)
#define  SVDO0_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO0_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE8_PCODELUT_SHIFT 0
#define  SVDO0_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE8_PCODELUT_MASK) >> SVDO0_PCODE8_PCODELUT_SHIFT)
#define  SVDO0_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO0_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE9_PCODELUT_SHIFT 0
#define  SVDO0_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE9_PCODELUT_MASK) >> SVDO0_PCODE9_PCODELUT_SHIFT)
#define  SVDO0_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO0_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE10_PCODELUT_SHIFT 0
#define  SVDO0_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE10_PCODELUT_MASK) >> SVDO0_PCODE10_PCODELUT_SHIFT)
#define  SVDO0_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO0_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE11_PCODELUT_SHIFT 0
#define  SVDO0_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE11_PCODELUT_MASK) >> SVDO0_PCODE11_PCODELUT_SHIFT)
#define  SVDO0_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO0_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE12_PCODELUT_SHIFT 0
#define  SVDO0_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE12_PCODELUT_MASK) >> SVDO0_PCODE12_PCODELUT_SHIFT)
#define  SVDO0_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO0_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE13_PCODELUT_SHIFT 0
#define  SVDO0_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE13_PCODELUT_MASK) >> SVDO0_PCODE13_PCODELUT_SHIFT)
#define  SVDO0_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO0_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE14_PCODELUT_SHIFT 0
#define  SVDO0_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE14_PCODELUT_MASK) >> SVDO0_PCODE14_PCODELUT_SHIFT)
#define  SVDO0_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO0_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO0_PCODE15_PCODELUT_SHIFT 0
#define  SVDO0_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO0_PCODE15_PCODELUT_MASK) >> SVDO0_PCODE15_PCODELUT_SHIFT)
#define  SVDO0_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO0_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO0_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 2 of 8) (SVDO1)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO1_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO1_SCFG_RESERVED1_SHIFT 30
#define  SVDO1_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED1_MASK) >> SVDO1_SCFG_RESERVED1_SHIFT)
#define  SVDO1_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED1_SHIFT))

#define  SVDO1_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO1_SCFG_BURSTSZ_SHIFT 28
#define  SVDO1_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_BURSTSZ_MASK) >> SVDO1_SCFG_BURSTSZ_SHIFT)
#define  SVDO1_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO1_SCFG_BURSTSZ_SHIFT))

#define  SVDO1_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO1_SCFG_RESERVED2_SHIFT 26
#define  SVDO1_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED2_MASK) >> SVDO1_SCFG_RESERVED2_SHIFT)
#define  SVDO1_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED2_SHIFT))

#define  SVDO1_SCFG_SERP_MASK 0x2000000
#define  SVDO1_SCFG_SERP_SHIFT 25
#define  SVDO1_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_SERP_MASK) >> SVDO1_SCFG_SERP_SHIFT)
#define  SVDO1_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO1_SCFG_SERP_SHIFT))

#define  SVDO1_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO1_SCFG_BOT2TOP_SHIFT 24
#define  SVDO1_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_BOT2TOP_MASK) >> SVDO1_SCFG_BOT2TOP_SHIFT)
#define  SVDO1_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO1_SCFG_BOT2TOP_SHIFT))

#define  SVDO1_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO1_SCFG_RESERVED3_SHIFT 22
#define  SVDO1_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED3_MASK) >> SVDO1_SCFG_RESERVED3_SHIFT)
#define  SVDO1_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED3_SHIFT))

#define  SVDO1_SCFG_BPP_MASK 0x300000
#define  SVDO1_SCFG_BPP_SHIFT 20
#define  SVDO1_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_BPP_MASK) >> SVDO1_SCFG_BPP_SHIFT)
#define  SVDO1_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO1_SCFG_BPP_SHIFT))

#define  SVDO1_SCFG_RESERVED4_MASK 0x80000
#define  SVDO1_SCFG_RESERVED4_SHIFT 19
#define  SVDO1_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED4_MASK) >> SVDO1_SCFG_RESERVED4_SHIFT)
#define  SVDO1_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED4_SHIFT))

#define  SVDO1_SCFG_LINESKIP_MASK 0x70000
#define  SVDO1_SCFG_LINESKIP_SHIFT 16
#define  SVDO1_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_LINESKIP_MASK) >> SVDO1_SCFG_LINESKIP_SHIFT)
#define  SVDO1_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO1_SCFG_LINESKIP_SHIFT))

#define  SVDO1_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO1_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO1_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_PIXDOUBLE_MASK) >> SVDO1_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO1_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO1_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO1_SCFG_PCODEREF_MASK 0x4000
#define  SVDO1_SCFG_PCODEREF_SHIFT 14
#define  SVDO1_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_PCODEREF_MASK) >> SVDO1_SCFG_PCODEREF_SHIFT)
#define  SVDO1_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO1_SCFG_PCODEREF_SHIFT))

#define  SVDO1_SCFG_INITJUST_MASK 0x2000
#define  SVDO1_SCFG_INITJUST_SHIFT 13
#define  SVDO1_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_INITJUST_MASK) >> SVDO1_SCFG_INITJUST_SHIFT)
#define  SVDO1_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO1_SCFG_INITJUST_SHIFT))

#define  SVDO1_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO1_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO1_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_FORCEDJUST_MASK) >> SVDO1_SCFG_FORCEDJUST_SHIFT)
#define  SVDO1_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO1_SCFG_FORCEDJUST_SHIFT))

#define  SVDO1_SCFG_RESERVED5_MASK 0x800
#define  SVDO1_SCFG_RESERVED5_SHIFT 11
#define  SVDO1_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED5_MASK) >> SVDO1_SCFG_RESERVED5_SHIFT)
#define  SVDO1_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED5_SHIFT))

#define  SVDO1_SCFG_DATASOURCE_MASK 0x400
#define  SVDO1_SCFG_DATASOURCE_SHIFT 10
#define  SVDO1_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_DATASOURCE_MASK) >> SVDO1_SCFG_DATASOURCE_SHIFT)
#define  SVDO1_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO1_SCFG_DATASOURCE_SHIFT))

#define  SVDO1_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO1_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO1_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_TOGGLEJUST_MASK) >> SVDO1_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO1_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO1_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO1_SCFG_RESERVED6_MASK 0xc0
#define  SVDO1_SCFG_RESERVED6_SHIFT 6
#define  SVDO1_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED6_MASK) >> SVDO1_SCFG_RESERVED6_SHIFT)
#define  SVDO1_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED6_SHIFT))

#define  SVDO1_SCFG_LINEREPL_MASK 0x30
#define  SVDO1_SCFG_LINEREPL_SHIFT 4
#define  SVDO1_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_LINEREPL_MASK) >> SVDO1_SCFG_LINEREPL_SHIFT)
#define  SVDO1_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO1_SCFG_LINEREPL_SHIFT))

#define  SVDO1_SCFG_RESERVED7_MASK 0xc
#define  SVDO1_SCFG_RESERVED7_SHIFT 2
#define  SVDO1_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESERVED7_MASK) >> SVDO1_SCFG_RESERVED7_SHIFT)
#define  SVDO1_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESERVED7_SHIFT))

#define  SVDO1_SCFG_RESETDMA_MASK 0x2
#define  SVDO1_SCFG_RESETDMA_SHIFT 1
#define  SVDO1_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_RESETDMA_MASK) >> SVDO1_SCFG_RESETDMA_SHIFT)
#define  SVDO1_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO1_SCFG_RESETDMA_SHIFT))

#define  SVDO1_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO1_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO1_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO1_SCFG_SVDOENABLE_MASK) >> SVDO1_SCFG_SVDOENABLE_SHIFT)
#define  SVDO1_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO1_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO1_STAT_SKIPST_MASK 0xe0000000
#define  SVDO1_STAT_SKIPST_SHIFT 29
#define  SVDO1_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_SKIPST_MASK) >> SVDO1_STAT_SKIPST_SHIFT)
#define  SVDO1_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO1_STAT_SKIPST_SHIFT))

#define  SVDO1_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO1_STAT_PIXPIPEST_SHIFT 26
#define  SVDO1_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_PIXPIPEST_MASK) >> SVDO1_STAT_PIXPIPEST_SHIFT)
#define  SVDO1_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO1_STAT_PIXPIPEST_SHIFT))

#define  SVDO1_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO1_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO1_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_DATAFIFOENT_MASK) >> SVDO1_STAT_DATAFIFOENT_SHIFT)
#define  SVDO1_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO1_STAT_DATAFIFOENT_SHIFT))

#define  SVDO1_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO1_STAT_REFIFOENT_SHIFT 16
#define  SVDO1_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_REFIFOENT_MASK) >> SVDO1_STAT_REFIFOENT_SHIFT)
#define  SVDO1_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO1_STAT_REFIFOENT_SHIFT))

#define  SVDO1_STAT_ADDRST_MASK 0xc000
#define  SVDO1_STAT_ADDRST_SHIFT 14
#define  SVDO1_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_ADDRST_MASK) >> SVDO1_STAT_ADDRST_SHIFT)
#define  SVDO1_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO1_STAT_ADDRST_SHIFT))

#define  SVDO1_STAT_DATAST_MASK 0x3800
#define  SVDO1_STAT_DATAST_SHIFT 11
#define  SVDO1_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_DATAST_MASK) >> SVDO1_STAT_DATAST_SHIFT)
#define  SVDO1_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO1_STAT_DATAST_SHIFT))

#define  SVDO1_STAT_CMDST_MASK 0x700
#define  SVDO1_STAT_CMDST_SHIFT 8
#define  SVDO1_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_CMDST_MASK) >> SVDO1_STAT_CMDST_SHIFT)
#define  SVDO1_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO1_STAT_CMDST_SHIFT))

#define  SVDO1_STAT_DMAOWN_MASK 0x80
#define  SVDO1_STAT_DMAOWN_SHIFT 7
#define  SVDO1_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_DMAOWN_MASK) >> SVDO1_STAT_DMAOWN_SHIFT)
#define  SVDO1_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO1_STAT_DMAOWN_SHIFT))

#define  SVDO1_STAT_DMAACTIVE_MASK 0x40
#define  SVDO1_STAT_DMAACTIVE_SHIFT 6
#define  SVDO1_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_DMAACTIVE_MASK) >> SVDO1_STAT_DMAACTIVE_SHIFT)
#define  SVDO1_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO1_STAT_DMAACTIVE_SHIFT))

#define  SVDO1_STAT_LASTBUFFER_MASK 0x20
#define  SVDO1_STAT_LASTBUFFER_SHIFT 5
#define  SVDO1_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_LASTBUFFER_MASK) >> SVDO1_STAT_LASTBUFFER_SHIFT)
#define  SVDO1_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO1_STAT_LASTBUFFER_SHIFT))

#define  SVDO1_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO1_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO1_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_FIRSTBUFFER_MASK) >> SVDO1_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO1_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO1_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO1_STAT_RTOL_MASK 0x8
#define  SVDO1_STAT_RTOL_SHIFT 3
#define  SVDO1_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_RTOL_MASK) >> SVDO1_STAT_RTOL_SHIFT)
#define  SVDO1_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO1_STAT_RTOL_SHIFT))

#define  SVDO1_STAT_BLANK_MASK 0x4
#define  SVDO1_STAT_BLANK_SHIFT 2
#define  SVDO1_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_BLANK_MASK) >> SVDO1_STAT_BLANK_SHIFT)
#define  SVDO1_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO1_STAT_BLANK_SHIFT))

#define  SVDO1_STAT_INTONFINISH_MASK 0x2
#define  SVDO1_STAT_INTONFINISH_SHIFT 1
#define  SVDO1_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_INTONFINISH_MASK) >> SVDO1_STAT_INTONFINISH_SHIFT)
#define  SVDO1_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO1_STAT_INTONFINISH_SHIFT))

#define  SVDO1_STAT_STOPONFINISH_MASK 0x1
#define  SVDO1_STAT_STOPONFINISH_SHIFT 0
#define  SVDO1_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO1_STAT_STOPONFINISH_MASK) >> SVDO1_STAT_STOPONFINISH_SHIFT)
#define  SVDO1_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO1_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO1_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO1_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO1_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO1_VDWR_WRDESCADDR_MASK) >> SVDO1_VDWR_WRDESCADDR_SHIFT)
#define  SVDO1_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO1_VDWR_WRDESCADDR_SHIFT))

#define  SVDO1_VDWR_RESERVED1_MASK 0xf
#define  SVDO1_VDWR_RESERVED1_SHIFT 0
#define  SVDO1_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VDWR_RESERVED1_MASK) >> SVDO1_VDWR_RESERVED1_SHIFT)
#define  SVDO1_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO1_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO1_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO1_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO1_VDAR_CURRDESCADDR_MASK) >> SVDO1_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO1_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO1_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO1_VDAR_RESERVED1_MASK 0xf
#define  SVDO1_VDAR_RESERVED1_SHIFT 0
#define  SVDO1_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VDAR_RESERVED1_MASK) >> SVDO1_VDAR_RESERVED1_SHIFT)
#define  SVDO1_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO1_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO1_VDBR_RESERVED1_SHIFT 16
#define  SVDO1_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VDBR_RESERVED1_MASK) >> SVDO1_VDBR_RESERVED1_SHIFT)
#define  SVDO1_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VDBR_RESERVED1_SHIFT))

#define  SVDO1_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO1_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO1_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO1_VDBR_BYTESLEFT_MASK) >> SVDO1_VDBR_BYTESLEFT_SHIFT)
#define  SVDO1_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO1_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO1_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO1_VDLR_RESERVED1_SHIFT 14
#define  SVDO1_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VDLR_RESERVED1_MASK) >> SVDO1_VDLR_RESERVED1_SHIFT)
#define  SVDO1_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VDLR_RESERVED1_SHIFT))

#define  SVDO1_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO1_VDLR_LINESLEFT_SHIFT 0
#define  SVDO1_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO1_VDLR_LINESLEFT_MASK) >> SVDO1_VDLR_LINESLEFT_SHIFT)
#define  SVDO1_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO1_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO1_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO1_VDNR_DESCADDR_SHIFT 4
#define  SVDO1_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO1_VDNR_DESCADDR_MASK) >> SVDO1_VDNR_DESCADDR_SHIFT)
#define  SVDO1_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO1_VDNR_DESCADDR_SHIFT))

#define  SVDO1_VDNR_RESERVED1_MASK 0xf
#define  SVDO1_VDNR_RESERVED1_SHIFT 0
#define  SVDO1_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VDNR_RESERVED1_MASK) >> SVDO1_VDNR_RESERVED1_SHIFT)
#define  SVDO1_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO1_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO1_VIER_RESERVED1_SHIFT 8
#define  SVDO1_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_RESERVED1_MASK) >> SVDO1_VIER_RESERVED1_SHIFT)
#define  SVDO1_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VIER_RESERVED1_SHIFT))

#define  SVDO1_VIER_TOPERRINT_MASK 0x80
#define  SVDO1_VIER_TOPERRINT_SHIFT 7
#define  SVDO1_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_TOPERRINT_MASK) >> SVDO1_VIER_TOPERRINT_SHIFT)
#define  SVDO1_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO1_VIER_TOPERRINT_SHIFT))

#define  SVDO1_VIER_BOTERRINT_MASK 0x40
#define  SVDO1_VIER_BOTERRINT_SHIFT 6
#define  SVDO1_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_BOTERRINT_MASK) >> SVDO1_VIER_BOTERRINT_SHIFT)
#define  SVDO1_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO1_VIER_BOTERRINT_SHIFT))

#define  SVDO1_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO1_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO1_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_HSYNCERRINT_MASK) >> SVDO1_VIER_HSYNCERRINT_SHIFT)
#define  SVDO1_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO1_VIER_HSYNCERRINT_SHIFT))

#define  SVDO1_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO1_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO1_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_BENDERUNDERRUNINT_MASK) >> SVDO1_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO1_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO1_VIER_EOIINT_MASK 0x8
#define  SVDO1_VIER_EOIINT_SHIFT 3
#define  SVDO1_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_EOIINT_MASK) >> SVDO1_VIER_EOIINT_SHIFT)
#define  SVDO1_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO1_VIER_EOIINT_SHIFT))

#define  SVDO1_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO1_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO1_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_PTUNDERRUNINT_MASK) >> SVDO1_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO1_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO1_VIER_DESCINT_MASK 0x2
#define  SVDO1_VIER_DESCINT_SHIFT 1
#define  SVDO1_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_DESCINT_MASK) >> SVDO1_VIER_DESCINT_SHIFT)
#define  SVDO1_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO1_VIER_DESCINT_SHIFT))

#define  SVDO1_VIER_OWNINT_MASK 0x1
#define  SVDO1_VIER_OWNINT_SHIFT 0
#define  SVDO1_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIER_OWNINT_MASK) >> SVDO1_VIER_OWNINT_SHIFT)
#define  SVDO1_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO1_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO1_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO1_VIPR_RESERVED1_SHIFT 8
#define  SVDO1_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_RESERVED1_MASK) >> SVDO1_VIPR_RESERVED1_SHIFT)
#define  SVDO1_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VIPR_RESERVED1_SHIFT))

#define  SVDO1_VIPR_TOPERRINT_MASK 0x80
#define  SVDO1_VIPR_TOPERRINT_SHIFT 7
#define  SVDO1_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_TOPERRINT_MASK) >> SVDO1_VIPR_TOPERRINT_SHIFT)
#define  SVDO1_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_TOPERRINT_SHIFT))

#define  SVDO1_VIPR_BOTERRINT_MASK 0x40
#define  SVDO1_VIPR_BOTERRINT_SHIFT 6
#define  SVDO1_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_BOTERRINT_MASK) >> SVDO1_VIPR_BOTERRINT_SHIFT)
#define  SVDO1_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_BOTERRINT_SHIFT))

#define  SVDO1_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO1_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO1_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_HSYNCERRINT_MASK) >> SVDO1_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO1_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO1_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO1_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO1_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO1_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO1_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO1_VIPR_EOIINT_MASK 0x8
#define  SVDO1_VIPR_EOIINT_SHIFT 3
#define  SVDO1_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_EOIINT_MASK) >> SVDO1_VIPR_EOIINT_SHIFT)
#define  SVDO1_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_EOIINT_SHIFT))

#define  SVDO1_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO1_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO1_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_PTUNDERRUNINT_MASK) >> SVDO1_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO1_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO1_VIPR_DESCINT_MASK 0x2
#define  SVDO1_VIPR_DESCINT_SHIFT 1
#define  SVDO1_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_DESCINT_MASK) >> SVDO1_VIPR_DESCINT_SHIFT)
#define  SVDO1_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_DESCINT_SHIFT))

#define  SVDO1_VIPR_OWNINT_MASK 0x1
#define  SVDO1_VIPR_OWNINT_SHIFT 0
#define  SVDO1_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIPR_OWNINT_MASK) >> SVDO1_VIPR_OWNINT_SHIFT)
#define  SVDO1_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO1_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO1_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO1_VIAR_RESERVED1_SHIFT 8
#define  SVDO1_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_RESERVED1_MASK) >> SVDO1_VIAR_RESERVED1_SHIFT)
#define  SVDO1_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VIAR_RESERVED1_SHIFT))

#define  SVDO1_VIAR_TOPERRINT_MASK 0x80
#define  SVDO1_VIAR_TOPERRINT_SHIFT 7
#define  SVDO1_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_TOPERRINT_MASK) >> SVDO1_VIAR_TOPERRINT_SHIFT)
#define  SVDO1_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_TOPERRINT_SHIFT))

#define  SVDO1_VIAR_BOTERRINT_MASK 0x40
#define  SVDO1_VIAR_BOTERRINT_SHIFT 6
#define  SVDO1_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_BOTERRINT_MASK) >> SVDO1_VIAR_BOTERRINT_SHIFT)
#define  SVDO1_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_BOTERRINT_SHIFT))

#define  SVDO1_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO1_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO1_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_HSYNCERRINT_MASK) >> SVDO1_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO1_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO1_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO1_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO1_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO1_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO1_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO1_VIAR_EOIINT_MASK 0x8
#define  SVDO1_VIAR_EOIINT_SHIFT 3
#define  SVDO1_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_EOIINT_MASK) >> SVDO1_VIAR_EOIINT_SHIFT)
#define  SVDO1_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_EOIINT_SHIFT))

#define  SVDO1_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO1_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO1_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_PTUNDERRUNINT_MASK) >> SVDO1_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO1_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO1_VIAR_DESCINT_MASK 0x2
#define  SVDO1_VIAR_DESCINT_SHIFT 1
#define  SVDO1_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_DESCINT_MASK) >> SVDO1_VIAR_DESCINT_SHIFT)
#define  SVDO1_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_DESCINT_SHIFT))

#define  SVDO1_VIAR_OWNINT_MASK 0x1
#define  SVDO1_VIAR_OWNINT_SHIFT 0
#define  SVDO1_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIAR_OWNINT_MASK) >> SVDO1_VIAR_OWNINT_SHIFT)
#define  SVDO1_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO1_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO1_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO1_VIFR_RESERVED1_SHIFT 8
#define  SVDO1_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_RESERVED1_MASK) >> SVDO1_VIFR_RESERVED1_SHIFT)
#define  SVDO1_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VIFR_RESERVED1_SHIFT))

#define  SVDO1_VIFR_TOPERRINT_MASK 0x80
#define  SVDO1_VIFR_TOPERRINT_SHIFT 7
#define  SVDO1_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_TOPERRINT_MASK) >> SVDO1_VIFR_TOPERRINT_SHIFT)
#define  SVDO1_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_TOPERRINT_SHIFT))

#define  SVDO1_VIFR_BOTERRINT_MASK 0x40
#define  SVDO1_VIFR_BOTERRINT_SHIFT 6
#define  SVDO1_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_BOTERRINT_MASK) >> SVDO1_VIFR_BOTERRINT_SHIFT)
#define  SVDO1_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_BOTERRINT_SHIFT))

#define  SVDO1_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO1_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO1_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_HSYNCERRINT_MASK) >> SVDO1_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO1_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO1_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO1_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO1_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO1_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO1_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO1_VIFR_EOIINT_MASK 0x8
#define  SVDO1_VIFR_EOIINT_SHIFT 3
#define  SVDO1_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_EOIINT_MASK) >> SVDO1_VIFR_EOIINT_SHIFT)
#define  SVDO1_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_EOIINT_SHIFT))

#define  SVDO1_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO1_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO1_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_PTUNDERRUNINT_MASK) >> SVDO1_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO1_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO1_VIFR_DESCINT_MASK 0x2
#define  SVDO1_VIFR_DESCINT_SHIFT 1
#define  SVDO1_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_DESCINT_MASK) >> SVDO1_VIFR_DESCINT_SHIFT)
#define  SVDO1_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_DESCINT_SHIFT))

#define  SVDO1_VIFR_OWNINT_MASK 0x1
#define  SVDO1_VIFR_OWNINT_SHIFT 0
#define  SVDO1_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO1_VIFR_OWNINT_MASK) >> SVDO1_VIFR_OWNINT_SHIFT)
#define  SVDO1_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO1_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO1_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO1_VLWR_RESERVED1_SHIFT 16
#define  SVDO1_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VLWR_RESERVED1_MASK) >> SVDO1_VLWR_RESERVED1_SHIFT)
#define  SVDO1_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VLWR_RESERVED1_SHIFT))

#define  SVDO1_VLWR_LINEWID_MASK 0xfffc
#define  SVDO1_VLWR_LINEWID_SHIFT 2
#define  SVDO1_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO1_VLWR_LINEWID_MASK) >> SVDO1_VLWR_LINEWID_SHIFT)
#define  SVDO1_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO1_VLWR_LINEWID_SHIFT))

#define  SVDO1_VLWR_RESERVED2_MASK 0x3
#define  SVDO1_VLWR_RESERVED2_SHIFT 0
#define  SVDO1_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO1_VLWR_RESERVED2_MASK) >> SVDO1_VLWR_RESERVED2_SHIFT)
#define  SVDO1_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO1_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO1_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO1_VTCA_TCACCUM_SHIFT 0
#define  SVDO1_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO1_VTCA_TCACCUM_MASK) >> SVDO1_VTCA_TCACCUM_SHIFT)
#define  SVDO1_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO1_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO1_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO1_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO1_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO1_VTCP_TCNONBLANKPIX_MASK) >> SVDO1_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO1_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO1_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO1_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO1_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO1_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO1_VSAR_SOURCEADDR_MASK) >> SVDO1_VSAR_SOURCEADDR_SHIFT)
#define  SVDO1_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO1_VSAR_SOURCEADDR_SHIFT))

#define  SVDO1_VSAR_RESERVED1_MASK 0x3
#define  SVDO1_VSAR_RESERVED1_SHIFT 0
#define  SVDO1_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VSAR_RESERVED1_MASK) >> SVDO1_VSAR_RESERVED1_SHIFT)
#define  SVDO1_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO1_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO1_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO1_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO1_VPKR_LASTLINEPIXVAL_MASK) >> SVDO1_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO1_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO1_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO1_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO1_VPKR_RESERVED1_SHIFT 24
#define  SVDO1_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO1_VPKR_RESERVED1_MASK) >> SVDO1_VPKR_RESERVED1_SHIFT)
#define  SVDO1_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO1_VPKR_RESERVED1_SHIFT))

#define  SVDO1_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO1_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO1_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO1_VPKR_ENDSKIPLEN_MASK) >> SVDO1_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO1_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO1_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO1_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO1_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO1_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO1_VPKR_STARTSKIPLEN_MASK) >> SVDO1_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO1_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO1_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO1_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST0_JUSTLUT_SHIFT 0
#define  SVDO1_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST0_JUSTLUT_MASK) >> SVDO1_JUST0_JUSTLUT_SHIFT)
#define  SVDO1_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO1_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST1_JUSTLUT_SHIFT 0
#define  SVDO1_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST1_JUSTLUT_MASK) >> SVDO1_JUST1_JUSTLUT_SHIFT)
#define  SVDO1_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO1_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST2_JUSTLUT_SHIFT 0
#define  SVDO1_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST2_JUSTLUT_MASK) >> SVDO1_JUST2_JUSTLUT_SHIFT)
#define  SVDO1_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO1_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST3_JUSTLUT_SHIFT 0
#define  SVDO1_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST3_JUSTLUT_MASK) >> SVDO1_JUST3_JUSTLUT_SHIFT)
#define  SVDO1_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO1_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST4_JUSTLUT_SHIFT 0
#define  SVDO1_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST4_JUSTLUT_MASK) >> SVDO1_JUST4_JUSTLUT_SHIFT)
#define  SVDO1_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO1_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST5_JUSTLUT_SHIFT 0
#define  SVDO1_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST5_JUSTLUT_MASK) >> SVDO1_JUST5_JUSTLUT_SHIFT)
#define  SVDO1_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO1_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST6_JUSTLUT_SHIFT 0
#define  SVDO1_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST6_JUSTLUT_MASK) >> SVDO1_JUST6_JUSTLUT_SHIFT)
#define  SVDO1_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO1_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST7_JUSTLUT_SHIFT 0
#define  SVDO1_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST7_JUSTLUT_MASK) >> SVDO1_JUST7_JUSTLUT_SHIFT)
#define  SVDO1_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO1_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST8_JUSTLUT_SHIFT 0
#define  SVDO1_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST8_JUSTLUT_MASK) >> SVDO1_JUST8_JUSTLUT_SHIFT)
#define  SVDO1_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO1_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST9_JUSTLUT_SHIFT 0
#define  SVDO1_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST9_JUSTLUT_MASK) >> SVDO1_JUST9_JUSTLUT_SHIFT)
#define  SVDO1_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO1_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST10_JUSTLUT_SHIFT 0
#define  SVDO1_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST10_JUSTLUT_MASK) >> SVDO1_JUST10_JUSTLUT_SHIFT)
#define  SVDO1_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO1_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST11_JUSTLUT_SHIFT 0
#define  SVDO1_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST11_JUSTLUT_MASK) >> SVDO1_JUST11_JUSTLUT_SHIFT)
#define  SVDO1_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO1_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST12_JUSTLUT_SHIFT 0
#define  SVDO1_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST12_JUSTLUT_MASK) >> SVDO1_JUST12_JUSTLUT_SHIFT)
#define  SVDO1_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO1_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST13_JUSTLUT_SHIFT 0
#define  SVDO1_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST13_JUSTLUT_MASK) >> SVDO1_JUST13_JUSTLUT_SHIFT)
#define  SVDO1_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO1_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST14_JUSTLUT_SHIFT 0
#define  SVDO1_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST14_JUSTLUT_MASK) >> SVDO1_JUST14_JUSTLUT_SHIFT)
#define  SVDO1_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO1_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO1_JUST15_JUSTLUT_SHIFT 0
#define  SVDO1_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO1_JUST15_JUSTLUT_MASK) >> SVDO1_JUST15_JUSTLUT_SHIFT)
#define  SVDO1_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO1_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO1_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE0_PCODELUT_SHIFT 0
#define  SVDO1_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE0_PCODELUT_MASK) >> SVDO1_PCODE0_PCODELUT_SHIFT)
#define  SVDO1_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO1_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE1_PCODELUT_SHIFT 0
#define  SVDO1_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE1_PCODELUT_MASK) >> SVDO1_PCODE1_PCODELUT_SHIFT)
#define  SVDO1_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO1_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE2_PCODELUT_SHIFT 0
#define  SVDO1_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE2_PCODELUT_MASK) >> SVDO1_PCODE2_PCODELUT_SHIFT)
#define  SVDO1_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO1_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE3_PCODELUT_SHIFT 0
#define  SVDO1_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE3_PCODELUT_MASK) >> SVDO1_PCODE3_PCODELUT_SHIFT)
#define  SVDO1_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO1_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE4_PCODELUT_SHIFT 0
#define  SVDO1_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE4_PCODELUT_MASK) >> SVDO1_PCODE4_PCODELUT_SHIFT)
#define  SVDO1_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO1_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE5_PCODELUT_SHIFT 0
#define  SVDO1_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE5_PCODELUT_MASK) >> SVDO1_PCODE5_PCODELUT_SHIFT)
#define  SVDO1_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO1_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE6_PCODELUT_SHIFT 0
#define  SVDO1_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE6_PCODELUT_MASK) >> SVDO1_PCODE6_PCODELUT_SHIFT)
#define  SVDO1_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO1_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE7_PCODELUT_SHIFT 0
#define  SVDO1_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE7_PCODELUT_MASK) >> SVDO1_PCODE7_PCODELUT_SHIFT)
#define  SVDO1_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO1_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE8_PCODELUT_SHIFT 0
#define  SVDO1_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE8_PCODELUT_MASK) >> SVDO1_PCODE8_PCODELUT_SHIFT)
#define  SVDO1_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO1_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE9_PCODELUT_SHIFT 0
#define  SVDO1_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE9_PCODELUT_MASK) >> SVDO1_PCODE9_PCODELUT_SHIFT)
#define  SVDO1_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO1_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE10_PCODELUT_SHIFT 0
#define  SVDO1_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE10_PCODELUT_MASK) >> SVDO1_PCODE10_PCODELUT_SHIFT)
#define  SVDO1_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO1_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE11_PCODELUT_SHIFT 0
#define  SVDO1_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE11_PCODELUT_MASK) >> SVDO1_PCODE11_PCODELUT_SHIFT)
#define  SVDO1_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO1_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE12_PCODELUT_SHIFT 0
#define  SVDO1_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE12_PCODELUT_MASK) >> SVDO1_PCODE12_PCODELUT_SHIFT)
#define  SVDO1_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO1_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE13_PCODELUT_SHIFT 0
#define  SVDO1_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE13_PCODELUT_MASK) >> SVDO1_PCODE13_PCODELUT_SHIFT)
#define  SVDO1_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO1_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE14_PCODELUT_SHIFT 0
#define  SVDO1_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE14_PCODELUT_MASK) >> SVDO1_PCODE14_PCODELUT_SHIFT)
#define  SVDO1_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO1_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO1_PCODE15_PCODELUT_SHIFT 0
#define  SVDO1_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO1_PCODE15_PCODELUT_MASK) >> SVDO1_PCODE15_PCODELUT_SHIFT)
#define  SVDO1_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO1_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO1_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 3 of 8) (SVDO2)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO2_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO2_SCFG_RESERVED1_SHIFT 30
#define  SVDO2_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED1_MASK) >> SVDO2_SCFG_RESERVED1_SHIFT)
#define  SVDO2_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED1_SHIFT))

#define  SVDO2_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO2_SCFG_BURSTSZ_SHIFT 28
#define  SVDO2_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_BURSTSZ_MASK) >> SVDO2_SCFG_BURSTSZ_SHIFT)
#define  SVDO2_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO2_SCFG_BURSTSZ_SHIFT))

#define  SVDO2_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO2_SCFG_RESERVED2_SHIFT 26
#define  SVDO2_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED2_MASK) >> SVDO2_SCFG_RESERVED2_SHIFT)
#define  SVDO2_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED2_SHIFT))

#define  SVDO2_SCFG_SERP_MASK 0x2000000
#define  SVDO2_SCFG_SERP_SHIFT 25
#define  SVDO2_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_SERP_MASK) >> SVDO2_SCFG_SERP_SHIFT)
#define  SVDO2_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO2_SCFG_SERP_SHIFT))

#define  SVDO2_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO2_SCFG_BOT2TOP_SHIFT 24
#define  SVDO2_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_BOT2TOP_MASK) >> SVDO2_SCFG_BOT2TOP_SHIFT)
#define  SVDO2_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO2_SCFG_BOT2TOP_SHIFT))

#define  SVDO2_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO2_SCFG_RESERVED3_SHIFT 22
#define  SVDO2_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED3_MASK) >> SVDO2_SCFG_RESERVED3_SHIFT)
#define  SVDO2_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED3_SHIFT))

#define  SVDO2_SCFG_BPP_MASK 0x300000
#define  SVDO2_SCFG_BPP_SHIFT 20
#define  SVDO2_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_BPP_MASK) >> SVDO2_SCFG_BPP_SHIFT)
#define  SVDO2_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO2_SCFG_BPP_SHIFT))

#define  SVDO2_SCFG_RESERVED4_MASK 0x80000
#define  SVDO2_SCFG_RESERVED4_SHIFT 19
#define  SVDO2_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED4_MASK) >> SVDO2_SCFG_RESERVED4_SHIFT)
#define  SVDO2_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED4_SHIFT))

#define  SVDO2_SCFG_LINESKIP_MASK 0x70000
#define  SVDO2_SCFG_LINESKIP_SHIFT 16
#define  SVDO2_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_LINESKIP_MASK) >> SVDO2_SCFG_LINESKIP_SHIFT)
#define  SVDO2_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO2_SCFG_LINESKIP_SHIFT))

#define  SVDO2_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO2_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO2_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_PIXDOUBLE_MASK) >> SVDO2_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO2_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO2_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO2_SCFG_PCODEREF_MASK 0x4000
#define  SVDO2_SCFG_PCODEREF_SHIFT 14
#define  SVDO2_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_PCODEREF_MASK) >> SVDO2_SCFG_PCODEREF_SHIFT)
#define  SVDO2_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO2_SCFG_PCODEREF_SHIFT))

#define  SVDO2_SCFG_INITJUST_MASK 0x2000
#define  SVDO2_SCFG_INITJUST_SHIFT 13
#define  SVDO2_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_INITJUST_MASK) >> SVDO2_SCFG_INITJUST_SHIFT)
#define  SVDO2_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO2_SCFG_INITJUST_SHIFT))

#define  SVDO2_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO2_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO2_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_FORCEDJUST_MASK) >> SVDO2_SCFG_FORCEDJUST_SHIFT)
#define  SVDO2_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO2_SCFG_FORCEDJUST_SHIFT))

#define  SVDO2_SCFG_RESERVED5_MASK 0x800
#define  SVDO2_SCFG_RESERVED5_SHIFT 11
#define  SVDO2_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED5_MASK) >> SVDO2_SCFG_RESERVED5_SHIFT)
#define  SVDO2_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED5_SHIFT))

#define  SVDO2_SCFG_DATASOURCE_MASK 0x400
#define  SVDO2_SCFG_DATASOURCE_SHIFT 10
#define  SVDO2_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_DATASOURCE_MASK) >> SVDO2_SCFG_DATASOURCE_SHIFT)
#define  SVDO2_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO2_SCFG_DATASOURCE_SHIFT))

#define  SVDO2_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO2_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO2_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_TOGGLEJUST_MASK) >> SVDO2_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO2_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO2_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO2_SCFG_RESERVED6_MASK 0xc0
#define  SVDO2_SCFG_RESERVED6_SHIFT 6
#define  SVDO2_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED6_MASK) >> SVDO2_SCFG_RESERVED6_SHIFT)
#define  SVDO2_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED6_SHIFT))

#define  SVDO2_SCFG_LINEREPL_MASK 0x30
#define  SVDO2_SCFG_LINEREPL_SHIFT 4
#define  SVDO2_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_LINEREPL_MASK) >> SVDO2_SCFG_LINEREPL_SHIFT)
#define  SVDO2_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO2_SCFG_LINEREPL_SHIFT))

#define  SVDO2_SCFG_RESERVED7_MASK 0xc
#define  SVDO2_SCFG_RESERVED7_SHIFT 2
#define  SVDO2_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESERVED7_MASK) >> SVDO2_SCFG_RESERVED7_SHIFT)
#define  SVDO2_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESERVED7_SHIFT))

#define  SVDO2_SCFG_RESETDMA_MASK 0x2
#define  SVDO2_SCFG_RESETDMA_SHIFT 1
#define  SVDO2_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_RESETDMA_MASK) >> SVDO2_SCFG_RESETDMA_SHIFT)
#define  SVDO2_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO2_SCFG_RESETDMA_SHIFT))

#define  SVDO2_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO2_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO2_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO2_SCFG_SVDOENABLE_MASK) >> SVDO2_SCFG_SVDOENABLE_SHIFT)
#define  SVDO2_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO2_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO2_STAT_SKIPST_MASK 0xe0000000
#define  SVDO2_STAT_SKIPST_SHIFT 29
#define  SVDO2_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_SKIPST_MASK) >> SVDO2_STAT_SKIPST_SHIFT)
#define  SVDO2_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO2_STAT_SKIPST_SHIFT))

#define  SVDO2_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO2_STAT_PIXPIPEST_SHIFT 26
#define  SVDO2_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_PIXPIPEST_MASK) >> SVDO2_STAT_PIXPIPEST_SHIFT)
#define  SVDO2_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO2_STAT_PIXPIPEST_SHIFT))

#define  SVDO2_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO2_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO2_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_DATAFIFOENT_MASK) >> SVDO2_STAT_DATAFIFOENT_SHIFT)
#define  SVDO2_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO2_STAT_DATAFIFOENT_SHIFT))

#define  SVDO2_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO2_STAT_REFIFOENT_SHIFT 16
#define  SVDO2_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_REFIFOENT_MASK) >> SVDO2_STAT_REFIFOENT_SHIFT)
#define  SVDO2_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO2_STAT_REFIFOENT_SHIFT))

#define  SVDO2_STAT_ADDRST_MASK 0xc000
#define  SVDO2_STAT_ADDRST_SHIFT 14
#define  SVDO2_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_ADDRST_MASK) >> SVDO2_STAT_ADDRST_SHIFT)
#define  SVDO2_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO2_STAT_ADDRST_SHIFT))

#define  SVDO2_STAT_DATAST_MASK 0x3800
#define  SVDO2_STAT_DATAST_SHIFT 11
#define  SVDO2_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_DATAST_MASK) >> SVDO2_STAT_DATAST_SHIFT)
#define  SVDO2_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO2_STAT_DATAST_SHIFT))

#define  SVDO2_STAT_CMDST_MASK 0x700
#define  SVDO2_STAT_CMDST_SHIFT 8
#define  SVDO2_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_CMDST_MASK) >> SVDO2_STAT_CMDST_SHIFT)
#define  SVDO2_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO2_STAT_CMDST_SHIFT))

#define  SVDO2_STAT_DMAOWN_MASK 0x80
#define  SVDO2_STAT_DMAOWN_SHIFT 7
#define  SVDO2_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_DMAOWN_MASK) >> SVDO2_STAT_DMAOWN_SHIFT)
#define  SVDO2_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO2_STAT_DMAOWN_SHIFT))

#define  SVDO2_STAT_DMAACTIVE_MASK 0x40
#define  SVDO2_STAT_DMAACTIVE_SHIFT 6
#define  SVDO2_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_DMAACTIVE_MASK) >> SVDO2_STAT_DMAACTIVE_SHIFT)
#define  SVDO2_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO2_STAT_DMAACTIVE_SHIFT))

#define  SVDO2_STAT_LASTBUFFER_MASK 0x20
#define  SVDO2_STAT_LASTBUFFER_SHIFT 5
#define  SVDO2_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_LASTBUFFER_MASK) >> SVDO2_STAT_LASTBUFFER_SHIFT)
#define  SVDO2_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO2_STAT_LASTBUFFER_SHIFT))

#define  SVDO2_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO2_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO2_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_FIRSTBUFFER_MASK) >> SVDO2_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO2_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO2_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO2_STAT_RTOL_MASK 0x8
#define  SVDO2_STAT_RTOL_SHIFT 3
#define  SVDO2_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_RTOL_MASK) >> SVDO2_STAT_RTOL_SHIFT)
#define  SVDO2_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO2_STAT_RTOL_SHIFT))

#define  SVDO2_STAT_BLANK_MASK 0x4
#define  SVDO2_STAT_BLANK_SHIFT 2
#define  SVDO2_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_BLANK_MASK) >> SVDO2_STAT_BLANK_SHIFT)
#define  SVDO2_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO2_STAT_BLANK_SHIFT))

#define  SVDO2_STAT_INTONFINISH_MASK 0x2
#define  SVDO2_STAT_INTONFINISH_SHIFT 1
#define  SVDO2_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_INTONFINISH_MASK) >> SVDO2_STAT_INTONFINISH_SHIFT)
#define  SVDO2_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO2_STAT_INTONFINISH_SHIFT))

#define  SVDO2_STAT_STOPONFINISH_MASK 0x1
#define  SVDO2_STAT_STOPONFINISH_SHIFT 0
#define  SVDO2_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO2_STAT_STOPONFINISH_MASK) >> SVDO2_STAT_STOPONFINISH_SHIFT)
#define  SVDO2_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO2_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO2_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO2_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO2_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO2_VDWR_WRDESCADDR_MASK) >> SVDO2_VDWR_WRDESCADDR_SHIFT)
#define  SVDO2_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO2_VDWR_WRDESCADDR_SHIFT))

#define  SVDO2_VDWR_RESERVED1_MASK 0xf
#define  SVDO2_VDWR_RESERVED1_SHIFT 0
#define  SVDO2_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VDWR_RESERVED1_MASK) >> SVDO2_VDWR_RESERVED1_SHIFT)
#define  SVDO2_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO2_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO2_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO2_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO2_VDAR_CURRDESCADDR_MASK) >> SVDO2_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO2_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO2_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO2_VDAR_RESERVED1_MASK 0xf
#define  SVDO2_VDAR_RESERVED1_SHIFT 0
#define  SVDO2_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VDAR_RESERVED1_MASK) >> SVDO2_VDAR_RESERVED1_SHIFT)
#define  SVDO2_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO2_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO2_VDBR_RESERVED1_SHIFT 16
#define  SVDO2_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VDBR_RESERVED1_MASK) >> SVDO2_VDBR_RESERVED1_SHIFT)
#define  SVDO2_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VDBR_RESERVED1_SHIFT))

#define  SVDO2_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO2_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO2_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO2_VDBR_BYTESLEFT_MASK) >> SVDO2_VDBR_BYTESLEFT_SHIFT)
#define  SVDO2_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO2_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO2_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO2_VDLR_RESERVED1_SHIFT 14
#define  SVDO2_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VDLR_RESERVED1_MASK) >> SVDO2_VDLR_RESERVED1_SHIFT)
#define  SVDO2_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VDLR_RESERVED1_SHIFT))

#define  SVDO2_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO2_VDLR_LINESLEFT_SHIFT 0
#define  SVDO2_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO2_VDLR_LINESLEFT_MASK) >> SVDO2_VDLR_LINESLEFT_SHIFT)
#define  SVDO2_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO2_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO2_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO2_VDNR_DESCADDR_SHIFT 4
#define  SVDO2_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO2_VDNR_DESCADDR_MASK) >> SVDO2_VDNR_DESCADDR_SHIFT)
#define  SVDO2_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO2_VDNR_DESCADDR_SHIFT))

#define  SVDO2_VDNR_RESERVED1_MASK 0xf
#define  SVDO2_VDNR_RESERVED1_SHIFT 0
#define  SVDO2_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VDNR_RESERVED1_MASK) >> SVDO2_VDNR_RESERVED1_SHIFT)
#define  SVDO2_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO2_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO2_VIER_RESERVED1_SHIFT 8
#define  SVDO2_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_RESERVED1_MASK) >> SVDO2_VIER_RESERVED1_SHIFT)
#define  SVDO2_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VIER_RESERVED1_SHIFT))

#define  SVDO2_VIER_TOPERRINT_MASK 0x80
#define  SVDO2_VIER_TOPERRINT_SHIFT 7
#define  SVDO2_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_TOPERRINT_MASK) >> SVDO2_VIER_TOPERRINT_SHIFT)
#define  SVDO2_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO2_VIER_TOPERRINT_SHIFT))

#define  SVDO2_VIER_BOTERRINT_MASK 0x40
#define  SVDO2_VIER_BOTERRINT_SHIFT 6
#define  SVDO2_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_BOTERRINT_MASK) >> SVDO2_VIER_BOTERRINT_SHIFT)
#define  SVDO2_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO2_VIER_BOTERRINT_SHIFT))

#define  SVDO2_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO2_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO2_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_HSYNCERRINT_MASK) >> SVDO2_VIER_HSYNCERRINT_SHIFT)
#define  SVDO2_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO2_VIER_HSYNCERRINT_SHIFT))

#define  SVDO2_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO2_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO2_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_BENDERUNDERRUNINT_MASK) >> SVDO2_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO2_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO2_VIER_EOIINT_MASK 0x8
#define  SVDO2_VIER_EOIINT_SHIFT 3
#define  SVDO2_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_EOIINT_MASK) >> SVDO2_VIER_EOIINT_SHIFT)
#define  SVDO2_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO2_VIER_EOIINT_SHIFT))

#define  SVDO2_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO2_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO2_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_PTUNDERRUNINT_MASK) >> SVDO2_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO2_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO2_VIER_DESCINT_MASK 0x2
#define  SVDO2_VIER_DESCINT_SHIFT 1
#define  SVDO2_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_DESCINT_MASK) >> SVDO2_VIER_DESCINT_SHIFT)
#define  SVDO2_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO2_VIER_DESCINT_SHIFT))

#define  SVDO2_VIER_OWNINT_MASK 0x1
#define  SVDO2_VIER_OWNINT_SHIFT 0
#define  SVDO2_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIER_OWNINT_MASK) >> SVDO2_VIER_OWNINT_SHIFT)
#define  SVDO2_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO2_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO2_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO2_VIPR_RESERVED1_SHIFT 8
#define  SVDO2_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_RESERVED1_MASK) >> SVDO2_VIPR_RESERVED1_SHIFT)
#define  SVDO2_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VIPR_RESERVED1_SHIFT))

#define  SVDO2_VIPR_TOPERRINT_MASK 0x80
#define  SVDO2_VIPR_TOPERRINT_SHIFT 7
#define  SVDO2_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_TOPERRINT_MASK) >> SVDO2_VIPR_TOPERRINT_SHIFT)
#define  SVDO2_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_TOPERRINT_SHIFT))

#define  SVDO2_VIPR_BOTERRINT_MASK 0x40
#define  SVDO2_VIPR_BOTERRINT_SHIFT 6
#define  SVDO2_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_BOTERRINT_MASK) >> SVDO2_VIPR_BOTERRINT_SHIFT)
#define  SVDO2_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_BOTERRINT_SHIFT))

#define  SVDO2_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO2_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO2_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_HSYNCERRINT_MASK) >> SVDO2_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO2_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO2_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO2_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO2_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO2_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO2_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO2_VIPR_EOIINT_MASK 0x8
#define  SVDO2_VIPR_EOIINT_SHIFT 3
#define  SVDO2_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_EOIINT_MASK) >> SVDO2_VIPR_EOIINT_SHIFT)
#define  SVDO2_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_EOIINT_SHIFT))

#define  SVDO2_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO2_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO2_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_PTUNDERRUNINT_MASK) >> SVDO2_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO2_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO2_VIPR_DESCINT_MASK 0x2
#define  SVDO2_VIPR_DESCINT_SHIFT 1
#define  SVDO2_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_DESCINT_MASK) >> SVDO2_VIPR_DESCINT_SHIFT)
#define  SVDO2_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_DESCINT_SHIFT))

#define  SVDO2_VIPR_OWNINT_MASK 0x1
#define  SVDO2_VIPR_OWNINT_SHIFT 0
#define  SVDO2_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIPR_OWNINT_MASK) >> SVDO2_VIPR_OWNINT_SHIFT)
#define  SVDO2_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO2_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO2_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO2_VIAR_RESERVED1_SHIFT 8
#define  SVDO2_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_RESERVED1_MASK) >> SVDO2_VIAR_RESERVED1_SHIFT)
#define  SVDO2_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VIAR_RESERVED1_SHIFT))

#define  SVDO2_VIAR_TOPERRINT_MASK 0x80
#define  SVDO2_VIAR_TOPERRINT_SHIFT 7
#define  SVDO2_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_TOPERRINT_MASK) >> SVDO2_VIAR_TOPERRINT_SHIFT)
#define  SVDO2_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_TOPERRINT_SHIFT))

#define  SVDO2_VIAR_BOTERRINT_MASK 0x40
#define  SVDO2_VIAR_BOTERRINT_SHIFT 6
#define  SVDO2_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_BOTERRINT_MASK) >> SVDO2_VIAR_BOTERRINT_SHIFT)
#define  SVDO2_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_BOTERRINT_SHIFT))

#define  SVDO2_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO2_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO2_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_HSYNCERRINT_MASK) >> SVDO2_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO2_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO2_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO2_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO2_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO2_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO2_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO2_VIAR_EOIINT_MASK 0x8
#define  SVDO2_VIAR_EOIINT_SHIFT 3
#define  SVDO2_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_EOIINT_MASK) >> SVDO2_VIAR_EOIINT_SHIFT)
#define  SVDO2_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_EOIINT_SHIFT))

#define  SVDO2_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO2_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO2_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_PTUNDERRUNINT_MASK) >> SVDO2_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO2_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO2_VIAR_DESCINT_MASK 0x2
#define  SVDO2_VIAR_DESCINT_SHIFT 1
#define  SVDO2_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_DESCINT_MASK) >> SVDO2_VIAR_DESCINT_SHIFT)
#define  SVDO2_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_DESCINT_SHIFT))

#define  SVDO2_VIAR_OWNINT_MASK 0x1
#define  SVDO2_VIAR_OWNINT_SHIFT 0
#define  SVDO2_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIAR_OWNINT_MASK) >> SVDO2_VIAR_OWNINT_SHIFT)
#define  SVDO2_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO2_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO2_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO2_VIFR_RESERVED1_SHIFT 8
#define  SVDO2_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_RESERVED1_MASK) >> SVDO2_VIFR_RESERVED1_SHIFT)
#define  SVDO2_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VIFR_RESERVED1_SHIFT))

#define  SVDO2_VIFR_TOPERRINT_MASK 0x80
#define  SVDO2_VIFR_TOPERRINT_SHIFT 7
#define  SVDO2_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_TOPERRINT_MASK) >> SVDO2_VIFR_TOPERRINT_SHIFT)
#define  SVDO2_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_TOPERRINT_SHIFT))

#define  SVDO2_VIFR_BOTERRINT_MASK 0x40
#define  SVDO2_VIFR_BOTERRINT_SHIFT 6
#define  SVDO2_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_BOTERRINT_MASK) >> SVDO2_VIFR_BOTERRINT_SHIFT)
#define  SVDO2_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_BOTERRINT_SHIFT))

#define  SVDO2_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO2_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO2_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_HSYNCERRINT_MASK) >> SVDO2_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO2_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO2_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO2_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO2_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO2_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO2_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO2_VIFR_EOIINT_MASK 0x8
#define  SVDO2_VIFR_EOIINT_SHIFT 3
#define  SVDO2_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_EOIINT_MASK) >> SVDO2_VIFR_EOIINT_SHIFT)
#define  SVDO2_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_EOIINT_SHIFT))

#define  SVDO2_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO2_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO2_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_PTUNDERRUNINT_MASK) >> SVDO2_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO2_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO2_VIFR_DESCINT_MASK 0x2
#define  SVDO2_VIFR_DESCINT_SHIFT 1
#define  SVDO2_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_DESCINT_MASK) >> SVDO2_VIFR_DESCINT_SHIFT)
#define  SVDO2_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_DESCINT_SHIFT))

#define  SVDO2_VIFR_OWNINT_MASK 0x1
#define  SVDO2_VIFR_OWNINT_SHIFT 0
#define  SVDO2_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO2_VIFR_OWNINT_MASK) >> SVDO2_VIFR_OWNINT_SHIFT)
#define  SVDO2_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO2_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO2_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO2_VLWR_RESERVED1_SHIFT 16
#define  SVDO2_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VLWR_RESERVED1_MASK) >> SVDO2_VLWR_RESERVED1_SHIFT)
#define  SVDO2_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VLWR_RESERVED1_SHIFT))

#define  SVDO2_VLWR_LINEWID_MASK 0xfffc
#define  SVDO2_VLWR_LINEWID_SHIFT 2
#define  SVDO2_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO2_VLWR_LINEWID_MASK) >> SVDO2_VLWR_LINEWID_SHIFT)
#define  SVDO2_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO2_VLWR_LINEWID_SHIFT))

#define  SVDO2_VLWR_RESERVED2_MASK 0x3
#define  SVDO2_VLWR_RESERVED2_SHIFT 0
#define  SVDO2_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO2_VLWR_RESERVED2_MASK) >> SVDO2_VLWR_RESERVED2_SHIFT)
#define  SVDO2_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO2_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO2_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO2_VTCA_TCACCUM_SHIFT 0
#define  SVDO2_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO2_VTCA_TCACCUM_MASK) >> SVDO2_VTCA_TCACCUM_SHIFT)
#define  SVDO2_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO2_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO2_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO2_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO2_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO2_VTCP_TCNONBLANKPIX_MASK) >> SVDO2_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO2_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO2_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO2_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO2_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO2_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO2_VSAR_SOURCEADDR_MASK) >> SVDO2_VSAR_SOURCEADDR_SHIFT)
#define  SVDO2_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO2_VSAR_SOURCEADDR_SHIFT))

#define  SVDO2_VSAR_RESERVED1_MASK 0x3
#define  SVDO2_VSAR_RESERVED1_SHIFT 0
#define  SVDO2_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VSAR_RESERVED1_MASK) >> SVDO2_VSAR_RESERVED1_SHIFT)
#define  SVDO2_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO2_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO2_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO2_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO2_VPKR_LASTLINEPIXVAL_MASK) >> SVDO2_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO2_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO2_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO2_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO2_VPKR_RESERVED1_SHIFT 24
#define  SVDO2_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO2_VPKR_RESERVED1_MASK) >> SVDO2_VPKR_RESERVED1_SHIFT)
#define  SVDO2_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO2_VPKR_RESERVED1_SHIFT))

#define  SVDO2_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO2_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO2_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO2_VPKR_ENDSKIPLEN_MASK) >> SVDO2_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO2_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO2_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO2_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO2_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO2_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO2_VPKR_STARTSKIPLEN_MASK) >> SVDO2_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO2_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO2_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO2_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST0_JUSTLUT_SHIFT 0
#define  SVDO2_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST0_JUSTLUT_MASK) >> SVDO2_JUST0_JUSTLUT_SHIFT)
#define  SVDO2_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO2_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST1_JUSTLUT_SHIFT 0
#define  SVDO2_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST1_JUSTLUT_MASK) >> SVDO2_JUST1_JUSTLUT_SHIFT)
#define  SVDO2_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO2_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST2_JUSTLUT_SHIFT 0
#define  SVDO2_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST2_JUSTLUT_MASK) >> SVDO2_JUST2_JUSTLUT_SHIFT)
#define  SVDO2_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO2_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST3_JUSTLUT_SHIFT 0
#define  SVDO2_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST3_JUSTLUT_MASK) >> SVDO2_JUST3_JUSTLUT_SHIFT)
#define  SVDO2_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO2_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST4_JUSTLUT_SHIFT 0
#define  SVDO2_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST4_JUSTLUT_MASK) >> SVDO2_JUST4_JUSTLUT_SHIFT)
#define  SVDO2_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO2_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST5_JUSTLUT_SHIFT 0
#define  SVDO2_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST5_JUSTLUT_MASK) >> SVDO2_JUST5_JUSTLUT_SHIFT)
#define  SVDO2_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO2_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST6_JUSTLUT_SHIFT 0
#define  SVDO2_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST6_JUSTLUT_MASK) >> SVDO2_JUST6_JUSTLUT_SHIFT)
#define  SVDO2_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO2_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST7_JUSTLUT_SHIFT 0
#define  SVDO2_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST7_JUSTLUT_MASK) >> SVDO2_JUST7_JUSTLUT_SHIFT)
#define  SVDO2_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO2_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST8_JUSTLUT_SHIFT 0
#define  SVDO2_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST8_JUSTLUT_MASK) >> SVDO2_JUST8_JUSTLUT_SHIFT)
#define  SVDO2_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO2_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST9_JUSTLUT_SHIFT 0
#define  SVDO2_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST9_JUSTLUT_MASK) >> SVDO2_JUST9_JUSTLUT_SHIFT)
#define  SVDO2_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO2_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST10_JUSTLUT_SHIFT 0
#define  SVDO2_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST10_JUSTLUT_MASK) >> SVDO2_JUST10_JUSTLUT_SHIFT)
#define  SVDO2_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO2_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST11_JUSTLUT_SHIFT 0
#define  SVDO2_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST11_JUSTLUT_MASK) >> SVDO2_JUST11_JUSTLUT_SHIFT)
#define  SVDO2_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO2_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST12_JUSTLUT_SHIFT 0
#define  SVDO2_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST12_JUSTLUT_MASK) >> SVDO2_JUST12_JUSTLUT_SHIFT)
#define  SVDO2_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO2_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST13_JUSTLUT_SHIFT 0
#define  SVDO2_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST13_JUSTLUT_MASK) >> SVDO2_JUST13_JUSTLUT_SHIFT)
#define  SVDO2_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO2_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST14_JUSTLUT_SHIFT 0
#define  SVDO2_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST14_JUSTLUT_MASK) >> SVDO2_JUST14_JUSTLUT_SHIFT)
#define  SVDO2_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO2_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO2_JUST15_JUSTLUT_SHIFT 0
#define  SVDO2_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO2_JUST15_JUSTLUT_MASK) >> SVDO2_JUST15_JUSTLUT_SHIFT)
#define  SVDO2_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO2_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO2_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE0_PCODELUT_SHIFT 0
#define  SVDO2_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE0_PCODELUT_MASK) >> SVDO2_PCODE0_PCODELUT_SHIFT)
#define  SVDO2_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO2_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE1_PCODELUT_SHIFT 0
#define  SVDO2_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE1_PCODELUT_MASK) >> SVDO2_PCODE1_PCODELUT_SHIFT)
#define  SVDO2_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO2_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE2_PCODELUT_SHIFT 0
#define  SVDO2_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE2_PCODELUT_MASK) >> SVDO2_PCODE2_PCODELUT_SHIFT)
#define  SVDO2_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO2_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE3_PCODELUT_SHIFT 0
#define  SVDO2_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE3_PCODELUT_MASK) >> SVDO2_PCODE3_PCODELUT_SHIFT)
#define  SVDO2_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO2_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE4_PCODELUT_SHIFT 0
#define  SVDO2_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE4_PCODELUT_MASK) >> SVDO2_PCODE4_PCODELUT_SHIFT)
#define  SVDO2_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO2_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE5_PCODELUT_SHIFT 0
#define  SVDO2_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE5_PCODELUT_MASK) >> SVDO2_PCODE5_PCODELUT_SHIFT)
#define  SVDO2_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO2_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE6_PCODELUT_SHIFT 0
#define  SVDO2_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE6_PCODELUT_MASK) >> SVDO2_PCODE6_PCODELUT_SHIFT)
#define  SVDO2_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO2_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE7_PCODELUT_SHIFT 0
#define  SVDO2_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE7_PCODELUT_MASK) >> SVDO2_PCODE7_PCODELUT_SHIFT)
#define  SVDO2_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO2_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE8_PCODELUT_SHIFT 0
#define  SVDO2_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE8_PCODELUT_MASK) >> SVDO2_PCODE8_PCODELUT_SHIFT)
#define  SVDO2_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO2_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE9_PCODELUT_SHIFT 0
#define  SVDO2_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE9_PCODELUT_MASK) >> SVDO2_PCODE9_PCODELUT_SHIFT)
#define  SVDO2_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO2_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE10_PCODELUT_SHIFT 0
#define  SVDO2_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE10_PCODELUT_MASK) >> SVDO2_PCODE10_PCODELUT_SHIFT)
#define  SVDO2_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO2_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE11_PCODELUT_SHIFT 0
#define  SVDO2_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE11_PCODELUT_MASK) >> SVDO2_PCODE11_PCODELUT_SHIFT)
#define  SVDO2_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO2_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE12_PCODELUT_SHIFT 0
#define  SVDO2_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE12_PCODELUT_MASK) >> SVDO2_PCODE12_PCODELUT_SHIFT)
#define  SVDO2_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO2_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE13_PCODELUT_SHIFT 0
#define  SVDO2_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE13_PCODELUT_MASK) >> SVDO2_PCODE13_PCODELUT_SHIFT)
#define  SVDO2_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO2_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE14_PCODELUT_SHIFT 0
#define  SVDO2_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE14_PCODELUT_MASK) >> SVDO2_PCODE14_PCODELUT_SHIFT)
#define  SVDO2_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO2_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO2_PCODE15_PCODELUT_SHIFT 0
#define  SVDO2_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO2_PCODE15_PCODELUT_MASK) >> SVDO2_PCODE15_PCODELUT_SHIFT)
#define  SVDO2_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO2_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO2_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 4 of 8) (SVDO3)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO3_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO3_SCFG_RESERVED1_SHIFT 30
#define  SVDO3_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED1_MASK) >> SVDO3_SCFG_RESERVED1_SHIFT)
#define  SVDO3_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED1_SHIFT))

#define  SVDO3_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO3_SCFG_BURSTSZ_SHIFT 28
#define  SVDO3_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_BURSTSZ_MASK) >> SVDO3_SCFG_BURSTSZ_SHIFT)
#define  SVDO3_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO3_SCFG_BURSTSZ_SHIFT))

#define  SVDO3_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO3_SCFG_RESERVED2_SHIFT 26
#define  SVDO3_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED2_MASK) >> SVDO3_SCFG_RESERVED2_SHIFT)
#define  SVDO3_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED2_SHIFT))

#define  SVDO3_SCFG_SERP_MASK 0x2000000
#define  SVDO3_SCFG_SERP_SHIFT 25
#define  SVDO3_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_SERP_MASK) >> SVDO3_SCFG_SERP_SHIFT)
#define  SVDO3_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO3_SCFG_SERP_SHIFT))

#define  SVDO3_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO3_SCFG_BOT2TOP_SHIFT 24
#define  SVDO3_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_BOT2TOP_MASK) >> SVDO3_SCFG_BOT2TOP_SHIFT)
#define  SVDO3_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO3_SCFG_BOT2TOP_SHIFT))

#define  SVDO3_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO3_SCFG_RESERVED3_SHIFT 22
#define  SVDO3_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED3_MASK) >> SVDO3_SCFG_RESERVED3_SHIFT)
#define  SVDO3_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED3_SHIFT))

#define  SVDO3_SCFG_BPP_MASK 0x300000
#define  SVDO3_SCFG_BPP_SHIFT 20
#define  SVDO3_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_BPP_MASK) >> SVDO3_SCFG_BPP_SHIFT)
#define  SVDO3_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO3_SCFG_BPP_SHIFT))

#define  SVDO3_SCFG_RESERVED4_MASK 0x80000
#define  SVDO3_SCFG_RESERVED4_SHIFT 19
#define  SVDO3_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED4_MASK) >> SVDO3_SCFG_RESERVED4_SHIFT)
#define  SVDO3_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED4_SHIFT))

#define  SVDO3_SCFG_LINESKIP_MASK 0x70000
#define  SVDO3_SCFG_LINESKIP_SHIFT 16
#define  SVDO3_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_LINESKIP_MASK) >> SVDO3_SCFG_LINESKIP_SHIFT)
#define  SVDO3_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO3_SCFG_LINESKIP_SHIFT))

#define  SVDO3_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO3_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO3_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_PIXDOUBLE_MASK) >> SVDO3_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO3_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO3_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO3_SCFG_PCODEREF_MASK 0x4000
#define  SVDO3_SCFG_PCODEREF_SHIFT 14
#define  SVDO3_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_PCODEREF_MASK) >> SVDO3_SCFG_PCODEREF_SHIFT)
#define  SVDO3_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO3_SCFG_PCODEREF_SHIFT))

#define  SVDO3_SCFG_INITJUST_MASK 0x2000
#define  SVDO3_SCFG_INITJUST_SHIFT 13
#define  SVDO3_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_INITJUST_MASK) >> SVDO3_SCFG_INITJUST_SHIFT)
#define  SVDO3_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO3_SCFG_INITJUST_SHIFT))

#define  SVDO3_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO3_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO3_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_FORCEDJUST_MASK) >> SVDO3_SCFG_FORCEDJUST_SHIFT)
#define  SVDO3_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO3_SCFG_FORCEDJUST_SHIFT))

#define  SVDO3_SCFG_RESERVED5_MASK 0x800
#define  SVDO3_SCFG_RESERVED5_SHIFT 11
#define  SVDO3_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED5_MASK) >> SVDO3_SCFG_RESERVED5_SHIFT)
#define  SVDO3_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED5_SHIFT))

#define  SVDO3_SCFG_DATASOURCE_MASK 0x400
#define  SVDO3_SCFG_DATASOURCE_SHIFT 10
#define  SVDO3_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_DATASOURCE_MASK) >> SVDO3_SCFG_DATASOURCE_SHIFT)
#define  SVDO3_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO3_SCFG_DATASOURCE_SHIFT))

#define  SVDO3_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO3_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO3_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_TOGGLEJUST_MASK) >> SVDO3_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO3_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO3_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO3_SCFG_RESERVED6_MASK 0xc0
#define  SVDO3_SCFG_RESERVED6_SHIFT 6
#define  SVDO3_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED6_MASK) >> SVDO3_SCFG_RESERVED6_SHIFT)
#define  SVDO3_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED6_SHIFT))

#define  SVDO3_SCFG_LINEREPL_MASK 0x30
#define  SVDO3_SCFG_LINEREPL_SHIFT 4
#define  SVDO3_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_LINEREPL_MASK) >> SVDO3_SCFG_LINEREPL_SHIFT)
#define  SVDO3_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO3_SCFG_LINEREPL_SHIFT))

#define  SVDO3_SCFG_RESERVED7_MASK 0xc
#define  SVDO3_SCFG_RESERVED7_SHIFT 2
#define  SVDO3_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESERVED7_MASK) >> SVDO3_SCFG_RESERVED7_SHIFT)
#define  SVDO3_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESERVED7_SHIFT))

#define  SVDO3_SCFG_RESETDMA_MASK 0x2
#define  SVDO3_SCFG_RESETDMA_SHIFT 1
#define  SVDO3_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_RESETDMA_MASK) >> SVDO3_SCFG_RESETDMA_SHIFT)
#define  SVDO3_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO3_SCFG_RESETDMA_SHIFT))

#define  SVDO3_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO3_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO3_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO3_SCFG_SVDOENABLE_MASK) >> SVDO3_SCFG_SVDOENABLE_SHIFT)
#define  SVDO3_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO3_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO3_STAT_SKIPST_MASK 0xe0000000
#define  SVDO3_STAT_SKIPST_SHIFT 29
#define  SVDO3_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_SKIPST_MASK) >> SVDO3_STAT_SKIPST_SHIFT)
#define  SVDO3_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO3_STAT_SKIPST_SHIFT))

#define  SVDO3_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO3_STAT_PIXPIPEST_SHIFT 26
#define  SVDO3_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_PIXPIPEST_MASK) >> SVDO3_STAT_PIXPIPEST_SHIFT)
#define  SVDO3_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO3_STAT_PIXPIPEST_SHIFT))

#define  SVDO3_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO3_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO3_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_DATAFIFOENT_MASK) >> SVDO3_STAT_DATAFIFOENT_SHIFT)
#define  SVDO3_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO3_STAT_DATAFIFOENT_SHIFT))

#define  SVDO3_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO3_STAT_REFIFOENT_SHIFT 16
#define  SVDO3_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_REFIFOENT_MASK) >> SVDO3_STAT_REFIFOENT_SHIFT)
#define  SVDO3_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO3_STAT_REFIFOENT_SHIFT))

#define  SVDO3_STAT_ADDRST_MASK 0xc000
#define  SVDO3_STAT_ADDRST_SHIFT 14
#define  SVDO3_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_ADDRST_MASK) >> SVDO3_STAT_ADDRST_SHIFT)
#define  SVDO3_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO3_STAT_ADDRST_SHIFT))

#define  SVDO3_STAT_DATAST_MASK 0x3800
#define  SVDO3_STAT_DATAST_SHIFT 11
#define  SVDO3_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_DATAST_MASK) >> SVDO3_STAT_DATAST_SHIFT)
#define  SVDO3_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO3_STAT_DATAST_SHIFT))

#define  SVDO3_STAT_CMDST_MASK 0x700
#define  SVDO3_STAT_CMDST_SHIFT 8
#define  SVDO3_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_CMDST_MASK) >> SVDO3_STAT_CMDST_SHIFT)
#define  SVDO3_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO3_STAT_CMDST_SHIFT))

#define  SVDO3_STAT_DMAOWN_MASK 0x80
#define  SVDO3_STAT_DMAOWN_SHIFT 7
#define  SVDO3_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_DMAOWN_MASK) >> SVDO3_STAT_DMAOWN_SHIFT)
#define  SVDO3_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO3_STAT_DMAOWN_SHIFT))

#define  SVDO3_STAT_DMAACTIVE_MASK 0x40
#define  SVDO3_STAT_DMAACTIVE_SHIFT 6
#define  SVDO3_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_DMAACTIVE_MASK) >> SVDO3_STAT_DMAACTIVE_SHIFT)
#define  SVDO3_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO3_STAT_DMAACTIVE_SHIFT))

#define  SVDO3_STAT_LASTBUFFER_MASK 0x20
#define  SVDO3_STAT_LASTBUFFER_SHIFT 5
#define  SVDO3_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_LASTBUFFER_MASK) >> SVDO3_STAT_LASTBUFFER_SHIFT)
#define  SVDO3_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO3_STAT_LASTBUFFER_SHIFT))

#define  SVDO3_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO3_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO3_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_FIRSTBUFFER_MASK) >> SVDO3_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO3_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO3_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO3_STAT_RTOL_MASK 0x8
#define  SVDO3_STAT_RTOL_SHIFT 3
#define  SVDO3_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_RTOL_MASK) >> SVDO3_STAT_RTOL_SHIFT)
#define  SVDO3_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO3_STAT_RTOL_SHIFT))

#define  SVDO3_STAT_BLANK_MASK 0x4
#define  SVDO3_STAT_BLANK_SHIFT 2
#define  SVDO3_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_BLANK_MASK) >> SVDO3_STAT_BLANK_SHIFT)
#define  SVDO3_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO3_STAT_BLANK_SHIFT))

#define  SVDO3_STAT_INTONFINISH_MASK 0x2
#define  SVDO3_STAT_INTONFINISH_SHIFT 1
#define  SVDO3_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_INTONFINISH_MASK) >> SVDO3_STAT_INTONFINISH_SHIFT)
#define  SVDO3_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO3_STAT_INTONFINISH_SHIFT))

#define  SVDO3_STAT_STOPONFINISH_MASK 0x1
#define  SVDO3_STAT_STOPONFINISH_SHIFT 0
#define  SVDO3_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO3_STAT_STOPONFINISH_MASK) >> SVDO3_STAT_STOPONFINISH_SHIFT)
#define  SVDO3_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO3_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO3_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO3_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO3_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO3_VDWR_WRDESCADDR_MASK) >> SVDO3_VDWR_WRDESCADDR_SHIFT)
#define  SVDO3_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO3_VDWR_WRDESCADDR_SHIFT))

#define  SVDO3_VDWR_RESERVED1_MASK 0xf
#define  SVDO3_VDWR_RESERVED1_SHIFT 0
#define  SVDO3_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VDWR_RESERVED1_MASK) >> SVDO3_VDWR_RESERVED1_SHIFT)
#define  SVDO3_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO3_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO3_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO3_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO3_VDAR_CURRDESCADDR_MASK) >> SVDO3_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO3_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO3_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO3_VDAR_RESERVED1_MASK 0xf
#define  SVDO3_VDAR_RESERVED1_SHIFT 0
#define  SVDO3_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VDAR_RESERVED1_MASK) >> SVDO3_VDAR_RESERVED1_SHIFT)
#define  SVDO3_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO3_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO3_VDBR_RESERVED1_SHIFT 16
#define  SVDO3_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VDBR_RESERVED1_MASK) >> SVDO3_VDBR_RESERVED1_SHIFT)
#define  SVDO3_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VDBR_RESERVED1_SHIFT))

#define  SVDO3_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO3_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO3_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO3_VDBR_BYTESLEFT_MASK) >> SVDO3_VDBR_BYTESLEFT_SHIFT)
#define  SVDO3_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO3_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO3_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO3_VDLR_RESERVED1_SHIFT 14
#define  SVDO3_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VDLR_RESERVED1_MASK) >> SVDO3_VDLR_RESERVED1_SHIFT)
#define  SVDO3_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VDLR_RESERVED1_SHIFT))

#define  SVDO3_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO3_VDLR_LINESLEFT_SHIFT 0
#define  SVDO3_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO3_VDLR_LINESLEFT_MASK) >> SVDO3_VDLR_LINESLEFT_SHIFT)
#define  SVDO3_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO3_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO3_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO3_VDNR_DESCADDR_SHIFT 4
#define  SVDO3_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO3_VDNR_DESCADDR_MASK) >> SVDO3_VDNR_DESCADDR_SHIFT)
#define  SVDO3_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO3_VDNR_DESCADDR_SHIFT))

#define  SVDO3_VDNR_RESERVED1_MASK 0xf
#define  SVDO3_VDNR_RESERVED1_SHIFT 0
#define  SVDO3_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VDNR_RESERVED1_MASK) >> SVDO3_VDNR_RESERVED1_SHIFT)
#define  SVDO3_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO3_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO3_VIER_RESERVED1_SHIFT 8
#define  SVDO3_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_RESERVED1_MASK) >> SVDO3_VIER_RESERVED1_SHIFT)
#define  SVDO3_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VIER_RESERVED1_SHIFT))

#define  SVDO3_VIER_TOPERRINT_MASK 0x80
#define  SVDO3_VIER_TOPERRINT_SHIFT 7
#define  SVDO3_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_TOPERRINT_MASK) >> SVDO3_VIER_TOPERRINT_SHIFT)
#define  SVDO3_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO3_VIER_TOPERRINT_SHIFT))

#define  SVDO3_VIER_BOTERRINT_MASK 0x40
#define  SVDO3_VIER_BOTERRINT_SHIFT 6
#define  SVDO3_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_BOTERRINT_MASK) >> SVDO3_VIER_BOTERRINT_SHIFT)
#define  SVDO3_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO3_VIER_BOTERRINT_SHIFT))

#define  SVDO3_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO3_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO3_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_HSYNCERRINT_MASK) >> SVDO3_VIER_HSYNCERRINT_SHIFT)
#define  SVDO3_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO3_VIER_HSYNCERRINT_SHIFT))

#define  SVDO3_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO3_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO3_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_BENDERUNDERRUNINT_MASK) >> SVDO3_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO3_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO3_VIER_EOIINT_MASK 0x8
#define  SVDO3_VIER_EOIINT_SHIFT 3
#define  SVDO3_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_EOIINT_MASK) >> SVDO3_VIER_EOIINT_SHIFT)
#define  SVDO3_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO3_VIER_EOIINT_SHIFT))

#define  SVDO3_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO3_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO3_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_PTUNDERRUNINT_MASK) >> SVDO3_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO3_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO3_VIER_DESCINT_MASK 0x2
#define  SVDO3_VIER_DESCINT_SHIFT 1
#define  SVDO3_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_DESCINT_MASK) >> SVDO3_VIER_DESCINT_SHIFT)
#define  SVDO3_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO3_VIER_DESCINT_SHIFT))

#define  SVDO3_VIER_OWNINT_MASK 0x1
#define  SVDO3_VIER_OWNINT_SHIFT 0
#define  SVDO3_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIER_OWNINT_MASK) >> SVDO3_VIER_OWNINT_SHIFT)
#define  SVDO3_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO3_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO3_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO3_VIPR_RESERVED1_SHIFT 8
#define  SVDO3_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_RESERVED1_MASK) >> SVDO3_VIPR_RESERVED1_SHIFT)
#define  SVDO3_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VIPR_RESERVED1_SHIFT))

#define  SVDO3_VIPR_TOPERRINT_MASK 0x80
#define  SVDO3_VIPR_TOPERRINT_SHIFT 7
#define  SVDO3_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_TOPERRINT_MASK) >> SVDO3_VIPR_TOPERRINT_SHIFT)
#define  SVDO3_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_TOPERRINT_SHIFT))

#define  SVDO3_VIPR_BOTERRINT_MASK 0x40
#define  SVDO3_VIPR_BOTERRINT_SHIFT 6
#define  SVDO3_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_BOTERRINT_MASK) >> SVDO3_VIPR_BOTERRINT_SHIFT)
#define  SVDO3_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_BOTERRINT_SHIFT))

#define  SVDO3_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO3_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO3_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_HSYNCERRINT_MASK) >> SVDO3_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO3_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO3_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO3_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO3_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO3_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO3_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO3_VIPR_EOIINT_MASK 0x8
#define  SVDO3_VIPR_EOIINT_SHIFT 3
#define  SVDO3_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_EOIINT_MASK) >> SVDO3_VIPR_EOIINT_SHIFT)
#define  SVDO3_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_EOIINT_SHIFT))

#define  SVDO3_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO3_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO3_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_PTUNDERRUNINT_MASK) >> SVDO3_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO3_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO3_VIPR_DESCINT_MASK 0x2
#define  SVDO3_VIPR_DESCINT_SHIFT 1
#define  SVDO3_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_DESCINT_MASK) >> SVDO3_VIPR_DESCINT_SHIFT)
#define  SVDO3_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_DESCINT_SHIFT))

#define  SVDO3_VIPR_OWNINT_MASK 0x1
#define  SVDO3_VIPR_OWNINT_SHIFT 0
#define  SVDO3_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIPR_OWNINT_MASK) >> SVDO3_VIPR_OWNINT_SHIFT)
#define  SVDO3_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO3_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO3_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO3_VIAR_RESERVED1_SHIFT 8
#define  SVDO3_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_RESERVED1_MASK) >> SVDO3_VIAR_RESERVED1_SHIFT)
#define  SVDO3_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VIAR_RESERVED1_SHIFT))

#define  SVDO3_VIAR_TOPERRINT_MASK 0x80
#define  SVDO3_VIAR_TOPERRINT_SHIFT 7
#define  SVDO3_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_TOPERRINT_MASK) >> SVDO3_VIAR_TOPERRINT_SHIFT)
#define  SVDO3_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_TOPERRINT_SHIFT))

#define  SVDO3_VIAR_BOTERRINT_MASK 0x40
#define  SVDO3_VIAR_BOTERRINT_SHIFT 6
#define  SVDO3_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_BOTERRINT_MASK) >> SVDO3_VIAR_BOTERRINT_SHIFT)
#define  SVDO3_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_BOTERRINT_SHIFT))

#define  SVDO3_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO3_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO3_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_HSYNCERRINT_MASK) >> SVDO3_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO3_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO3_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO3_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO3_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO3_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO3_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO3_VIAR_EOIINT_MASK 0x8
#define  SVDO3_VIAR_EOIINT_SHIFT 3
#define  SVDO3_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_EOIINT_MASK) >> SVDO3_VIAR_EOIINT_SHIFT)
#define  SVDO3_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_EOIINT_SHIFT))

#define  SVDO3_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO3_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO3_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_PTUNDERRUNINT_MASK) >> SVDO3_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO3_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO3_VIAR_DESCINT_MASK 0x2
#define  SVDO3_VIAR_DESCINT_SHIFT 1
#define  SVDO3_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_DESCINT_MASK) >> SVDO3_VIAR_DESCINT_SHIFT)
#define  SVDO3_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_DESCINT_SHIFT))

#define  SVDO3_VIAR_OWNINT_MASK 0x1
#define  SVDO3_VIAR_OWNINT_SHIFT 0
#define  SVDO3_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIAR_OWNINT_MASK) >> SVDO3_VIAR_OWNINT_SHIFT)
#define  SVDO3_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO3_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO3_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO3_VIFR_RESERVED1_SHIFT 8
#define  SVDO3_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_RESERVED1_MASK) >> SVDO3_VIFR_RESERVED1_SHIFT)
#define  SVDO3_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VIFR_RESERVED1_SHIFT))

#define  SVDO3_VIFR_TOPERRINT_MASK 0x80
#define  SVDO3_VIFR_TOPERRINT_SHIFT 7
#define  SVDO3_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_TOPERRINT_MASK) >> SVDO3_VIFR_TOPERRINT_SHIFT)
#define  SVDO3_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_TOPERRINT_SHIFT))

#define  SVDO3_VIFR_BOTERRINT_MASK 0x40
#define  SVDO3_VIFR_BOTERRINT_SHIFT 6
#define  SVDO3_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_BOTERRINT_MASK) >> SVDO3_VIFR_BOTERRINT_SHIFT)
#define  SVDO3_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_BOTERRINT_SHIFT))

#define  SVDO3_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO3_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO3_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_HSYNCERRINT_MASK) >> SVDO3_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO3_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO3_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO3_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO3_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO3_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO3_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO3_VIFR_EOIINT_MASK 0x8
#define  SVDO3_VIFR_EOIINT_SHIFT 3
#define  SVDO3_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_EOIINT_MASK) >> SVDO3_VIFR_EOIINT_SHIFT)
#define  SVDO3_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_EOIINT_SHIFT))

#define  SVDO3_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO3_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO3_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_PTUNDERRUNINT_MASK) >> SVDO3_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO3_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO3_VIFR_DESCINT_MASK 0x2
#define  SVDO3_VIFR_DESCINT_SHIFT 1
#define  SVDO3_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_DESCINT_MASK) >> SVDO3_VIFR_DESCINT_SHIFT)
#define  SVDO3_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_DESCINT_SHIFT))

#define  SVDO3_VIFR_OWNINT_MASK 0x1
#define  SVDO3_VIFR_OWNINT_SHIFT 0
#define  SVDO3_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO3_VIFR_OWNINT_MASK) >> SVDO3_VIFR_OWNINT_SHIFT)
#define  SVDO3_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO3_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO3_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO3_VLWR_RESERVED1_SHIFT 16
#define  SVDO3_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VLWR_RESERVED1_MASK) >> SVDO3_VLWR_RESERVED1_SHIFT)
#define  SVDO3_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VLWR_RESERVED1_SHIFT))

#define  SVDO3_VLWR_LINEWID_MASK 0xfffc
#define  SVDO3_VLWR_LINEWID_SHIFT 2
#define  SVDO3_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO3_VLWR_LINEWID_MASK) >> SVDO3_VLWR_LINEWID_SHIFT)
#define  SVDO3_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO3_VLWR_LINEWID_SHIFT))

#define  SVDO3_VLWR_RESERVED2_MASK 0x3
#define  SVDO3_VLWR_RESERVED2_SHIFT 0
#define  SVDO3_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO3_VLWR_RESERVED2_MASK) >> SVDO3_VLWR_RESERVED2_SHIFT)
#define  SVDO3_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO3_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO3_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO3_VTCA_TCACCUM_SHIFT 0
#define  SVDO3_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO3_VTCA_TCACCUM_MASK) >> SVDO3_VTCA_TCACCUM_SHIFT)
#define  SVDO3_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO3_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO3_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO3_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO3_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO3_VTCP_TCNONBLANKPIX_MASK) >> SVDO3_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO3_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO3_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO3_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO3_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO3_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO3_VSAR_SOURCEADDR_MASK) >> SVDO3_VSAR_SOURCEADDR_SHIFT)
#define  SVDO3_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO3_VSAR_SOURCEADDR_SHIFT))

#define  SVDO3_VSAR_RESERVED1_MASK 0x3
#define  SVDO3_VSAR_RESERVED1_SHIFT 0
#define  SVDO3_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VSAR_RESERVED1_MASK) >> SVDO3_VSAR_RESERVED1_SHIFT)
#define  SVDO3_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO3_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO3_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO3_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO3_VPKR_LASTLINEPIXVAL_MASK) >> SVDO3_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO3_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO3_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO3_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO3_VPKR_RESERVED1_SHIFT 24
#define  SVDO3_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO3_VPKR_RESERVED1_MASK) >> SVDO3_VPKR_RESERVED1_SHIFT)
#define  SVDO3_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO3_VPKR_RESERVED1_SHIFT))

#define  SVDO3_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO3_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO3_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO3_VPKR_ENDSKIPLEN_MASK) >> SVDO3_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO3_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO3_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO3_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO3_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO3_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO3_VPKR_STARTSKIPLEN_MASK) >> SVDO3_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO3_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO3_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO3_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST0_JUSTLUT_SHIFT 0
#define  SVDO3_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST0_JUSTLUT_MASK) >> SVDO3_JUST0_JUSTLUT_SHIFT)
#define  SVDO3_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO3_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST1_JUSTLUT_SHIFT 0
#define  SVDO3_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST1_JUSTLUT_MASK) >> SVDO3_JUST1_JUSTLUT_SHIFT)
#define  SVDO3_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO3_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST2_JUSTLUT_SHIFT 0
#define  SVDO3_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST2_JUSTLUT_MASK) >> SVDO3_JUST2_JUSTLUT_SHIFT)
#define  SVDO3_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO3_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST3_JUSTLUT_SHIFT 0
#define  SVDO3_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST3_JUSTLUT_MASK) >> SVDO3_JUST3_JUSTLUT_SHIFT)
#define  SVDO3_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO3_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST4_JUSTLUT_SHIFT 0
#define  SVDO3_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST4_JUSTLUT_MASK) >> SVDO3_JUST4_JUSTLUT_SHIFT)
#define  SVDO3_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO3_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST5_JUSTLUT_SHIFT 0
#define  SVDO3_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST5_JUSTLUT_MASK) >> SVDO3_JUST5_JUSTLUT_SHIFT)
#define  SVDO3_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO3_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST6_JUSTLUT_SHIFT 0
#define  SVDO3_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST6_JUSTLUT_MASK) >> SVDO3_JUST6_JUSTLUT_SHIFT)
#define  SVDO3_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO3_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST7_JUSTLUT_SHIFT 0
#define  SVDO3_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST7_JUSTLUT_MASK) >> SVDO3_JUST7_JUSTLUT_SHIFT)
#define  SVDO3_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO3_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST8_JUSTLUT_SHIFT 0
#define  SVDO3_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST8_JUSTLUT_MASK) >> SVDO3_JUST8_JUSTLUT_SHIFT)
#define  SVDO3_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO3_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST9_JUSTLUT_SHIFT 0
#define  SVDO3_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST9_JUSTLUT_MASK) >> SVDO3_JUST9_JUSTLUT_SHIFT)
#define  SVDO3_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO3_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST10_JUSTLUT_SHIFT 0
#define  SVDO3_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST10_JUSTLUT_MASK) >> SVDO3_JUST10_JUSTLUT_SHIFT)
#define  SVDO3_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO3_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST11_JUSTLUT_SHIFT 0
#define  SVDO3_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST11_JUSTLUT_MASK) >> SVDO3_JUST11_JUSTLUT_SHIFT)
#define  SVDO3_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO3_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST12_JUSTLUT_SHIFT 0
#define  SVDO3_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST12_JUSTLUT_MASK) >> SVDO3_JUST12_JUSTLUT_SHIFT)
#define  SVDO3_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO3_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST13_JUSTLUT_SHIFT 0
#define  SVDO3_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST13_JUSTLUT_MASK) >> SVDO3_JUST13_JUSTLUT_SHIFT)
#define  SVDO3_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO3_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST14_JUSTLUT_SHIFT 0
#define  SVDO3_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST14_JUSTLUT_MASK) >> SVDO3_JUST14_JUSTLUT_SHIFT)
#define  SVDO3_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO3_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO3_JUST15_JUSTLUT_SHIFT 0
#define  SVDO3_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO3_JUST15_JUSTLUT_MASK) >> SVDO3_JUST15_JUSTLUT_SHIFT)
#define  SVDO3_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO3_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO3_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE0_PCODELUT_SHIFT 0
#define  SVDO3_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE0_PCODELUT_MASK) >> SVDO3_PCODE0_PCODELUT_SHIFT)
#define  SVDO3_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO3_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE1_PCODELUT_SHIFT 0
#define  SVDO3_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE1_PCODELUT_MASK) >> SVDO3_PCODE1_PCODELUT_SHIFT)
#define  SVDO3_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO3_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE2_PCODELUT_SHIFT 0
#define  SVDO3_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE2_PCODELUT_MASK) >> SVDO3_PCODE2_PCODELUT_SHIFT)
#define  SVDO3_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO3_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE3_PCODELUT_SHIFT 0
#define  SVDO3_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE3_PCODELUT_MASK) >> SVDO3_PCODE3_PCODELUT_SHIFT)
#define  SVDO3_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO3_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE4_PCODELUT_SHIFT 0
#define  SVDO3_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE4_PCODELUT_MASK) >> SVDO3_PCODE4_PCODELUT_SHIFT)
#define  SVDO3_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO3_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE5_PCODELUT_SHIFT 0
#define  SVDO3_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE5_PCODELUT_MASK) >> SVDO3_PCODE5_PCODELUT_SHIFT)
#define  SVDO3_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO3_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE6_PCODELUT_SHIFT 0
#define  SVDO3_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE6_PCODELUT_MASK) >> SVDO3_PCODE6_PCODELUT_SHIFT)
#define  SVDO3_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO3_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE7_PCODELUT_SHIFT 0
#define  SVDO3_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE7_PCODELUT_MASK) >> SVDO3_PCODE7_PCODELUT_SHIFT)
#define  SVDO3_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO3_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE8_PCODELUT_SHIFT 0
#define  SVDO3_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE8_PCODELUT_MASK) >> SVDO3_PCODE8_PCODELUT_SHIFT)
#define  SVDO3_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO3_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE9_PCODELUT_SHIFT 0
#define  SVDO3_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE9_PCODELUT_MASK) >> SVDO3_PCODE9_PCODELUT_SHIFT)
#define  SVDO3_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO3_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE10_PCODELUT_SHIFT 0
#define  SVDO3_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE10_PCODELUT_MASK) >> SVDO3_PCODE10_PCODELUT_SHIFT)
#define  SVDO3_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO3_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE11_PCODELUT_SHIFT 0
#define  SVDO3_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE11_PCODELUT_MASK) >> SVDO3_PCODE11_PCODELUT_SHIFT)
#define  SVDO3_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO3_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE12_PCODELUT_SHIFT 0
#define  SVDO3_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE12_PCODELUT_MASK) >> SVDO3_PCODE12_PCODELUT_SHIFT)
#define  SVDO3_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO3_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE13_PCODELUT_SHIFT 0
#define  SVDO3_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE13_PCODELUT_MASK) >> SVDO3_PCODE13_PCODELUT_SHIFT)
#define  SVDO3_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO3_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE14_PCODELUT_SHIFT 0
#define  SVDO3_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE14_PCODELUT_MASK) >> SVDO3_PCODE14_PCODELUT_SHIFT)
#define  SVDO3_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO3_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO3_PCODE15_PCODELUT_SHIFT 0
#define  SVDO3_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO3_PCODE15_PCODELUT_MASK) >> SVDO3_PCODE15_PCODELUT_SHIFT)
#define  SVDO3_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO3_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO3_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 5 of 8) (SVDO4)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO4_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO4_SCFG_RESERVED1_SHIFT 30
#define  SVDO4_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED1_MASK) >> SVDO4_SCFG_RESERVED1_SHIFT)
#define  SVDO4_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED1_SHIFT))

#define  SVDO4_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO4_SCFG_BURSTSZ_SHIFT 28
#define  SVDO4_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_BURSTSZ_MASK) >> SVDO4_SCFG_BURSTSZ_SHIFT)
#define  SVDO4_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO4_SCFG_BURSTSZ_SHIFT))

#define  SVDO4_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO4_SCFG_RESERVED2_SHIFT 26
#define  SVDO4_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED2_MASK) >> SVDO4_SCFG_RESERVED2_SHIFT)
#define  SVDO4_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED2_SHIFT))

#define  SVDO4_SCFG_SERP_MASK 0x2000000
#define  SVDO4_SCFG_SERP_SHIFT 25
#define  SVDO4_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_SERP_MASK) >> SVDO4_SCFG_SERP_SHIFT)
#define  SVDO4_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO4_SCFG_SERP_SHIFT))

#define  SVDO4_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO4_SCFG_BOT2TOP_SHIFT 24
#define  SVDO4_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_BOT2TOP_MASK) >> SVDO4_SCFG_BOT2TOP_SHIFT)
#define  SVDO4_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO4_SCFG_BOT2TOP_SHIFT))

#define  SVDO4_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO4_SCFG_RESERVED3_SHIFT 22
#define  SVDO4_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED3_MASK) >> SVDO4_SCFG_RESERVED3_SHIFT)
#define  SVDO4_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED3_SHIFT))

#define  SVDO4_SCFG_BPP_MASK 0x300000
#define  SVDO4_SCFG_BPP_SHIFT 20
#define  SVDO4_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_BPP_MASK) >> SVDO4_SCFG_BPP_SHIFT)
#define  SVDO4_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO4_SCFG_BPP_SHIFT))

#define  SVDO4_SCFG_RESERVED4_MASK 0x80000
#define  SVDO4_SCFG_RESERVED4_SHIFT 19
#define  SVDO4_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED4_MASK) >> SVDO4_SCFG_RESERVED4_SHIFT)
#define  SVDO4_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED4_SHIFT))

#define  SVDO4_SCFG_LINESKIP_MASK 0x70000
#define  SVDO4_SCFG_LINESKIP_SHIFT 16
#define  SVDO4_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_LINESKIP_MASK) >> SVDO4_SCFG_LINESKIP_SHIFT)
#define  SVDO4_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO4_SCFG_LINESKIP_SHIFT))

#define  SVDO4_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO4_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO4_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_PIXDOUBLE_MASK) >> SVDO4_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO4_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO4_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO4_SCFG_PCODEREF_MASK 0x4000
#define  SVDO4_SCFG_PCODEREF_SHIFT 14
#define  SVDO4_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_PCODEREF_MASK) >> SVDO4_SCFG_PCODEREF_SHIFT)
#define  SVDO4_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO4_SCFG_PCODEREF_SHIFT))

#define  SVDO4_SCFG_INITJUST_MASK 0x2000
#define  SVDO4_SCFG_INITJUST_SHIFT 13
#define  SVDO4_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_INITJUST_MASK) >> SVDO4_SCFG_INITJUST_SHIFT)
#define  SVDO4_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO4_SCFG_INITJUST_SHIFT))

#define  SVDO4_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO4_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO4_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_FORCEDJUST_MASK) >> SVDO4_SCFG_FORCEDJUST_SHIFT)
#define  SVDO4_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO4_SCFG_FORCEDJUST_SHIFT))

#define  SVDO4_SCFG_RESERVED5_MASK 0x800
#define  SVDO4_SCFG_RESERVED5_SHIFT 11
#define  SVDO4_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED5_MASK) >> SVDO4_SCFG_RESERVED5_SHIFT)
#define  SVDO4_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED5_SHIFT))

#define  SVDO4_SCFG_DATASOURCE_MASK 0x400
#define  SVDO4_SCFG_DATASOURCE_SHIFT 10
#define  SVDO4_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_DATASOURCE_MASK) >> SVDO4_SCFG_DATASOURCE_SHIFT)
#define  SVDO4_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO4_SCFG_DATASOURCE_SHIFT))

#define  SVDO4_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO4_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO4_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_TOGGLEJUST_MASK) >> SVDO4_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO4_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO4_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO4_SCFG_RESERVED6_MASK 0xc0
#define  SVDO4_SCFG_RESERVED6_SHIFT 6
#define  SVDO4_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED6_MASK) >> SVDO4_SCFG_RESERVED6_SHIFT)
#define  SVDO4_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED6_SHIFT))

#define  SVDO4_SCFG_LINEREPL_MASK 0x30
#define  SVDO4_SCFG_LINEREPL_SHIFT 4
#define  SVDO4_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_LINEREPL_MASK) >> SVDO4_SCFG_LINEREPL_SHIFT)
#define  SVDO4_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO4_SCFG_LINEREPL_SHIFT))

#define  SVDO4_SCFG_RESERVED7_MASK 0xc
#define  SVDO4_SCFG_RESERVED7_SHIFT 2
#define  SVDO4_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESERVED7_MASK) >> SVDO4_SCFG_RESERVED7_SHIFT)
#define  SVDO4_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESERVED7_SHIFT))

#define  SVDO4_SCFG_RESETDMA_MASK 0x2
#define  SVDO4_SCFG_RESETDMA_SHIFT 1
#define  SVDO4_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_RESETDMA_MASK) >> SVDO4_SCFG_RESETDMA_SHIFT)
#define  SVDO4_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO4_SCFG_RESETDMA_SHIFT))

#define  SVDO4_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO4_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO4_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO4_SCFG_SVDOENABLE_MASK) >> SVDO4_SCFG_SVDOENABLE_SHIFT)
#define  SVDO4_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO4_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO4_STAT_SKIPST_MASK 0xe0000000
#define  SVDO4_STAT_SKIPST_SHIFT 29
#define  SVDO4_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_SKIPST_MASK) >> SVDO4_STAT_SKIPST_SHIFT)
#define  SVDO4_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO4_STAT_SKIPST_SHIFT))

#define  SVDO4_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO4_STAT_PIXPIPEST_SHIFT 26
#define  SVDO4_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_PIXPIPEST_MASK) >> SVDO4_STAT_PIXPIPEST_SHIFT)
#define  SVDO4_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO4_STAT_PIXPIPEST_SHIFT))

#define  SVDO4_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO4_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO4_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_DATAFIFOENT_MASK) >> SVDO4_STAT_DATAFIFOENT_SHIFT)
#define  SVDO4_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO4_STAT_DATAFIFOENT_SHIFT))

#define  SVDO4_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO4_STAT_REFIFOENT_SHIFT 16
#define  SVDO4_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_REFIFOENT_MASK) >> SVDO4_STAT_REFIFOENT_SHIFT)
#define  SVDO4_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO4_STAT_REFIFOENT_SHIFT))

#define  SVDO4_STAT_ADDRST_MASK 0xc000
#define  SVDO4_STAT_ADDRST_SHIFT 14
#define  SVDO4_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_ADDRST_MASK) >> SVDO4_STAT_ADDRST_SHIFT)
#define  SVDO4_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO4_STAT_ADDRST_SHIFT))

#define  SVDO4_STAT_DATAST_MASK 0x3800
#define  SVDO4_STAT_DATAST_SHIFT 11
#define  SVDO4_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_DATAST_MASK) >> SVDO4_STAT_DATAST_SHIFT)
#define  SVDO4_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO4_STAT_DATAST_SHIFT))

#define  SVDO4_STAT_CMDST_MASK 0x700
#define  SVDO4_STAT_CMDST_SHIFT 8
#define  SVDO4_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_CMDST_MASK) >> SVDO4_STAT_CMDST_SHIFT)
#define  SVDO4_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO4_STAT_CMDST_SHIFT))

#define  SVDO4_STAT_DMAOWN_MASK 0x80
#define  SVDO4_STAT_DMAOWN_SHIFT 7
#define  SVDO4_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_DMAOWN_MASK) >> SVDO4_STAT_DMAOWN_SHIFT)
#define  SVDO4_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO4_STAT_DMAOWN_SHIFT))

#define  SVDO4_STAT_DMAACTIVE_MASK 0x40
#define  SVDO4_STAT_DMAACTIVE_SHIFT 6
#define  SVDO4_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_DMAACTIVE_MASK) >> SVDO4_STAT_DMAACTIVE_SHIFT)
#define  SVDO4_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO4_STAT_DMAACTIVE_SHIFT))

#define  SVDO4_STAT_LASTBUFFER_MASK 0x20
#define  SVDO4_STAT_LASTBUFFER_SHIFT 5
#define  SVDO4_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_LASTBUFFER_MASK) >> SVDO4_STAT_LASTBUFFER_SHIFT)
#define  SVDO4_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO4_STAT_LASTBUFFER_SHIFT))

#define  SVDO4_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO4_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO4_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_FIRSTBUFFER_MASK) >> SVDO4_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO4_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO4_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO4_STAT_RTOL_MASK 0x8
#define  SVDO4_STAT_RTOL_SHIFT 3
#define  SVDO4_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_RTOL_MASK) >> SVDO4_STAT_RTOL_SHIFT)
#define  SVDO4_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO4_STAT_RTOL_SHIFT))

#define  SVDO4_STAT_BLANK_MASK 0x4
#define  SVDO4_STAT_BLANK_SHIFT 2
#define  SVDO4_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_BLANK_MASK) >> SVDO4_STAT_BLANK_SHIFT)
#define  SVDO4_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO4_STAT_BLANK_SHIFT))

#define  SVDO4_STAT_INTONFINISH_MASK 0x2
#define  SVDO4_STAT_INTONFINISH_SHIFT 1
#define  SVDO4_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_INTONFINISH_MASK) >> SVDO4_STAT_INTONFINISH_SHIFT)
#define  SVDO4_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO4_STAT_INTONFINISH_SHIFT))

#define  SVDO4_STAT_STOPONFINISH_MASK 0x1
#define  SVDO4_STAT_STOPONFINISH_SHIFT 0
#define  SVDO4_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO4_STAT_STOPONFINISH_MASK) >> SVDO4_STAT_STOPONFINISH_SHIFT)
#define  SVDO4_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO4_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO4_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO4_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO4_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO4_VDWR_WRDESCADDR_MASK) >> SVDO4_VDWR_WRDESCADDR_SHIFT)
#define  SVDO4_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO4_VDWR_WRDESCADDR_SHIFT))

#define  SVDO4_VDWR_RESERVED1_MASK 0xf
#define  SVDO4_VDWR_RESERVED1_SHIFT 0
#define  SVDO4_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VDWR_RESERVED1_MASK) >> SVDO4_VDWR_RESERVED1_SHIFT)
#define  SVDO4_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO4_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO4_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO4_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO4_VDAR_CURRDESCADDR_MASK) >> SVDO4_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO4_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO4_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO4_VDAR_RESERVED1_MASK 0xf
#define  SVDO4_VDAR_RESERVED1_SHIFT 0
#define  SVDO4_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VDAR_RESERVED1_MASK) >> SVDO4_VDAR_RESERVED1_SHIFT)
#define  SVDO4_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO4_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO4_VDBR_RESERVED1_SHIFT 16
#define  SVDO4_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VDBR_RESERVED1_MASK) >> SVDO4_VDBR_RESERVED1_SHIFT)
#define  SVDO4_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VDBR_RESERVED1_SHIFT))

#define  SVDO4_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO4_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO4_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO4_VDBR_BYTESLEFT_MASK) >> SVDO4_VDBR_BYTESLEFT_SHIFT)
#define  SVDO4_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO4_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO4_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO4_VDLR_RESERVED1_SHIFT 14
#define  SVDO4_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VDLR_RESERVED1_MASK) >> SVDO4_VDLR_RESERVED1_SHIFT)
#define  SVDO4_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VDLR_RESERVED1_SHIFT))

#define  SVDO4_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO4_VDLR_LINESLEFT_SHIFT 0
#define  SVDO4_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO4_VDLR_LINESLEFT_MASK) >> SVDO4_VDLR_LINESLEFT_SHIFT)
#define  SVDO4_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO4_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO4_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO4_VDNR_DESCADDR_SHIFT 4
#define  SVDO4_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO4_VDNR_DESCADDR_MASK) >> SVDO4_VDNR_DESCADDR_SHIFT)
#define  SVDO4_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO4_VDNR_DESCADDR_SHIFT))

#define  SVDO4_VDNR_RESERVED1_MASK 0xf
#define  SVDO4_VDNR_RESERVED1_SHIFT 0
#define  SVDO4_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VDNR_RESERVED1_MASK) >> SVDO4_VDNR_RESERVED1_SHIFT)
#define  SVDO4_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO4_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO4_VIER_RESERVED1_SHIFT 8
#define  SVDO4_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_RESERVED1_MASK) >> SVDO4_VIER_RESERVED1_SHIFT)
#define  SVDO4_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VIER_RESERVED1_SHIFT))

#define  SVDO4_VIER_TOPERRINT_MASK 0x80
#define  SVDO4_VIER_TOPERRINT_SHIFT 7
#define  SVDO4_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_TOPERRINT_MASK) >> SVDO4_VIER_TOPERRINT_SHIFT)
#define  SVDO4_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO4_VIER_TOPERRINT_SHIFT))

#define  SVDO4_VIER_BOTERRINT_MASK 0x40
#define  SVDO4_VIER_BOTERRINT_SHIFT 6
#define  SVDO4_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_BOTERRINT_MASK) >> SVDO4_VIER_BOTERRINT_SHIFT)
#define  SVDO4_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO4_VIER_BOTERRINT_SHIFT))

#define  SVDO4_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO4_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO4_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_HSYNCERRINT_MASK) >> SVDO4_VIER_HSYNCERRINT_SHIFT)
#define  SVDO4_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO4_VIER_HSYNCERRINT_SHIFT))

#define  SVDO4_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO4_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO4_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_BENDERUNDERRUNINT_MASK) >> SVDO4_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO4_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO4_VIER_EOIINT_MASK 0x8
#define  SVDO4_VIER_EOIINT_SHIFT 3
#define  SVDO4_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_EOIINT_MASK) >> SVDO4_VIER_EOIINT_SHIFT)
#define  SVDO4_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO4_VIER_EOIINT_SHIFT))

#define  SVDO4_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO4_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO4_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_PTUNDERRUNINT_MASK) >> SVDO4_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO4_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO4_VIER_DESCINT_MASK 0x2
#define  SVDO4_VIER_DESCINT_SHIFT 1
#define  SVDO4_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_DESCINT_MASK) >> SVDO4_VIER_DESCINT_SHIFT)
#define  SVDO4_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO4_VIER_DESCINT_SHIFT))

#define  SVDO4_VIER_OWNINT_MASK 0x1
#define  SVDO4_VIER_OWNINT_SHIFT 0
#define  SVDO4_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIER_OWNINT_MASK) >> SVDO4_VIER_OWNINT_SHIFT)
#define  SVDO4_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO4_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO4_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO4_VIPR_RESERVED1_SHIFT 8
#define  SVDO4_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_RESERVED1_MASK) >> SVDO4_VIPR_RESERVED1_SHIFT)
#define  SVDO4_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VIPR_RESERVED1_SHIFT))

#define  SVDO4_VIPR_TOPERRINT_MASK 0x80
#define  SVDO4_VIPR_TOPERRINT_SHIFT 7
#define  SVDO4_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_TOPERRINT_MASK) >> SVDO4_VIPR_TOPERRINT_SHIFT)
#define  SVDO4_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_TOPERRINT_SHIFT))

#define  SVDO4_VIPR_BOTERRINT_MASK 0x40
#define  SVDO4_VIPR_BOTERRINT_SHIFT 6
#define  SVDO4_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_BOTERRINT_MASK) >> SVDO4_VIPR_BOTERRINT_SHIFT)
#define  SVDO4_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_BOTERRINT_SHIFT))

#define  SVDO4_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO4_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO4_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_HSYNCERRINT_MASK) >> SVDO4_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO4_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO4_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO4_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO4_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO4_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO4_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO4_VIPR_EOIINT_MASK 0x8
#define  SVDO4_VIPR_EOIINT_SHIFT 3
#define  SVDO4_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_EOIINT_MASK) >> SVDO4_VIPR_EOIINT_SHIFT)
#define  SVDO4_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_EOIINT_SHIFT))

#define  SVDO4_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO4_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO4_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_PTUNDERRUNINT_MASK) >> SVDO4_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO4_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO4_VIPR_DESCINT_MASK 0x2
#define  SVDO4_VIPR_DESCINT_SHIFT 1
#define  SVDO4_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_DESCINT_MASK) >> SVDO4_VIPR_DESCINT_SHIFT)
#define  SVDO4_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_DESCINT_SHIFT))

#define  SVDO4_VIPR_OWNINT_MASK 0x1
#define  SVDO4_VIPR_OWNINT_SHIFT 0
#define  SVDO4_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIPR_OWNINT_MASK) >> SVDO4_VIPR_OWNINT_SHIFT)
#define  SVDO4_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO4_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO4_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO4_VIAR_RESERVED1_SHIFT 8
#define  SVDO4_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_RESERVED1_MASK) >> SVDO4_VIAR_RESERVED1_SHIFT)
#define  SVDO4_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VIAR_RESERVED1_SHIFT))

#define  SVDO4_VIAR_TOPERRINT_MASK 0x80
#define  SVDO4_VIAR_TOPERRINT_SHIFT 7
#define  SVDO4_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_TOPERRINT_MASK) >> SVDO4_VIAR_TOPERRINT_SHIFT)
#define  SVDO4_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_TOPERRINT_SHIFT))

#define  SVDO4_VIAR_BOTERRINT_MASK 0x40
#define  SVDO4_VIAR_BOTERRINT_SHIFT 6
#define  SVDO4_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_BOTERRINT_MASK) >> SVDO4_VIAR_BOTERRINT_SHIFT)
#define  SVDO4_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_BOTERRINT_SHIFT))

#define  SVDO4_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO4_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO4_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_HSYNCERRINT_MASK) >> SVDO4_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO4_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO4_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO4_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO4_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO4_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO4_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO4_VIAR_EOIINT_MASK 0x8
#define  SVDO4_VIAR_EOIINT_SHIFT 3
#define  SVDO4_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_EOIINT_MASK) >> SVDO4_VIAR_EOIINT_SHIFT)
#define  SVDO4_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_EOIINT_SHIFT))

#define  SVDO4_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO4_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO4_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_PTUNDERRUNINT_MASK) >> SVDO4_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO4_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO4_VIAR_DESCINT_MASK 0x2
#define  SVDO4_VIAR_DESCINT_SHIFT 1
#define  SVDO4_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_DESCINT_MASK) >> SVDO4_VIAR_DESCINT_SHIFT)
#define  SVDO4_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_DESCINT_SHIFT))

#define  SVDO4_VIAR_OWNINT_MASK 0x1
#define  SVDO4_VIAR_OWNINT_SHIFT 0
#define  SVDO4_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIAR_OWNINT_MASK) >> SVDO4_VIAR_OWNINT_SHIFT)
#define  SVDO4_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO4_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO4_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO4_VIFR_RESERVED1_SHIFT 8
#define  SVDO4_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_RESERVED1_MASK) >> SVDO4_VIFR_RESERVED1_SHIFT)
#define  SVDO4_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VIFR_RESERVED1_SHIFT))

#define  SVDO4_VIFR_TOPERRINT_MASK 0x80
#define  SVDO4_VIFR_TOPERRINT_SHIFT 7
#define  SVDO4_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_TOPERRINT_MASK) >> SVDO4_VIFR_TOPERRINT_SHIFT)
#define  SVDO4_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_TOPERRINT_SHIFT))

#define  SVDO4_VIFR_BOTERRINT_MASK 0x40
#define  SVDO4_VIFR_BOTERRINT_SHIFT 6
#define  SVDO4_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_BOTERRINT_MASK) >> SVDO4_VIFR_BOTERRINT_SHIFT)
#define  SVDO4_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_BOTERRINT_SHIFT))

#define  SVDO4_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO4_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO4_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_HSYNCERRINT_MASK) >> SVDO4_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO4_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO4_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO4_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO4_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO4_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO4_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO4_VIFR_EOIINT_MASK 0x8
#define  SVDO4_VIFR_EOIINT_SHIFT 3
#define  SVDO4_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_EOIINT_MASK) >> SVDO4_VIFR_EOIINT_SHIFT)
#define  SVDO4_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_EOIINT_SHIFT))

#define  SVDO4_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO4_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO4_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_PTUNDERRUNINT_MASK) >> SVDO4_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO4_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO4_VIFR_DESCINT_MASK 0x2
#define  SVDO4_VIFR_DESCINT_SHIFT 1
#define  SVDO4_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_DESCINT_MASK) >> SVDO4_VIFR_DESCINT_SHIFT)
#define  SVDO4_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_DESCINT_SHIFT))

#define  SVDO4_VIFR_OWNINT_MASK 0x1
#define  SVDO4_VIFR_OWNINT_SHIFT 0
#define  SVDO4_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO4_VIFR_OWNINT_MASK) >> SVDO4_VIFR_OWNINT_SHIFT)
#define  SVDO4_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO4_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO4_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO4_VLWR_RESERVED1_SHIFT 16
#define  SVDO4_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VLWR_RESERVED1_MASK) >> SVDO4_VLWR_RESERVED1_SHIFT)
#define  SVDO4_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VLWR_RESERVED1_SHIFT))

#define  SVDO4_VLWR_LINEWID_MASK 0xfffc
#define  SVDO4_VLWR_LINEWID_SHIFT 2
#define  SVDO4_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO4_VLWR_LINEWID_MASK) >> SVDO4_VLWR_LINEWID_SHIFT)
#define  SVDO4_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO4_VLWR_LINEWID_SHIFT))

#define  SVDO4_VLWR_RESERVED2_MASK 0x3
#define  SVDO4_VLWR_RESERVED2_SHIFT 0
#define  SVDO4_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO4_VLWR_RESERVED2_MASK) >> SVDO4_VLWR_RESERVED2_SHIFT)
#define  SVDO4_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO4_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO4_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO4_VTCA_TCACCUM_SHIFT 0
#define  SVDO4_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO4_VTCA_TCACCUM_MASK) >> SVDO4_VTCA_TCACCUM_SHIFT)
#define  SVDO4_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO4_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO4_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO4_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO4_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO4_VTCP_TCNONBLANKPIX_MASK) >> SVDO4_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO4_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO4_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO4_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO4_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO4_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO4_VSAR_SOURCEADDR_MASK) >> SVDO4_VSAR_SOURCEADDR_SHIFT)
#define  SVDO4_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO4_VSAR_SOURCEADDR_SHIFT))

#define  SVDO4_VSAR_RESERVED1_MASK 0x3
#define  SVDO4_VSAR_RESERVED1_SHIFT 0
#define  SVDO4_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VSAR_RESERVED1_MASK) >> SVDO4_VSAR_RESERVED1_SHIFT)
#define  SVDO4_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO4_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO4_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO4_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO4_VPKR_LASTLINEPIXVAL_MASK) >> SVDO4_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO4_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO4_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO4_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO4_VPKR_RESERVED1_SHIFT 24
#define  SVDO4_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO4_VPKR_RESERVED1_MASK) >> SVDO4_VPKR_RESERVED1_SHIFT)
#define  SVDO4_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO4_VPKR_RESERVED1_SHIFT))

#define  SVDO4_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO4_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO4_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO4_VPKR_ENDSKIPLEN_MASK) >> SVDO4_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO4_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO4_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO4_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO4_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO4_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO4_VPKR_STARTSKIPLEN_MASK) >> SVDO4_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO4_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO4_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO4_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST0_JUSTLUT_SHIFT 0
#define  SVDO4_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST0_JUSTLUT_MASK) >> SVDO4_JUST0_JUSTLUT_SHIFT)
#define  SVDO4_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO4_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST1_JUSTLUT_SHIFT 0
#define  SVDO4_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST1_JUSTLUT_MASK) >> SVDO4_JUST1_JUSTLUT_SHIFT)
#define  SVDO4_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO4_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST2_JUSTLUT_SHIFT 0
#define  SVDO4_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST2_JUSTLUT_MASK) >> SVDO4_JUST2_JUSTLUT_SHIFT)
#define  SVDO4_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO4_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST3_JUSTLUT_SHIFT 0
#define  SVDO4_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST3_JUSTLUT_MASK) >> SVDO4_JUST3_JUSTLUT_SHIFT)
#define  SVDO4_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO4_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST4_JUSTLUT_SHIFT 0
#define  SVDO4_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST4_JUSTLUT_MASK) >> SVDO4_JUST4_JUSTLUT_SHIFT)
#define  SVDO4_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO4_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST5_JUSTLUT_SHIFT 0
#define  SVDO4_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST5_JUSTLUT_MASK) >> SVDO4_JUST5_JUSTLUT_SHIFT)
#define  SVDO4_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO4_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST6_JUSTLUT_SHIFT 0
#define  SVDO4_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST6_JUSTLUT_MASK) >> SVDO4_JUST6_JUSTLUT_SHIFT)
#define  SVDO4_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO4_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST7_JUSTLUT_SHIFT 0
#define  SVDO4_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST7_JUSTLUT_MASK) >> SVDO4_JUST7_JUSTLUT_SHIFT)
#define  SVDO4_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO4_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST8_JUSTLUT_SHIFT 0
#define  SVDO4_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST8_JUSTLUT_MASK) >> SVDO4_JUST8_JUSTLUT_SHIFT)
#define  SVDO4_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO4_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST9_JUSTLUT_SHIFT 0
#define  SVDO4_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST9_JUSTLUT_MASK) >> SVDO4_JUST9_JUSTLUT_SHIFT)
#define  SVDO4_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO4_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST10_JUSTLUT_SHIFT 0
#define  SVDO4_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST10_JUSTLUT_MASK) >> SVDO4_JUST10_JUSTLUT_SHIFT)
#define  SVDO4_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO4_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST11_JUSTLUT_SHIFT 0
#define  SVDO4_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST11_JUSTLUT_MASK) >> SVDO4_JUST11_JUSTLUT_SHIFT)
#define  SVDO4_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO4_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST12_JUSTLUT_SHIFT 0
#define  SVDO4_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST12_JUSTLUT_MASK) >> SVDO4_JUST12_JUSTLUT_SHIFT)
#define  SVDO4_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO4_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST13_JUSTLUT_SHIFT 0
#define  SVDO4_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST13_JUSTLUT_MASK) >> SVDO4_JUST13_JUSTLUT_SHIFT)
#define  SVDO4_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO4_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST14_JUSTLUT_SHIFT 0
#define  SVDO4_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST14_JUSTLUT_MASK) >> SVDO4_JUST14_JUSTLUT_SHIFT)
#define  SVDO4_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO4_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO4_JUST15_JUSTLUT_SHIFT 0
#define  SVDO4_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO4_JUST15_JUSTLUT_MASK) >> SVDO4_JUST15_JUSTLUT_SHIFT)
#define  SVDO4_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO4_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO4_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE0_PCODELUT_SHIFT 0
#define  SVDO4_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE0_PCODELUT_MASK) >> SVDO4_PCODE0_PCODELUT_SHIFT)
#define  SVDO4_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO4_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE1_PCODELUT_SHIFT 0
#define  SVDO4_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE1_PCODELUT_MASK) >> SVDO4_PCODE1_PCODELUT_SHIFT)
#define  SVDO4_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO4_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE2_PCODELUT_SHIFT 0
#define  SVDO4_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE2_PCODELUT_MASK) >> SVDO4_PCODE2_PCODELUT_SHIFT)
#define  SVDO4_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO4_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE3_PCODELUT_SHIFT 0
#define  SVDO4_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE3_PCODELUT_MASK) >> SVDO4_PCODE3_PCODELUT_SHIFT)
#define  SVDO4_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO4_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE4_PCODELUT_SHIFT 0
#define  SVDO4_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE4_PCODELUT_MASK) >> SVDO4_PCODE4_PCODELUT_SHIFT)
#define  SVDO4_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO4_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE5_PCODELUT_SHIFT 0
#define  SVDO4_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE5_PCODELUT_MASK) >> SVDO4_PCODE5_PCODELUT_SHIFT)
#define  SVDO4_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO4_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE6_PCODELUT_SHIFT 0
#define  SVDO4_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE6_PCODELUT_MASK) >> SVDO4_PCODE6_PCODELUT_SHIFT)
#define  SVDO4_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO4_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE7_PCODELUT_SHIFT 0
#define  SVDO4_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE7_PCODELUT_MASK) >> SVDO4_PCODE7_PCODELUT_SHIFT)
#define  SVDO4_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO4_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE8_PCODELUT_SHIFT 0
#define  SVDO4_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE8_PCODELUT_MASK) >> SVDO4_PCODE8_PCODELUT_SHIFT)
#define  SVDO4_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO4_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE9_PCODELUT_SHIFT 0
#define  SVDO4_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE9_PCODELUT_MASK) >> SVDO4_PCODE9_PCODELUT_SHIFT)
#define  SVDO4_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO4_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE10_PCODELUT_SHIFT 0
#define  SVDO4_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE10_PCODELUT_MASK) >> SVDO4_PCODE10_PCODELUT_SHIFT)
#define  SVDO4_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO4_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE11_PCODELUT_SHIFT 0
#define  SVDO4_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE11_PCODELUT_MASK) >> SVDO4_PCODE11_PCODELUT_SHIFT)
#define  SVDO4_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO4_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE12_PCODELUT_SHIFT 0
#define  SVDO4_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE12_PCODELUT_MASK) >> SVDO4_PCODE12_PCODELUT_SHIFT)
#define  SVDO4_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO4_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE13_PCODELUT_SHIFT 0
#define  SVDO4_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE13_PCODELUT_MASK) >> SVDO4_PCODE13_PCODELUT_SHIFT)
#define  SVDO4_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO4_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE14_PCODELUT_SHIFT 0
#define  SVDO4_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE14_PCODELUT_MASK) >> SVDO4_PCODE14_PCODELUT_SHIFT)
#define  SVDO4_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO4_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO4_PCODE15_PCODELUT_SHIFT 0
#define  SVDO4_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO4_PCODE15_PCODELUT_MASK) >> SVDO4_PCODE15_PCODELUT_SHIFT)
#define  SVDO4_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO4_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO4_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 6 of 8) (SVDO5)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO5_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO5_SCFG_RESERVED1_SHIFT 30
#define  SVDO5_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED1_MASK) >> SVDO5_SCFG_RESERVED1_SHIFT)
#define  SVDO5_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED1_SHIFT))

#define  SVDO5_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO5_SCFG_BURSTSZ_SHIFT 28
#define  SVDO5_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_BURSTSZ_MASK) >> SVDO5_SCFG_BURSTSZ_SHIFT)
#define  SVDO5_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO5_SCFG_BURSTSZ_SHIFT))

#define  SVDO5_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO5_SCFG_RESERVED2_SHIFT 26
#define  SVDO5_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED2_MASK) >> SVDO5_SCFG_RESERVED2_SHIFT)
#define  SVDO5_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED2_SHIFT))

#define  SVDO5_SCFG_SERP_MASK 0x2000000
#define  SVDO5_SCFG_SERP_SHIFT 25
#define  SVDO5_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_SERP_MASK) >> SVDO5_SCFG_SERP_SHIFT)
#define  SVDO5_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO5_SCFG_SERP_SHIFT))

#define  SVDO5_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO5_SCFG_BOT2TOP_SHIFT 24
#define  SVDO5_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_BOT2TOP_MASK) >> SVDO5_SCFG_BOT2TOP_SHIFT)
#define  SVDO5_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO5_SCFG_BOT2TOP_SHIFT))

#define  SVDO5_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO5_SCFG_RESERVED3_SHIFT 22
#define  SVDO5_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED3_MASK) >> SVDO5_SCFG_RESERVED3_SHIFT)
#define  SVDO5_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED3_SHIFT))

#define  SVDO5_SCFG_BPP_MASK 0x300000
#define  SVDO5_SCFG_BPP_SHIFT 20
#define  SVDO5_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_BPP_MASK) >> SVDO5_SCFG_BPP_SHIFT)
#define  SVDO5_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO5_SCFG_BPP_SHIFT))

#define  SVDO5_SCFG_RESERVED4_MASK 0x80000
#define  SVDO5_SCFG_RESERVED4_SHIFT 19
#define  SVDO5_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED4_MASK) >> SVDO5_SCFG_RESERVED4_SHIFT)
#define  SVDO5_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED4_SHIFT))

#define  SVDO5_SCFG_LINESKIP_MASK 0x70000
#define  SVDO5_SCFG_LINESKIP_SHIFT 16
#define  SVDO5_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_LINESKIP_MASK) >> SVDO5_SCFG_LINESKIP_SHIFT)
#define  SVDO5_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO5_SCFG_LINESKIP_SHIFT))

#define  SVDO5_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO5_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO5_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_PIXDOUBLE_MASK) >> SVDO5_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO5_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO5_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO5_SCFG_PCODEREF_MASK 0x4000
#define  SVDO5_SCFG_PCODEREF_SHIFT 14
#define  SVDO5_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_PCODEREF_MASK) >> SVDO5_SCFG_PCODEREF_SHIFT)
#define  SVDO5_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO5_SCFG_PCODEREF_SHIFT))

#define  SVDO5_SCFG_INITJUST_MASK 0x2000
#define  SVDO5_SCFG_INITJUST_SHIFT 13
#define  SVDO5_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_INITJUST_MASK) >> SVDO5_SCFG_INITJUST_SHIFT)
#define  SVDO5_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO5_SCFG_INITJUST_SHIFT))

#define  SVDO5_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO5_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO5_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_FORCEDJUST_MASK) >> SVDO5_SCFG_FORCEDJUST_SHIFT)
#define  SVDO5_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO5_SCFG_FORCEDJUST_SHIFT))

#define  SVDO5_SCFG_RESERVED5_MASK 0x800
#define  SVDO5_SCFG_RESERVED5_SHIFT 11
#define  SVDO5_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED5_MASK) >> SVDO5_SCFG_RESERVED5_SHIFT)
#define  SVDO5_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED5_SHIFT))

#define  SVDO5_SCFG_DATASOURCE_MASK 0x400
#define  SVDO5_SCFG_DATASOURCE_SHIFT 10
#define  SVDO5_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_DATASOURCE_MASK) >> SVDO5_SCFG_DATASOURCE_SHIFT)
#define  SVDO5_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO5_SCFG_DATASOURCE_SHIFT))

#define  SVDO5_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO5_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO5_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_TOGGLEJUST_MASK) >> SVDO5_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO5_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO5_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO5_SCFG_RESERVED6_MASK 0xc0
#define  SVDO5_SCFG_RESERVED6_SHIFT 6
#define  SVDO5_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED6_MASK) >> SVDO5_SCFG_RESERVED6_SHIFT)
#define  SVDO5_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED6_SHIFT))

#define  SVDO5_SCFG_LINEREPL_MASK 0x30
#define  SVDO5_SCFG_LINEREPL_SHIFT 4
#define  SVDO5_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_LINEREPL_MASK) >> SVDO5_SCFG_LINEREPL_SHIFT)
#define  SVDO5_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO5_SCFG_LINEREPL_SHIFT))

#define  SVDO5_SCFG_RESERVED7_MASK 0xc
#define  SVDO5_SCFG_RESERVED7_SHIFT 2
#define  SVDO5_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESERVED7_MASK) >> SVDO5_SCFG_RESERVED7_SHIFT)
#define  SVDO5_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESERVED7_SHIFT))

#define  SVDO5_SCFG_RESETDMA_MASK 0x2
#define  SVDO5_SCFG_RESETDMA_SHIFT 1
#define  SVDO5_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_RESETDMA_MASK) >> SVDO5_SCFG_RESETDMA_SHIFT)
#define  SVDO5_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO5_SCFG_RESETDMA_SHIFT))

#define  SVDO5_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO5_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO5_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO5_SCFG_SVDOENABLE_MASK) >> SVDO5_SCFG_SVDOENABLE_SHIFT)
#define  SVDO5_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO5_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO5_STAT_SKIPST_MASK 0xe0000000
#define  SVDO5_STAT_SKIPST_SHIFT 29
#define  SVDO5_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_SKIPST_MASK) >> SVDO5_STAT_SKIPST_SHIFT)
#define  SVDO5_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO5_STAT_SKIPST_SHIFT))

#define  SVDO5_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO5_STAT_PIXPIPEST_SHIFT 26
#define  SVDO5_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_PIXPIPEST_MASK) >> SVDO5_STAT_PIXPIPEST_SHIFT)
#define  SVDO5_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO5_STAT_PIXPIPEST_SHIFT))

#define  SVDO5_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO5_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO5_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_DATAFIFOENT_MASK) >> SVDO5_STAT_DATAFIFOENT_SHIFT)
#define  SVDO5_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO5_STAT_DATAFIFOENT_SHIFT))

#define  SVDO5_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO5_STAT_REFIFOENT_SHIFT 16
#define  SVDO5_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_REFIFOENT_MASK) >> SVDO5_STAT_REFIFOENT_SHIFT)
#define  SVDO5_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO5_STAT_REFIFOENT_SHIFT))

#define  SVDO5_STAT_ADDRST_MASK 0xc000
#define  SVDO5_STAT_ADDRST_SHIFT 14
#define  SVDO5_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_ADDRST_MASK) >> SVDO5_STAT_ADDRST_SHIFT)
#define  SVDO5_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO5_STAT_ADDRST_SHIFT))

#define  SVDO5_STAT_DATAST_MASK 0x3800
#define  SVDO5_STAT_DATAST_SHIFT 11
#define  SVDO5_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_DATAST_MASK) >> SVDO5_STAT_DATAST_SHIFT)
#define  SVDO5_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO5_STAT_DATAST_SHIFT))

#define  SVDO5_STAT_CMDST_MASK 0x700
#define  SVDO5_STAT_CMDST_SHIFT 8
#define  SVDO5_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_CMDST_MASK) >> SVDO5_STAT_CMDST_SHIFT)
#define  SVDO5_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO5_STAT_CMDST_SHIFT))

#define  SVDO5_STAT_DMAOWN_MASK 0x80
#define  SVDO5_STAT_DMAOWN_SHIFT 7
#define  SVDO5_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_DMAOWN_MASK) >> SVDO5_STAT_DMAOWN_SHIFT)
#define  SVDO5_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO5_STAT_DMAOWN_SHIFT))

#define  SVDO5_STAT_DMAACTIVE_MASK 0x40
#define  SVDO5_STAT_DMAACTIVE_SHIFT 6
#define  SVDO5_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_DMAACTIVE_MASK) >> SVDO5_STAT_DMAACTIVE_SHIFT)
#define  SVDO5_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO5_STAT_DMAACTIVE_SHIFT))

#define  SVDO5_STAT_LASTBUFFER_MASK 0x20
#define  SVDO5_STAT_LASTBUFFER_SHIFT 5
#define  SVDO5_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_LASTBUFFER_MASK) >> SVDO5_STAT_LASTBUFFER_SHIFT)
#define  SVDO5_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO5_STAT_LASTBUFFER_SHIFT))

#define  SVDO5_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO5_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO5_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_FIRSTBUFFER_MASK) >> SVDO5_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO5_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO5_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO5_STAT_RTOL_MASK 0x8
#define  SVDO5_STAT_RTOL_SHIFT 3
#define  SVDO5_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_RTOL_MASK) >> SVDO5_STAT_RTOL_SHIFT)
#define  SVDO5_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO5_STAT_RTOL_SHIFT))

#define  SVDO5_STAT_BLANK_MASK 0x4
#define  SVDO5_STAT_BLANK_SHIFT 2
#define  SVDO5_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_BLANK_MASK) >> SVDO5_STAT_BLANK_SHIFT)
#define  SVDO5_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO5_STAT_BLANK_SHIFT))

#define  SVDO5_STAT_INTONFINISH_MASK 0x2
#define  SVDO5_STAT_INTONFINISH_SHIFT 1
#define  SVDO5_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_INTONFINISH_MASK) >> SVDO5_STAT_INTONFINISH_SHIFT)
#define  SVDO5_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO5_STAT_INTONFINISH_SHIFT))

#define  SVDO5_STAT_STOPONFINISH_MASK 0x1
#define  SVDO5_STAT_STOPONFINISH_SHIFT 0
#define  SVDO5_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO5_STAT_STOPONFINISH_MASK) >> SVDO5_STAT_STOPONFINISH_SHIFT)
#define  SVDO5_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO5_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO5_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO5_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO5_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO5_VDWR_WRDESCADDR_MASK) >> SVDO5_VDWR_WRDESCADDR_SHIFT)
#define  SVDO5_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO5_VDWR_WRDESCADDR_SHIFT))

#define  SVDO5_VDWR_RESERVED1_MASK 0xf
#define  SVDO5_VDWR_RESERVED1_SHIFT 0
#define  SVDO5_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VDWR_RESERVED1_MASK) >> SVDO5_VDWR_RESERVED1_SHIFT)
#define  SVDO5_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO5_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO5_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO5_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO5_VDAR_CURRDESCADDR_MASK) >> SVDO5_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO5_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO5_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO5_VDAR_RESERVED1_MASK 0xf
#define  SVDO5_VDAR_RESERVED1_SHIFT 0
#define  SVDO5_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VDAR_RESERVED1_MASK) >> SVDO5_VDAR_RESERVED1_SHIFT)
#define  SVDO5_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO5_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO5_VDBR_RESERVED1_SHIFT 16
#define  SVDO5_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VDBR_RESERVED1_MASK) >> SVDO5_VDBR_RESERVED1_SHIFT)
#define  SVDO5_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VDBR_RESERVED1_SHIFT))

#define  SVDO5_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO5_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO5_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO5_VDBR_BYTESLEFT_MASK) >> SVDO5_VDBR_BYTESLEFT_SHIFT)
#define  SVDO5_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO5_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO5_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO5_VDLR_RESERVED1_SHIFT 14
#define  SVDO5_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VDLR_RESERVED1_MASK) >> SVDO5_VDLR_RESERVED1_SHIFT)
#define  SVDO5_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VDLR_RESERVED1_SHIFT))

#define  SVDO5_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO5_VDLR_LINESLEFT_SHIFT 0
#define  SVDO5_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO5_VDLR_LINESLEFT_MASK) >> SVDO5_VDLR_LINESLEFT_SHIFT)
#define  SVDO5_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO5_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO5_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO5_VDNR_DESCADDR_SHIFT 4
#define  SVDO5_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO5_VDNR_DESCADDR_MASK) >> SVDO5_VDNR_DESCADDR_SHIFT)
#define  SVDO5_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO5_VDNR_DESCADDR_SHIFT))

#define  SVDO5_VDNR_RESERVED1_MASK 0xf
#define  SVDO5_VDNR_RESERVED1_SHIFT 0
#define  SVDO5_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VDNR_RESERVED1_MASK) >> SVDO5_VDNR_RESERVED1_SHIFT)
#define  SVDO5_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO5_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO5_VIER_RESERVED1_SHIFT 8
#define  SVDO5_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_RESERVED1_MASK) >> SVDO5_VIER_RESERVED1_SHIFT)
#define  SVDO5_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VIER_RESERVED1_SHIFT))

#define  SVDO5_VIER_TOPERRINT_MASK 0x80
#define  SVDO5_VIER_TOPERRINT_SHIFT 7
#define  SVDO5_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_TOPERRINT_MASK) >> SVDO5_VIER_TOPERRINT_SHIFT)
#define  SVDO5_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO5_VIER_TOPERRINT_SHIFT))

#define  SVDO5_VIER_BOTERRINT_MASK 0x40
#define  SVDO5_VIER_BOTERRINT_SHIFT 6
#define  SVDO5_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_BOTERRINT_MASK) >> SVDO5_VIER_BOTERRINT_SHIFT)
#define  SVDO5_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO5_VIER_BOTERRINT_SHIFT))

#define  SVDO5_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO5_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO5_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_HSYNCERRINT_MASK) >> SVDO5_VIER_HSYNCERRINT_SHIFT)
#define  SVDO5_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO5_VIER_HSYNCERRINT_SHIFT))

#define  SVDO5_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO5_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO5_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_BENDERUNDERRUNINT_MASK) >> SVDO5_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO5_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO5_VIER_EOIINT_MASK 0x8
#define  SVDO5_VIER_EOIINT_SHIFT 3
#define  SVDO5_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_EOIINT_MASK) >> SVDO5_VIER_EOIINT_SHIFT)
#define  SVDO5_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO5_VIER_EOIINT_SHIFT))

#define  SVDO5_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO5_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO5_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_PTUNDERRUNINT_MASK) >> SVDO5_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO5_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO5_VIER_DESCINT_MASK 0x2
#define  SVDO5_VIER_DESCINT_SHIFT 1
#define  SVDO5_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_DESCINT_MASK) >> SVDO5_VIER_DESCINT_SHIFT)
#define  SVDO5_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO5_VIER_DESCINT_SHIFT))

#define  SVDO5_VIER_OWNINT_MASK 0x1
#define  SVDO5_VIER_OWNINT_SHIFT 0
#define  SVDO5_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIER_OWNINT_MASK) >> SVDO5_VIER_OWNINT_SHIFT)
#define  SVDO5_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO5_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO5_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO5_VIPR_RESERVED1_SHIFT 8
#define  SVDO5_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_RESERVED1_MASK) >> SVDO5_VIPR_RESERVED1_SHIFT)
#define  SVDO5_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VIPR_RESERVED1_SHIFT))

#define  SVDO5_VIPR_TOPERRINT_MASK 0x80
#define  SVDO5_VIPR_TOPERRINT_SHIFT 7
#define  SVDO5_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_TOPERRINT_MASK) >> SVDO5_VIPR_TOPERRINT_SHIFT)
#define  SVDO5_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_TOPERRINT_SHIFT))

#define  SVDO5_VIPR_BOTERRINT_MASK 0x40
#define  SVDO5_VIPR_BOTERRINT_SHIFT 6
#define  SVDO5_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_BOTERRINT_MASK) >> SVDO5_VIPR_BOTERRINT_SHIFT)
#define  SVDO5_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_BOTERRINT_SHIFT))

#define  SVDO5_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO5_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO5_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_HSYNCERRINT_MASK) >> SVDO5_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO5_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO5_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO5_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO5_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO5_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO5_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO5_VIPR_EOIINT_MASK 0x8
#define  SVDO5_VIPR_EOIINT_SHIFT 3
#define  SVDO5_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_EOIINT_MASK) >> SVDO5_VIPR_EOIINT_SHIFT)
#define  SVDO5_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_EOIINT_SHIFT))

#define  SVDO5_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO5_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO5_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_PTUNDERRUNINT_MASK) >> SVDO5_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO5_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO5_VIPR_DESCINT_MASK 0x2
#define  SVDO5_VIPR_DESCINT_SHIFT 1
#define  SVDO5_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_DESCINT_MASK) >> SVDO5_VIPR_DESCINT_SHIFT)
#define  SVDO5_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_DESCINT_SHIFT))

#define  SVDO5_VIPR_OWNINT_MASK 0x1
#define  SVDO5_VIPR_OWNINT_SHIFT 0
#define  SVDO5_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIPR_OWNINT_MASK) >> SVDO5_VIPR_OWNINT_SHIFT)
#define  SVDO5_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO5_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO5_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO5_VIAR_RESERVED1_SHIFT 8
#define  SVDO5_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_RESERVED1_MASK) >> SVDO5_VIAR_RESERVED1_SHIFT)
#define  SVDO5_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VIAR_RESERVED1_SHIFT))

#define  SVDO5_VIAR_TOPERRINT_MASK 0x80
#define  SVDO5_VIAR_TOPERRINT_SHIFT 7
#define  SVDO5_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_TOPERRINT_MASK) >> SVDO5_VIAR_TOPERRINT_SHIFT)
#define  SVDO5_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_TOPERRINT_SHIFT))

#define  SVDO5_VIAR_BOTERRINT_MASK 0x40
#define  SVDO5_VIAR_BOTERRINT_SHIFT 6
#define  SVDO5_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_BOTERRINT_MASK) >> SVDO5_VIAR_BOTERRINT_SHIFT)
#define  SVDO5_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_BOTERRINT_SHIFT))

#define  SVDO5_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO5_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO5_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_HSYNCERRINT_MASK) >> SVDO5_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO5_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO5_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO5_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO5_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO5_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO5_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO5_VIAR_EOIINT_MASK 0x8
#define  SVDO5_VIAR_EOIINT_SHIFT 3
#define  SVDO5_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_EOIINT_MASK) >> SVDO5_VIAR_EOIINT_SHIFT)
#define  SVDO5_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_EOIINT_SHIFT))

#define  SVDO5_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO5_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO5_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_PTUNDERRUNINT_MASK) >> SVDO5_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO5_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO5_VIAR_DESCINT_MASK 0x2
#define  SVDO5_VIAR_DESCINT_SHIFT 1
#define  SVDO5_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_DESCINT_MASK) >> SVDO5_VIAR_DESCINT_SHIFT)
#define  SVDO5_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_DESCINT_SHIFT))

#define  SVDO5_VIAR_OWNINT_MASK 0x1
#define  SVDO5_VIAR_OWNINT_SHIFT 0
#define  SVDO5_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIAR_OWNINT_MASK) >> SVDO5_VIAR_OWNINT_SHIFT)
#define  SVDO5_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO5_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO5_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO5_VIFR_RESERVED1_SHIFT 8
#define  SVDO5_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_RESERVED1_MASK) >> SVDO5_VIFR_RESERVED1_SHIFT)
#define  SVDO5_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VIFR_RESERVED1_SHIFT))

#define  SVDO5_VIFR_TOPERRINT_MASK 0x80
#define  SVDO5_VIFR_TOPERRINT_SHIFT 7
#define  SVDO5_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_TOPERRINT_MASK) >> SVDO5_VIFR_TOPERRINT_SHIFT)
#define  SVDO5_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_TOPERRINT_SHIFT))

#define  SVDO5_VIFR_BOTERRINT_MASK 0x40
#define  SVDO5_VIFR_BOTERRINT_SHIFT 6
#define  SVDO5_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_BOTERRINT_MASK) >> SVDO5_VIFR_BOTERRINT_SHIFT)
#define  SVDO5_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_BOTERRINT_SHIFT))

#define  SVDO5_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO5_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO5_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_HSYNCERRINT_MASK) >> SVDO5_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO5_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO5_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO5_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO5_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO5_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO5_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO5_VIFR_EOIINT_MASK 0x8
#define  SVDO5_VIFR_EOIINT_SHIFT 3
#define  SVDO5_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_EOIINT_MASK) >> SVDO5_VIFR_EOIINT_SHIFT)
#define  SVDO5_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_EOIINT_SHIFT))

#define  SVDO5_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO5_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO5_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_PTUNDERRUNINT_MASK) >> SVDO5_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO5_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO5_VIFR_DESCINT_MASK 0x2
#define  SVDO5_VIFR_DESCINT_SHIFT 1
#define  SVDO5_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_DESCINT_MASK) >> SVDO5_VIFR_DESCINT_SHIFT)
#define  SVDO5_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_DESCINT_SHIFT))

#define  SVDO5_VIFR_OWNINT_MASK 0x1
#define  SVDO5_VIFR_OWNINT_SHIFT 0
#define  SVDO5_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO5_VIFR_OWNINT_MASK) >> SVDO5_VIFR_OWNINT_SHIFT)
#define  SVDO5_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO5_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO5_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO5_VLWR_RESERVED1_SHIFT 16
#define  SVDO5_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VLWR_RESERVED1_MASK) >> SVDO5_VLWR_RESERVED1_SHIFT)
#define  SVDO5_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VLWR_RESERVED1_SHIFT))

#define  SVDO5_VLWR_LINEWID_MASK 0xfffc
#define  SVDO5_VLWR_LINEWID_SHIFT 2
#define  SVDO5_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO5_VLWR_LINEWID_MASK) >> SVDO5_VLWR_LINEWID_SHIFT)
#define  SVDO5_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO5_VLWR_LINEWID_SHIFT))

#define  SVDO5_VLWR_RESERVED2_MASK 0x3
#define  SVDO5_VLWR_RESERVED2_SHIFT 0
#define  SVDO5_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO5_VLWR_RESERVED2_MASK) >> SVDO5_VLWR_RESERVED2_SHIFT)
#define  SVDO5_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO5_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO5_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO5_VTCA_TCACCUM_SHIFT 0
#define  SVDO5_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO5_VTCA_TCACCUM_MASK) >> SVDO5_VTCA_TCACCUM_SHIFT)
#define  SVDO5_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO5_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO5_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO5_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO5_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO5_VTCP_TCNONBLANKPIX_MASK) >> SVDO5_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO5_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO5_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO5_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO5_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO5_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO5_VSAR_SOURCEADDR_MASK) >> SVDO5_VSAR_SOURCEADDR_SHIFT)
#define  SVDO5_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO5_VSAR_SOURCEADDR_SHIFT))

#define  SVDO5_VSAR_RESERVED1_MASK 0x3
#define  SVDO5_VSAR_RESERVED1_SHIFT 0
#define  SVDO5_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VSAR_RESERVED1_MASK) >> SVDO5_VSAR_RESERVED1_SHIFT)
#define  SVDO5_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO5_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO5_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO5_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO5_VPKR_LASTLINEPIXVAL_MASK) >> SVDO5_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO5_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO5_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO5_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO5_VPKR_RESERVED1_SHIFT 24
#define  SVDO5_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO5_VPKR_RESERVED1_MASK) >> SVDO5_VPKR_RESERVED1_SHIFT)
#define  SVDO5_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO5_VPKR_RESERVED1_SHIFT))

#define  SVDO5_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO5_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO5_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO5_VPKR_ENDSKIPLEN_MASK) >> SVDO5_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO5_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO5_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO5_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO5_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO5_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO5_VPKR_STARTSKIPLEN_MASK) >> SVDO5_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO5_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO5_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO5_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST0_JUSTLUT_SHIFT 0
#define  SVDO5_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST0_JUSTLUT_MASK) >> SVDO5_JUST0_JUSTLUT_SHIFT)
#define  SVDO5_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO5_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST1_JUSTLUT_SHIFT 0
#define  SVDO5_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST1_JUSTLUT_MASK) >> SVDO5_JUST1_JUSTLUT_SHIFT)
#define  SVDO5_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO5_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST2_JUSTLUT_SHIFT 0
#define  SVDO5_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST2_JUSTLUT_MASK) >> SVDO5_JUST2_JUSTLUT_SHIFT)
#define  SVDO5_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO5_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST3_JUSTLUT_SHIFT 0
#define  SVDO5_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST3_JUSTLUT_MASK) >> SVDO5_JUST3_JUSTLUT_SHIFT)
#define  SVDO5_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO5_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST4_JUSTLUT_SHIFT 0
#define  SVDO5_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST4_JUSTLUT_MASK) >> SVDO5_JUST4_JUSTLUT_SHIFT)
#define  SVDO5_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO5_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST5_JUSTLUT_SHIFT 0
#define  SVDO5_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST5_JUSTLUT_MASK) >> SVDO5_JUST5_JUSTLUT_SHIFT)
#define  SVDO5_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO5_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST6_JUSTLUT_SHIFT 0
#define  SVDO5_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST6_JUSTLUT_MASK) >> SVDO5_JUST6_JUSTLUT_SHIFT)
#define  SVDO5_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO5_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST7_JUSTLUT_SHIFT 0
#define  SVDO5_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST7_JUSTLUT_MASK) >> SVDO5_JUST7_JUSTLUT_SHIFT)
#define  SVDO5_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO5_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST8_JUSTLUT_SHIFT 0
#define  SVDO5_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST8_JUSTLUT_MASK) >> SVDO5_JUST8_JUSTLUT_SHIFT)
#define  SVDO5_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO5_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST9_JUSTLUT_SHIFT 0
#define  SVDO5_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST9_JUSTLUT_MASK) >> SVDO5_JUST9_JUSTLUT_SHIFT)
#define  SVDO5_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO5_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST10_JUSTLUT_SHIFT 0
#define  SVDO5_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST10_JUSTLUT_MASK) >> SVDO5_JUST10_JUSTLUT_SHIFT)
#define  SVDO5_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO5_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST11_JUSTLUT_SHIFT 0
#define  SVDO5_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST11_JUSTLUT_MASK) >> SVDO5_JUST11_JUSTLUT_SHIFT)
#define  SVDO5_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO5_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST12_JUSTLUT_SHIFT 0
#define  SVDO5_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST12_JUSTLUT_MASK) >> SVDO5_JUST12_JUSTLUT_SHIFT)
#define  SVDO5_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO5_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST13_JUSTLUT_SHIFT 0
#define  SVDO5_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST13_JUSTLUT_MASK) >> SVDO5_JUST13_JUSTLUT_SHIFT)
#define  SVDO5_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO5_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST14_JUSTLUT_SHIFT 0
#define  SVDO5_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST14_JUSTLUT_MASK) >> SVDO5_JUST14_JUSTLUT_SHIFT)
#define  SVDO5_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO5_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO5_JUST15_JUSTLUT_SHIFT 0
#define  SVDO5_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO5_JUST15_JUSTLUT_MASK) >> SVDO5_JUST15_JUSTLUT_SHIFT)
#define  SVDO5_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO5_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO5_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE0_PCODELUT_SHIFT 0
#define  SVDO5_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE0_PCODELUT_MASK) >> SVDO5_PCODE0_PCODELUT_SHIFT)
#define  SVDO5_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO5_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE1_PCODELUT_SHIFT 0
#define  SVDO5_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE1_PCODELUT_MASK) >> SVDO5_PCODE1_PCODELUT_SHIFT)
#define  SVDO5_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO5_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE2_PCODELUT_SHIFT 0
#define  SVDO5_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE2_PCODELUT_MASK) >> SVDO5_PCODE2_PCODELUT_SHIFT)
#define  SVDO5_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO5_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE3_PCODELUT_SHIFT 0
#define  SVDO5_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE3_PCODELUT_MASK) >> SVDO5_PCODE3_PCODELUT_SHIFT)
#define  SVDO5_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO5_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE4_PCODELUT_SHIFT 0
#define  SVDO5_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE4_PCODELUT_MASK) >> SVDO5_PCODE4_PCODELUT_SHIFT)
#define  SVDO5_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO5_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE5_PCODELUT_SHIFT 0
#define  SVDO5_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE5_PCODELUT_MASK) >> SVDO5_PCODE5_PCODELUT_SHIFT)
#define  SVDO5_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO5_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE6_PCODELUT_SHIFT 0
#define  SVDO5_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE6_PCODELUT_MASK) >> SVDO5_PCODE6_PCODELUT_SHIFT)
#define  SVDO5_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO5_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE7_PCODELUT_SHIFT 0
#define  SVDO5_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE7_PCODELUT_MASK) >> SVDO5_PCODE7_PCODELUT_SHIFT)
#define  SVDO5_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO5_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE8_PCODELUT_SHIFT 0
#define  SVDO5_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE8_PCODELUT_MASK) >> SVDO5_PCODE8_PCODELUT_SHIFT)
#define  SVDO5_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO5_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE9_PCODELUT_SHIFT 0
#define  SVDO5_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE9_PCODELUT_MASK) >> SVDO5_PCODE9_PCODELUT_SHIFT)
#define  SVDO5_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO5_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE10_PCODELUT_SHIFT 0
#define  SVDO5_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE10_PCODELUT_MASK) >> SVDO5_PCODE10_PCODELUT_SHIFT)
#define  SVDO5_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO5_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE11_PCODELUT_SHIFT 0
#define  SVDO5_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE11_PCODELUT_MASK) >> SVDO5_PCODE11_PCODELUT_SHIFT)
#define  SVDO5_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO5_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE12_PCODELUT_SHIFT 0
#define  SVDO5_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE12_PCODELUT_MASK) >> SVDO5_PCODE12_PCODELUT_SHIFT)
#define  SVDO5_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO5_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE13_PCODELUT_SHIFT 0
#define  SVDO5_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE13_PCODELUT_MASK) >> SVDO5_PCODE13_PCODELUT_SHIFT)
#define  SVDO5_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO5_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE14_PCODELUT_SHIFT 0
#define  SVDO5_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE14_PCODELUT_MASK) >> SVDO5_PCODE14_PCODELUT_SHIFT)
#define  SVDO5_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO5_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO5_PCODE15_PCODELUT_SHIFT 0
#define  SVDO5_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO5_PCODE15_PCODELUT_MASK) >> SVDO5_PCODE15_PCODELUT_SHIFT)
#define  SVDO5_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO5_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO5_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 7 of 8) (SVDO6)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO6_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO6_SCFG_RESERVED1_SHIFT 30
#define  SVDO6_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED1_MASK) >> SVDO6_SCFG_RESERVED1_SHIFT)
#define  SVDO6_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED1_SHIFT))

#define  SVDO6_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO6_SCFG_BURSTSZ_SHIFT 28
#define  SVDO6_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_BURSTSZ_MASK) >> SVDO6_SCFG_BURSTSZ_SHIFT)
#define  SVDO6_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO6_SCFG_BURSTSZ_SHIFT))

#define  SVDO6_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO6_SCFG_RESERVED2_SHIFT 26
#define  SVDO6_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED2_MASK) >> SVDO6_SCFG_RESERVED2_SHIFT)
#define  SVDO6_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED2_SHIFT))

#define  SVDO6_SCFG_SERP_MASK 0x2000000
#define  SVDO6_SCFG_SERP_SHIFT 25
#define  SVDO6_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_SERP_MASK) >> SVDO6_SCFG_SERP_SHIFT)
#define  SVDO6_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO6_SCFG_SERP_SHIFT))

#define  SVDO6_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO6_SCFG_BOT2TOP_SHIFT 24
#define  SVDO6_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_BOT2TOP_MASK) >> SVDO6_SCFG_BOT2TOP_SHIFT)
#define  SVDO6_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO6_SCFG_BOT2TOP_SHIFT))

#define  SVDO6_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO6_SCFG_RESERVED3_SHIFT 22
#define  SVDO6_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED3_MASK) >> SVDO6_SCFG_RESERVED3_SHIFT)
#define  SVDO6_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED3_SHIFT))

#define  SVDO6_SCFG_BPP_MASK 0x300000
#define  SVDO6_SCFG_BPP_SHIFT 20
#define  SVDO6_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_BPP_MASK) >> SVDO6_SCFG_BPP_SHIFT)
#define  SVDO6_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO6_SCFG_BPP_SHIFT))

#define  SVDO6_SCFG_RESERVED4_MASK 0x80000
#define  SVDO6_SCFG_RESERVED4_SHIFT 19
#define  SVDO6_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED4_MASK) >> SVDO6_SCFG_RESERVED4_SHIFT)
#define  SVDO6_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED4_SHIFT))

#define  SVDO6_SCFG_LINESKIP_MASK 0x70000
#define  SVDO6_SCFG_LINESKIP_SHIFT 16
#define  SVDO6_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_LINESKIP_MASK) >> SVDO6_SCFG_LINESKIP_SHIFT)
#define  SVDO6_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO6_SCFG_LINESKIP_SHIFT))

#define  SVDO6_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO6_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO6_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_PIXDOUBLE_MASK) >> SVDO6_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO6_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO6_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO6_SCFG_PCODEREF_MASK 0x4000
#define  SVDO6_SCFG_PCODEREF_SHIFT 14
#define  SVDO6_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_PCODEREF_MASK) >> SVDO6_SCFG_PCODEREF_SHIFT)
#define  SVDO6_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO6_SCFG_PCODEREF_SHIFT))

#define  SVDO6_SCFG_INITJUST_MASK 0x2000
#define  SVDO6_SCFG_INITJUST_SHIFT 13
#define  SVDO6_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_INITJUST_MASK) >> SVDO6_SCFG_INITJUST_SHIFT)
#define  SVDO6_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO6_SCFG_INITJUST_SHIFT))

#define  SVDO6_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO6_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO6_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_FORCEDJUST_MASK) >> SVDO6_SCFG_FORCEDJUST_SHIFT)
#define  SVDO6_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO6_SCFG_FORCEDJUST_SHIFT))

#define  SVDO6_SCFG_RESERVED5_MASK 0x800
#define  SVDO6_SCFG_RESERVED5_SHIFT 11
#define  SVDO6_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED5_MASK) >> SVDO6_SCFG_RESERVED5_SHIFT)
#define  SVDO6_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED5_SHIFT))

#define  SVDO6_SCFG_DATASOURCE_MASK 0x400
#define  SVDO6_SCFG_DATASOURCE_SHIFT 10
#define  SVDO6_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_DATASOURCE_MASK) >> SVDO6_SCFG_DATASOURCE_SHIFT)
#define  SVDO6_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO6_SCFG_DATASOURCE_SHIFT))

#define  SVDO6_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO6_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO6_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_TOGGLEJUST_MASK) >> SVDO6_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO6_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO6_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO6_SCFG_RESERVED6_MASK 0xc0
#define  SVDO6_SCFG_RESERVED6_SHIFT 6
#define  SVDO6_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED6_MASK) >> SVDO6_SCFG_RESERVED6_SHIFT)
#define  SVDO6_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED6_SHIFT))

#define  SVDO6_SCFG_LINEREPL_MASK 0x30
#define  SVDO6_SCFG_LINEREPL_SHIFT 4
#define  SVDO6_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_LINEREPL_MASK) >> SVDO6_SCFG_LINEREPL_SHIFT)
#define  SVDO6_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO6_SCFG_LINEREPL_SHIFT))

#define  SVDO6_SCFG_RESERVED7_MASK 0xc
#define  SVDO6_SCFG_RESERVED7_SHIFT 2
#define  SVDO6_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESERVED7_MASK) >> SVDO6_SCFG_RESERVED7_SHIFT)
#define  SVDO6_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESERVED7_SHIFT))

#define  SVDO6_SCFG_RESETDMA_MASK 0x2
#define  SVDO6_SCFG_RESETDMA_SHIFT 1
#define  SVDO6_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_RESETDMA_MASK) >> SVDO6_SCFG_RESETDMA_SHIFT)
#define  SVDO6_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO6_SCFG_RESETDMA_SHIFT))

#define  SVDO6_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO6_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO6_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO6_SCFG_SVDOENABLE_MASK) >> SVDO6_SCFG_SVDOENABLE_SHIFT)
#define  SVDO6_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO6_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO6_STAT_SKIPST_MASK 0xe0000000
#define  SVDO6_STAT_SKIPST_SHIFT 29
#define  SVDO6_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_SKIPST_MASK) >> SVDO6_STAT_SKIPST_SHIFT)
#define  SVDO6_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO6_STAT_SKIPST_SHIFT))

#define  SVDO6_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO6_STAT_PIXPIPEST_SHIFT 26
#define  SVDO6_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_PIXPIPEST_MASK) >> SVDO6_STAT_PIXPIPEST_SHIFT)
#define  SVDO6_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO6_STAT_PIXPIPEST_SHIFT))

#define  SVDO6_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO6_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO6_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_DATAFIFOENT_MASK) >> SVDO6_STAT_DATAFIFOENT_SHIFT)
#define  SVDO6_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO6_STAT_DATAFIFOENT_SHIFT))

#define  SVDO6_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO6_STAT_REFIFOENT_SHIFT 16
#define  SVDO6_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_REFIFOENT_MASK) >> SVDO6_STAT_REFIFOENT_SHIFT)
#define  SVDO6_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO6_STAT_REFIFOENT_SHIFT))

#define  SVDO6_STAT_ADDRST_MASK 0xc000
#define  SVDO6_STAT_ADDRST_SHIFT 14
#define  SVDO6_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_ADDRST_MASK) >> SVDO6_STAT_ADDRST_SHIFT)
#define  SVDO6_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO6_STAT_ADDRST_SHIFT))

#define  SVDO6_STAT_DATAST_MASK 0x3800
#define  SVDO6_STAT_DATAST_SHIFT 11
#define  SVDO6_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_DATAST_MASK) >> SVDO6_STAT_DATAST_SHIFT)
#define  SVDO6_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO6_STAT_DATAST_SHIFT))

#define  SVDO6_STAT_CMDST_MASK 0x700
#define  SVDO6_STAT_CMDST_SHIFT 8
#define  SVDO6_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_CMDST_MASK) >> SVDO6_STAT_CMDST_SHIFT)
#define  SVDO6_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO6_STAT_CMDST_SHIFT))

#define  SVDO6_STAT_DMAOWN_MASK 0x80
#define  SVDO6_STAT_DMAOWN_SHIFT 7
#define  SVDO6_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_DMAOWN_MASK) >> SVDO6_STAT_DMAOWN_SHIFT)
#define  SVDO6_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO6_STAT_DMAOWN_SHIFT))

#define  SVDO6_STAT_DMAACTIVE_MASK 0x40
#define  SVDO6_STAT_DMAACTIVE_SHIFT 6
#define  SVDO6_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_DMAACTIVE_MASK) >> SVDO6_STAT_DMAACTIVE_SHIFT)
#define  SVDO6_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO6_STAT_DMAACTIVE_SHIFT))

#define  SVDO6_STAT_LASTBUFFER_MASK 0x20
#define  SVDO6_STAT_LASTBUFFER_SHIFT 5
#define  SVDO6_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_LASTBUFFER_MASK) >> SVDO6_STAT_LASTBUFFER_SHIFT)
#define  SVDO6_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO6_STAT_LASTBUFFER_SHIFT))

#define  SVDO6_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO6_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO6_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_FIRSTBUFFER_MASK) >> SVDO6_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO6_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO6_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO6_STAT_RTOL_MASK 0x8
#define  SVDO6_STAT_RTOL_SHIFT 3
#define  SVDO6_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_RTOL_MASK) >> SVDO6_STAT_RTOL_SHIFT)
#define  SVDO6_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO6_STAT_RTOL_SHIFT))

#define  SVDO6_STAT_BLANK_MASK 0x4
#define  SVDO6_STAT_BLANK_SHIFT 2
#define  SVDO6_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_BLANK_MASK) >> SVDO6_STAT_BLANK_SHIFT)
#define  SVDO6_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO6_STAT_BLANK_SHIFT))

#define  SVDO6_STAT_INTONFINISH_MASK 0x2
#define  SVDO6_STAT_INTONFINISH_SHIFT 1
#define  SVDO6_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_INTONFINISH_MASK) >> SVDO6_STAT_INTONFINISH_SHIFT)
#define  SVDO6_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO6_STAT_INTONFINISH_SHIFT))

#define  SVDO6_STAT_STOPONFINISH_MASK 0x1
#define  SVDO6_STAT_STOPONFINISH_SHIFT 0
#define  SVDO6_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO6_STAT_STOPONFINISH_MASK) >> SVDO6_STAT_STOPONFINISH_SHIFT)
#define  SVDO6_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO6_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO6_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO6_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO6_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO6_VDWR_WRDESCADDR_MASK) >> SVDO6_VDWR_WRDESCADDR_SHIFT)
#define  SVDO6_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO6_VDWR_WRDESCADDR_SHIFT))

#define  SVDO6_VDWR_RESERVED1_MASK 0xf
#define  SVDO6_VDWR_RESERVED1_SHIFT 0
#define  SVDO6_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VDWR_RESERVED1_MASK) >> SVDO6_VDWR_RESERVED1_SHIFT)
#define  SVDO6_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO6_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO6_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO6_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO6_VDAR_CURRDESCADDR_MASK) >> SVDO6_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO6_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO6_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO6_VDAR_RESERVED1_MASK 0xf
#define  SVDO6_VDAR_RESERVED1_SHIFT 0
#define  SVDO6_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VDAR_RESERVED1_MASK) >> SVDO6_VDAR_RESERVED1_SHIFT)
#define  SVDO6_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO6_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO6_VDBR_RESERVED1_SHIFT 16
#define  SVDO6_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VDBR_RESERVED1_MASK) >> SVDO6_VDBR_RESERVED1_SHIFT)
#define  SVDO6_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VDBR_RESERVED1_SHIFT))

#define  SVDO6_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO6_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO6_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO6_VDBR_BYTESLEFT_MASK) >> SVDO6_VDBR_BYTESLEFT_SHIFT)
#define  SVDO6_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO6_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO6_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO6_VDLR_RESERVED1_SHIFT 14
#define  SVDO6_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VDLR_RESERVED1_MASK) >> SVDO6_VDLR_RESERVED1_SHIFT)
#define  SVDO6_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VDLR_RESERVED1_SHIFT))

#define  SVDO6_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO6_VDLR_LINESLEFT_SHIFT 0
#define  SVDO6_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO6_VDLR_LINESLEFT_MASK) >> SVDO6_VDLR_LINESLEFT_SHIFT)
#define  SVDO6_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO6_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO6_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO6_VDNR_DESCADDR_SHIFT 4
#define  SVDO6_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO6_VDNR_DESCADDR_MASK) >> SVDO6_VDNR_DESCADDR_SHIFT)
#define  SVDO6_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO6_VDNR_DESCADDR_SHIFT))

#define  SVDO6_VDNR_RESERVED1_MASK 0xf
#define  SVDO6_VDNR_RESERVED1_SHIFT 0
#define  SVDO6_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VDNR_RESERVED1_MASK) >> SVDO6_VDNR_RESERVED1_SHIFT)
#define  SVDO6_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO6_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO6_VIER_RESERVED1_SHIFT 8
#define  SVDO6_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_RESERVED1_MASK) >> SVDO6_VIER_RESERVED1_SHIFT)
#define  SVDO6_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VIER_RESERVED1_SHIFT))

#define  SVDO6_VIER_TOPERRINT_MASK 0x80
#define  SVDO6_VIER_TOPERRINT_SHIFT 7
#define  SVDO6_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_TOPERRINT_MASK) >> SVDO6_VIER_TOPERRINT_SHIFT)
#define  SVDO6_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO6_VIER_TOPERRINT_SHIFT))

#define  SVDO6_VIER_BOTERRINT_MASK 0x40
#define  SVDO6_VIER_BOTERRINT_SHIFT 6
#define  SVDO6_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_BOTERRINT_MASK) >> SVDO6_VIER_BOTERRINT_SHIFT)
#define  SVDO6_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO6_VIER_BOTERRINT_SHIFT))

#define  SVDO6_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO6_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO6_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_HSYNCERRINT_MASK) >> SVDO6_VIER_HSYNCERRINT_SHIFT)
#define  SVDO6_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO6_VIER_HSYNCERRINT_SHIFT))

#define  SVDO6_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO6_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO6_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_BENDERUNDERRUNINT_MASK) >> SVDO6_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO6_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO6_VIER_EOIINT_MASK 0x8
#define  SVDO6_VIER_EOIINT_SHIFT 3
#define  SVDO6_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_EOIINT_MASK) >> SVDO6_VIER_EOIINT_SHIFT)
#define  SVDO6_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO6_VIER_EOIINT_SHIFT))

#define  SVDO6_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO6_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO6_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_PTUNDERRUNINT_MASK) >> SVDO6_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO6_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO6_VIER_DESCINT_MASK 0x2
#define  SVDO6_VIER_DESCINT_SHIFT 1
#define  SVDO6_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_DESCINT_MASK) >> SVDO6_VIER_DESCINT_SHIFT)
#define  SVDO6_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO6_VIER_DESCINT_SHIFT))

#define  SVDO6_VIER_OWNINT_MASK 0x1
#define  SVDO6_VIER_OWNINT_SHIFT 0
#define  SVDO6_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIER_OWNINT_MASK) >> SVDO6_VIER_OWNINT_SHIFT)
#define  SVDO6_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO6_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO6_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO6_VIPR_RESERVED1_SHIFT 8
#define  SVDO6_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_RESERVED1_MASK) >> SVDO6_VIPR_RESERVED1_SHIFT)
#define  SVDO6_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VIPR_RESERVED1_SHIFT))

#define  SVDO6_VIPR_TOPERRINT_MASK 0x80
#define  SVDO6_VIPR_TOPERRINT_SHIFT 7
#define  SVDO6_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_TOPERRINT_MASK) >> SVDO6_VIPR_TOPERRINT_SHIFT)
#define  SVDO6_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_TOPERRINT_SHIFT))

#define  SVDO6_VIPR_BOTERRINT_MASK 0x40
#define  SVDO6_VIPR_BOTERRINT_SHIFT 6
#define  SVDO6_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_BOTERRINT_MASK) >> SVDO6_VIPR_BOTERRINT_SHIFT)
#define  SVDO6_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_BOTERRINT_SHIFT))

#define  SVDO6_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO6_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO6_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_HSYNCERRINT_MASK) >> SVDO6_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO6_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO6_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO6_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO6_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO6_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO6_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO6_VIPR_EOIINT_MASK 0x8
#define  SVDO6_VIPR_EOIINT_SHIFT 3
#define  SVDO6_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_EOIINT_MASK) >> SVDO6_VIPR_EOIINT_SHIFT)
#define  SVDO6_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_EOIINT_SHIFT))

#define  SVDO6_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO6_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO6_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_PTUNDERRUNINT_MASK) >> SVDO6_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO6_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO6_VIPR_DESCINT_MASK 0x2
#define  SVDO6_VIPR_DESCINT_SHIFT 1
#define  SVDO6_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_DESCINT_MASK) >> SVDO6_VIPR_DESCINT_SHIFT)
#define  SVDO6_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_DESCINT_SHIFT))

#define  SVDO6_VIPR_OWNINT_MASK 0x1
#define  SVDO6_VIPR_OWNINT_SHIFT 0
#define  SVDO6_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIPR_OWNINT_MASK) >> SVDO6_VIPR_OWNINT_SHIFT)
#define  SVDO6_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO6_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO6_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO6_VIAR_RESERVED1_SHIFT 8
#define  SVDO6_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_RESERVED1_MASK) >> SVDO6_VIAR_RESERVED1_SHIFT)
#define  SVDO6_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VIAR_RESERVED1_SHIFT))

#define  SVDO6_VIAR_TOPERRINT_MASK 0x80
#define  SVDO6_VIAR_TOPERRINT_SHIFT 7
#define  SVDO6_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_TOPERRINT_MASK) >> SVDO6_VIAR_TOPERRINT_SHIFT)
#define  SVDO6_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_TOPERRINT_SHIFT))

#define  SVDO6_VIAR_BOTERRINT_MASK 0x40
#define  SVDO6_VIAR_BOTERRINT_SHIFT 6
#define  SVDO6_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_BOTERRINT_MASK) >> SVDO6_VIAR_BOTERRINT_SHIFT)
#define  SVDO6_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_BOTERRINT_SHIFT))

#define  SVDO6_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO6_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO6_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_HSYNCERRINT_MASK) >> SVDO6_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO6_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO6_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO6_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO6_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO6_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO6_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO6_VIAR_EOIINT_MASK 0x8
#define  SVDO6_VIAR_EOIINT_SHIFT 3
#define  SVDO6_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_EOIINT_MASK) >> SVDO6_VIAR_EOIINT_SHIFT)
#define  SVDO6_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_EOIINT_SHIFT))

#define  SVDO6_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO6_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO6_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_PTUNDERRUNINT_MASK) >> SVDO6_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO6_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO6_VIAR_DESCINT_MASK 0x2
#define  SVDO6_VIAR_DESCINT_SHIFT 1
#define  SVDO6_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_DESCINT_MASK) >> SVDO6_VIAR_DESCINT_SHIFT)
#define  SVDO6_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_DESCINT_SHIFT))

#define  SVDO6_VIAR_OWNINT_MASK 0x1
#define  SVDO6_VIAR_OWNINT_SHIFT 0
#define  SVDO6_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIAR_OWNINT_MASK) >> SVDO6_VIAR_OWNINT_SHIFT)
#define  SVDO6_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO6_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO6_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO6_VIFR_RESERVED1_SHIFT 8
#define  SVDO6_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_RESERVED1_MASK) >> SVDO6_VIFR_RESERVED1_SHIFT)
#define  SVDO6_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VIFR_RESERVED1_SHIFT))

#define  SVDO6_VIFR_TOPERRINT_MASK 0x80
#define  SVDO6_VIFR_TOPERRINT_SHIFT 7
#define  SVDO6_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_TOPERRINT_MASK) >> SVDO6_VIFR_TOPERRINT_SHIFT)
#define  SVDO6_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_TOPERRINT_SHIFT))

#define  SVDO6_VIFR_BOTERRINT_MASK 0x40
#define  SVDO6_VIFR_BOTERRINT_SHIFT 6
#define  SVDO6_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_BOTERRINT_MASK) >> SVDO6_VIFR_BOTERRINT_SHIFT)
#define  SVDO6_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_BOTERRINT_SHIFT))

#define  SVDO6_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO6_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO6_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_HSYNCERRINT_MASK) >> SVDO6_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO6_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO6_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO6_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO6_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO6_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO6_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO6_VIFR_EOIINT_MASK 0x8
#define  SVDO6_VIFR_EOIINT_SHIFT 3
#define  SVDO6_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_EOIINT_MASK) >> SVDO6_VIFR_EOIINT_SHIFT)
#define  SVDO6_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_EOIINT_SHIFT))

#define  SVDO6_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO6_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO6_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_PTUNDERRUNINT_MASK) >> SVDO6_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO6_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO6_VIFR_DESCINT_MASK 0x2
#define  SVDO6_VIFR_DESCINT_SHIFT 1
#define  SVDO6_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_DESCINT_MASK) >> SVDO6_VIFR_DESCINT_SHIFT)
#define  SVDO6_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_DESCINT_SHIFT))

#define  SVDO6_VIFR_OWNINT_MASK 0x1
#define  SVDO6_VIFR_OWNINT_SHIFT 0
#define  SVDO6_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO6_VIFR_OWNINT_MASK) >> SVDO6_VIFR_OWNINT_SHIFT)
#define  SVDO6_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO6_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO6_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO6_VLWR_RESERVED1_SHIFT 16
#define  SVDO6_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VLWR_RESERVED1_MASK) >> SVDO6_VLWR_RESERVED1_SHIFT)
#define  SVDO6_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VLWR_RESERVED1_SHIFT))

#define  SVDO6_VLWR_LINEWID_MASK 0xfffc
#define  SVDO6_VLWR_LINEWID_SHIFT 2
#define  SVDO6_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO6_VLWR_LINEWID_MASK) >> SVDO6_VLWR_LINEWID_SHIFT)
#define  SVDO6_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO6_VLWR_LINEWID_SHIFT))

#define  SVDO6_VLWR_RESERVED2_MASK 0x3
#define  SVDO6_VLWR_RESERVED2_SHIFT 0
#define  SVDO6_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO6_VLWR_RESERVED2_MASK) >> SVDO6_VLWR_RESERVED2_SHIFT)
#define  SVDO6_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO6_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO6_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO6_VTCA_TCACCUM_SHIFT 0
#define  SVDO6_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO6_VTCA_TCACCUM_MASK) >> SVDO6_VTCA_TCACCUM_SHIFT)
#define  SVDO6_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO6_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO6_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO6_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO6_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO6_VTCP_TCNONBLANKPIX_MASK) >> SVDO6_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO6_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO6_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO6_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO6_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO6_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO6_VSAR_SOURCEADDR_MASK) >> SVDO6_VSAR_SOURCEADDR_SHIFT)
#define  SVDO6_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO6_VSAR_SOURCEADDR_SHIFT))

#define  SVDO6_VSAR_RESERVED1_MASK 0x3
#define  SVDO6_VSAR_RESERVED1_SHIFT 0
#define  SVDO6_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VSAR_RESERVED1_MASK) >> SVDO6_VSAR_RESERVED1_SHIFT)
#define  SVDO6_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO6_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO6_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO6_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO6_VPKR_LASTLINEPIXVAL_MASK) >> SVDO6_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO6_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO6_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO6_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO6_VPKR_RESERVED1_SHIFT 24
#define  SVDO6_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO6_VPKR_RESERVED1_MASK) >> SVDO6_VPKR_RESERVED1_SHIFT)
#define  SVDO6_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO6_VPKR_RESERVED1_SHIFT))

#define  SVDO6_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO6_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO6_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO6_VPKR_ENDSKIPLEN_MASK) >> SVDO6_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO6_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO6_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO6_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO6_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO6_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO6_VPKR_STARTSKIPLEN_MASK) >> SVDO6_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO6_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO6_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO6_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST0_JUSTLUT_SHIFT 0
#define  SVDO6_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST0_JUSTLUT_MASK) >> SVDO6_JUST0_JUSTLUT_SHIFT)
#define  SVDO6_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO6_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST1_JUSTLUT_SHIFT 0
#define  SVDO6_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST1_JUSTLUT_MASK) >> SVDO6_JUST1_JUSTLUT_SHIFT)
#define  SVDO6_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO6_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST2_JUSTLUT_SHIFT 0
#define  SVDO6_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST2_JUSTLUT_MASK) >> SVDO6_JUST2_JUSTLUT_SHIFT)
#define  SVDO6_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO6_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST3_JUSTLUT_SHIFT 0
#define  SVDO6_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST3_JUSTLUT_MASK) >> SVDO6_JUST3_JUSTLUT_SHIFT)
#define  SVDO6_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO6_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST4_JUSTLUT_SHIFT 0
#define  SVDO6_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST4_JUSTLUT_MASK) >> SVDO6_JUST4_JUSTLUT_SHIFT)
#define  SVDO6_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO6_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST5_JUSTLUT_SHIFT 0
#define  SVDO6_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST5_JUSTLUT_MASK) >> SVDO6_JUST5_JUSTLUT_SHIFT)
#define  SVDO6_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO6_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST6_JUSTLUT_SHIFT 0
#define  SVDO6_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST6_JUSTLUT_MASK) >> SVDO6_JUST6_JUSTLUT_SHIFT)
#define  SVDO6_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO6_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST7_JUSTLUT_SHIFT 0
#define  SVDO6_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST7_JUSTLUT_MASK) >> SVDO6_JUST7_JUSTLUT_SHIFT)
#define  SVDO6_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO6_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST8_JUSTLUT_SHIFT 0
#define  SVDO6_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST8_JUSTLUT_MASK) >> SVDO6_JUST8_JUSTLUT_SHIFT)
#define  SVDO6_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO6_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST9_JUSTLUT_SHIFT 0
#define  SVDO6_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST9_JUSTLUT_MASK) >> SVDO6_JUST9_JUSTLUT_SHIFT)
#define  SVDO6_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO6_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST10_JUSTLUT_SHIFT 0
#define  SVDO6_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST10_JUSTLUT_MASK) >> SVDO6_JUST10_JUSTLUT_SHIFT)
#define  SVDO6_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO6_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST11_JUSTLUT_SHIFT 0
#define  SVDO6_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST11_JUSTLUT_MASK) >> SVDO6_JUST11_JUSTLUT_SHIFT)
#define  SVDO6_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO6_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST12_JUSTLUT_SHIFT 0
#define  SVDO6_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST12_JUSTLUT_MASK) >> SVDO6_JUST12_JUSTLUT_SHIFT)
#define  SVDO6_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO6_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST13_JUSTLUT_SHIFT 0
#define  SVDO6_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST13_JUSTLUT_MASK) >> SVDO6_JUST13_JUSTLUT_SHIFT)
#define  SVDO6_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO6_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST14_JUSTLUT_SHIFT 0
#define  SVDO6_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST14_JUSTLUT_MASK) >> SVDO6_JUST14_JUSTLUT_SHIFT)
#define  SVDO6_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO6_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO6_JUST15_JUSTLUT_SHIFT 0
#define  SVDO6_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO6_JUST15_JUSTLUT_MASK) >> SVDO6_JUST15_JUSTLUT_SHIFT)
#define  SVDO6_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO6_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO6_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE0_PCODELUT_SHIFT 0
#define  SVDO6_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE0_PCODELUT_MASK) >> SVDO6_PCODE0_PCODELUT_SHIFT)
#define  SVDO6_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO6_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE1_PCODELUT_SHIFT 0
#define  SVDO6_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE1_PCODELUT_MASK) >> SVDO6_PCODE1_PCODELUT_SHIFT)
#define  SVDO6_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO6_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE2_PCODELUT_SHIFT 0
#define  SVDO6_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE2_PCODELUT_MASK) >> SVDO6_PCODE2_PCODELUT_SHIFT)
#define  SVDO6_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO6_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE3_PCODELUT_SHIFT 0
#define  SVDO6_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE3_PCODELUT_MASK) >> SVDO6_PCODE3_PCODELUT_SHIFT)
#define  SVDO6_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO6_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE4_PCODELUT_SHIFT 0
#define  SVDO6_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE4_PCODELUT_MASK) >> SVDO6_PCODE4_PCODELUT_SHIFT)
#define  SVDO6_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO6_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE5_PCODELUT_SHIFT 0
#define  SVDO6_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE5_PCODELUT_MASK) >> SVDO6_PCODE5_PCODELUT_SHIFT)
#define  SVDO6_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO6_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE6_PCODELUT_SHIFT 0
#define  SVDO6_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE6_PCODELUT_MASK) >> SVDO6_PCODE6_PCODELUT_SHIFT)
#define  SVDO6_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO6_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE7_PCODELUT_SHIFT 0
#define  SVDO6_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE7_PCODELUT_MASK) >> SVDO6_PCODE7_PCODELUT_SHIFT)
#define  SVDO6_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO6_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE8_PCODELUT_SHIFT 0
#define  SVDO6_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE8_PCODELUT_MASK) >> SVDO6_PCODE8_PCODELUT_SHIFT)
#define  SVDO6_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO6_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE9_PCODELUT_SHIFT 0
#define  SVDO6_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE9_PCODELUT_MASK) >> SVDO6_PCODE9_PCODELUT_SHIFT)
#define  SVDO6_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO6_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE10_PCODELUT_SHIFT 0
#define  SVDO6_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE10_PCODELUT_MASK) >> SVDO6_PCODE10_PCODELUT_SHIFT)
#define  SVDO6_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO6_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE11_PCODELUT_SHIFT 0
#define  SVDO6_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE11_PCODELUT_MASK) >> SVDO6_PCODE11_PCODELUT_SHIFT)
#define  SVDO6_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO6_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE12_PCODELUT_SHIFT 0
#define  SVDO6_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE12_PCODELUT_MASK) >> SVDO6_PCODE12_PCODELUT_SHIFT)
#define  SVDO6_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO6_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE13_PCODELUT_SHIFT 0
#define  SVDO6_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE13_PCODELUT_MASK) >> SVDO6_PCODE13_PCODELUT_SHIFT)
#define  SVDO6_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO6_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE14_PCODELUT_SHIFT 0
#define  SVDO6_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE14_PCODELUT_MASK) >> SVDO6_PCODE14_PCODELUT_SHIFT)
#define  SVDO6_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO6_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO6_PCODE15_PCODELUT_SHIFT 0
#define  SVDO6_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO6_PCODE15_PCODELUT_MASK) >> SVDO6_PCODE15_PCODELUT_SHIFT)
#define  SVDO6_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO6_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO6_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: SVDO (Instance 8 of 8) (SVDO7)
/** \brief Top-level register file for SVDO block*/
//
//====================================================================

//====================================================================
//Register: Video Configuration Register (SCFG)
/** \brief This register configures the major features of the SVDO module*/
//====================================================================

#define  SVDO7_SCFG_RESERVED1_MASK 0xc0000000
#define  SVDO7_SCFG_RESERVED1_SHIFT 30
#define  SVDO7_SCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED1_MASK) >> SVDO7_SCFG_RESERVED1_SHIFT)
#define  SVDO7_SCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED1_SHIFT))

#define  SVDO7_SCFG_BURSTSZ_MASK 0x30000000
#define  SVDO7_SCFG_BURSTSZ_SHIFT 28
#define  SVDO7_SCFG_BURSTSZ_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_BURSTSZ_MASK) >> SVDO7_SCFG_BURSTSZ_SHIFT)
#define  SVDO7_SCFG_BURSTSZ_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_BURSTSZ_MASK) | (((uint32_t)val) << SVDO7_SCFG_BURSTSZ_SHIFT))

#define  SVDO7_SCFG_RESERVED2_MASK 0xc000000
#define  SVDO7_SCFG_RESERVED2_SHIFT 26
#define  SVDO7_SCFG_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED2_MASK) >> SVDO7_SCFG_RESERVED2_SHIFT)
#define  SVDO7_SCFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED2_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED2_SHIFT))

#define  SVDO7_SCFG_SERP_MASK 0x2000000
#define  SVDO7_SCFG_SERP_SHIFT 25
#define  SVDO7_SCFG_SERP_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_SERP_MASK) >> SVDO7_SCFG_SERP_SHIFT)
#define  SVDO7_SCFG_SERP_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_SERP_MASK) | (((uint32_t)val) << SVDO7_SCFG_SERP_SHIFT))

#define  SVDO7_SCFG_BOT2TOP_MASK 0x1000000
#define  SVDO7_SCFG_BOT2TOP_SHIFT 24
#define  SVDO7_SCFG_BOT2TOP_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_BOT2TOP_MASK) >> SVDO7_SCFG_BOT2TOP_SHIFT)
#define  SVDO7_SCFG_BOT2TOP_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_BOT2TOP_MASK) | (((uint32_t)val) << SVDO7_SCFG_BOT2TOP_SHIFT))

#define  SVDO7_SCFG_RESERVED3_MASK 0xc00000
#define  SVDO7_SCFG_RESERVED3_SHIFT 22
#define  SVDO7_SCFG_RESERVED3_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED3_MASK) >> SVDO7_SCFG_RESERVED3_SHIFT)
#define  SVDO7_SCFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED3_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED3_SHIFT))

#define  SVDO7_SCFG_BPP_MASK 0x300000
#define  SVDO7_SCFG_BPP_SHIFT 20
#define  SVDO7_SCFG_BPP_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_BPP_MASK) >> SVDO7_SCFG_BPP_SHIFT)
#define  SVDO7_SCFG_BPP_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_BPP_MASK) | (((uint32_t)val) << SVDO7_SCFG_BPP_SHIFT))

#define  SVDO7_SCFG_RESERVED4_MASK 0x80000
#define  SVDO7_SCFG_RESERVED4_SHIFT 19
#define  SVDO7_SCFG_RESERVED4_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED4_MASK) >> SVDO7_SCFG_RESERVED4_SHIFT)
#define  SVDO7_SCFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED4_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED4_SHIFT))

#define  SVDO7_SCFG_LINESKIP_MASK 0x70000
#define  SVDO7_SCFG_LINESKIP_SHIFT 16
#define  SVDO7_SCFG_LINESKIP_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_LINESKIP_MASK) >> SVDO7_SCFG_LINESKIP_SHIFT)
#define  SVDO7_SCFG_LINESKIP_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_LINESKIP_MASK) | (((uint32_t)val) << SVDO7_SCFG_LINESKIP_SHIFT))

#define  SVDO7_SCFG_PIXDOUBLE_MASK 0x8000
#define  SVDO7_SCFG_PIXDOUBLE_SHIFT 15
#define  SVDO7_SCFG_PIXDOUBLE_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_PIXDOUBLE_MASK) >> SVDO7_SCFG_PIXDOUBLE_SHIFT)
#define  SVDO7_SCFG_PIXDOUBLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_PIXDOUBLE_MASK) | (((uint32_t)val) << SVDO7_SCFG_PIXDOUBLE_SHIFT))

#define  SVDO7_SCFG_PCODEREF_MASK 0x4000
#define  SVDO7_SCFG_PCODEREF_SHIFT 14
#define  SVDO7_SCFG_PCODEREF_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_PCODEREF_MASK) >> SVDO7_SCFG_PCODEREF_SHIFT)
#define  SVDO7_SCFG_PCODEREF_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_PCODEREF_MASK) | (((uint32_t)val) << SVDO7_SCFG_PCODEREF_SHIFT))

#define  SVDO7_SCFG_INITJUST_MASK 0x2000
#define  SVDO7_SCFG_INITJUST_SHIFT 13
#define  SVDO7_SCFG_INITJUST_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_INITJUST_MASK) >> SVDO7_SCFG_INITJUST_SHIFT)
#define  SVDO7_SCFG_INITJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_INITJUST_MASK) | (((uint32_t)val) << SVDO7_SCFG_INITJUST_SHIFT))

#define  SVDO7_SCFG_FORCEDJUST_MASK 0x1000
#define  SVDO7_SCFG_FORCEDJUST_SHIFT 12
#define  SVDO7_SCFG_FORCEDJUST_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_FORCEDJUST_MASK) >> SVDO7_SCFG_FORCEDJUST_SHIFT)
#define  SVDO7_SCFG_FORCEDJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_FORCEDJUST_MASK) | (((uint32_t)val) << SVDO7_SCFG_FORCEDJUST_SHIFT))

#define  SVDO7_SCFG_RESERVED5_MASK 0x800
#define  SVDO7_SCFG_RESERVED5_SHIFT 11
#define  SVDO7_SCFG_RESERVED5_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED5_MASK) >> SVDO7_SCFG_RESERVED5_SHIFT)
#define  SVDO7_SCFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED5_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED5_SHIFT))

#define  SVDO7_SCFG_DATASOURCE_MASK 0x400
#define  SVDO7_SCFG_DATASOURCE_SHIFT 10
#define  SVDO7_SCFG_DATASOURCE_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_DATASOURCE_MASK) >> SVDO7_SCFG_DATASOURCE_SHIFT)
#define  SVDO7_SCFG_DATASOURCE_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_DATASOURCE_MASK) | (((uint32_t)val) << SVDO7_SCFG_DATASOURCE_SHIFT))

#define  SVDO7_SCFG_TOGGLEJUST_MASK 0x300
#define  SVDO7_SCFG_TOGGLEJUST_SHIFT 8
#define  SVDO7_SCFG_TOGGLEJUST_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_TOGGLEJUST_MASK) >> SVDO7_SCFG_TOGGLEJUST_SHIFT)
#define  SVDO7_SCFG_TOGGLEJUST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_TOGGLEJUST_MASK) | (((uint32_t)val) << SVDO7_SCFG_TOGGLEJUST_SHIFT))

#define  SVDO7_SCFG_RESERVED6_MASK 0xc0
#define  SVDO7_SCFG_RESERVED6_SHIFT 6
#define  SVDO7_SCFG_RESERVED6_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED6_MASK) >> SVDO7_SCFG_RESERVED6_SHIFT)
#define  SVDO7_SCFG_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED6_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED6_SHIFT))

#define  SVDO7_SCFG_LINEREPL_MASK 0x30
#define  SVDO7_SCFG_LINEREPL_SHIFT 4
#define  SVDO7_SCFG_LINEREPL_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_LINEREPL_MASK) >> SVDO7_SCFG_LINEREPL_SHIFT)
#define  SVDO7_SCFG_LINEREPL_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_LINEREPL_MASK) | (((uint32_t)val) << SVDO7_SCFG_LINEREPL_SHIFT))

#define  SVDO7_SCFG_RESERVED7_MASK 0xc
#define  SVDO7_SCFG_RESERVED7_SHIFT 2
#define  SVDO7_SCFG_RESERVED7_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESERVED7_MASK) >> SVDO7_SCFG_RESERVED7_SHIFT)
#define  SVDO7_SCFG_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESERVED7_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESERVED7_SHIFT))

#define  SVDO7_SCFG_RESETDMA_MASK 0x2
#define  SVDO7_SCFG_RESETDMA_SHIFT 1
#define  SVDO7_SCFG_RESETDMA_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_RESETDMA_MASK) >> SVDO7_SCFG_RESETDMA_SHIFT)
#define  SVDO7_SCFG_RESETDMA_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_RESETDMA_MASK) | (((uint32_t)val) << SVDO7_SCFG_RESETDMA_SHIFT))

#define  SVDO7_SCFG_SVDOENABLE_MASK 0x1
#define  SVDO7_SCFG_SVDOENABLE_SHIFT 0
#define  SVDO7_SCFG_SVDOENABLE_MASK_SHIFT(reg) (((reg) & SVDO7_SCFG_SVDOENABLE_MASK) >> SVDO7_SCFG_SVDOENABLE_SHIFT)
#define  SVDO7_SCFG_SVDOENABLE_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_SCFG_SVDOENABLE_MASK) | (((uint32_t)val) << SVDO7_SCFG_SVDOENABLE_SHIFT))

//====================================================================
//Register: Video Status Register (STAT)
/** \brief Contains DMA control word status along with FSM states from various state machines in the module for debug purposes only.*/
//====================================================================

#define  SVDO7_STAT_SKIPST_MASK 0xe0000000
#define  SVDO7_STAT_SKIPST_SHIFT 29
#define  SVDO7_STAT_SKIPST_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_SKIPST_MASK) >> SVDO7_STAT_SKIPST_SHIFT)
#define  SVDO7_STAT_SKIPST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_SKIPST_MASK) | (((uint32_t)val) << SVDO7_STAT_SKIPST_SHIFT))

#define  SVDO7_STAT_PIXPIPEST_MASK 0x1c000000
#define  SVDO7_STAT_PIXPIPEST_SHIFT 26
#define  SVDO7_STAT_PIXPIPEST_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_PIXPIPEST_MASK) >> SVDO7_STAT_PIXPIPEST_SHIFT)
#define  SVDO7_STAT_PIXPIPEST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_PIXPIPEST_MASK) | (((uint32_t)val) << SVDO7_STAT_PIXPIPEST_SHIFT))

#define  SVDO7_STAT_DATAFIFOENT_MASK 0x3e00000
#define  SVDO7_STAT_DATAFIFOENT_SHIFT 21
#define  SVDO7_STAT_DATAFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_DATAFIFOENT_MASK) >> SVDO7_STAT_DATAFIFOENT_SHIFT)
#define  SVDO7_STAT_DATAFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_DATAFIFOENT_MASK) | (((uint32_t)val) << SVDO7_STAT_DATAFIFOENT_SHIFT))

#define  SVDO7_STAT_REFIFOENT_MASK 0x1f0000
#define  SVDO7_STAT_REFIFOENT_SHIFT 16
#define  SVDO7_STAT_REFIFOENT_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_REFIFOENT_MASK) >> SVDO7_STAT_REFIFOENT_SHIFT)
#define  SVDO7_STAT_REFIFOENT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_REFIFOENT_MASK) | (((uint32_t)val) << SVDO7_STAT_REFIFOENT_SHIFT))

#define  SVDO7_STAT_ADDRST_MASK 0xc000
#define  SVDO7_STAT_ADDRST_SHIFT 14
#define  SVDO7_STAT_ADDRST_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_ADDRST_MASK) >> SVDO7_STAT_ADDRST_SHIFT)
#define  SVDO7_STAT_ADDRST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_ADDRST_MASK) | (((uint32_t)val) << SVDO7_STAT_ADDRST_SHIFT))

#define  SVDO7_STAT_DATAST_MASK 0x3800
#define  SVDO7_STAT_DATAST_SHIFT 11
#define  SVDO7_STAT_DATAST_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_DATAST_MASK) >> SVDO7_STAT_DATAST_SHIFT)
#define  SVDO7_STAT_DATAST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_DATAST_MASK) | (((uint32_t)val) << SVDO7_STAT_DATAST_SHIFT))

#define  SVDO7_STAT_CMDST_MASK 0x700
#define  SVDO7_STAT_CMDST_SHIFT 8
#define  SVDO7_STAT_CMDST_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_CMDST_MASK) >> SVDO7_STAT_CMDST_SHIFT)
#define  SVDO7_STAT_CMDST_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_CMDST_MASK) | (((uint32_t)val) << SVDO7_STAT_CMDST_SHIFT))

#define  SVDO7_STAT_DMAOWN_MASK 0x80
#define  SVDO7_STAT_DMAOWN_SHIFT 7
#define  SVDO7_STAT_DMAOWN_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_DMAOWN_MASK) >> SVDO7_STAT_DMAOWN_SHIFT)
#define  SVDO7_STAT_DMAOWN_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_DMAOWN_MASK) | (((uint32_t)val) << SVDO7_STAT_DMAOWN_SHIFT))

#define  SVDO7_STAT_DMAACTIVE_MASK 0x40
#define  SVDO7_STAT_DMAACTIVE_SHIFT 6
#define  SVDO7_STAT_DMAACTIVE_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_DMAACTIVE_MASK) >> SVDO7_STAT_DMAACTIVE_SHIFT)
#define  SVDO7_STAT_DMAACTIVE_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_DMAACTIVE_MASK) | (((uint32_t)val) << SVDO7_STAT_DMAACTIVE_SHIFT))

#define  SVDO7_STAT_LASTBUFFER_MASK 0x20
#define  SVDO7_STAT_LASTBUFFER_SHIFT 5
#define  SVDO7_STAT_LASTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_LASTBUFFER_MASK) >> SVDO7_STAT_LASTBUFFER_SHIFT)
#define  SVDO7_STAT_LASTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_LASTBUFFER_MASK) | (((uint32_t)val) << SVDO7_STAT_LASTBUFFER_SHIFT))

#define  SVDO7_STAT_FIRSTBUFFER_MASK 0x10
#define  SVDO7_STAT_FIRSTBUFFER_SHIFT 4
#define  SVDO7_STAT_FIRSTBUFFER_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_FIRSTBUFFER_MASK) >> SVDO7_STAT_FIRSTBUFFER_SHIFT)
#define  SVDO7_STAT_FIRSTBUFFER_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_FIRSTBUFFER_MASK) | (((uint32_t)val) << SVDO7_STAT_FIRSTBUFFER_SHIFT))

#define  SVDO7_STAT_RTOL_MASK 0x8
#define  SVDO7_STAT_RTOL_SHIFT 3
#define  SVDO7_STAT_RTOL_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_RTOL_MASK) >> SVDO7_STAT_RTOL_SHIFT)
#define  SVDO7_STAT_RTOL_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_RTOL_MASK) | (((uint32_t)val) << SVDO7_STAT_RTOL_SHIFT))

#define  SVDO7_STAT_BLANK_MASK 0x4
#define  SVDO7_STAT_BLANK_SHIFT 2
#define  SVDO7_STAT_BLANK_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_BLANK_MASK) >> SVDO7_STAT_BLANK_SHIFT)
#define  SVDO7_STAT_BLANK_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_BLANK_MASK) | (((uint32_t)val) << SVDO7_STAT_BLANK_SHIFT))

#define  SVDO7_STAT_INTONFINISH_MASK 0x2
#define  SVDO7_STAT_INTONFINISH_SHIFT 1
#define  SVDO7_STAT_INTONFINISH_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_INTONFINISH_MASK) >> SVDO7_STAT_INTONFINISH_SHIFT)
#define  SVDO7_STAT_INTONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_INTONFINISH_MASK) | (((uint32_t)val) << SVDO7_STAT_INTONFINISH_SHIFT))

#define  SVDO7_STAT_STOPONFINISH_MASK 0x1
#define  SVDO7_STAT_STOPONFINISH_SHIFT 0
#define  SVDO7_STAT_STOPONFINISH_MASK_SHIFT(reg) (((reg) & SVDO7_STAT_STOPONFINISH_MASK) >> SVDO7_STAT_STOPONFINISH_SHIFT)
#define  SVDO7_STAT_STOPONFINISH_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_STAT_STOPONFINISH_MASK) | (((uint32_t)val) << SVDO7_STAT_STOPONFINISH_SHIFT))

//====================================================================
//Register: Video DMA Descriptor Write Address Register (VDWR)
/** \brief These bits are always 0, to align pointer to a 16B address.*/
//====================================================================

#define  SVDO7_VDWR_WRDESCADDR_MASK 0xfffffff0
#define  SVDO7_VDWR_WRDESCADDR_SHIFT 4
#define  SVDO7_VDWR_WRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO7_VDWR_WRDESCADDR_MASK) >> SVDO7_VDWR_WRDESCADDR_SHIFT)
#define  SVDO7_VDWR_WRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDWR_WRDESCADDR_MASK) | (((uint32_t)val) << SVDO7_VDWR_WRDESCADDR_SHIFT))

#define  SVDO7_VDWR_RESERVED1_MASK 0xf
#define  SVDO7_VDWR_RESERVED1_SHIFT 0
#define  SVDO7_VDWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VDWR_RESERVED1_MASK) >> SVDO7_VDWR_RESERVED1_SHIFT)
#define  SVDO7_VDWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VDWR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Current Descriptor Address Register (VDAR)
/** \brief Indicates the address of the current descriptor*/
//====================================================================

#define  SVDO7_VDAR_CURRDESCADDR_MASK 0xfffffff0
#define  SVDO7_VDAR_CURRDESCADDR_SHIFT 4
#define  SVDO7_VDAR_CURRDESCADDR_MASK_SHIFT(reg) (((reg) & SVDO7_VDAR_CURRDESCADDR_MASK) >> SVDO7_VDAR_CURRDESCADDR_SHIFT)
#define  SVDO7_VDAR_CURRDESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDAR_CURRDESCADDR_MASK) | (((uint32_t)val) << SVDO7_VDAR_CURRDESCADDR_SHIFT))

#define  SVDO7_VDAR_RESERVED1_MASK 0xf
#define  SVDO7_VDAR_RESERVED1_SHIFT 0
#define  SVDO7_VDAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VDAR_RESERVED1_MASK) >> SVDO7_VDAR_RESERVED1_SHIFT)
#define  SVDO7_VDAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VDAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video DMA Bytes Left to Transfer Register (VDBR)
/** \brief Indicates the number of bytes left to transfer in the current line. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO7_VDBR_RESERVED1_MASK 0xffff0000
#define  SVDO7_VDBR_RESERVED1_SHIFT 16
#define  SVDO7_VDBR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VDBR_RESERVED1_MASK) >> SVDO7_VDBR_RESERVED1_SHIFT)
#define  SVDO7_VDBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDBR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VDBR_RESERVED1_SHIFT))

#define  SVDO7_VDBR_BYTESLEFT_MASK 0xffff
#define  SVDO7_VDBR_BYTESLEFT_SHIFT 0
#define  SVDO7_VDBR_BYTESLEFT_MASK_SHIFT(reg) (((reg) & SVDO7_VDBR_BYTESLEFT_MASK) >> SVDO7_VDBR_BYTESLEFT_SHIFT)
#define  SVDO7_VDBR_BYTESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDBR_BYTESLEFT_MASK) | (((uint32_t)val) << SVDO7_VDBR_BYTESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Lines Left to Transfer Register (VDLR)
/** \brief Indicates the number of lines left to transfer in the current buffer. The total number of bytes remaining in the buffer can be calculated as follows:
      <br>
        BufferBytesRemaining = (LinesRemaining*LineWidth) + CurrentLineBytesRemaining*/
//====================================================================

#define  SVDO7_VDLR_RESERVED1_MASK 0xffffc000
#define  SVDO7_VDLR_RESERVED1_SHIFT 14
#define  SVDO7_VDLR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VDLR_RESERVED1_MASK) >> SVDO7_VDLR_RESERVED1_SHIFT)
#define  SVDO7_VDLR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDLR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VDLR_RESERVED1_SHIFT))

#define  SVDO7_VDLR_LINESLEFT_MASK 0x3fff
#define  SVDO7_VDLR_LINESLEFT_SHIFT 0
#define  SVDO7_VDLR_LINESLEFT_MASK_SHIFT(reg) (((reg) & SVDO7_VDLR_LINESLEFT_MASK) >> SVDO7_VDLR_LINESLEFT_SHIFT)
#define  SVDO7_VDLR_LINESLEFT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDLR_LINESLEFT_MASK) | (((uint32_t)val) << SVDO7_VDLR_LINESLEFT_SHIFT))

//====================================================================
//Register: Video DMA Next Descriptor Address Register (VDNR)
/** \brief Indicates the address of the next DMA descriptor*/
//====================================================================

#define  SVDO7_VDNR_DESCADDR_MASK 0xfffffff0
#define  SVDO7_VDNR_DESCADDR_SHIFT 4
#define  SVDO7_VDNR_DESCADDR_MASK_SHIFT(reg) (((reg) & SVDO7_VDNR_DESCADDR_MASK) >> SVDO7_VDNR_DESCADDR_SHIFT)
#define  SVDO7_VDNR_DESCADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDNR_DESCADDR_MASK) | (((uint32_t)val) << SVDO7_VDNR_DESCADDR_SHIFT))

#define  SVDO7_VDNR_RESERVED1_MASK 0xf
#define  SVDO7_VDNR_RESERVED1_SHIFT 0
#define  SVDO7_VDNR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VDNR_RESERVED1_MASK) >> SVDO7_VDNR_RESERVED1_SHIFT)
#define  SVDO7_VDNR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VDNR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VDNR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Interrupt Enable Register (VIER)
/** \brief Video Interrupt Enable Register*/
//====================================================================

#define  SVDO7_VIER_RESERVED1_MASK 0xffffff00
#define  SVDO7_VIER_RESERVED1_SHIFT 8
#define  SVDO7_VIER_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_RESERVED1_MASK) >> SVDO7_VIER_RESERVED1_SHIFT)
#define  SVDO7_VIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VIER_RESERVED1_SHIFT))

#define  SVDO7_VIER_TOPERRINT_MASK 0x80
#define  SVDO7_VIER_TOPERRINT_SHIFT 7
#define  SVDO7_VIER_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_TOPERRINT_MASK) >> SVDO7_VIER_TOPERRINT_SHIFT)
#define  SVDO7_VIER_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_TOPERRINT_MASK) | (((uint32_t)val) << SVDO7_VIER_TOPERRINT_SHIFT))

#define  SVDO7_VIER_BOTERRINT_MASK 0x40
#define  SVDO7_VIER_BOTERRINT_SHIFT 6
#define  SVDO7_VIER_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_BOTERRINT_MASK) >> SVDO7_VIER_BOTERRINT_SHIFT)
#define  SVDO7_VIER_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_BOTERRINT_MASK) | (((uint32_t)val) << SVDO7_VIER_BOTERRINT_SHIFT))

#define  SVDO7_VIER_HSYNCERRINT_MASK 0x20
#define  SVDO7_VIER_HSYNCERRINT_SHIFT 5
#define  SVDO7_VIER_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_HSYNCERRINT_MASK) >> SVDO7_VIER_HSYNCERRINT_SHIFT)
#define  SVDO7_VIER_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO7_VIER_HSYNCERRINT_SHIFT))

#define  SVDO7_VIER_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO7_VIER_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO7_VIER_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_BENDERUNDERRUNINT_MASK) >> SVDO7_VIER_BENDERUNDERRUNINT_SHIFT)
#define  SVDO7_VIER_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIER_BENDERUNDERRUNINT_SHIFT))

#define  SVDO7_VIER_EOIINT_MASK 0x8
#define  SVDO7_VIER_EOIINT_SHIFT 3
#define  SVDO7_VIER_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_EOIINT_MASK) >> SVDO7_VIER_EOIINT_SHIFT)
#define  SVDO7_VIER_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_EOIINT_MASK) | (((uint32_t)val) << SVDO7_VIER_EOIINT_SHIFT))

#define  SVDO7_VIER_PTUNDERRUNINT_MASK 0x4
#define  SVDO7_VIER_PTUNDERRUNINT_SHIFT 2
#define  SVDO7_VIER_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_PTUNDERRUNINT_MASK) >> SVDO7_VIER_PTUNDERRUNINT_SHIFT)
#define  SVDO7_VIER_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIER_PTUNDERRUNINT_SHIFT))

#define  SVDO7_VIER_DESCINT_MASK 0x2
#define  SVDO7_VIER_DESCINT_SHIFT 1
#define  SVDO7_VIER_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_DESCINT_MASK) >> SVDO7_VIER_DESCINT_SHIFT)
#define  SVDO7_VIER_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_DESCINT_MASK) | (((uint32_t)val) << SVDO7_VIER_DESCINT_SHIFT))

#define  SVDO7_VIER_OWNINT_MASK 0x1
#define  SVDO7_VIER_OWNINT_SHIFT 0
#define  SVDO7_VIER_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIER_OWNINT_MASK) >> SVDO7_VIER_OWNINT_SHIFT)
#define  SVDO7_VIER_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIER_OWNINT_MASK) | (((uint32_t)val) << SVDO7_VIER_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Pending Register (VIPR)
/** \brief Video Interrupt Pending Register*/
//====================================================================

#define  SVDO7_VIPR_RESERVED1_MASK 0xffffff00
#define  SVDO7_VIPR_RESERVED1_SHIFT 8
#define  SVDO7_VIPR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_RESERVED1_MASK) >> SVDO7_VIPR_RESERVED1_SHIFT)
#define  SVDO7_VIPR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VIPR_RESERVED1_SHIFT))

#define  SVDO7_VIPR_TOPERRINT_MASK 0x80
#define  SVDO7_VIPR_TOPERRINT_SHIFT 7
#define  SVDO7_VIPR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_TOPERRINT_MASK) >> SVDO7_VIPR_TOPERRINT_SHIFT)
#define  SVDO7_VIPR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_TOPERRINT_SHIFT))

#define  SVDO7_VIPR_BOTERRINT_MASK 0x40
#define  SVDO7_VIPR_BOTERRINT_SHIFT 6
#define  SVDO7_VIPR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_BOTERRINT_MASK) >> SVDO7_VIPR_BOTERRINT_SHIFT)
#define  SVDO7_VIPR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_BOTERRINT_SHIFT))

#define  SVDO7_VIPR_HSYNCERRINT_MASK 0x20
#define  SVDO7_VIPR_HSYNCERRINT_SHIFT 5
#define  SVDO7_VIPR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_HSYNCERRINT_MASK) >> SVDO7_VIPR_HSYNCERRINT_SHIFT)
#define  SVDO7_VIPR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_HSYNCERRINT_SHIFT))

#define  SVDO7_VIPR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO7_VIPR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO7_VIPR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_BENDERUNDERRUNINT_MASK) >> SVDO7_VIPR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO7_VIPR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO7_VIPR_EOIINT_MASK 0x8
#define  SVDO7_VIPR_EOIINT_SHIFT 3
#define  SVDO7_VIPR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_EOIINT_MASK) >> SVDO7_VIPR_EOIINT_SHIFT)
#define  SVDO7_VIPR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_EOIINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_EOIINT_SHIFT))

#define  SVDO7_VIPR_PTUNDERRUNINT_MASK 0x4
#define  SVDO7_VIPR_PTUNDERRUNINT_SHIFT 2
#define  SVDO7_VIPR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_PTUNDERRUNINT_MASK) >> SVDO7_VIPR_PTUNDERRUNINT_SHIFT)
#define  SVDO7_VIPR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_PTUNDERRUNINT_SHIFT))

#define  SVDO7_VIPR_DESCINT_MASK 0x2
#define  SVDO7_VIPR_DESCINT_SHIFT 1
#define  SVDO7_VIPR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_DESCINT_MASK) >> SVDO7_VIPR_DESCINT_SHIFT)
#define  SVDO7_VIPR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_DESCINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_DESCINT_SHIFT))

#define  SVDO7_VIPR_OWNINT_MASK 0x1
#define  SVDO7_VIPR_OWNINT_SHIFT 0
#define  SVDO7_VIPR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIPR_OWNINT_MASK) >> SVDO7_VIPR_OWNINT_SHIFT)
#define  SVDO7_VIPR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIPR_OWNINT_MASK) | (((uint32_t)val) << SVDO7_VIPR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Acknowledge Register (VIAR)
/** \brief Video Interrupt Acknowledge Register*/
//====================================================================

#define  SVDO7_VIAR_RESERVED1_MASK 0xffffff00
#define  SVDO7_VIAR_RESERVED1_SHIFT 8
#define  SVDO7_VIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_RESERVED1_MASK) >> SVDO7_VIAR_RESERVED1_SHIFT)
#define  SVDO7_VIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VIAR_RESERVED1_SHIFT))

#define  SVDO7_VIAR_TOPERRINT_MASK 0x80
#define  SVDO7_VIAR_TOPERRINT_SHIFT 7
#define  SVDO7_VIAR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_TOPERRINT_MASK) >> SVDO7_VIAR_TOPERRINT_SHIFT)
#define  SVDO7_VIAR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_TOPERRINT_SHIFT))

#define  SVDO7_VIAR_BOTERRINT_MASK 0x40
#define  SVDO7_VIAR_BOTERRINT_SHIFT 6
#define  SVDO7_VIAR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_BOTERRINT_MASK) >> SVDO7_VIAR_BOTERRINT_SHIFT)
#define  SVDO7_VIAR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_BOTERRINT_SHIFT))

#define  SVDO7_VIAR_HSYNCERRINT_MASK 0x20
#define  SVDO7_VIAR_HSYNCERRINT_SHIFT 5
#define  SVDO7_VIAR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_HSYNCERRINT_MASK) >> SVDO7_VIAR_HSYNCERRINT_SHIFT)
#define  SVDO7_VIAR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_HSYNCERRINT_SHIFT))

#define  SVDO7_VIAR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO7_VIAR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO7_VIAR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_BENDERUNDERRUNINT_MASK) >> SVDO7_VIAR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO7_VIAR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO7_VIAR_EOIINT_MASK 0x8
#define  SVDO7_VIAR_EOIINT_SHIFT 3
#define  SVDO7_VIAR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_EOIINT_MASK) >> SVDO7_VIAR_EOIINT_SHIFT)
#define  SVDO7_VIAR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_EOIINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_EOIINT_SHIFT))

#define  SVDO7_VIAR_PTUNDERRUNINT_MASK 0x4
#define  SVDO7_VIAR_PTUNDERRUNINT_SHIFT 2
#define  SVDO7_VIAR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_PTUNDERRUNINT_MASK) >> SVDO7_VIAR_PTUNDERRUNINT_SHIFT)
#define  SVDO7_VIAR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_PTUNDERRUNINT_SHIFT))

#define  SVDO7_VIAR_DESCINT_MASK 0x2
#define  SVDO7_VIAR_DESCINT_SHIFT 1
#define  SVDO7_VIAR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_DESCINT_MASK) >> SVDO7_VIAR_DESCINT_SHIFT)
#define  SVDO7_VIAR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_DESCINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_DESCINT_SHIFT))

#define  SVDO7_VIAR_OWNINT_MASK 0x1
#define  SVDO7_VIAR_OWNINT_SHIFT 0
#define  SVDO7_VIAR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIAR_OWNINT_MASK) >> SVDO7_VIAR_OWNINT_SHIFT)
#define  SVDO7_VIAR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIAR_OWNINT_MASK) | (((uint32_t)val) << SVDO7_VIAR_OWNINT_SHIFT))

//====================================================================
//Register: Video Interrupt Force Register (VIFR)
/** \brief Video Interrupt Test Register*/
//====================================================================

#define  SVDO7_VIFR_RESERVED1_MASK 0xffffff00
#define  SVDO7_VIFR_RESERVED1_SHIFT 8
#define  SVDO7_VIFR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_RESERVED1_MASK) >> SVDO7_VIFR_RESERVED1_SHIFT)
#define  SVDO7_VIFR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VIFR_RESERVED1_SHIFT))

#define  SVDO7_VIFR_TOPERRINT_MASK 0x80
#define  SVDO7_VIFR_TOPERRINT_SHIFT 7
#define  SVDO7_VIFR_TOPERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_TOPERRINT_MASK) >> SVDO7_VIFR_TOPERRINT_SHIFT)
#define  SVDO7_VIFR_TOPERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_TOPERRINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_TOPERRINT_SHIFT))

#define  SVDO7_VIFR_BOTERRINT_MASK 0x40
#define  SVDO7_VIFR_BOTERRINT_SHIFT 6
#define  SVDO7_VIFR_BOTERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_BOTERRINT_MASK) >> SVDO7_VIFR_BOTERRINT_SHIFT)
#define  SVDO7_VIFR_BOTERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_BOTERRINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_BOTERRINT_SHIFT))

#define  SVDO7_VIFR_HSYNCERRINT_MASK 0x20
#define  SVDO7_VIFR_HSYNCERRINT_SHIFT 5
#define  SVDO7_VIFR_HSYNCERRINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_HSYNCERRINT_MASK) >> SVDO7_VIFR_HSYNCERRINT_SHIFT)
#define  SVDO7_VIFR_HSYNCERRINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_HSYNCERRINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_HSYNCERRINT_SHIFT))

#define  SVDO7_VIFR_BENDERUNDERRUNINT_MASK 0x10
#define  SVDO7_VIFR_BENDERUNDERRUNINT_SHIFT 4
#define  SVDO7_VIFR_BENDERUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_BENDERUNDERRUNINT_MASK) >> SVDO7_VIFR_BENDERUNDERRUNINT_SHIFT)
#define  SVDO7_VIFR_BENDERUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_BENDERUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_BENDERUNDERRUNINT_SHIFT))

#define  SVDO7_VIFR_EOIINT_MASK 0x8
#define  SVDO7_VIFR_EOIINT_SHIFT 3
#define  SVDO7_VIFR_EOIINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_EOIINT_MASK) >> SVDO7_VIFR_EOIINT_SHIFT)
#define  SVDO7_VIFR_EOIINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_EOIINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_EOIINT_SHIFT))

#define  SVDO7_VIFR_PTUNDERRUNINT_MASK 0x4
#define  SVDO7_VIFR_PTUNDERRUNINT_SHIFT 2
#define  SVDO7_VIFR_PTUNDERRUNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_PTUNDERRUNINT_MASK) >> SVDO7_VIFR_PTUNDERRUNINT_SHIFT)
#define  SVDO7_VIFR_PTUNDERRUNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_PTUNDERRUNINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_PTUNDERRUNINT_SHIFT))

#define  SVDO7_VIFR_DESCINT_MASK 0x2
#define  SVDO7_VIFR_DESCINT_SHIFT 1
#define  SVDO7_VIFR_DESCINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_DESCINT_MASK) >> SVDO7_VIFR_DESCINT_SHIFT)
#define  SVDO7_VIFR_DESCINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_DESCINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_DESCINT_SHIFT))

#define  SVDO7_VIFR_OWNINT_MASK 0x1
#define  SVDO7_VIFR_OWNINT_SHIFT 0
#define  SVDO7_VIFR_OWNINT_MASK_SHIFT(reg) (((reg) & SVDO7_VIFR_OWNINT_MASK) >> SVDO7_VIFR_OWNINT_SHIFT)
#define  SVDO7_VIFR_OWNINT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VIFR_OWNINT_MASK) | (((uint32_t)val) << SVDO7_VIFR_OWNINT_SHIFT))

//====================================================================
//Register: Video Line Width Register (VLWR)
/** \brief This register specifies the number of bytes in a single video line.
        The width must be a multiple of 4 bytes and must be at least one
        burst long. For example, if the burst size is set to 8 words, the
        line width must be at least 32 bytes. The block is limited to 64K
        bytes per line. This limit will only allow print widths of up to:
      <br>
          600 dpi: max print width = 218.4 inches
      <br>
          1200 dpi: max print width = 109.2 inches
      <br>
          2400 dpi: max print width = 54.6 inches*/
//====================================================================

#define  SVDO7_VLWR_RESERVED1_MASK 0xffff0000
#define  SVDO7_VLWR_RESERVED1_SHIFT 16
#define  SVDO7_VLWR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VLWR_RESERVED1_MASK) >> SVDO7_VLWR_RESERVED1_SHIFT)
#define  SVDO7_VLWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VLWR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VLWR_RESERVED1_SHIFT))

#define  SVDO7_VLWR_LINEWID_MASK 0xfffc
#define  SVDO7_VLWR_LINEWID_SHIFT 2
#define  SVDO7_VLWR_LINEWID_MASK_SHIFT(reg) (((reg) & SVDO7_VLWR_LINEWID_MASK) >> SVDO7_VLWR_LINEWID_SHIFT)
#define  SVDO7_VLWR_LINEWID_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VLWR_LINEWID_MASK) | (((uint32_t)val) << SVDO7_VLWR_LINEWID_SHIFT))

#define  SVDO7_VLWR_RESERVED2_MASK 0x3
#define  SVDO7_VLWR_RESERVED2_SHIFT 0
#define  SVDO7_VLWR_RESERVED2_MASK_SHIFT(reg) (((reg) & SVDO7_VLWR_RESERVED2_MASK) >> SVDO7_VLWR_RESERVED2_SHIFT)
#define  SVDO7_VLWR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VLWR_RESERVED2_MASK) | (((uint32_t)val) << SVDO7_VLWR_RESERVED2_SHIFT))

//====================================================================
//Register: Video Toner Count Accumulation Register (VTCA)
/** \brief Accumulation of Pixel weights on the last page printed. The MSbits of the
        accumulator value are read back here. The value is normalized by 2^4
        (size of weight).*/
//====================================================================

#define  SVDO7_VTCA_TCACCUM_MASK 0xffffffff
#define  SVDO7_VTCA_TCACCUM_SHIFT 0
#define  SVDO7_VTCA_TCACCUM_MASK_SHIFT(reg) (((reg) & SVDO7_VTCA_TCACCUM_MASK) >> SVDO7_VTCA_TCACCUM_SHIFT)
#define  SVDO7_VTCA_TCACCUM_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VTCA_TCACCUM_MASK) | (((uint32_t)val) << SVDO7_VTCA_TCACCUM_SHIFT))

//====================================================================
//Register: Video Toner Count Non-Blank Pixels Register (VTCP)
/** \brief Number of Non-Blank Pixels on the last page printed.*/
//====================================================================

#define  SVDO7_VTCP_TCNONBLANKPIX_MASK 0xffffffff
#define  SVDO7_VTCP_TCNONBLANKPIX_SHIFT 0
#define  SVDO7_VTCP_TCNONBLANKPIX_MASK_SHIFT(reg) (((reg) & SVDO7_VTCP_TCNONBLANKPIX_MASK) >> SVDO7_VTCP_TCNONBLANKPIX_SHIFT)
#define  SVDO7_VTCP_TCNONBLANKPIX_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VTCP_TCNONBLANKPIX_MASK) | (((uint32_t)val) << SVDO7_VTCP_TCNONBLANKPIX_SHIFT))

//====================================================================
//Register: Video DMA Source Address Register (VSAR)
/** \brief Indicates the source address in the current DMA descriptor*/
//====================================================================

#define  SVDO7_VSAR_SOURCEADDR_MASK 0xfffffffc
#define  SVDO7_VSAR_SOURCEADDR_SHIFT 2
#define  SVDO7_VSAR_SOURCEADDR_MASK_SHIFT(reg) (((reg) & SVDO7_VSAR_SOURCEADDR_MASK) >> SVDO7_VSAR_SOURCEADDR_SHIFT)
#define  SVDO7_VSAR_SOURCEADDR_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VSAR_SOURCEADDR_MASK) | (((uint32_t)val) << SVDO7_VSAR_SOURCEADDR_SHIFT))

#define  SVDO7_VSAR_RESERVED1_MASK 0x3
#define  SVDO7_VSAR_RESERVED1_SHIFT 0
#define  SVDO7_VSAR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VSAR_RESERVED1_MASK) >> SVDO7_VSAR_RESERVED1_SHIFT)
#define  SVDO7_VSAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VSAR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VSAR_RESERVED1_SHIFT))

//====================================================================
//Register: Video Pixel Skip Register (VPKR)
/** \brief Controls the number of pixels that may be skipped at the start and end of each line*/
//====================================================================

#define  SVDO7_VPKR_LASTLINEPIXVAL_MASK 0xf0000000
#define  SVDO7_VPKR_LASTLINEPIXVAL_SHIFT 28
#define  SVDO7_VPKR_LASTLINEPIXVAL_MASK_SHIFT(reg) (((reg) & SVDO7_VPKR_LASTLINEPIXVAL_MASK) >> SVDO7_VPKR_LASTLINEPIXVAL_SHIFT)
#define  SVDO7_VPKR_LASTLINEPIXVAL_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VPKR_LASTLINEPIXVAL_MASK) | (((uint32_t)val) << SVDO7_VPKR_LASTLINEPIXVAL_SHIFT))

#define  SVDO7_VPKR_RESERVED1_MASK 0xf000000
#define  SVDO7_VPKR_RESERVED1_SHIFT 24
#define  SVDO7_VPKR_RESERVED1_MASK_SHIFT(reg) (((reg) & SVDO7_VPKR_RESERVED1_MASK) >> SVDO7_VPKR_RESERVED1_SHIFT)
#define  SVDO7_VPKR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VPKR_RESERVED1_MASK) | (((uint32_t)val) << SVDO7_VPKR_RESERVED1_SHIFT))

#define  SVDO7_VPKR_ENDSKIPLEN_MASK 0xfff000
#define  SVDO7_VPKR_ENDSKIPLEN_SHIFT 12
#define  SVDO7_VPKR_ENDSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO7_VPKR_ENDSKIPLEN_MASK) >> SVDO7_VPKR_ENDSKIPLEN_SHIFT)
#define  SVDO7_VPKR_ENDSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VPKR_ENDSKIPLEN_MASK) | (((uint32_t)val) << SVDO7_VPKR_ENDSKIPLEN_SHIFT))

#define  SVDO7_VPKR_STARTSKIPLEN_MASK 0xfff
#define  SVDO7_VPKR_STARTSKIPLEN_SHIFT 0
#define  SVDO7_VPKR_STARTSKIPLEN_MASK_SHIFT(reg) (((reg) & SVDO7_VPKR_STARTSKIPLEN_MASK) >> SVDO7_VPKR_STARTSKIPLEN_SHIFT)
#define  SVDO7_VPKR_STARTSKIPLEN_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_VPKR_STARTSKIPLEN_MASK) | (((uint32_t)val) << SVDO7_VPKR_STARTSKIPLEN_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 1 of 16) (JUST0)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 1 of 16)*/
//====================================================================

#define  SVDO7_JUST0_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST0_JUSTLUT_SHIFT 0
#define  SVDO7_JUST0_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST0_JUSTLUT_MASK) >> SVDO7_JUST0_JUSTLUT_SHIFT)
#define  SVDO7_JUST0_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST0_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST0_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 2 of 16) (JUST1)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 2 of 16)*/
//====================================================================

#define  SVDO7_JUST1_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST1_JUSTLUT_SHIFT 0
#define  SVDO7_JUST1_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST1_JUSTLUT_MASK) >> SVDO7_JUST1_JUSTLUT_SHIFT)
#define  SVDO7_JUST1_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST1_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST1_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 3 of 16) (JUST2)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 3 of 16)*/
//====================================================================

#define  SVDO7_JUST2_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST2_JUSTLUT_SHIFT 0
#define  SVDO7_JUST2_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST2_JUSTLUT_MASK) >> SVDO7_JUST2_JUSTLUT_SHIFT)
#define  SVDO7_JUST2_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST2_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST2_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 4 of 16) (JUST3)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 4 of 16)*/
//====================================================================

#define  SVDO7_JUST3_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST3_JUSTLUT_SHIFT 0
#define  SVDO7_JUST3_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST3_JUSTLUT_MASK) >> SVDO7_JUST3_JUSTLUT_SHIFT)
#define  SVDO7_JUST3_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST3_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST3_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 5 of 16) (JUST4)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 5 of 16)*/
//====================================================================

#define  SVDO7_JUST4_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST4_JUSTLUT_SHIFT 0
#define  SVDO7_JUST4_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST4_JUSTLUT_MASK) >> SVDO7_JUST4_JUSTLUT_SHIFT)
#define  SVDO7_JUST4_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST4_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST4_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 6 of 16) (JUST5)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 6 of 16)*/
//====================================================================

#define  SVDO7_JUST5_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST5_JUSTLUT_SHIFT 0
#define  SVDO7_JUST5_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST5_JUSTLUT_MASK) >> SVDO7_JUST5_JUSTLUT_SHIFT)
#define  SVDO7_JUST5_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST5_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST5_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 7 of 16) (JUST6)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 7 of 16)*/
//====================================================================

#define  SVDO7_JUST6_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST6_JUSTLUT_SHIFT 0
#define  SVDO7_JUST6_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST6_JUSTLUT_MASK) >> SVDO7_JUST6_JUSTLUT_SHIFT)
#define  SVDO7_JUST6_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST6_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST6_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 8 of 16) (JUST7)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 8 of 16)*/
//====================================================================

#define  SVDO7_JUST7_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST7_JUSTLUT_SHIFT 0
#define  SVDO7_JUST7_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST7_JUSTLUT_MASK) >> SVDO7_JUST7_JUSTLUT_SHIFT)
#define  SVDO7_JUST7_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST7_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST7_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 9 of 16) (JUST8)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 9 of 16)*/
//====================================================================

#define  SVDO7_JUST8_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST8_JUSTLUT_SHIFT 0
#define  SVDO7_JUST8_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST8_JUSTLUT_MASK) >> SVDO7_JUST8_JUSTLUT_SHIFT)
#define  SVDO7_JUST8_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST8_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST8_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 10 of 16) (JUST9)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 10 of 16)*/
//====================================================================

#define  SVDO7_JUST9_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST9_JUSTLUT_SHIFT 0
#define  SVDO7_JUST9_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST9_JUSTLUT_MASK) >> SVDO7_JUST9_JUSTLUT_SHIFT)
#define  SVDO7_JUST9_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST9_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST9_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 11 of 16) (JUST10)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 11 of 16)*/
//====================================================================

#define  SVDO7_JUST10_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST10_JUSTLUT_SHIFT 0
#define  SVDO7_JUST10_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST10_JUSTLUT_MASK) >> SVDO7_JUST10_JUSTLUT_SHIFT)
#define  SVDO7_JUST10_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST10_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST10_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 12 of 16) (JUST11)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 12 of 16)*/
//====================================================================

#define  SVDO7_JUST11_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST11_JUSTLUT_SHIFT 0
#define  SVDO7_JUST11_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST11_JUSTLUT_MASK) >> SVDO7_JUST11_JUSTLUT_SHIFT)
#define  SVDO7_JUST11_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST11_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST11_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 13 of 16) (JUST12)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 13 of 16)*/
//====================================================================

#define  SVDO7_JUST12_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST12_JUSTLUT_SHIFT 0
#define  SVDO7_JUST12_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST12_JUSTLUT_MASK) >> SVDO7_JUST12_JUSTLUT_SHIFT)
#define  SVDO7_JUST12_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST12_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST12_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 14 of 16) (JUST13)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 14 of 16)*/
//====================================================================

#define  SVDO7_JUST13_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST13_JUSTLUT_SHIFT 0
#define  SVDO7_JUST13_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST13_JUSTLUT_MASK) >> SVDO7_JUST13_JUSTLUT_SHIFT)
#define  SVDO7_JUST13_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST13_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST13_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 15 of 16) (JUST14)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 15 of 16)*/
//====================================================================

#define  SVDO7_JUST14_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST14_JUSTLUT_SHIFT 0
#define  SVDO7_JUST14_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST14_JUSTLUT_MASK) >> SVDO7_JUST14_JUSTLUT_SHIFT)
#define  SVDO7_JUST14_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST14_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST14_JUSTLUT_SHIFT))

//====================================================================
//Register: Justification LUT (Instance 16 of 16) (JUST15)
/** \brief This justification table represents a 256x2 LUT. It is packed such that the
      least significant bits are applied to the least significant pixel. For
      example if data is 4 bits per pixel, J[1:0] are appended to Din[3:0].
      <br>
      Justification Values:
      <br>
      00 = Center
      <br>
      01 = Late
      <br>
      10 = Early
      <br>
      11 = Split (Instance 16 of 16)*/
//====================================================================

#define  SVDO7_JUST15_JUSTLUT_MASK 0xffffffff
#define  SVDO7_JUST15_JUSTLUT_SHIFT 0
#define  SVDO7_JUST15_JUSTLUT_MASK_SHIFT(reg) (((reg) & SVDO7_JUST15_JUSTLUT_MASK) >> SVDO7_JUST15_JUSTLUT_SHIFT)
#define  SVDO7_JUST15_JUSTLUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_JUST15_JUSTLUT_MASK) | (((uint32_t)val) << SVDO7_JUST15_JUSTLUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 1 of 16) (PCODE0)
/** \brief This pcode table represents a 64x8 LUT. (Instance 1 of 16)*/
//====================================================================

#define  SVDO7_PCODE0_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE0_PCODELUT_SHIFT 0
#define  SVDO7_PCODE0_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE0_PCODELUT_MASK) >> SVDO7_PCODE0_PCODELUT_SHIFT)
#define  SVDO7_PCODE0_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE0_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE0_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 2 of 16) (PCODE1)
/** \brief This pcode table represents a 64x8 LUT. (Instance 2 of 16)*/
//====================================================================

#define  SVDO7_PCODE1_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE1_PCODELUT_SHIFT 0
#define  SVDO7_PCODE1_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE1_PCODELUT_MASK) >> SVDO7_PCODE1_PCODELUT_SHIFT)
#define  SVDO7_PCODE1_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE1_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE1_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 3 of 16) (PCODE2)
/** \brief This pcode table represents a 64x8 LUT. (Instance 3 of 16)*/
//====================================================================

#define  SVDO7_PCODE2_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE2_PCODELUT_SHIFT 0
#define  SVDO7_PCODE2_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE2_PCODELUT_MASK) >> SVDO7_PCODE2_PCODELUT_SHIFT)
#define  SVDO7_PCODE2_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE2_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE2_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 4 of 16) (PCODE3)
/** \brief This pcode table represents a 64x8 LUT. (Instance 4 of 16)*/
//====================================================================

#define  SVDO7_PCODE3_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE3_PCODELUT_SHIFT 0
#define  SVDO7_PCODE3_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE3_PCODELUT_MASK) >> SVDO7_PCODE3_PCODELUT_SHIFT)
#define  SVDO7_PCODE3_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE3_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE3_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 5 of 16) (PCODE4)
/** \brief This pcode table represents a 64x8 LUT. (Instance 5 of 16)*/
//====================================================================

#define  SVDO7_PCODE4_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE4_PCODELUT_SHIFT 0
#define  SVDO7_PCODE4_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE4_PCODELUT_MASK) >> SVDO7_PCODE4_PCODELUT_SHIFT)
#define  SVDO7_PCODE4_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE4_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE4_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 6 of 16) (PCODE5)
/** \brief This pcode table represents a 64x8 LUT. (Instance 6 of 16)*/
//====================================================================

#define  SVDO7_PCODE5_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE5_PCODELUT_SHIFT 0
#define  SVDO7_PCODE5_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE5_PCODELUT_MASK) >> SVDO7_PCODE5_PCODELUT_SHIFT)
#define  SVDO7_PCODE5_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE5_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE5_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 7 of 16) (PCODE6)
/** \brief This pcode table represents a 64x8 LUT. (Instance 7 of 16)*/
//====================================================================

#define  SVDO7_PCODE6_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE6_PCODELUT_SHIFT 0
#define  SVDO7_PCODE6_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE6_PCODELUT_MASK) >> SVDO7_PCODE6_PCODELUT_SHIFT)
#define  SVDO7_PCODE6_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE6_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE6_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 8 of 16) (PCODE7)
/** \brief This pcode table represents a 64x8 LUT. (Instance 8 of 16)*/
//====================================================================

#define  SVDO7_PCODE7_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE7_PCODELUT_SHIFT 0
#define  SVDO7_PCODE7_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE7_PCODELUT_MASK) >> SVDO7_PCODE7_PCODELUT_SHIFT)
#define  SVDO7_PCODE7_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE7_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE7_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 9 of 16) (PCODE8)
/** \brief This pcode table represents a 64x8 LUT. (Instance 9 of 16)*/
//====================================================================

#define  SVDO7_PCODE8_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE8_PCODELUT_SHIFT 0
#define  SVDO7_PCODE8_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE8_PCODELUT_MASK) >> SVDO7_PCODE8_PCODELUT_SHIFT)
#define  SVDO7_PCODE8_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE8_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE8_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 10 of 16) (PCODE9)
/** \brief This pcode table represents a 64x8 LUT. (Instance 10 of 16)*/
//====================================================================

#define  SVDO7_PCODE9_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE9_PCODELUT_SHIFT 0
#define  SVDO7_PCODE9_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE9_PCODELUT_MASK) >> SVDO7_PCODE9_PCODELUT_SHIFT)
#define  SVDO7_PCODE9_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE9_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE9_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 11 of 16) (PCODE10)
/** \brief This pcode table represents a 64x8 LUT. (Instance 11 of 16)*/
//====================================================================

#define  SVDO7_PCODE10_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE10_PCODELUT_SHIFT 0
#define  SVDO7_PCODE10_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE10_PCODELUT_MASK) >> SVDO7_PCODE10_PCODELUT_SHIFT)
#define  SVDO7_PCODE10_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE10_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE10_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 12 of 16) (PCODE11)
/** \brief This pcode table represents a 64x8 LUT. (Instance 12 of 16)*/
//====================================================================

#define  SVDO7_PCODE11_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE11_PCODELUT_SHIFT 0
#define  SVDO7_PCODE11_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE11_PCODELUT_MASK) >> SVDO7_PCODE11_PCODELUT_SHIFT)
#define  SVDO7_PCODE11_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE11_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE11_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 13 of 16) (PCODE12)
/** \brief This pcode table represents a 64x8 LUT. (Instance 13 of 16)*/
//====================================================================

#define  SVDO7_PCODE12_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE12_PCODELUT_SHIFT 0
#define  SVDO7_PCODE12_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE12_PCODELUT_MASK) >> SVDO7_PCODE12_PCODELUT_SHIFT)
#define  SVDO7_PCODE12_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE12_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE12_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 14 of 16) (PCODE13)
/** \brief This pcode table represents a 64x8 LUT. (Instance 14 of 16)*/
//====================================================================

#define  SVDO7_PCODE13_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE13_PCODELUT_SHIFT 0
#define  SVDO7_PCODE13_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE13_PCODELUT_MASK) >> SVDO7_PCODE13_PCODELUT_SHIFT)
#define  SVDO7_PCODE13_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE13_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE13_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 15 of 16) (PCODE14)
/** \brief This pcode table represents a 64x8 LUT. (Instance 15 of 16)*/
//====================================================================

#define  SVDO7_PCODE14_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE14_PCODELUT_SHIFT 0
#define  SVDO7_PCODE14_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE14_PCODELUT_MASK) >> SVDO7_PCODE14_PCODELUT_SHIFT)
#define  SVDO7_PCODE14_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE14_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE14_PCODELUT_SHIFT))

//====================================================================
//Register: PCODE LUT (Instance 16 of 16) (PCODE15)
/** \brief This pcode table represents a 64x8 LUT. (Instance 16 of 16)*/
//====================================================================

#define  SVDO7_PCODE15_PCODELUT_MASK 0xffffffff
#define  SVDO7_PCODE15_PCODELUT_SHIFT 0
#define  SVDO7_PCODE15_PCODELUT_MASK_SHIFT(reg) (((reg) & SVDO7_PCODE15_PCODELUT_MASK) >> SVDO7_PCODE15_PCODELUT_SHIFT)
#define  SVDO7_PCODE15_PCODELUT_REPLACE_VAL(reg,val) (((reg) & ~SVDO7_PCODE15_PCODELUT_MASK) | (((uint32_t)val) << SVDO7_PCODE15_PCODELUT_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 1 of 8) (HiPWM0)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM0_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM0_HCR_RESERVED1_SHIFT 21
#define  HIPWM0_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_RESERVED1_MASK) >> HIPWM0_HCR_RESERVED1_SHIFT)
#define  HIPWM0_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HCR_RESERVED1_SHIFT))

#define  HIPWM0_HCR_EDGESEL_MASK 0x100000
#define  HIPWM0_HCR_EDGESEL_SHIFT 20
#define  HIPWM0_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_EDGESEL_MASK) >> HIPWM0_HCR_EDGESEL_SHIFT)
#define  HIPWM0_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM0_HCR_EDGESEL_SHIFT))

#define  HIPWM0_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM0_HCR_NUMEDGE_SHIFT 19
#define  HIPWM0_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_NUMEDGE_MASK) >> HIPWM0_HCR_NUMEDGE_SHIFT)
#define  HIPWM0_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM0_HCR_NUMEDGE_SHIFT))

#define  HIPWM0_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM0_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM0_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM0_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM0_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM0_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM0_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM0_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM0_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM0_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM0_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM0_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM0_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM0_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM0_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM0_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM0_HCR_NOBATLAST_SHIFT 15
#define  HIPWM0_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_NOBATLAST_MASK) >> HIPWM0_HCR_NOBATLAST_SHIFT)
#define  HIPWM0_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM0_HCR_NOBATLAST_SHIFT))

#define  HIPWM0_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM0_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM0_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_DUALMARGIN_MASK) >> HIPWM0_HCR_DUALMARGIN_SHIFT)
#define  HIPWM0_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM0_HCR_DUALMARGIN_SHIFT))

#define  HIPWM0_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM0_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM0_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_FILTERPULSES_MASK) >> HIPWM0_HCR_FILTERPULSES_SHIFT)
#define  HIPWM0_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM0_HCR_FILTERPULSES_SHIFT))

#define  HIPWM0_HCR_CRCRST_MASK 0x1000
#define  HIPWM0_HCR_CRCRST_SHIFT 12
#define  HIPWM0_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CRCRST_MASK) >> HIPWM0_HCR_CRCRST_SHIFT)
#define  HIPWM0_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM0_HCR_CRCRST_SHIFT))

#define  HIPWM0_HCR_HIPSDIR_MASK 0x800
#define  HIPWM0_HCR_HIPSDIR_SHIFT 11
#define  HIPWM0_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_HIPSDIR_MASK) >> HIPWM0_HCR_HIPSDIR_SHIFT)
#define  HIPWM0_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM0_HCR_HIPSDIR_SHIFT))

#define  HIPWM0_HCR_PTWIDTH_MASK 0x400
#define  HIPWM0_HCR_PTWIDTH_SHIFT 10
#define  HIPWM0_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_PTWIDTH_MASK) >> HIPWM0_HCR_PTWIDTH_SHIFT)
#define  HIPWM0_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM0_HCR_PTWIDTH_SHIFT))

#define  HIPWM0_HCR_TESTMODE_MASK 0x200
#define  HIPWM0_HCR_TESTMODE_SHIFT 9
#define  HIPWM0_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_TESTMODE_MASK) >> HIPWM0_HCR_TESTMODE_SHIFT)
#define  HIPWM0_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM0_HCR_TESTMODE_SHIFT))

#define  HIPWM0_HCR_CHANZERO_MASK 0x100
#define  HIPWM0_HCR_CHANZERO_SHIFT 8
#define  HIPWM0_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CHANZERO_MASK) >> HIPWM0_HCR_CHANZERO_SHIFT)
#define  HIPWM0_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM0_HCR_CHANZERO_SHIFT))

#define  HIPWM0_HCR_INVPT_MASK 0x80
#define  HIPWM0_HCR_INVPT_SHIFT 7
#define  HIPWM0_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_INVPT_MASK) >> HIPWM0_HCR_INVPT_SHIFT)
#define  HIPWM0_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM0_HCR_INVPT_SHIFT))

#define  HIPWM0_HCR_CPUACCESS_MASK 0x40
#define  HIPWM0_HCR_CPUACCESS_SHIFT 6
#define  HIPWM0_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_CPUACCESS_MASK) >> HIPWM0_HCR_CPUACCESS_SHIFT)
#define  HIPWM0_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM0_HCR_CPUACCESS_SHIFT))

#define  HIPWM0_HCR_PECEN_MASK 0x20
#define  HIPWM0_HCR_PECEN_SHIFT 5
#define  HIPWM0_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_PECEN_MASK) >> HIPWM0_HCR_PECEN_SHIFT)
#define  HIPWM0_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_PECEN_SHIFT))

#define  HIPWM0_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM0_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM0_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_PIGTOPHSYNC_MASK) >> HIPWM0_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM0_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM0_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM0_HCR_PIGEN_MASK 0x8
#define  HIPWM0_HCR_PIGEN_SHIFT 3
#define  HIPWM0_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_PIGEN_MASK) >> HIPWM0_HCR_PIGEN_SHIFT)
#define  HIPWM0_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_PIGEN_SHIFT))

#define  HIPWM0_HCR_BENDEREN_MASK 0x4
#define  HIPWM0_HCR_BENDEREN_SHIFT 2
#define  HIPWM0_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_BENDEREN_MASK) >> HIPWM0_HCR_BENDEREN_SHIFT)
#define  HIPWM0_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM0_HCR_BENDEREN_SHIFT))

#define  HIPWM0_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM0_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM0_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_SYNTHHSYNCEN_MASK) >> HIPWM0_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM0_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM0_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM0_HCR_ENABLE_MASK 0x1
#define  HIPWM0_HCR_ENABLE_SHIFT 0
#define  HIPWM0_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM0_HCR_ENABLE_MASK) >> HIPWM0_HCR_ENABLE_SHIFT)
#define  HIPWM0_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM0_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM0_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM0_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM0_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM0_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM0_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM0_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM0_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM0_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM0_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM0_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM0_HSMR_SIDEMARGIN_MASK) >> HIPWM0_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM0_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM0_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM0_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM0_HTSR_RESERVED1_SHIFT 8
#define  HIPWM0_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HTSR_RESERVED1_MASK) >> HIPWM0_HTSR_RESERVED1_SHIFT)
#define  HIPWM0_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HTSR_RESERVED1_SHIFT))

#define  HIPWM0_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM0_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM0_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM0_HTSR_TOPSKEW_MASK) >> HIPWM0_HTSR_TOPSKEW_SHIFT)
#define  HIPWM0_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM0_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM0_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HSR_RESERVED1_SHIFT 12
#define  HIPWM0_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_RESERVED1_MASK) >> HIPWM0_HSR_RESERVED1_SHIFT)
#define  HIPWM0_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HSR_RESERVED1_SHIFT))

#define  HIPWM0_HSR_INDEX_MASK 0xf00
#define  HIPWM0_HSR_INDEX_SHIFT 8
#define  HIPWM0_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_INDEX_MASK) >> HIPWM0_HSR_INDEX_SHIFT)
#define  HIPWM0_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM0_HSR_INDEX_SHIFT))

#define  HIPWM0_HSR_DIRRTOL_MASK 0x80
#define  HIPWM0_HSR_DIRRTOL_SHIFT 7
#define  HIPWM0_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_DIRRTOL_MASK) >> HIPWM0_HSR_DIRRTOL_SHIFT)
#define  HIPWM0_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM0_HSR_DIRRTOL_SHIFT))

#define  HIPWM0_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM0_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM0_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_PAGE_STATE_MASK) >> HIPWM0_HSR_PAGE_STATE_SHIFT)
#define  HIPWM0_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM0_HSR_PAGE_STATE_SHIFT))

#define  HIPWM0_HSR_RESERVED2_MASK 0x8
#define  HIPWM0_HSR_RESERVED2_SHIFT 3
#define  HIPWM0_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_RESERVED2_MASK) >> HIPWM0_HSR_RESERVED2_SHIFT)
#define  HIPWM0_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM0_HSR_RESERVED2_SHIFT))

#define  HIPWM0_HSR_READY_IN_MASK 0x4
#define  HIPWM0_HSR_READY_IN_SHIFT 2
#define  HIPWM0_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_READY_IN_MASK) >> HIPWM0_HSR_READY_IN_SHIFT)
#define  HIPWM0_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM0_HSR_READY_IN_SHIFT))

#define  HIPWM0_HSR_VALID_IN_MASK 0x2
#define  HIPWM0_HSR_VALID_IN_SHIFT 1
#define  HIPWM0_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_VALID_IN_MASK) >> HIPWM0_HSR_VALID_IN_SHIFT)
#define  HIPWM0_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM0_HSR_VALID_IN_SHIFT))

#define  HIPWM0_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM0_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM0_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM0_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM0_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM0_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM0_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM0_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM0_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HSPWR_RESERVED1_MASK) >> HIPWM0_HSPWR_RESERVED1_SHIFT)
#define  HIPWM0_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HSPWR_RESERVED1_SHIFT))

#define  HIPWM0_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM0_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM0_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM0_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM0_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM0_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM0_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM0_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM0_HSQR_RESERVED1_SHIFT 24
#define  HIPWM0_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HSQR_RESERVED1_MASK) >> HIPWM0_HSQR_RESERVED1_SHIFT)
#define  HIPWM0_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HSQR_RESERVED1_SHIFT))

#define  HIPWM0_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM0_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM0_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM0_HSQR_QUIWIDTH_MASK) >> HIPWM0_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM0_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM0_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM0_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM0_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM0_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM0_PRRA_PEC_VALUE_MASK) >> HIPWM0_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM0_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM0_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM0_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM0_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPVR_RESERVED1_MASK) >> HIPWM0_HPPVR_RESERVED1_SHIFT)
#define  HIPWM0_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPPVR_RESERVED1_SHIFT))

#define  HIPWM0_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM0_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM0_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPVR_PIGPTVAL_MASK) >> HIPWM0_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM0_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM0_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM0_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPSR_RESERVED1_SHIFT 16
#define  HIPWM0_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPSR_RESERVED1_MASK) >> HIPWM0_HPSR_RESERVED1_SHIFT)
#define  HIPWM0_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPSR_RESERVED1_SHIFT))

#define  HIPWM0_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM0_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM0_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM0_HPSR_PIGPIXSZ_MASK) >> HIPWM0_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM0_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM0_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM0_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPCR_RESERVED1_SHIFT 16
#define  HIPWM0_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPCR_RESERVED1_MASK) >> HIPWM0_HPCR_RESERVED1_SHIFT)
#define  HIPWM0_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPCR_RESERVED1_SHIFT))

#define  HIPWM0_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM0_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM0_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM0_HPCR_PIGPIXCNT_MASK) >> HIPWM0_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM0_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM0_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM0_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM0_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPSR_RESERVED1_MASK) >> HIPWM0_HPPSR_RESERVED1_SHIFT)
#define  HIPWM0_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPPSR_RESERVED1_SHIFT))

#define  HIPWM0_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM0_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM0_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPSR_PIGPIXSPACE_MASK) >> HIPWM0_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM0_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM0_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM0_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM0_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPLSR_RESERVED1_MASK) >> HIPWM0_HPLSR_RESERVED1_SHIFT)
#define  HIPWM0_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPLSR_RESERVED1_SHIFT))

#define  HIPWM0_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM0_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM0_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM0_HPLSR_PIGLINESPACE_MASK) >> HIPWM0_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM0_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM0_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM0_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM0_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPOER_RESERVED1_MASK) >> HIPWM0_HPPOER_RESERVED1_SHIFT)
#define  HIPWM0_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPPOER_RESERVED1_SHIFT))

#define  HIPWM0_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM0_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM0_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM0_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM0_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM0_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM0_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM0_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPOOR_RESERVED1_MASK) >> HIPWM0_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM0_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM0_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM0_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM0_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM0_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM0_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM0_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM0_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM0_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPLOR_RESERVED1_MASK) >> HIPWM0_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM0_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM0_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM0_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM0_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM0_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM0_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM0_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM0_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM0_HCRC_CRC_MASK 0xffffffff
#define  HIPWM0_HCRC_CRC_SHIFT 0
#define  HIPWM0_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM0_HCRC_CRC_MASK) >> HIPWM0_HCRC_CRC_SHIFT)
#define  HIPWM0_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM0_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM0_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HBCR_RESERVED1_SHIFT 12
#define  HIPWM0_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBCR_RESERVED1_MASK) >> HIPWM0_HBCR_RESERVED1_SHIFT)
#define  HIPWM0_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBCR_RESERVED1_SHIFT))

#define  HIPWM0_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM0_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM0_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM0_HBCR_SAMPLESPERSEG_MASK) >> HIPWM0_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM0_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM0_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM0_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM0_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM0_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HLBDR_RESERVED1_MASK) >> HIPWM0_HLBDR_RESERVED1_SHIFT)
#define  HIPWM0_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HLBDR_RESERVED1_SHIFT))

#define  HIPWM0_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM0_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM0_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM0_HLBDR_LBDRINT_MASK) >> HIPWM0_HLBDR_LBDRINT_SHIFT)
#define  HIPWM0_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM0_HLBDR_LBDRINT_SHIFT))

#define  HIPWM0_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM0_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM0_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HLBDR_LBDRFRAC_MASK) >> HIPWM0_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM0_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM0_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM0_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM0_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM0_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HRBDR_RESERVED1_MASK) >> HIPWM0_HRBDR_RESERVED1_SHIFT)
#define  HIPWM0_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HRBDR_RESERVED1_SHIFT))

#define  HIPWM0_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM0_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM0_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM0_HRBDR_RBDRINT_MASK) >> HIPWM0_HRBDR_RBDRINT_SHIFT)
#define  HIPWM0_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM0_HRBDR_RBDRINT_SHIFT))

#define  HIPWM0_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM0_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM0_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HRBDR_RBDRFRAC_MASK) >> HIPWM0_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM0_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM0_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM0_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM0_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM0_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCR_RESERVED1_MASK) >> HIPWM0_HBNCR_RESERVED1_SHIFT)
#define  HIPWM0_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBNCR_RESERVED1_SHIFT))

#define  HIPWM0_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM0_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM0_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCR_LFSRINITCNTL_MASK) >> HIPWM0_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM0_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM0_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM0_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM0_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM0_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCR_BENDERLFSREN_MASK) >> HIPWM0_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM0_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM0_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM0_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM0_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM0_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM0_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM0_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM0_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM0_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM0_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNINIT_RESERVED1_MASK) >> HIPWM0_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM0_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM0_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM0_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM0_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM0_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM0_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM0_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM0_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM0_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM0_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCV_RESERVED1_MASK) >> HIPWM0_HBNCV_RESERVED1_SHIFT)
#define  HIPWM0_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBNCV_RESERVED1_SHIFT))

#define  HIPWM0_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM0_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM0_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM0_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM0_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM0_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM0_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM0_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT0_RESERVED1_MASK) >> HIPWM0_HBAT0_RESERVED1_SHIFT)
#define  HIPWM0_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT0_RESERVED1_SHIFT))

#define  HIPWM0_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT0_BATLAST_SHIFT 19
#define  HIPWM0_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT0_BATLAST_MASK) >> HIPWM0_HBAT0_BATLAST_SHIFT)
#define  HIPWM0_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT0_BATLAST_SHIFT))

#define  HIPWM0_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT0_BATSIGN_MASK) >> HIPWM0_HBAT0_BATSIGN_SHIFT)
#define  HIPWM0_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT0_BATSIGN_SHIFT))

#define  HIPWM0_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT0_BATSHIFT_MASK) >> HIPWM0_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT0_BATFRAC_MASK) >> HIPWM0_HBAT0_BATFRAC_SHIFT)
#define  HIPWM0_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM0_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT1_RESERVED1_MASK) >> HIPWM0_HBAT1_RESERVED1_SHIFT)
#define  HIPWM0_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT1_RESERVED1_SHIFT))

#define  HIPWM0_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT1_BATLAST_SHIFT 19
#define  HIPWM0_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT1_BATLAST_MASK) >> HIPWM0_HBAT1_BATLAST_SHIFT)
#define  HIPWM0_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT1_BATLAST_SHIFT))

#define  HIPWM0_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT1_BATSIGN_MASK) >> HIPWM0_HBAT1_BATSIGN_SHIFT)
#define  HIPWM0_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT1_BATSIGN_SHIFT))

#define  HIPWM0_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT1_BATSHIFT_MASK) >> HIPWM0_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT1_BATFRAC_MASK) >> HIPWM0_HBAT1_BATFRAC_SHIFT)
#define  HIPWM0_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM0_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT2_RESERVED1_MASK) >> HIPWM0_HBAT2_RESERVED1_SHIFT)
#define  HIPWM0_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT2_RESERVED1_SHIFT))

#define  HIPWM0_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT2_BATLAST_SHIFT 19
#define  HIPWM0_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT2_BATLAST_MASK) >> HIPWM0_HBAT2_BATLAST_SHIFT)
#define  HIPWM0_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT2_BATLAST_SHIFT))

#define  HIPWM0_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT2_BATSIGN_MASK) >> HIPWM0_HBAT2_BATSIGN_SHIFT)
#define  HIPWM0_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT2_BATSIGN_SHIFT))

#define  HIPWM0_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT2_BATSHIFT_MASK) >> HIPWM0_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT2_BATFRAC_MASK) >> HIPWM0_HBAT2_BATFRAC_SHIFT)
#define  HIPWM0_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM0_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT3_RESERVED1_MASK) >> HIPWM0_HBAT3_RESERVED1_SHIFT)
#define  HIPWM0_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT3_RESERVED1_SHIFT))

#define  HIPWM0_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT3_BATLAST_SHIFT 19
#define  HIPWM0_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT3_BATLAST_MASK) >> HIPWM0_HBAT3_BATLAST_SHIFT)
#define  HIPWM0_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT3_BATLAST_SHIFT))

#define  HIPWM0_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT3_BATSIGN_MASK) >> HIPWM0_HBAT3_BATSIGN_SHIFT)
#define  HIPWM0_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT3_BATSIGN_SHIFT))

#define  HIPWM0_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT3_BATSHIFT_MASK) >> HIPWM0_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT3_BATFRAC_MASK) >> HIPWM0_HBAT3_BATFRAC_SHIFT)
#define  HIPWM0_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM0_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT4_RESERVED1_MASK) >> HIPWM0_HBAT4_RESERVED1_SHIFT)
#define  HIPWM0_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT4_RESERVED1_SHIFT))

#define  HIPWM0_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT4_BATLAST_SHIFT 19
#define  HIPWM0_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT4_BATLAST_MASK) >> HIPWM0_HBAT4_BATLAST_SHIFT)
#define  HIPWM0_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT4_BATLAST_SHIFT))

#define  HIPWM0_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT4_BATSIGN_MASK) >> HIPWM0_HBAT4_BATSIGN_SHIFT)
#define  HIPWM0_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT4_BATSIGN_SHIFT))

#define  HIPWM0_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT4_BATSHIFT_MASK) >> HIPWM0_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT4_BATFRAC_MASK) >> HIPWM0_HBAT4_BATFRAC_SHIFT)
#define  HIPWM0_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM0_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT5_RESERVED1_MASK) >> HIPWM0_HBAT5_RESERVED1_SHIFT)
#define  HIPWM0_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT5_RESERVED1_SHIFT))

#define  HIPWM0_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT5_BATLAST_SHIFT 19
#define  HIPWM0_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT5_BATLAST_MASK) >> HIPWM0_HBAT5_BATLAST_SHIFT)
#define  HIPWM0_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT5_BATLAST_SHIFT))

#define  HIPWM0_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT5_BATSIGN_MASK) >> HIPWM0_HBAT5_BATSIGN_SHIFT)
#define  HIPWM0_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT5_BATSIGN_SHIFT))

#define  HIPWM0_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT5_BATSHIFT_MASK) >> HIPWM0_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT5_BATFRAC_MASK) >> HIPWM0_HBAT5_BATFRAC_SHIFT)
#define  HIPWM0_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM0_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT6_RESERVED1_MASK) >> HIPWM0_HBAT6_RESERVED1_SHIFT)
#define  HIPWM0_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT6_RESERVED1_SHIFT))

#define  HIPWM0_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT6_BATLAST_SHIFT 19
#define  HIPWM0_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT6_BATLAST_MASK) >> HIPWM0_HBAT6_BATLAST_SHIFT)
#define  HIPWM0_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT6_BATLAST_SHIFT))

#define  HIPWM0_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT6_BATSIGN_MASK) >> HIPWM0_HBAT6_BATSIGN_SHIFT)
#define  HIPWM0_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT6_BATSIGN_SHIFT))

#define  HIPWM0_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT6_BATSHIFT_MASK) >> HIPWM0_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT6_BATFRAC_MASK) >> HIPWM0_HBAT6_BATFRAC_SHIFT)
#define  HIPWM0_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM0_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT7_RESERVED1_MASK) >> HIPWM0_HBAT7_RESERVED1_SHIFT)
#define  HIPWM0_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT7_RESERVED1_SHIFT))

#define  HIPWM0_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT7_BATLAST_SHIFT 19
#define  HIPWM0_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT7_BATLAST_MASK) >> HIPWM0_HBAT7_BATLAST_SHIFT)
#define  HIPWM0_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT7_BATLAST_SHIFT))

#define  HIPWM0_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT7_BATSIGN_MASK) >> HIPWM0_HBAT7_BATSIGN_SHIFT)
#define  HIPWM0_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT7_BATSIGN_SHIFT))

#define  HIPWM0_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT7_BATSHIFT_MASK) >> HIPWM0_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT7_BATFRAC_MASK) >> HIPWM0_HBAT7_BATFRAC_SHIFT)
#define  HIPWM0_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM0_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT8_RESERVED1_MASK) >> HIPWM0_HBAT8_RESERVED1_SHIFT)
#define  HIPWM0_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT8_RESERVED1_SHIFT))

#define  HIPWM0_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT8_BATLAST_SHIFT 19
#define  HIPWM0_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT8_BATLAST_MASK) >> HIPWM0_HBAT8_BATLAST_SHIFT)
#define  HIPWM0_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT8_BATLAST_SHIFT))

#define  HIPWM0_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT8_BATSIGN_MASK) >> HIPWM0_HBAT8_BATSIGN_SHIFT)
#define  HIPWM0_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT8_BATSIGN_SHIFT))

#define  HIPWM0_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT8_BATSHIFT_MASK) >> HIPWM0_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT8_BATFRAC_MASK) >> HIPWM0_HBAT8_BATFRAC_SHIFT)
#define  HIPWM0_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM0_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT9_RESERVED1_MASK) >> HIPWM0_HBAT9_RESERVED1_SHIFT)
#define  HIPWM0_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT9_RESERVED1_SHIFT))

#define  HIPWM0_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT9_BATLAST_SHIFT 19
#define  HIPWM0_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT9_BATLAST_MASK) >> HIPWM0_HBAT9_BATLAST_SHIFT)
#define  HIPWM0_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT9_BATLAST_SHIFT))

#define  HIPWM0_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT9_BATSIGN_MASK) >> HIPWM0_HBAT9_BATSIGN_SHIFT)
#define  HIPWM0_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT9_BATSIGN_SHIFT))

#define  HIPWM0_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT9_BATSHIFT_MASK) >> HIPWM0_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT9_BATFRAC_MASK) >> HIPWM0_HBAT9_BATFRAC_SHIFT)
#define  HIPWM0_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM0_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT10_RESERVED1_MASK) >> HIPWM0_HBAT10_RESERVED1_SHIFT)
#define  HIPWM0_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT10_RESERVED1_SHIFT))

#define  HIPWM0_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT10_BATLAST_SHIFT 19
#define  HIPWM0_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT10_BATLAST_MASK) >> HIPWM0_HBAT10_BATLAST_SHIFT)
#define  HIPWM0_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT10_BATLAST_SHIFT))

#define  HIPWM0_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT10_BATSIGN_MASK) >> HIPWM0_HBAT10_BATSIGN_SHIFT)
#define  HIPWM0_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT10_BATSIGN_SHIFT))

#define  HIPWM0_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT10_BATSHIFT_MASK) >> HIPWM0_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT10_BATFRAC_MASK) >> HIPWM0_HBAT10_BATFRAC_SHIFT)
#define  HIPWM0_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM0_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT11_RESERVED1_MASK) >> HIPWM0_HBAT11_RESERVED1_SHIFT)
#define  HIPWM0_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT11_RESERVED1_SHIFT))

#define  HIPWM0_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT11_BATLAST_SHIFT 19
#define  HIPWM0_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT11_BATLAST_MASK) >> HIPWM0_HBAT11_BATLAST_SHIFT)
#define  HIPWM0_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT11_BATLAST_SHIFT))

#define  HIPWM0_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT11_BATSIGN_MASK) >> HIPWM0_HBAT11_BATSIGN_SHIFT)
#define  HIPWM0_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT11_BATSIGN_SHIFT))

#define  HIPWM0_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT11_BATSHIFT_MASK) >> HIPWM0_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT11_BATFRAC_MASK) >> HIPWM0_HBAT11_BATFRAC_SHIFT)
#define  HIPWM0_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM0_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT12_RESERVED1_MASK) >> HIPWM0_HBAT12_RESERVED1_SHIFT)
#define  HIPWM0_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT12_RESERVED1_SHIFT))

#define  HIPWM0_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT12_BATLAST_SHIFT 19
#define  HIPWM0_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT12_BATLAST_MASK) >> HIPWM0_HBAT12_BATLAST_SHIFT)
#define  HIPWM0_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT12_BATLAST_SHIFT))

#define  HIPWM0_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT12_BATSIGN_MASK) >> HIPWM0_HBAT12_BATSIGN_SHIFT)
#define  HIPWM0_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT12_BATSIGN_SHIFT))

#define  HIPWM0_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT12_BATSHIFT_MASK) >> HIPWM0_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT12_BATFRAC_MASK) >> HIPWM0_HBAT12_BATFRAC_SHIFT)
#define  HIPWM0_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM0_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT13_RESERVED1_MASK) >> HIPWM0_HBAT13_RESERVED1_SHIFT)
#define  HIPWM0_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT13_RESERVED1_SHIFT))

#define  HIPWM0_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT13_BATLAST_SHIFT 19
#define  HIPWM0_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT13_BATLAST_MASK) >> HIPWM0_HBAT13_BATLAST_SHIFT)
#define  HIPWM0_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT13_BATLAST_SHIFT))

#define  HIPWM0_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT13_BATSIGN_MASK) >> HIPWM0_HBAT13_BATSIGN_SHIFT)
#define  HIPWM0_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT13_BATSIGN_SHIFT))

#define  HIPWM0_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT13_BATSHIFT_MASK) >> HIPWM0_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT13_BATFRAC_MASK) >> HIPWM0_HBAT13_BATFRAC_SHIFT)
#define  HIPWM0_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM0_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT14_RESERVED1_MASK) >> HIPWM0_HBAT14_RESERVED1_SHIFT)
#define  HIPWM0_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT14_RESERVED1_SHIFT))

#define  HIPWM0_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT14_BATLAST_SHIFT 19
#define  HIPWM0_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT14_BATLAST_MASK) >> HIPWM0_HBAT14_BATLAST_SHIFT)
#define  HIPWM0_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT14_BATLAST_SHIFT))

#define  HIPWM0_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT14_BATSIGN_MASK) >> HIPWM0_HBAT14_BATSIGN_SHIFT)
#define  HIPWM0_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT14_BATSIGN_SHIFT))

#define  HIPWM0_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT14_BATSHIFT_MASK) >> HIPWM0_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT14_BATFRAC_MASK) >> HIPWM0_HBAT14_BATFRAC_SHIFT)
#define  HIPWM0_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM0_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT15_RESERVED1_MASK) >> HIPWM0_HBAT15_RESERVED1_SHIFT)
#define  HIPWM0_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT15_RESERVED1_SHIFT))

#define  HIPWM0_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT15_BATLAST_SHIFT 19
#define  HIPWM0_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT15_BATLAST_MASK) >> HIPWM0_HBAT15_BATLAST_SHIFT)
#define  HIPWM0_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT15_BATLAST_SHIFT))

#define  HIPWM0_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT15_BATSIGN_MASK) >> HIPWM0_HBAT15_BATSIGN_SHIFT)
#define  HIPWM0_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT15_BATSIGN_SHIFT))

#define  HIPWM0_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT15_BATSHIFT_MASK) >> HIPWM0_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT15_BATFRAC_MASK) >> HIPWM0_HBAT15_BATFRAC_SHIFT)
#define  HIPWM0_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM0_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT16_RESERVED1_MASK) >> HIPWM0_HBAT16_RESERVED1_SHIFT)
#define  HIPWM0_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT16_RESERVED1_SHIFT))

#define  HIPWM0_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT16_BATLAST_SHIFT 19
#define  HIPWM0_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT16_BATLAST_MASK) >> HIPWM0_HBAT16_BATLAST_SHIFT)
#define  HIPWM0_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT16_BATLAST_SHIFT))

#define  HIPWM0_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT16_BATSIGN_MASK) >> HIPWM0_HBAT16_BATSIGN_SHIFT)
#define  HIPWM0_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT16_BATSIGN_SHIFT))

#define  HIPWM0_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT16_BATSHIFT_MASK) >> HIPWM0_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT16_BATFRAC_MASK) >> HIPWM0_HBAT16_BATFRAC_SHIFT)
#define  HIPWM0_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM0_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT17_RESERVED1_MASK) >> HIPWM0_HBAT17_RESERVED1_SHIFT)
#define  HIPWM0_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT17_RESERVED1_SHIFT))

#define  HIPWM0_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT17_BATLAST_SHIFT 19
#define  HIPWM0_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT17_BATLAST_MASK) >> HIPWM0_HBAT17_BATLAST_SHIFT)
#define  HIPWM0_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT17_BATLAST_SHIFT))

#define  HIPWM0_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT17_BATSIGN_MASK) >> HIPWM0_HBAT17_BATSIGN_SHIFT)
#define  HIPWM0_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT17_BATSIGN_SHIFT))

#define  HIPWM0_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT17_BATSHIFT_MASK) >> HIPWM0_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT17_BATFRAC_MASK) >> HIPWM0_HBAT17_BATFRAC_SHIFT)
#define  HIPWM0_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM0_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT18_RESERVED1_MASK) >> HIPWM0_HBAT18_RESERVED1_SHIFT)
#define  HIPWM0_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT18_RESERVED1_SHIFT))

#define  HIPWM0_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT18_BATLAST_SHIFT 19
#define  HIPWM0_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT18_BATLAST_MASK) >> HIPWM0_HBAT18_BATLAST_SHIFT)
#define  HIPWM0_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT18_BATLAST_SHIFT))

#define  HIPWM0_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT18_BATSIGN_MASK) >> HIPWM0_HBAT18_BATSIGN_SHIFT)
#define  HIPWM0_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT18_BATSIGN_SHIFT))

#define  HIPWM0_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT18_BATSHIFT_MASK) >> HIPWM0_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT18_BATFRAC_MASK) >> HIPWM0_HBAT18_BATFRAC_SHIFT)
#define  HIPWM0_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM0_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT19_RESERVED1_MASK) >> HIPWM0_HBAT19_RESERVED1_SHIFT)
#define  HIPWM0_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT19_RESERVED1_SHIFT))

#define  HIPWM0_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT19_BATLAST_SHIFT 19
#define  HIPWM0_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT19_BATLAST_MASK) >> HIPWM0_HBAT19_BATLAST_SHIFT)
#define  HIPWM0_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT19_BATLAST_SHIFT))

#define  HIPWM0_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT19_BATSIGN_MASK) >> HIPWM0_HBAT19_BATSIGN_SHIFT)
#define  HIPWM0_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT19_BATSIGN_SHIFT))

#define  HIPWM0_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT19_BATSHIFT_MASK) >> HIPWM0_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT19_BATFRAC_MASK) >> HIPWM0_HBAT19_BATFRAC_SHIFT)
#define  HIPWM0_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM0_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT20_RESERVED1_MASK) >> HIPWM0_HBAT20_RESERVED1_SHIFT)
#define  HIPWM0_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT20_RESERVED1_SHIFT))

#define  HIPWM0_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT20_BATLAST_SHIFT 19
#define  HIPWM0_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT20_BATLAST_MASK) >> HIPWM0_HBAT20_BATLAST_SHIFT)
#define  HIPWM0_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT20_BATLAST_SHIFT))

#define  HIPWM0_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT20_BATSIGN_MASK) >> HIPWM0_HBAT20_BATSIGN_SHIFT)
#define  HIPWM0_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT20_BATSIGN_SHIFT))

#define  HIPWM0_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT20_BATSHIFT_MASK) >> HIPWM0_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT20_BATFRAC_MASK) >> HIPWM0_HBAT20_BATFRAC_SHIFT)
#define  HIPWM0_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM0_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT21_RESERVED1_MASK) >> HIPWM0_HBAT21_RESERVED1_SHIFT)
#define  HIPWM0_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT21_RESERVED1_SHIFT))

#define  HIPWM0_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT21_BATLAST_SHIFT 19
#define  HIPWM0_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT21_BATLAST_MASK) >> HIPWM0_HBAT21_BATLAST_SHIFT)
#define  HIPWM0_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT21_BATLAST_SHIFT))

#define  HIPWM0_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT21_BATSIGN_MASK) >> HIPWM0_HBAT21_BATSIGN_SHIFT)
#define  HIPWM0_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT21_BATSIGN_SHIFT))

#define  HIPWM0_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT21_BATSHIFT_MASK) >> HIPWM0_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT21_BATFRAC_MASK) >> HIPWM0_HBAT21_BATFRAC_SHIFT)
#define  HIPWM0_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM0_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT22_RESERVED1_MASK) >> HIPWM0_HBAT22_RESERVED1_SHIFT)
#define  HIPWM0_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT22_RESERVED1_SHIFT))

#define  HIPWM0_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT22_BATLAST_SHIFT 19
#define  HIPWM0_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT22_BATLAST_MASK) >> HIPWM0_HBAT22_BATLAST_SHIFT)
#define  HIPWM0_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT22_BATLAST_SHIFT))

#define  HIPWM0_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT22_BATSIGN_MASK) >> HIPWM0_HBAT22_BATSIGN_SHIFT)
#define  HIPWM0_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT22_BATSIGN_SHIFT))

#define  HIPWM0_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT22_BATSHIFT_MASK) >> HIPWM0_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT22_BATFRAC_MASK) >> HIPWM0_HBAT22_BATFRAC_SHIFT)
#define  HIPWM0_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM0_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT23_RESERVED1_MASK) >> HIPWM0_HBAT23_RESERVED1_SHIFT)
#define  HIPWM0_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT23_RESERVED1_SHIFT))

#define  HIPWM0_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT23_BATLAST_SHIFT 19
#define  HIPWM0_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT23_BATLAST_MASK) >> HIPWM0_HBAT23_BATLAST_SHIFT)
#define  HIPWM0_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT23_BATLAST_SHIFT))

#define  HIPWM0_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT23_BATSIGN_MASK) >> HIPWM0_HBAT23_BATSIGN_SHIFT)
#define  HIPWM0_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT23_BATSIGN_SHIFT))

#define  HIPWM0_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT23_BATSHIFT_MASK) >> HIPWM0_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT23_BATFRAC_MASK) >> HIPWM0_HBAT23_BATFRAC_SHIFT)
#define  HIPWM0_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM0_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT24_RESERVED1_MASK) >> HIPWM0_HBAT24_RESERVED1_SHIFT)
#define  HIPWM0_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT24_RESERVED1_SHIFT))

#define  HIPWM0_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT24_BATLAST_SHIFT 19
#define  HIPWM0_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT24_BATLAST_MASK) >> HIPWM0_HBAT24_BATLAST_SHIFT)
#define  HIPWM0_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT24_BATLAST_SHIFT))

#define  HIPWM0_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT24_BATSIGN_MASK) >> HIPWM0_HBAT24_BATSIGN_SHIFT)
#define  HIPWM0_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT24_BATSIGN_SHIFT))

#define  HIPWM0_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT24_BATSHIFT_MASK) >> HIPWM0_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT24_BATFRAC_MASK) >> HIPWM0_HBAT24_BATFRAC_SHIFT)
#define  HIPWM0_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM0_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT25_RESERVED1_MASK) >> HIPWM0_HBAT25_RESERVED1_SHIFT)
#define  HIPWM0_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT25_RESERVED1_SHIFT))

#define  HIPWM0_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT25_BATLAST_SHIFT 19
#define  HIPWM0_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT25_BATLAST_MASK) >> HIPWM0_HBAT25_BATLAST_SHIFT)
#define  HIPWM0_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT25_BATLAST_SHIFT))

#define  HIPWM0_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT25_BATSIGN_MASK) >> HIPWM0_HBAT25_BATSIGN_SHIFT)
#define  HIPWM0_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT25_BATSIGN_SHIFT))

#define  HIPWM0_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT25_BATSHIFT_MASK) >> HIPWM0_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT25_BATFRAC_MASK) >> HIPWM0_HBAT25_BATFRAC_SHIFT)
#define  HIPWM0_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM0_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT26_RESERVED1_MASK) >> HIPWM0_HBAT26_RESERVED1_SHIFT)
#define  HIPWM0_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT26_RESERVED1_SHIFT))

#define  HIPWM0_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT26_BATLAST_SHIFT 19
#define  HIPWM0_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT26_BATLAST_MASK) >> HIPWM0_HBAT26_BATLAST_SHIFT)
#define  HIPWM0_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT26_BATLAST_SHIFT))

#define  HIPWM0_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT26_BATSIGN_MASK) >> HIPWM0_HBAT26_BATSIGN_SHIFT)
#define  HIPWM0_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT26_BATSIGN_SHIFT))

#define  HIPWM0_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT26_BATSHIFT_MASK) >> HIPWM0_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT26_BATFRAC_MASK) >> HIPWM0_HBAT26_BATFRAC_SHIFT)
#define  HIPWM0_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM0_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT27_RESERVED1_MASK) >> HIPWM0_HBAT27_RESERVED1_SHIFT)
#define  HIPWM0_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT27_RESERVED1_SHIFT))

#define  HIPWM0_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT27_BATLAST_SHIFT 19
#define  HIPWM0_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT27_BATLAST_MASK) >> HIPWM0_HBAT27_BATLAST_SHIFT)
#define  HIPWM0_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT27_BATLAST_SHIFT))

#define  HIPWM0_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT27_BATSIGN_MASK) >> HIPWM0_HBAT27_BATSIGN_SHIFT)
#define  HIPWM0_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT27_BATSIGN_SHIFT))

#define  HIPWM0_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT27_BATSHIFT_MASK) >> HIPWM0_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT27_BATFRAC_MASK) >> HIPWM0_HBAT27_BATFRAC_SHIFT)
#define  HIPWM0_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM0_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT28_RESERVED1_MASK) >> HIPWM0_HBAT28_RESERVED1_SHIFT)
#define  HIPWM0_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT28_RESERVED1_SHIFT))

#define  HIPWM0_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT28_BATLAST_SHIFT 19
#define  HIPWM0_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT28_BATLAST_MASK) >> HIPWM0_HBAT28_BATLAST_SHIFT)
#define  HIPWM0_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT28_BATLAST_SHIFT))

#define  HIPWM0_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT28_BATSIGN_MASK) >> HIPWM0_HBAT28_BATSIGN_SHIFT)
#define  HIPWM0_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT28_BATSIGN_SHIFT))

#define  HIPWM0_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT28_BATSHIFT_MASK) >> HIPWM0_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT28_BATFRAC_MASK) >> HIPWM0_HBAT28_BATFRAC_SHIFT)
#define  HIPWM0_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM0_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT29_RESERVED1_MASK) >> HIPWM0_HBAT29_RESERVED1_SHIFT)
#define  HIPWM0_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT29_RESERVED1_SHIFT))

#define  HIPWM0_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT29_BATLAST_SHIFT 19
#define  HIPWM0_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT29_BATLAST_MASK) >> HIPWM0_HBAT29_BATLAST_SHIFT)
#define  HIPWM0_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT29_BATLAST_SHIFT))

#define  HIPWM0_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT29_BATSIGN_MASK) >> HIPWM0_HBAT29_BATSIGN_SHIFT)
#define  HIPWM0_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT29_BATSIGN_SHIFT))

#define  HIPWM0_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT29_BATSHIFT_MASK) >> HIPWM0_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT29_BATFRAC_MASK) >> HIPWM0_HBAT29_BATFRAC_SHIFT)
#define  HIPWM0_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM0_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT30_RESERVED1_MASK) >> HIPWM0_HBAT30_RESERVED1_SHIFT)
#define  HIPWM0_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT30_RESERVED1_SHIFT))

#define  HIPWM0_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT30_BATLAST_SHIFT 19
#define  HIPWM0_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT30_BATLAST_MASK) >> HIPWM0_HBAT30_BATLAST_SHIFT)
#define  HIPWM0_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT30_BATLAST_SHIFT))

#define  HIPWM0_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT30_BATSIGN_MASK) >> HIPWM0_HBAT30_BATSIGN_SHIFT)
#define  HIPWM0_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT30_BATSIGN_SHIFT))

#define  HIPWM0_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT30_BATSHIFT_MASK) >> HIPWM0_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT30_BATFRAC_MASK) >> HIPWM0_HBAT30_BATFRAC_SHIFT)
#define  HIPWM0_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM0_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT31_RESERVED1_MASK) >> HIPWM0_HBAT31_RESERVED1_SHIFT)
#define  HIPWM0_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT31_RESERVED1_SHIFT))

#define  HIPWM0_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT31_BATLAST_SHIFT 19
#define  HIPWM0_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT31_BATLAST_MASK) >> HIPWM0_HBAT31_BATLAST_SHIFT)
#define  HIPWM0_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT31_BATLAST_SHIFT))

#define  HIPWM0_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT31_BATSIGN_MASK) >> HIPWM0_HBAT31_BATSIGN_SHIFT)
#define  HIPWM0_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT31_BATSIGN_SHIFT))

#define  HIPWM0_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT31_BATSHIFT_MASK) >> HIPWM0_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT31_BATFRAC_MASK) >> HIPWM0_HBAT31_BATFRAC_SHIFT)
#define  HIPWM0_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM0_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT32_RESERVED1_MASK) >> HIPWM0_HBAT32_RESERVED1_SHIFT)
#define  HIPWM0_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT32_RESERVED1_SHIFT))

#define  HIPWM0_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT32_BATLAST_SHIFT 19
#define  HIPWM0_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT32_BATLAST_MASK) >> HIPWM0_HBAT32_BATLAST_SHIFT)
#define  HIPWM0_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT32_BATLAST_SHIFT))

#define  HIPWM0_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT32_BATSIGN_MASK) >> HIPWM0_HBAT32_BATSIGN_SHIFT)
#define  HIPWM0_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT32_BATSIGN_SHIFT))

#define  HIPWM0_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT32_BATSHIFT_MASK) >> HIPWM0_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT32_BATFRAC_MASK) >> HIPWM0_HBAT32_BATFRAC_SHIFT)
#define  HIPWM0_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM0_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT33_RESERVED1_MASK) >> HIPWM0_HBAT33_RESERVED1_SHIFT)
#define  HIPWM0_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT33_RESERVED1_SHIFT))

#define  HIPWM0_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT33_BATLAST_SHIFT 19
#define  HIPWM0_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT33_BATLAST_MASK) >> HIPWM0_HBAT33_BATLAST_SHIFT)
#define  HIPWM0_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT33_BATLAST_SHIFT))

#define  HIPWM0_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT33_BATSIGN_MASK) >> HIPWM0_HBAT33_BATSIGN_SHIFT)
#define  HIPWM0_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT33_BATSIGN_SHIFT))

#define  HIPWM0_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT33_BATSHIFT_MASK) >> HIPWM0_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT33_BATFRAC_MASK) >> HIPWM0_HBAT33_BATFRAC_SHIFT)
#define  HIPWM0_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM0_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT34_RESERVED1_MASK) >> HIPWM0_HBAT34_RESERVED1_SHIFT)
#define  HIPWM0_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT34_RESERVED1_SHIFT))

#define  HIPWM0_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT34_BATLAST_SHIFT 19
#define  HIPWM0_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT34_BATLAST_MASK) >> HIPWM0_HBAT34_BATLAST_SHIFT)
#define  HIPWM0_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT34_BATLAST_SHIFT))

#define  HIPWM0_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT34_BATSIGN_MASK) >> HIPWM0_HBAT34_BATSIGN_SHIFT)
#define  HIPWM0_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT34_BATSIGN_SHIFT))

#define  HIPWM0_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT34_BATSHIFT_MASK) >> HIPWM0_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT34_BATFRAC_MASK) >> HIPWM0_HBAT34_BATFRAC_SHIFT)
#define  HIPWM0_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM0_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT35_RESERVED1_MASK) >> HIPWM0_HBAT35_RESERVED1_SHIFT)
#define  HIPWM0_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT35_RESERVED1_SHIFT))

#define  HIPWM0_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT35_BATLAST_SHIFT 19
#define  HIPWM0_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT35_BATLAST_MASK) >> HIPWM0_HBAT35_BATLAST_SHIFT)
#define  HIPWM0_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT35_BATLAST_SHIFT))

#define  HIPWM0_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT35_BATSIGN_MASK) >> HIPWM0_HBAT35_BATSIGN_SHIFT)
#define  HIPWM0_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT35_BATSIGN_SHIFT))

#define  HIPWM0_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT35_BATSHIFT_MASK) >> HIPWM0_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT35_BATFRAC_MASK) >> HIPWM0_HBAT35_BATFRAC_SHIFT)
#define  HIPWM0_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM0_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT36_RESERVED1_MASK) >> HIPWM0_HBAT36_RESERVED1_SHIFT)
#define  HIPWM0_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT36_RESERVED1_SHIFT))

#define  HIPWM0_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT36_BATLAST_SHIFT 19
#define  HIPWM0_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT36_BATLAST_MASK) >> HIPWM0_HBAT36_BATLAST_SHIFT)
#define  HIPWM0_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT36_BATLAST_SHIFT))

#define  HIPWM0_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT36_BATSIGN_MASK) >> HIPWM0_HBAT36_BATSIGN_SHIFT)
#define  HIPWM0_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT36_BATSIGN_SHIFT))

#define  HIPWM0_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT36_BATSHIFT_MASK) >> HIPWM0_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT36_BATFRAC_MASK) >> HIPWM0_HBAT36_BATFRAC_SHIFT)
#define  HIPWM0_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM0_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT37_RESERVED1_MASK) >> HIPWM0_HBAT37_RESERVED1_SHIFT)
#define  HIPWM0_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT37_RESERVED1_SHIFT))

#define  HIPWM0_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT37_BATLAST_SHIFT 19
#define  HIPWM0_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT37_BATLAST_MASK) >> HIPWM0_HBAT37_BATLAST_SHIFT)
#define  HIPWM0_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT37_BATLAST_SHIFT))

#define  HIPWM0_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT37_BATSIGN_MASK) >> HIPWM0_HBAT37_BATSIGN_SHIFT)
#define  HIPWM0_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT37_BATSIGN_SHIFT))

#define  HIPWM0_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT37_BATSHIFT_MASK) >> HIPWM0_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT37_BATFRAC_MASK) >> HIPWM0_HBAT37_BATFRAC_SHIFT)
#define  HIPWM0_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM0_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT38_RESERVED1_MASK) >> HIPWM0_HBAT38_RESERVED1_SHIFT)
#define  HIPWM0_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT38_RESERVED1_SHIFT))

#define  HIPWM0_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT38_BATLAST_SHIFT 19
#define  HIPWM0_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT38_BATLAST_MASK) >> HIPWM0_HBAT38_BATLAST_SHIFT)
#define  HIPWM0_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT38_BATLAST_SHIFT))

#define  HIPWM0_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT38_BATSIGN_MASK) >> HIPWM0_HBAT38_BATSIGN_SHIFT)
#define  HIPWM0_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT38_BATSIGN_SHIFT))

#define  HIPWM0_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT38_BATSHIFT_MASK) >> HIPWM0_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT38_BATFRAC_MASK) >> HIPWM0_HBAT38_BATFRAC_SHIFT)
#define  HIPWM0_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM0_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT39_RESERVED1_MASK) >> HIPWM0_HBAT39_RESERVED1_SHIFT)
#define  HIPWM0_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT39_RESERVED1_SHIFT))

#define  HIPWM0_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT39_BATLAST_SHIFT 19
#define  HIPWM0_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT39_BATLAST_MASK) >> HIPWM0_HBAT39_BATLAST_SHIFT)
#define  HIPWM0_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT39_BATLAST_SHIFT))

#define  HIPWM0_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT39_BATSIGN_MASK) >> HIPWM0_HBAT39_BATSIGN_SHIFT)
#define  HIPWM0_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT39_BATSIGN_SHIFT))

#define  HIPWM0_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT39_BATSHIFT_MASK) >> HIPWM0_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT39_BATFRAC_MASK) >> HIPWM0_HBAT39_BATFRAC_SHIFT)
#define  HIPWM0_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM0_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT40_RESERVED1_MASK) >> HIPWM0_HBAT40_RESERVED1_SHIFT)
#define  HIPWM0_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT40_RESERVED1_SHIFT))

#define  HIPWM0_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT40_BATLAST_SHIFT 19
#define  HIPWM0_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT40_BATLAST_MASK) >> HIPWM0_HBAT40_BATLAST_SHIFT)
#define  HIPWM0_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT40_BATLAST_SHIFT))

#define  HIPWM0_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT40_BATSIGN_MASK) >> HIPWM0_HBAT40_BATSIGN_SHIFT)
#define  HIPWM0_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT40_BATSIGN_SHIFT))

#define  HIPWM0_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT40_BATSHIFT_MASK) >> HIPWM0_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT40_BATFRAC_MASK) >> HIPWM0_HBAT40_BATFRAC_SHIFT)
#define  HIPWM0_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM0_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT41_RESERVED1_MASK) >> HIPWM0_HBAT41_RESERVED1_SHIFT)
#define  HIPWM0_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT41_RESERVED1_SHIFT))

#define  HIPWM0_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT41_BATLAST_SHIFT 19
#define  HIPWM0_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT41_BATLAST_MASK) >> HIPWM0_HBAT41_BATLAST_SHIFT)
#define  HIPWM0_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT41_BATLAST_SHIFT))

#define  HIPWM0_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT41_BATSIGN_MASK) >> HIPWM0_HBAT41_BATSIGN_SHIFT)
#define  HIPWM0_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT41_BATSIGN_SHIFT))

#define  HIPWM0_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT41_BATSHIFT_MASK) >> HIPWM0_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT41_BATFRAC_MASK) >> HIPWM0_HBAT41_BATFRAC_SHIFT)
#define  HIPWM0_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM0_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT42_RESERVED1_MASK) >> HIPWM0_HBAT42_RESERVED1_SHIFT)
#define  HIPWM0_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT42_RESERVED1_SHIFT))

#define  HIPWM0_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT42_BATLAST_SHIFT 19
#define  HIPWM0_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT42_BATLAST_MASK) >> HIPWM0_HBAT42_BATLAST_SHIFT)
#define  HIPWM0_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT42_BATLAST_SHIFT))

#define  HIPWM0_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT42_BATSIGN_MASK) >> HIPWM0_HBAT42_BATSIGN_SHIFT)
#define  HIPWM0_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT42_BATSIGN_SHIFT))

#define  HIPWM0_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT42_BATSHIFT_MASK) >> HIPWM0_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT42_BATFRAC_MASK) >> HIPWM0_HBAT42_BATFRAC_SHIFT)
#define  HIPWM0_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM0_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT43_RESERVED1_MASK) >> HIPWM0_HBAT43_RESERVED1_SHIFT)
#define  HIPWM0_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT43_RESERVED1_SHIFT))

#define  HIPWM0_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT43_BATLAST_SHIFT 19
#define  HIPWM0_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT43_BATLAST_MASK) >> HIPWM0_HBAT43_BATLAST_SHIFT)
#define  HIPWM0_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT43_BATLAST_SHIFT))

#define  HIPWM0_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT43_BATSIGN_MASK) >> HIPWM0_HBAT43_BATSIGN_SHIFT)
#define  HIPWM0_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT43_BATSIGN_SHIFT))

#define  HIPWM0_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT43_BATSHIFT_MASK) >> HIPWM0_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT43_BATFRAC_MASK) >> HIPWM0_HBAT43_BATFRAC_SHIFT)
#define  HIPWM0_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM0_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT44_RESERVED1_MASK) >> HIPWM0_HBAT44_RESERVED1_SHIFT)
#define  HIPWM0_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT44_RESERVED1_SHIFT))

#define  HIPWM0_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT44_BATLAST_SHIFT 19
#define  HIPWM0_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT44_BATLAST_MASK) >> HIPWM0_HBAT44_BATLAST_SHIFT)
#define  HIPWM0_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT44_BATLAST_SHIFT))

#define  HIPWM0_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT44_BATSIGN_MASK) >> HIPWM0_HBAT44_BATSIGN_SHIFT)
#define  HIPWM0_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT44_BATSIGN_SHIFT))

#define  HIPWM0_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT44_BATSHIFT_MASK) >> HIPWM0_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT44_BATFRAC_MASK) >> HIPWM0_HBAT44_BATFRAC_SHIFT)
#define  HIPWM0_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM0_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT45_RESERVED1_MASK) >> HIPWM0_HBAT45_RESERVED1_SHIFT)
#define  HIPWM0_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT45_RESERVED1_SHIFT))

#define  HIPWM0_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT45_BATLAST_SHIFT 19
#define  HIPWM0_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT45_BATLAST_MASK) >> HIPWM0_HBAT45_BATLAST_SHIFT)
#define  HIPWM0_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT45_BATLAST_SHIFT))

#define  HIPWM0_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT45_BATSIGN_MASK) >> HIPWM0_HBAT45_BATSIGN_SHIFT)
#define  HIPWM0_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT45_BATSIGN_SHIFT))

#define  HIPWM0_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT45_BATSHIFT_MASK) >> HIPWM0_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT45_BATFRAC_MASK) >> HIPWM0_HBAT45_BATFRAC_SHIFT)
#define  HIPWM0_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM0_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT46_RESERVED1_MASK) >> HIPWM0_HBAT46_RESERVED1_SHIFT)
#define  HIPWM0_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT46_RESERVED1_SHIFT))

#define  HIPWM0_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT46_BATLAST_SHIFT 19
#define  HIPWM0_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT46_BATLAST_MASK) >> HIPWM0_HBAT46_BATLAST_SHIFT)
#define  HIPWM0_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT46_BATLAST_SHIFT))

#define  HIPWM0_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT46_BATSIGN_MASK) >> HIPWM0_HBAT46_BATSIGN_SHIFT)
#define  HIPWM0_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT46_BATSIGN_SHIFT))

#define  HIPWM0_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT46_BATSHIFT_MASK) >> HIPWM0_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT46_BATFRAC_MASK) >> HIPWM0_HBAT46_BATFRAC_SHIFT)
#define  HIPWM0_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM0_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT47_RESERVED1_MASK) >> HIPWM0_HBAT47_RESERVED1_SHIFT)
#define  HIPWM0_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT47_RESERVED1_SHIFT))

#define  HIPWM0_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT47_BATLAST_SHIFT 19
#define  HIPWM0_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT47_BATLAST_MASK) >> HIPWM0_HBAT47_BATLAST_SHIFT)
#define  HIPWM0_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT47_BATLAST_SHIFT))

#define  HIPWM0_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT47_BATSIGN_MASK) >> HIPWM0_HBAT47_BATSIGN_SHIFT)
#define  HIPWM0_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT47_BATSIGN_SHIFT))

#define  HIPWM0_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT47_BATSHIFT_MASK) >> HIPWM0_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT47_BATFRAC_MASK) >> HIPWM0_HBAT47_BATFRAC_SHIFT)
#define  HIPWM0_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM0_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT48_RESERVED1_MASK) >> HIPWM0_HBAT48_RESERVED1_SHIFT)
#define  HIPWM0_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT48_RESERVED1_SHIFT))

#define  HIPWM0_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT48_BATLAST_SHIFT 19
#define  HIPWM0_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT48_BATLAST_MASK) >> HIPWM0_HBAT48_BATLAST_SHIFT)
#define  HIPWM0_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT48_BATLAST_SHIFT))

#define  HIPWM0_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT48_BATSIGN_MASK) >> HIPWM0_HBAT48_BATSIGN_SHIFT)
#define  HIPWM0_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT48_BATSIGN_SHIFT))

#define  HIPWM0_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT48_BATSHIFT_MASK) >> HIPWM0_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT48_BATFRAC_MASK) >> HIPWM0_HBAT48_BATFRAC_SHIFT)
#define  HIPWM0_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM0_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT49_RESERVED1_MASK) >> HIPWM0_HBAT49_RESERVED1_SHIFT)
#define  HIPWM0_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT49_RESERVED1_SHIFT))

#define  HIPWM0_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT49_BATLAST_SHIFT 19
#define  HIPWM0_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT49_BATLAST_MASK) >> HIPWM0_HBAT49_BATLAST_SHIFT)
#define  HIPWM0_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT49_BATLAST_SHIFT))

#define  HIPWM0_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT49_BATSIGN_MASK) >> HIPWM0_HBAT49_BATSIGN_SHIFT)
#define  HIPWM0_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT49_BATSIGN_SHIFT))

#define  HIPWM0_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT49_BATSHIFT_MASK) >> HIPWM0_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT49_BATFRAC_MASK) >> HIPWM0_HBAT49_BATFRAC_SHIFT)
#define  HIPWM0_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM0_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT50_RESERVED1_MASK) >> HIPWM0_HBAT50_RESERVED1_SHIFT)
#define  HIPWM0_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT50_RESERVED1_SHIFT))

#define  HIPWM0_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT50_BATLAST_SHIFT 19
#define  HIPWM0_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT50_BATLAST_MASK) >> HIPWM0_HBAT50_BATLAST_SHIFT)
#define  HIPWM0_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT50_BATLAST_SHIFT))

#define  HIPWM0_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT50_BATSIGN_MASK) >> HIPWM0_HBAT50_BATSIGN_SHIFT)
#define  HIPWM0_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT50_BATSIGN_SHIFT))

#define  HIPWM0_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT50_BATSHIFT_MASK) >> HIPWM0_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT50_BATFRAC_MASK) >> HIPWM0_HBAT50_BATFRAC_SHIFT)
#define  HIPWM0_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM0_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT51_RESERVED1_MASK) >> HIPWM0_HBAT51_RESERVED1_SHIFT)
#define  HIPWM0_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT51_RESERVED1_SHIFT))

#define  HIPWM0_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT51_BATLAST_SHIFT 19
#define  HIPWM0_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT51_BATLAST_MASK) >> HIPWM0_HBAT51_BATLAST_SHIFT)
#define  HIPWM0_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT51_BATLAST_SHIFT))

#define  HIPWM0_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT51_BATSIGN_MASK) >> HIPWM0_HBAT51_BATSIGN_SHIFT)
#define  HIPWM0_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT51_BATSIGN_SHIFT))

#define  HIPWM0_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT51_BATSHIFT_MASK) >> HIPWM0_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT51_BATFRAC_MASK) >> HIPWM0_HBAT51_BATFRAC_SHIFT)
#define  HIPWM0_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM0_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT52_RESERVED1_MASK) >> HIPWM0_HBAT52_RESERVED1_SHIFT)
#define  HIPWM0_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT52_RESERVED1_SHIFT))

#define  HIPWM0_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT52_BATLAST_SHIFT 19
#define  HIPWM0_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT52_BATLAST_MASK) >> HIPWM0_HBAT52_BATLAST_SHIFT)
#define  HIPWM0_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT52_BATLAST_SHIFT))

#define  HIPWM0_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT52_BATSIGN_MASK) >> HIPWM0_HBAT52_BATSIGN_SHIFT)
#define  HIPWM0_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT52_BATSIGN_SHIFT))

#define  HIPWM0_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT52_BATSHIFT_MASK) >> HIPWM0_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT52_BATFRAC_MASK) >> HIPWM0_HBAT52_BATFRAC_SHIFT)
#define  HIPWM0_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM0_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT53_RESERVED1_MASK) >> HIPWM0_HBAT53_RESERVED1_SHIFT)
#define  HIPWM0_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT53_RESERVED1_SHIFT))

#define  HIPWM0_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT53_BATLAST_SHIFT 19
#define  HIPWM0_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT53_BATLAST_MASK) >> HIPWM0_HBAT53_BATLAST_SHIFT)
#define  HIPWM0_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT53_BATLAST_SHIFT))

#define  HIPWM0_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT53_BATSIGN_MASK) >> HIPWM0_HBAT53_BATSIGN_SHIFT)
#define  HIPWM0_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT53_BATSIGN_SHIFT))

#define  HIPWM0_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT53_BATSHIFT_MASK) >> HIPWM0_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT53_BATFRAC_MASK) >> HIPWM0_HBAT53_BATFRAC_SHIFT)
#define  HIPWM0_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM0_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT54_RESERVED1_MASK) >> HIPWM0_HBAT54_RESERVED1_SHIFT)
#define  HIPWM0_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT54_RESERVED1_SHIFT))

#define  HIPWM0_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT54_BATLAST_SHIFT 19
#define  HIPWM0_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT54_BATLAST_MASK) >> HIPWM0_HBAT54_BATLAST_SHIFT)
#define  HIPWM0_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT54_BATLAST_SHIFT))

#define  HIPWM0_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT54_BATSIGN_MASK) >> HIPWM0_HBAT54_BATSIGN_SHIFT)
#define  HIPWM0_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT54_BATSIGN_SHIFT))

#define  HIPWM0_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT54_BATSHIFT_MASK) >> HIPWM0_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT54_BATFRAC_MASK) >> HIPWM0_HBAT54_BATFRAC_SHIFT)
#define  HIPWM0_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM0_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT55_RESERVED1_MASK) >> HIPWM0_HBAT55_RESERVED1_SHIFT)
#define  HIPWM0_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT55_RESERVED1_SHIFT))

#define  HIPWM0_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT55_BATLAST_SHIFT 19
#define  HIPWM0_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT55_BATLAST_MASK) >> HIPWM0_HBAT55_BATLAST_SHIFT)
#define  HIPWM0_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT55_BATLAST_SHIFT))

#define  HIPWM0_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT55_BATSIGN_MASK) >> HIPWM0_HBAT55_BATSIGN_SHIFT)
#define  HIPWM0_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT55_BATSIGN_SHIFT))

#define  HIPWM0_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT55_BATSHIFT_MASK) >> HIPWM0_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT55_BATFRAC_MASK) >> HIPWM0_HBAT55_BATFRAC_SHIFT)
#define  HIPWM0_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM0_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT56_RESERVED1_MASK) >> HIPWM0_HBAT56_RESERVED1_SHIFT)
#define  HIPWM0_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT56_RESERVED1_SHIFT))

#define  HIPWM0_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT56_BATLAST_SHIFT 19
#define  HIPWM0_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT56_BATLAST_MASK) >> HIPWM0_HBAT56_BATLAST_SHIFT)
#define  HIPWM0_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT56_BATLAST_SHIFT))

#define  HIPWM0_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT56_BATSIGN_MASK) >> HIPWM0_HBAT56_BATSIGN_SHIFT)
#define  HIPWM0_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT56_BATSIGN_SHIFT))

#define  HIPWM0_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT56_BATSHIFT_MASK) >> HIPWM0_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT56_BATFRAC_MASK) >> HIPWM0_HBAT56_BATFRAC_SHIFT)
#define  HIPWM0_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM0_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT57_RESERVED1_MASK) >> HIPWM0_HBAT57_RESERVED1_SHIFT)
#define  HIPWM0_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT57_RESERVED1_SHIFT))

#define  HIPWM0_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT57_BATLAST_SHIFT 19
#define  HIPWM0_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT57_BATLAST_MASK) >> HIPWM0_HBAT57_BATLAST_SHIFT)
#define  HIPWM0_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT57_BATLAST_SHIFT))

#define  HIPWM0_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT57_BATSIGN_MASK) >> HIPWM0_HBAT57_BATSIGN_SHIFT)
#define  HIPWM0_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT57_BATSIGN_SHIFT))

#define  HIPWM0_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT57_BATSHIFT_MASK) >> HIPWM0_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT57_BATFRAC_MASK) >> HIPWM0_HBAT57_BATFRAC_SHIFT)
#define  HIPWM0_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM0_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT58_RESERVED1_MASK) >> HIPWM0_HBAT58_RESERVED1_SHIFT)
#define  HIPWM0_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT58_RESERVED1_SHIFT))

#define  HIPWM0_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT58_BATLAST_SHIFT 19
#define  HIPWM0_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT58_BATLAST_MASK) >> HIPWM0_HBAT58_BATLAST_SHIFT)
#define  HIPWM0_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT58_BATLAST_SHIFT))

#define  HIPWM0_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT58_BATSIGN_MASK) >> HIPWM0_HBAT58_BATSIGN_SHIFT)
#define  HIPWM0_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT58_BATSIGN_SHIFT))

#define  HIPWM0_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT58_BATSHIFT_MASK) >> HIPWM0_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT58_BATFRAC_MASK) >> HIPWM0_HBAT58_BATFRAC_SHIFT)
#define  HIPWM0_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM0_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT59_RESERVED1_MASK) >> HIPWM0_HBAT59_RESERVED1_SHIFT)
#define  HIPWM0_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT59_RESERVED1_SHIFT))

#define  HIPWM0_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT59_BATLAST_SHIFT 19
#define  HIPWM0_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT59_BATLAST_MASK) >> HIPWM0_HBAT59_BATLAST_SHIFT)
#define  HIPWM0_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT59_BATLAST_SHIFT))

#define  HIPWM0_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT59_BATSIGN_MASK) >> HIPWM0_HBAT59_BATSIGN_SHIFT)
#define  HIPWM0_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT59_BATSIGN_SHIFT))

#define  HIPWM0_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT59_BATSHIFT_MASK) >> HIPWM0_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT59_BATFRAC_MASK) >> HIPWM0_HBAT59_BATFRAC_SHIFT)
#define  HIPWM0_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM0_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT60_RESERVED1_MASK) >> HIPWM0_HBAT60_RESERVED1_SHIFT)
#define  HIPWM0_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT60_RESERVED1_SHIFT))

#define  HIPWM0_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT60_BATLAST_SHIFT 19
#define  HIPWM0_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT60_BATLAST_MASK) >> HIPWM0_HBAT60_BATLAST_SHIFT)
#define  HIPWM0_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT60_BATLAST_SHIFT))

#define  HIPWM0_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT60_BATSIGN_MASK) >> HIPWM0_HBAT60_BATSIGN_SHIFT)
#define  HIPWM0_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT60_BATSIGN_SHIFT))

#define  HIPWM0_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT60_BATSHIFT_MASK) >> HIPWM0_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT60_BATFRAC_MASK) >> HIPWM0_HBAT60_BATFRAC_SHIFT)
#define  HIPWM0_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM0_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT61_RESERVED1_MASK) >> HIPWM0_HBAT61_RESERVED1_SHIFT)
#define  HIPWM0_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT61_RESERVED1_SHIFT))

#define  HIPWM0_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT61_BATLAST_SHIFT 19
#define  HIPWM0_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT61_BATLAST_MASK) >> HIPWM0_HBAT61_BATLAST_SHIFT)
#define  HIPWM0_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT61_BATLAST_SHIFT))

#define  HIPWM0_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT61_BATSIGN_MASK) >> HIPWM0_HBAT61_BATSIGN_SHIFT)
#define  HIPWM0_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT61_BATSIGN_SHIFT))

#define  HIPWM0_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT61_BATSHIFT_MASK) >> HIPWM0_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT61_BATFRAC_MASK) >> HIPWM0_HBAT61_BATFRAC_SHIFT)
#define  HIPWM0_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM0_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT62_RESERVED1_MASK) >> HIPWM0_HBAT62_RESERVED1_SHIFT)
#define  HIPWM0_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT62_RESERVED1_SHIFT))

#define  HIPWM0_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT62_BATLAST_SHIFT 19
#define  HIPWM0_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT62_BATLAST_MASK) >> HIPWM0_HBAT62_BATLAST_SHIFT)
#define  HIPWM0_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT62_BATLAST_SHIFT))

#define  HIPWM0_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT62_BATSIGN_MASK) >> HIPWM0_HBAT62_BATSIGN_SHIFT)
#define  HIPWM0_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT62_BATSIGN_SHIFT))

#define  HIPWM0_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT62_BATSHIFT_MASK) >> HIPWM0_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT62_BATFRAC_MASK) >> HIPWM0_HBAT62_BATFRAC_SHIFT)
#define  HIPWM0_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM0_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM0_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM0_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT63_RESERVED1_MASK) >> HIPWM0_HBAT63_RESERVED1_SHIFT)
#define  HIPWM0_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HBAT63_RESERVED1_SHIFT))

#define  HIPWM0_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM0_HBAT63_BATLAST_SHIFT 19
#define  HIPWM0_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT63_BATLAST_MASK) >> HIPWM0_HBAT63_BATLAST_SHIFT)
#define  HIPWM0_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM0_HBAT63_BATLAST_SHIFT))

#define  HIPWM0_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM0_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM0_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT63_BATSIGN_MASK) >> HIPWM0_HBAT63_BATSIGN_SHIFT)
#define  HIPWM0_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM0_HBAT63_BATSIGN_SHIFT))

#define  HIPWM0_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM0_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM0_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT63_BATSHIFT_MASK) >> HIPWM0_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM0_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM0_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM0_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM0_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM0_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM0_HBAT63_BATFRAC_MASK) >> HIPWM0_HBAT63_BATFRAC_SHIFT)
#define  HIPWM0_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM0_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM0_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC0_RESERVED1_MASK) >> HIPWM0_HMIC0_RESERVED1_SHIFT)
#define  HIPWM0_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC0_RESERVED1_SHIFT))

#define  HIPWM0_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC0_MICINTPIX_MASK) >> HIPWM0_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC0_MICFRACPIX_MASK) >> HIPWM0_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM0_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC1_RESERVED1_MASK) >> HIPWM0_HMIC1_RESERVED1_SHIFT)
#define  HIPWM0_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC1_RESERVED1_SHIFT))

#define  HIPWM0_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC1_MICINTPIX_MASK) >> HIPWM0_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC1_MICFRACPIX_MASK) >> HIPWM0_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM0_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC2_RESERVED1_MASK) >> HIPWM0_HMIC2_RESERVED1_SHIFT)
#define  HIPWM0_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC2_RESERVED1_SHIFT))

#define  HIPWM0_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC2_MICINTPIX_MASK) >> HIPWM0_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC2_MICFRACPIX_MASK) >> HIPWM0_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM0_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC3_RESERVED1_MASK) >> HIPWM0_HMIC3_RESERVED1_SHIFT)
#define  HIPWM0_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC3_RESERVED1_SHIFT))

#define  HIPWM0_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC3_MICINTPIX_MASK) >> HIPWM0_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC3_MICFRACPIX_MASK) >> HIPWM0_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM0_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC4_RESERVED1_MASK) >> HIPWM0_HMIC4_RESERVED1_SHIFT)
#define  HIPWM0_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC4_RESERVED1_SHIFT))

#define  HIPWM0_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC4_MICINTPIX_MASK) >> HIPWM0_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC4_MICFRACPIX_MASK) >> HIPWM0_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM0_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC5_RESERVED1_MASK) >> HIPWM0_HMIC5_RESERVED1_SHIFT)
#define  HIPWM0_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC5_RESERVED1_SHIFT))

#define  HIPWM0_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC5_MICINTPIX_MASK) >> HIPWM0_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC5_MICFRACPIX_MASK) >> HIPWM0_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM0_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC6_RESERVED1_MASK) >> HIPWM0_HMIC6_RESERVED1_SHIFT)
#define  HIPWM0_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC6_RESERVED1_SHIFT))

#define  HIPWM0_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC6_MICINTPIX_MASK) >> HIPWM0_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC6_MICFRACPIX_MASK) >> HIPWM0_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM0_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC7_RESERVED1_MASK) >> HIPWM0_HMIC7_RESERVED1_SHIFT)
#define  HIPWM0_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC7_RESERVED1_SHIFT))

#define  HIPWM0_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC7_MICINTPIX_MASK) >> HIPWM0_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC7_MICFRACPIX_MASK) >> HIPWM0_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM0_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC8_RESERVED1_MASK) >> HIPWM0_HMIC8_RESERVED1_SHIFT)
#define  HIPWM0_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC8_RESERVED1_SHIFT))

#define  HIPWM0_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC8_MICINTPIX_MASK) >> HIPWM0_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC8_MICFRACPIX_MASK) >> HIPWM0_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM0_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC9_RESERVED1_MASK) >> HIPWM0_HMIC9_RESERVED1_SHIFT)
#define  HIPWM0_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC9_RESERVED1_SHIFT))

#define  HIPWM0_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC9_MICINTPIX_MASK) >> HIPWM0_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC9_MICFRACPIX_MASK) >> HIPWM0_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM0_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC10_RESERVED1_MASK) >> HIPWM0_HMIC10_RESERVED1_SHIFT)
#define  HIPWM0_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC10_RESERVED1_SHIFT))

#define  HIPWM0_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC10_MICINTPIX_MASK) >> HIPWM0_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC10_MICFRACPIX_MASK) >> HIPWM0_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM0_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM0_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM0_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC11_RESERVED1_MASK) >> HIPWM0_HMIC11_RESERVED1_SHIFT)
#define  HIPWM0_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM0_HMIC11_RESERVED1_SHIFT))

#define  HIPWM0_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM0_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM0_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC11_MICINTPIX_MASK) >> HIPWM0_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM0_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM0_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM0_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM0_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM0_HMIC11_MICFRACPIX_MASK) >> HIPWM0_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM0_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM0_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM0_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 2 of 8) (HiPWM1)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM1_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM1_HCR_RESERVED1_SHIFT 21
#define  HIPWM1_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_RESERVED1_MASK) >> HIPWM1_HCR_RESERVED1_SHIFT)
#define  HIPWM1_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HCR_RESERVED1_SHIFT))

#define  HIPWM1_HCR_EDGESEL_MASK 0x100000
#define  HIPWM1_HCR_EDGESEL_SHIFT 20
#define  HIPWM1_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_EDGESEL_MASK) >> HIPWM1_HCR_EDGESEL_SHIFT)
#define  HIPWM1_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM1_HCR_EDGESEL_SHIFT))

#define  HIPWM1_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM1_HCR_NUMEDGE_SHIFT 19
#define  HIPWM1_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_NUMEDGE_MASK) >> HIPWM1_HCR_NUMEDGE_SHIFT)
#define  HIPWM1_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM1_HCR_NUMEDGE_SHIFT))

#define  HIPWM1_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM1_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM1_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM1_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM1_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM1_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM1_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM1_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM1_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM1_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM1_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM1_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM1_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM1_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM1_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM1_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM1_HCR_NOBATLAST_SHIFT 15
#define  HIPWM1_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_NOBATLAST_MASK) >> HIPWM1_HCR_NOBATLAST_SHIFT)
#define  HIPWM1_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM1_HCR_NOBATLAST_SHIFT))

#define  HIPWM1_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM1_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM1_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_DUALMARGIN_MASK) >> HIPWM1_HCR_DUALMARGIN_SHIFT)
#define  HIPWM1_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM1_HCR_DUALMARGIN_SHIFT))

#define  HIPWM1_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM1_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM1_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_FILTERPULSES_MASK) >> HIPWM1_HCR_FILTERPULSES_SHIFT)
#define  HIPWM1_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM1_HCR_FILTERPULSES_SHIFT))

#define  HIPWM1_HCR_CRCRST_MASK 0x1000
#define  HIPWM1_HCR_CRCRST_SHIFT 12
#define  HIPWM1_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CRCRST_MASK) >> HIPWM1_HCR_CRCRST_SHIFT)
#define  HIPWM1_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM1_HCR_CRCRST_SHIFT))

#define  HIPWM1_HCR_HIPSDIR_MASK 0x800
#define  HIPWM1_HCR_HIPSDIR_SHIFT 11
#define  HIPWM1_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_HIPSDIR_MASK) >> HIPWM1_HCR_HIPSDIR_SHIFT)
#define  HIPWM1_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM1_HCR_HIPSDIR_SHIFT))

#define  HIPWM1_HCR_PTWIDTH_MASK 0x400
#define  HIPWM1_HCR_PTWIDTH_SHIFT 10
#define  HIPWM1_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_PTWIDTH_MASK) >> HIPWM1_HCR_PTWIDTH_SHIFT)
#define  HIPWM1_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM1_HCR_PTWIDTH_SHIFT))

#define  HIPWM1_HCR_TESTMODE_MASK 0x200
#define  HIPWM1_HCR_TESTMODE_SHIFT 9
#define  HIPWM1_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_TESTMODE_MASK) >> HIPWM1_HCR_TESTMODE_SHIFT)
#define  HIPWM1_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM1_HCR_TESTMODE_SHIFT))

#define  HIPWM1_HCR_CHANZERO_MASK 0x100
#define  HIPWM1_HCR_CHANZERO_SHIFT 8
#define  HIPWM1_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CHANZERO_MASK) >> HIPWM1_HCR_CHANZERO_SHIFT)
#define  HIPWM1_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM1_HCR_CHANZERO_SHIFT))

#define  HIPWM1_HCR_INVPT_MASK 0x80
#define  HIPWM1_HCR_INVPT_SHIFT 7
#define  HIPWM1_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_INVPT_MASK) >> HIPWM1_HCR_INVPT_SHIFT)
#define  HIPWM1_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM1_HCR_INVPT_SHIFT))

#define  HIPWM1_HCR_CPUACCESS_MASK 0x40
#define  HIPWM1_HCR_CPUACCESS_SHIFT 6
#define  HIPWM1_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_CPUACCESS_MASK) >> HIPWM1_HCR_CPUACCESS_SHIFT)
#define  HIPWM1_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM1_HCR_CPUACCESS_SHIFT))

#define  HIPWM1_HCR_PECEN_MASK 0x20
#define  HIPWM1_HCR_PECEN_SHIFT 5
#define  HIPWM1_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_PECEN_MASK) >> HIPWM1_HCR_PECEN_SHIFT)
#define  HIPWM1_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_PECEN_SHIFT))

#define  HIPWM1_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM1_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM1_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_PIGTOPHSYNC_MASK) >> HIPWM1_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM1_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM1_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM1_HCR_PIGEN_MASK 0x8
#define  HIPWM1_HCR_PIGEN_SHIFT 3
#define  HIPWM1_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_PIGEN_MASK) >> HIPWM1_HCR_PIGEN_SHIFT)
#define  HIPWM1_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_PIGEN_SHIFT))

#define  HIPWM1_HCR_BENDEREN_MASK 0x4
#define  HIPWM1_HCR_BENDEREN_SHIFT 2
#define  HIPWM1_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_BENDEREN_MASK) >> HIPWM1_HCR_BENDEREN_SHIFT)
#define  HIPWM1_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM1_HCR_BENDEREN_SHIFT))

#define  HIPWM1_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM1_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM1_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_SYNTHHSYNCEN_MASK) >> HIPWM1_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM1_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM1_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM1_HCR_ENABLE_MASK 0x1
#define  HIPWM1_HCR_ENABLE_SHIFT 0
#define  HIPWM1_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM1_HCR_ENABLE_MASK) >> HIPWM1_HCR_ENABLE_SHIFT)
#define  HIPWM1_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM1_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM1_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM1_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM1_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM1_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM1_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM1_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM1_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM1_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM1_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM1_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM1_HSMR_SIDEMARGIN_MASK) >> HIPWM1_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM1_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM1_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM1_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM1_HTSR_RESERVED1_SHIFT 8
#define  HIPWM1_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HTSR_RESERVED1_MASK) >> HIPWM1_HTSR_RESERVED1_SHIFT)
#define  HIPWM1_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HTSR_RESERVED1_SHIFT))

#define  HIPWM1_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM1_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM1_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM1_HTSR_TOPSKEW_MASK) >> HIPWM1_HTSR_TOPSKEW_SHIFT)
#define  HIPWM1_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM1_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM1_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HSR_RESERVED1_SHIFT 12
#define  HIPWM1_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_RESERVED1_MASK) >> HIPWM1_HSR_RESERVED1_SHIFT)
#define  HIPWM1_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HSR_RESERVED1_SHIFT))

#define  HIPWM1_HSR_INDEX_MASK 0xf00
#define  HIPWM1_HSR_INDEX_SHIFT 8
#define  HIPWM1_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_INDEX_MASK) >> HIPWM1_HSR_INDEX_SHIFT)
#define  HIPWM1_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM1_HSR_INDEX_SHIFT))

#define  HIPWM1_HSR_DIRRTOL_MASK 0x80
#define  HIPWM1_HSR_DIRRTOL_SHIFT 7
#define  HIPWM1_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_DIRRTOL_MASK) >> HIPWM1_HSR_DIRRTOL_SHIFT)
#define  HIPWM1_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM1_HSR_DIRRTOL_SHIFT))

#define  HIPWM1_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM1_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM1_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_PAGE_STATE_MASK) >> HIPWM1_HSR_PAGE_STATE_SHIFT)
#define  HIPWM1_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM1_HSR_PAGE_STATE_SHIFT))

#define  HIPWM1_HSR_RESERVED2_MASK 0x8
#define  HIPWM1_HSR_RESERVED2_SHIFT 3
#define  HIPWM1_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_RESERVED2_MASK) >> HIPWM1_HSR_RESERVED2_SHIFT)
#define  HIPWM1_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM1_HSR_RESERVED2_SHIFT))

#define  HIPWM1_HSR_READY_IN_MASK 0x4
#define  HIPWM1_HSR_READY_IN_SHIFT 2
#define  HIPWM1_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_READY_IN_MASK) >> HIPWM1_HSR_READY_IN_SHIFT)
#define  HIPWM1_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM1_HSR_READY_IN_SHIFT))

#define  HIPWM1_HSR_VALID_IN_MASK 0x2
#define  HIPWM1_HSR_VALID_IN_SHIFT 1
#define  HIPWM1_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_VALID_IN_MASK) >> HIPWM1_HSR_VALID_IN_SHIFT)
#define  HIPWM1_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM1_HSR_VALID_IN_SHIFT))

#define  HIPWM1_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM1_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM1_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM1_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM1_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM1_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM1_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM1_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM1_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HSPWR_RESERVED1_MASK) >> HIPWM1_HSPWR_RESERVED1_SHIFT)
#define  HIPWM1_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HSPWR_RESERVED1_SHIFT))

#define  HIPWM1_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM1_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM1_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM1_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM1_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM1_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM1_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM1_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM1_HSQR_RESERVED1_SHIFT 24
#define  HIPWM1_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HSQR_RESERVED1_MASK) >> HIPWM1_HSQR_RESERVED1_SHIFT)
#define  HIPWM1_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HSQR_RESERVED1_SHIFT))

#define  HIPWM1_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM1_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM1_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM1_HSQR_QUIWIDTH_MASK) >> HIPWM1_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM1_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM1_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM1_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM1_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM1_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM1_PRRA_PEC_VALUE_MASK) >> HIPWM1_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM1_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM1_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM1_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM1_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPVR_RESERVED1_MASK) >> HIPWM1_HPPVR_RESERVED1_SHIFT)
#define  HIPWM1_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPPVR_RESERVED1_SHIFT))

#define  HIPWM1_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM1_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM1_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPVR_PIGPTVAL_MASK) >> HIPWM1_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM1_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM1_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM1_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPSR_RESERVED1_SHIFT 16
#define  HIPWM1_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPSR_RESERVED1_MASK) >> HIPWM1_HPSR_RESERVED1_SHIFT)
#define  HIPWM1_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPSR_RESERVED1_SHIFT))

#define  HIPWM1_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM1_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM1_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM1_HPSR_PIGPIXSZ_MASK) >> HIPWM1_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM1_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM1_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM1_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPCR_RESERVED1_SHIFT 16
#define  HIPWM1_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPCR_RESERVED1_MASK) >> HIPWM1_HPCR_RESERVED1_SHIFT)
#define  HIPWM1_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPCR_RESERVED1_SHIFT))

#define  HIPWM1_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM1_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM1_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM1_HPCR_PIGPIXCNT_MASK) >> HIPWM1_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM1_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM1_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM1_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM1_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPSR_RESERVED1_MASK) >> HIPWM1_HPPSR_RESERVED1_SHIFT)
#define  HIPWM1_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPPSR_RESERVED1_SHIFT))

#define  HIPWM1_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM1_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM1_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPSR_PIGPIXSPACE_MASK) >> HIPWM1_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM1_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM1_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM1_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM1_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPLSR_RESERVED1_MASK) >> HIPWM1_HPLSR_RESERVED1_SHIFT)
#define  HIPWM1_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPLSR_RESERVED1_SHIFT))

#define  HIPWM1_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM1_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM1_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM1_HPLSR_PIGLINESPACE_MASK) >> HIPWM1_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM1_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM1_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM1_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM1_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPOER_RESERVED1_MASK) >> HIPWM1_HPPOER_RESERVED1_SHIFT)
#define  HIPWM1_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPPOER_RESERVED1_SHIFT))

#define  HIPWM1_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM1_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM1_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM1_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM1_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM1_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM1_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM1_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPOOR_RESERVED1_MASK) >> HIPWM1_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM1_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM1_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM1_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM1_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM1_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM1_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM1_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM1_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM1_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPLOR_RESERVED1_MASK) >> HIPWM1_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM1_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM1_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM1_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM1_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM1_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM1_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM1_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM1_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM1_HCRC_CRC_MASK 0xffffffff
#define  HIPWM1_HCRC_CRC_SHIFT 0
#define  HIPWM1_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM1_HCRC_CRC_MASK) >> HIPWM1_HCRC_CRC_SHIFT)
#define  HIPWM1_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM1_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM1_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HBCR_RESERVED1_SHIFT 12
#define  HIPWM1_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBCR_RESERVED1_MASK) >> HIPWM1_HBCR_RESERVED1_SHIFT)
#define  HIPWM1_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBCR_RESERVED1_SHIFT))

#define  HIPWM1_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM1_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM1_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM1_HBCR_SAMPLESPERSEG_MASK) >> HIPWM1_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM1_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM1_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM1_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM1_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM1_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HLBDR_RESERVED1_MASK) >> HIPWM1_HLBDR_RESERVED1_SHIFT)
#define  HIPWM1_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HLBDR_RESERVED1_SHIFT))

#define  HIPWM1_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM1_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM1_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM1_HLBDR_LBDRINT_MASK) >> HIPWM1_HLBDR_LBDRINT_SHIFT)
#define  HIPWM1_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM1_HLBDR_LBDRINT_SHIFT))

#define  HIPWM1_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM1_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM1_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HLBDR_LBDRFRAC_MASK) >> HIPWM1_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM1_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM1_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM1_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM1_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM1_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HRBDR_RESERVED1_MASK) >> HIPWM1_HRBDR_RESERVED1_SHIFT)
#define  HIPWM1_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HRBDR_RESERVED1_SHIFT))

#define  HIPWM1_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM1_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM1_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM1_HRBDR_RBDRINT_MASK) >> HIPWM1_HRBDR_RBDRINT_SHIFT)
#define  HIPWM1_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM1_HRBDR_RBDRINT_SHIFT))

#define  HIPWM1_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM1_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM1_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HRBDR_RBDRFRAC_MASK) >> HIPWM1_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM1_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM1_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM1_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM1_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM1_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCR_RESERVED1_MASK) >> HIPWM1_HBNCR_RESERVED1_SHIFT)
#define  HIPWM1_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBNCR_RESERVED1_SHIFT))

#define  HIPWM1_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM1_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM1_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCR_LFSRINITCNTL_MASK) >> HIPWM1_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM1_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM1_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM1_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM1_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM1_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCR_BENDERLFSREN_MASK) >> HIPWM1_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM1_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM1_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM1_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM1_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM1_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM1_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM1_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM1_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM1_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM1_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNINIT_RESERVED1_MASK) >> HIPWM1_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM1_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM1_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM1_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM1_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM1_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM1_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM1_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM1_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM1_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM1_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCV_RESERVED1_MASK) >> HIPWM1_HBNCV_RESERVED1_SHIFT)
#define  HIPWM1_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBNCV_RESERVED1_SHIFT))

#define  HIPWM1_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM1_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM1_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM1_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM1_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM1_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM1_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM1_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT0_RESERVED1_MASK) >> HIPWM1_HBAT0_RESERVED1_SHIFT)
#define  HIPWM1_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT0_RESERVED1_SHIFT))

#define  HIPWM1_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT0_BATLAST_SHIFT 19
#define  HIPWM1_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT0_BATLAST_MASK) >> HIPWM1_HBAT0_BATLAST_SHIFT)
#define  HIPWM1_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT0_BATLAST_SHIFT))

#define  HIPWM1_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT0_BATSIGN_MASK) >> HIPWM1_HBAT0_BATSIGN_SHIFT)
#define  HIPWM1_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT0_BATSIGN_SHIFT))

#define  HIPWM1_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT0_BATSHIFT_MASK) >> HIPWM1_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT0_BATFRAC_MASK) >> HIPWM1_HBAT0_BATFRAC_SHIFT)
#define  HIPWM1_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM1_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT1_RESERVED1_MASK) >> HIPWM1_HBAT1_RESERVED1_SHIFT)
#define  HIPWM1_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT1_RESERVED1_SHIFT))

#define  HIPWM1_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT1_BATLAST_SHIFT 19
#define  HIPWM1_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT1_BATLAST_MASK) >> HIPWM1_HBAT1_BATLAST_SHIFT)
#define  HIPWM1_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT1_BATLAST_SHIFT))

#define  HIPWM1_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT1_BATSIGN_MASK) >> HIPWM1_HBAT1_BATSIGN_SHIFT)
#define  HIPWM1_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT1_BATSIGN_SHIFT))

#define  HIPWM1_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT1_BATSHIFT_MASK) >> HIPWM1_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT1_BATFRAC_MASK) >> HIPWM1_HBAT1_BATFRAC_SHIFT)
#define  HIPWM1_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM1_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT2_RESERVED1_MASK) >> HIPWM1_HBAT2_RESERVED1_SHIFT)
#define  HIPWM1_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT2_RESERVED1_SHIFT))

#define  HIPWM1_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT2_BATLAST_SHIFT 19
#define  HIPWM1_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT2_BATLAST_MASK) >> HIPWM1_HBAT2_BATLAST_SHIFT)
#define  HIPWM1_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT2_BATLAST_SHIFT))

#define  HIPWM1_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT2_BATSIGN_MASK) >> HIPWM1_HBAT2_BATSIGN_SHIFT)
#define  HIPWM1_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT2_BATSIGN_SHIFT))

#define  HIPWM1_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT2_BATSHIFT_MASK) >> HIPWM1_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT2_BATFRAC_MASK) >> HIPWM1_HBAT2_BATFRAC_SHIFT)
#define  HIPWM1_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM1_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT3_RESERVED1_MASK) >> HIPWM1_HBAT3_RESERVED1_SHIFT)
#define  HIPWM1_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT3_RESERVED1_SHIFT))

#define  HIPWM1_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT3_BATLAST_SHIFT 19
#define  HIPWM1_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT3_BATLAST_MASK) >> HIPWM1_HBAT3_BATLAST_SHIFT)
#define  HIPWM1_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT3_BATLAST_SHIFT))

#define  HIPWM1_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT3_BATSIGN_MASK) >> HIPWM1_HBAT3_BATSIGN_SHIFT)
#define  HIPWM1_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT3_BATSIGN_SHIFT))

#define  HIPWM1_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT3_BATSHIFT_MASK) >> HIPWM1_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT3_BATFRAC_MASK) >> HIPWM1_HBAT3_BATFRAC_SHIFT)
#define  HIPWM1_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM1_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT4_RESERVED1_MASK) >> HIPWM1_HBAT4_RESERVED1_SHIFT)
#define  HIPWM1_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT4_RESERVED1_SHIFT))

#define  HIPWM1_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT4_BATLAST_SHIFT 19
#define  HIPWM1_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT4_BATLAST_MASK) >> HIPWM1_HBAT4_BATLAST_SHIFT)
#define  HIPWM1_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT4_BATLAST_SHIFT))

#define  HIPWM1_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT4_BATSIGN_MASK) >> HIPWM1_HBAT4_BATSIGN_SHIFT)
#define  HIPWM1_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT4_BATSIGN_SHIFT))

#define  HIPWM1_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT4_BATSHIFT_MASK) >> HIPWM1_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT4_BATFRAC_MASK) >> HIPWM1_HBAT4_BATFRAC_SHIFT)
#define  HIPWM1_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM1_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT5_RESERVED1_MASK) >> HIPWM1_HBAT5_RESERVED1_SHIFT)
#define  HIPWM1_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT5_RESERVED1_SHIFT))

#define  HIPWM1_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT5_BATLAST_SHIFT 19
#define  HIPWM1_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT5_BATLAST_MASK) >> HIPWM1_HBAT5_BATLAST_SHIFT)
#define  HIPWM1_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT5_BATLAST_SHIFT))

#define  HIPWM1_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT5_BATSIGN_MASK) >> HIPWM1_HBAT5_BATSIGN_SHIFT)
#define  HIPWM1_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT5_BATSIGN_SHIFT))

#define  HIPWM1_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT5_BATSHIFT_MASK) >> HIPWM1_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT5_BATFRAC_MASK) >> HIPWM1_HBAT5_BATFRAC_SHIFT)
#define  HIPWM1_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM1_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT6_RESERVED1_MASK) >> HIPWM1_HBAT6_RESERVED1_SHIFT)
#define  HIPWM1_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT6_RESERVED1_SHIFT))

#define  HIPWM1_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT6_BATLAST_SHIFT 19
#define  HIPWM1_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT6_BATLAST_MASK) >> HIPWM1_HBAT6_BATLAST_SHIFT)
#define  HIPWM1_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT6_BATLAST_SHIFT))

#define  HIPWM1_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT6_BATSIGN_MASK) >> HIPWM1_HBAT6_BATSIGN_SHIFT)
#define  HIPWM1_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT6_BATSIGN_SHIFT))

#define  HIPWM1_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT6_BATSHIFT_MASK) >> HIPWM1_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT6_BATFRAC_MASK) >> HIPWM1_HBAT6_BATFRAC_SHIFT)
#define  HIPWM1_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM1_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT7_RESERVED1_MASK) >> HIPWM1_HBAT7_RESERVED1_SHIFT)
#define  HIPWM1_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT7_RESERVED1_SHIFT))

#define  HIPWM1_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT7_BATLAST_SHIFT 19
#define  HIPWM1_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT7_BATLAST_MASK) >> HIPWM1_HBAT7_BATLAST_SHIFT)
#define  HIPWM1_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT7_BATLAST_SHIFT))

#define  HIPWM1_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT7_BATSIGN_MASK) >> HIPWM1_HBAT7_BATSIGN_SHIFT)
#define  HIPWM1_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT7_BATSIGN_SHIFT))

#define  HIPWM1_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT7_BATSHIFT_MASK) >> HIPWM1_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT7_BATFRAC_MASK) >> HIPWM1_HBAT7_BATFRAC_SHIFT)
#define  HIPWM1_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM1_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT8_RESERVED1_MASK) >> HIPWM1_HBAT8_RESERVED1_SHIFT)
#define  HIPWM1_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT8_RESERVED1_SHIFT))

#define  HIPWM1_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT8_BATLAST_SHIFT 19
#define  HIPWM1_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT8_BATLAST_MASK) >> HIPWM1_HBAT8_BATLAST_SHIFT)
#define  HIPWM1_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT8_BATLAST_SHIFT))

#define  HIPWM1_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT8_BATSIGN_MASK) >> HIPWM1_HBAT8_BATSIGN_SHIFT)
#define  HIPWM1_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT8_BATSIGN_SHIFT))

#define  HIPWM1_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT8_BATSHIFT_MASK) >> HIPWM1_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT8_BATFRAC_MASK) >> HIPWM1_HBAT8_BATFRAC_SHIFT)
#define  HIPWM1_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM1_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT9_RESERVED1_MASK) >> HIPWM1_HBAT9_RESERVED1_SHIFT)
#define  HIPWM1_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT9_RESERVED1_SHIFT))

#define  HIPWM1_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT9_BATLAST_SHIFT 19
#define  HIPWM1_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT9_BATLAST_MASK) >> HIPWM1_HBAT9_BATLAST_SHIFT)
#define  HIPWM1_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT9_BATLAST_SHIFT))

#define  HIPWM1_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT9_BATSIGN_MASK) >> HIPWM1_HBAT9_BATSIGN_SHIFT)
#define  HIPWM1_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT9_BATSIGN_SHIFT))

#define  HIPWM1_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT9_BATSHIFT_MASK) >> HIPWM1_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT9_BATFRAC_MASK) >> HIPWM1_HBAT9_BATFRAC_SHIFT)
#define  HIPWM1_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM1_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT10_RESERVED1_MASK) >> HIPWM1_HBAT10_RESERVED1_SHIFT)
#define  HIPWM1_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT10_RESERVED1_SHIFT))

#define  HIPWM1_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT10_BATLAST_SHIFT 19
#define  HIPWM1_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT10_BATLAST_MASK) >> HIPWM1_HBAT10_BATLAST_SHIFT)
#define  HIPWM1_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT10_BATLAST_SHIFT))

#define  HIPWM1_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT10_BATSIGN_MASK) >> HIPWM1_HBAT10_BATSIGN_SHIFT)
#define  HIPWM1_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT10_BATSIGN_SHIFT))

#define  HIPWM1_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT10_BATSHIFT_MASK) >> HIPWM1_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT10_BATFRAC_MASK) >> HIPWM1_HBAT10_BATFRAC_SHIFT)
#define  HIPWM1_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM1_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT11_RESERVED1_MASK) >> HIPWM1_HBAT11_RESERVED1_SHIFT)
#define  HIPWM1_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT11_RESERVED1_SHIFT))

#define  HIPWM1_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT11_BATLAST_SHIFT 19
#define  HIPWM1_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT11_BATLAST_MASK) >> HIPWM1_HBAT11_BATLAST_SHIFT)
#define  HIPWM1_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT11_BATLAST_SHIFT))

#define  HIPWM1_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT11_BATSIGN_MASK) >> HIPWM1_HBAT11_BATSIGN_SHIFT)
#define  HIPWM1_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT11_BATSIGN_SHIFT))

#define  HIPWM1_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT11_BATSHIFT_MASK) >> HIPWM1_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT11_BATFRAC_MASK) >> HIPWM1_HBAT11_BATFRAC_SHIFT)
#define  HIPWM1_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM1_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT12_RESERVED1_MASK) >> HIPWM1_HBAT12_RESERVED1_SHIFT)
#define  HIPWM1_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT12_RESERVED1_SHIFT))

#define  HIPWM1_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT12_BATLAST_SHIFT 19
#define  HIPWM1_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT12_BATLAST_MASK) >> HIPWM1_HBAT12_BATLAST_SHIFT)
#define  HIPWM1_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT12_BATLAST_SHIFT))

#define  HIPWM1_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT12_BATSIGN_MASK) >> HIPWM1_HBAT12_BATSIGN_SHIFT)
#define  HIPWM1_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT12_BATSIGN_SHIFT))

#define  HIPWM1_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT12_BATSHIFT_MASK) >> HIPWM1_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT12_BATFRAC_MASK) >> HIPWM1_HBAT12_BATFRAC_SHIFT)
#define  HIPWM1_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM1_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT13_RESERVED1_MASK) >> HIPWM1_HBAT13_RESERVED1_SHIFT)
#define  HIPWM1_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT13_RESERVED1_SHIFT))

#define  HIPWM1_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT13_BATLAST_SHIFT 19
#define  HIPWM1_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT13_BATLAST_MASK) >> HIPWM1_HBAT13_BATLAST_SHIFT)
#define  HIPWM1_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT13_BATLAST_SHIFT))

#define  HIPWM1_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT13_BATSIGN_MASK) >> HIPWM1_HBAT13_BATSIGN_SHIFT)
#define  HIPWM1_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT13_BATSIGN_SHIFT))

#define  HIPWM1_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT13_BATSHIFT_MASK) >> HIPWM1_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT13_BATFRAC_MASK) >> HIPWM1_HBAT13_BATFRAC_SHIFT)
#define  HIPWM1_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM1_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT14_RESERVED1_MASK) >> HIPWM1_HBAT14_RESERVED1_SHIFT)
#define  HIPWM1_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT14_RESERVED1_SHIFT))

#define  HIPWM1_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT14_BATLAST_SHIFT 19
#define  HIPWM1_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT14_BATLAST_MASK) >> HIPWM1_HBAT14_BATLAST_SHIFT)
#define  HIPWM1_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT14_BATLAST_SHIFT))

#define  HIPWM1_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT14_BATSIGN_MASK) >> HIPWM1_HBAT14_BATSIGN_SHIFT)
#define  HIPWM1_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT14_BATSIGN_SHIFT))

#define  HIPWM1_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT14_BATSHIFT_MASK) >> HIPWM1_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT14_BATFRAC_MASK) >> HIPWM1_HBAT14_BATFRAC_SHIFT)
#define  HIPWM1_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM1_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT15_RESERVED1_MASK) >> HIPWM1_HBAT15_RESERVED1_SHIFT)
#define  HIPWM1_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT15_RESERVED1_SHIFT))

#define  HIPWM1_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT15_BATLAST_SHIFT 19
#define  HIPWM1_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT15_BATLAST_MASK) >> HIPWM1_HBAT15_BATLAST_SHIFT)
#define  HIPWM1_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT15_BATLAST_SHIFT))

#define  HIPWM1_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT15_BATSIGN_MASK) >> HIPWM1_HBAT15_BATSIGN_SHIFT)
#define  HIPWM1_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT15_BATSIGN_SHIFT))

#define  HIPWM1_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT15_BATSHIFT_MASK) >> HIPWM1_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT15_BATFRAC_MASK) >> HIPWM1_HBAT15_BATFRAC_SHIFT)
#define  HIPWM1_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM1_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT16_RESERVED1_MASK) >> HIPWM1_HBAT16_RESERVED1_SHIFT)
#define  HIPWM1_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT16_RESERVED1_SHIFT))

#define  HIPWM1_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT16_BATLAST_SHIFT 19
#define  HIPWM1_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT16_BATLAST_MASK) >> HIPWM1_HBAT16_BATLAST_SHIFT)
#define  HIPWM1_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT16_BATLAST_SHIFT))

#define  HIPWM1_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT16_BATSIGN_MASK) >> HIPWM1_HBAT16_BATSIGN_SHIFT)
#define  HIPWM1_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT16_BATSIGN_SHIFT))

#define  HIPWM1_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT16_BATSHIFT_MASK) >> HIPWM1_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT16_BATFRAC_MASK) >> HIPWM1_HBAT16_BATFRAC_SHIFT)
#define  HIPWM1_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM1_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT17_RESERVED1_MASK) >> HIPWM1_HBAT17_RESERVED1_SHIFT)
#define  HIPWM1_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT17_RESERVED1_SHIFT))

#define  HIPWM1_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT17_BATLAST_SHIFT 19
#define  HIPWM1_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT17_BATLAST_MASK) >> HIPWM1_HBAT17_BATLAST_SHIFT)
#define  HIPWM1_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT17_BATLAST_SHIFT))

#define  HIPWM1_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT17_BATSIGN_MASK) >> HIPWM1_HBAT17_BATSIGN_SHIFT)
#define  HIPWM1_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT17_BATSIGN_SHIFT))

#define  HIPWM1_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT17_BATSHIFT_MASK) >> HIPWM1_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT17_BATFRAC_MASK) >> HIPWM1_HBAT17_BATFRAC_SHIFT)
#define  HIPWM1_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM1_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT18_RESERVED1_MASK) >> HIPWM1_HBAT18_RESERVED1_SHIFT)
#define  HIPWM1_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT18_RESERVED1_SHIFT))

#define  HIPWM1_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT18_BATLAST_SHIFT 19
#define  HIPWM1_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT18_BATLAST_MASK) >> HIPWM1_HBAT18_BATLAST_SHIFT)
#define  HIPWM1_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT18_BATLAST_SHIFT))

#define  HIPWM1_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT18_BATSIGN_MASK) >> HIPWM1_HBAT18_BATSIGN_SHIFT)
#define  HIPWM1_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT18_BATSIGN_SHIFT))

#define  HIPWM1_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT18_BATSHIFT_MASK) >> HIPWM1_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT18_BATFRAC_MASK) >> HIPWM1_HBAT18_BATFRAC_SHIFT)
#define  HIPWM1_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM1_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT19_RESERVED1_MASK) >> HIPWM1_HBAT19_RESERVED1_SHIFT)
#define  HIPWM1_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT19_RESERVED1_SHIFT))

#define  HIPWM1_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT19_BATLAST_SHIFT 19
#define  HIPWM1_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT19_BATLAST_MASK) >> HIPWM1_HBAT19_BATLAST_SHIFT)
#define  HIPWM1_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT19_BATLAST_SHIFT))

#define  HIPWM1_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT19_BATSIGN_MASK) >> HIPWM1_HBAT19_BATSIGN_SHIFT)
#define  HIPWM1_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT19_BATSIGN_SHIFT))

#define  HIPWM1_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT19_BATSHIFT_MASK) >> HIPWM1_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT19_BATFRAC_MASK) >> HIPWM1_HBAT19_BATFRAC_SHIFT)
#define  HIPWM1_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM1_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT20_RESERVED1_MASK) >> HIPWM1_HBAT20_RESERVED1_SHIFT)
#define  HIPWM1_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT20_RESERVED1_SHIFT))

#define  HIPWM1_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT20_BATLAST_SHIFT 19
#define  HIPWM1_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT20_BATLAST_MASK) >> HIPWM1_HBAT20_BATLAST_SHIFT)
#define  HIPWM1_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT20_BATLAST_SHIFT))

#define  HIPWM1_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT20_BATSIGN_MASK) >> HIPWM1_HBAT20_BATSIGN_SHIFT)
#define  HIPWM1_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT20_BATSIGN_SHIFT))

#define  HIPWM1_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT20_BATSHIFT_MASK) >> HIPWM1_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT20_BATFRAC_MASK) >> HIPWM1_HBAT20_BATFRAC_SHIFT)
#define  HIPWM1_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM1_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT21_RESERVED1_MASK) >> HIPWM1_HBAT21_RESERVED1_SHIFT)
#define  HIPWM1_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT21_RESERVED1_SHIFT))

#define  HIPWM1_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT21_BATLAST_SHIFT 19
#define  HIPWM1_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT21_BATLAST_MASK) >> HIPWM1_HBAT21_BATLAST_SHIFT)
#define  HIPWM1_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT21_BATLAST_SHIFT))

#define  HIPWM1_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT21_BATSIGN_MASK) >> HIPWM1_HBAT21_BATSIGN_SHIFT)
#define  HIPWM1_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT21_BATSIGN_SHIFT))

#define  HIPWM1_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT21_BATSHIFT_MASK) >> HIPWM1_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT21_BATFRAC_MASK) >> HIPWM1_HBAT21_BATFRAC_SHIFT)
#define  HIPWM1_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM1_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT22_RESERVED1_MASK) >> HIPWM1_HBAT22_RESERVED1_SHIFT)
#define  HIPWM1_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT22_RESERVED1_SHIFT))

#define  HIPWM1_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT22_BATLAST_SHIFT 19
#define  HIPWM1_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT22_BATLAST_MASK) >> HIPWM1_HBAT22_BATLAST_SHIFT)
#define  HIPWM1_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT22_BATLAST_SHIFT))

#define  HIPWM1_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT22_BATSIGN_MASK) >> HIPWM1_HBAT22_BATSIGN_SHIFT)
#define  HIPWM1_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT22_BATSIGN_SHIFT))

#define  HIPWM1_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT22_BATSHIFT_MASK) >> HIPWM1_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT22_BATFRAC_MASK) >> HIPWM1_HBAT22_BATFRAC_SHIFT)
#define  HIPWM1_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM1_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT23_RESERVED1_MASK) >> HIPWM1_HBAT23_RESERVED1_SHIFT)
#define  HIPWM1_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT23_RESERVED1_SHIFT))

#define  HIPWM1_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT23_BATLAST_SHIFT 19
#define  HIPWM1_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT23_BATLAST_MASK) >> HIPWM1_HBAT23_BATLAST_SHIFT)
#define  HIPWM1_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT23_BATLAST_SHIFT))

#define  HIPWM1_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT23_BATSIGN_MASK) >> HIPWM1_HBAT23_BATSIGN_SHIFT)
#define  HIPWM1_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT23_BATSIGN_SHIFT))

#define  HIPWM1_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT23_BATSHIFT_MASK) >> HIPWM1_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT23_BATFRAC_MASK) >> HIPWM1_HBAT23_BATFRAC_SHIFT)
#define  HIPWM1_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM1_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT24_RESERVED1_MASK) >> HIPWM1_HBAT24_RESERVED1_SHIFT)
#define  HIPWM1_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT24_RESERVED1_SHIFT))

#define  HIPWM1_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT24_BATLAST_SHIFT 19
#define  HIPWM1_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT24_BATLAST_MASK) >> HIPWM1_HBAT24_BATLAST_SHIFT)
#define  HIPWM1_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT24_BATLAST_SHIFT))

#define  HIPWM1_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT24_BATSIGN_MASK) >> HIPWM1_HBAT24_BATSIGN_SHIFT)
#define  HIPWM1_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT24_BATSIGN_SHIFT))

#define  HIPWM1_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT24_BATSHIFT_MASK) >> HIPWM1_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT24_BATFRAC_MASK) >> HIPWM1_HBAT24_BATFRAC_SHIFT)
#define  HIPWM1_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM1_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT25_RESERVED1_MASK) >> HIPWM1_HBAT25_RESERVED1_SHIFT)
#define  HIPWM1_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT25_RESERVED1_SHIFT))

#define  HIPWM1_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT25_BATLAST_SHIFT 19
#define  HIPWM1_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT25_BATLAST_MASK) >> HIPWM1_HBAT25_BATLAST_SHIFT)
#define  HIPWM1_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT25_BATLAST_SHIFT))

#define  HIPWM1_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT25_BATSIGN_MASK) >> HIPWM1_HBAT25_BATSIGN_SHIFT)
#define  HIPWM1_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT25_BATSIGN_SHIFT))

#define  HIPWM1_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT25_BATSHIFT_MASK) >> HIPWM1_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT25_BATFRAC_MASK) >> HIPWM1_HBAT25_BATFRAC_SHIFT)
#define  HIPWM1_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM1_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT26_RESERVED1_MASK) >> HIPWM1_HBAT26_RESERVED1_SHIFT)
#define  HIPWM1_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT26_RESERVED1_SHIFT))

#define  HIPWM1_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT26_BATLAST_SHIFT 19
#define  HIPWM1_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT26_BATLAST_MASK) >> HIPWM1_HBAT26_BATLAST_SHIFT)
#define  HIPWM1_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT26_BATLAST_SHIFT))

#define  HIPWM1_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT26_BATSIGN_MASK) >> HIPWM1_HBAT26_BATSIGN_SHIFT)
#define  HIPWM1_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT26_BATSIGN_SHIFT))

#define  HIPWM1_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT26_BATSHIFT_MASK) >> HIPWM1_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT26_BATFRAC_MASK) >> HIPWM1_HBAT26_BATFRAC_SHIFT)
#define  HIPWM1_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM1_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT27_RESERVED1_MASK) >> HIPWM1_HBAT27_RESERVED1_SHIFT)
#define  HIPWM1_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT27_RESERVED1_SHIFT))

#define  HIPWM1_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT27_BATLAST_SHIFT 19
#define  HIPWM1_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT27_BATLAST_MASK) >> HIPWM1_HBAT27_BATLAST_SHIFT)
#define  HIPWM1_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT27_BATLAST_SHIFT))

#define  HIPWM1_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT27_BATSIGN_MASK) >> HIPWM1_HBAT27_BATSIGN_SHIFT)
#define  HIPWM1_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT27_BATSIGN_SHIFT))

#define  HIPWM1_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT27_BATSHIFT_MASK) >> HIPWM1_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT27_BATFRAC_MASK) >> HIPWM1_HBAT27_BATFRAC_SHIFT)
#define  HIPWM1_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM1_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT28_RESERVED1_MASK) >> HIPWM1_HBAT28_RESERVED1_SHIFT)
#define  HIPWM1_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT28_RESERVED1_SHIFT))

#define  HIPWM1_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT28_BATLAST_SHIFT 19
#define  HIPWM1_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT28_BATLAST_MASK) >> HIPWM1_HBAT28_BATLAST_SHIFT)
#define  HIPWM1_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT28_BATLAST_SHIFT))

#define  HIPWM1_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT28_BATSIGN_MASK) >> HIPWM1_HBAT28_BATSIGN_SHIFT)
#define  HIPWM1_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT28_BATSIGN_SHIFT))

#define  HIPWM1_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT28_BATSHIFT_MASK) >> HIPWM1_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT28_BATFRAC_MASK) >> HIPWM1_HBAT28_BATFRAC_SHIFT)
#define  HIPWM1_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM1_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT29_RESERVED1_MASK) >> HIPWM1_HBAT29_RESERVED1_SHIFT)
#define  HIPWM1_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT29_RESERVED1_SHIFT))

#define  HIPWM1_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT29_BATLAST_SHIFT 19
#define  HIPWM1_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT29_BATLAST_MASK) >> HIPWM1_HBAT29_BATLAST_SHIFT)
#define  HIPWM1_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT29_BATLAST_SHIFT))

#define  HIPWM1_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT29_BATSIGN_MASK) >> HIPWM1_HBAT29_BATSIGN_SHIFT)
#define  HIPWM1_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT29_BATSIGN_SHIFT))

#define  HIPWM1_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT29_BATSHIFT_MASK) >> HIPWM1_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT29_BATFRAC_MASK) >> HIPWM1_HBAT29_BATFRAC_SHIFT)
#define  HIPWM1_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM1_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT30_RESERVED1_MASK) >> HIPWM1_HBAT30_RESERVED1_SHIFT)
#define  HIPWM1_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT30_RESERVED1_SHIFT))

#define  HIPWM1_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT30_BATLAST_SHIFT 19
#define  HIPWM1_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT30_BATLAST_MASK) >> HIPWM1_HBAT30_BATLAST_SHIFT)
#define  HIPWM1_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT30_BATLAST_SHIFT))

#define  HIPWM1_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT30_BATSIGN_MASK) >> HIPWM1_HBAT30_BATSIGN_SHIFT)
#define  HIPWM1_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT30_BATSIGN_SHIFT))

#define  HIPWM1_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT30_BATSHIFT_MASK) >> HIPWM1_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT30_BATFRAC_MASK) >> HIPWM1_HBAT30_BATFRAC_SHIFT)
#define  HIPWM1_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM1_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT31_RESERVED1_MASK) >> HIPWM1_HBAT31_RESERVED1_SHIFT)
#define  HIPWM1_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT31_RESERVED1_SHIFT))

#define  HIPWM1_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT31_BATLAST_SHIFT 19
#define  HIPWM1_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT31_BATLAST_MASK) >> HIPWM1_HBAT31_BATLAST_SHIFT)
#define  HIPWM1_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT31_BATLAST_SHIFT))

#define  HIPWM1_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT31_BATSIGN_MASK) >> HIPWM1_HBAT31_BATSIGN_SHIFT)
#define  HIPWM1_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT31_BATSIGN_SHIFT))

#define  HIPWM1_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT31_BATSHIFT_MASK) >> HIPWM1_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT31_BATFRAC_MASK) >> HIPWM1_HBAT31_BATFRAC_SHIFT)
#define  HIPWM1_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM1_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT32_RESERVED1_MASK) >> HIPWM1_HBAT32_RESERVED1_SHIFT)
#define  HIPWM1_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT32_RESERVED1_SHIFT))

#define  HIPWM1_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT32_BATLAST_SHIFT 19
#define  HIPWM1_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT32_BATLAST_MASK) >> HIPWM1_HBAT32_BATLAST_SHIFT)
#define  HIPWM1_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT32_BATLAST_SHIFT))

#define  HIPWM1_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT32_BATSIGN_MASK) >> HIPWM1_HBAT32_BATSIGN_SHIFT)
#define  HIPWM1_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT32_BATSIGN_SHIFT))

#define  HIPWM1_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT32_BATSHIFT_MASK) >> HIPWM1_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT32_BATFRAC_MASK) >> HIPWM1_HBAT32_BATFRAC_SHIFT)
#define  HIPWM1_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM1_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT33_RESERVED1_MASK) >> HIPWM1_HBAT33_RESERVED1_SHIFT)
#define  HIPWM1_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT33_RESERVED1_SHIFT))

#define  HIPWM1_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT33_BATLAST_SHIFT 19
#define  HIPWM1_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT33_BATLAST_MASK) >> HIPWM1_HBAT33_BATLAST_SHIFT)
#define  HIPWM1_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT33_BATLAST_SHIFT))

#define  HIPWM1_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT33_BATSIGN_MASK) >> HIPWM1_HBAT33_BATSIGN_SHIFT)
#define  HIPWM1_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT33_BATSIGN_SHIFT))

#define  HIPWM1_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT33_BATSHIFT_MASK) >> HIPWM1_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT33_BATFRAC_MASK) >> HIPWM1_HBAT33_BATFRAC_SHIFT)
#define  HIPWM1_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM1_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT34_RESERVED1_MASK) >> HIPWM1_HBAT34_RESERVED1_SHIFT)
#define  HIPWM1_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT34_RESERVED1_SHIFT))

#define  HIPWM1_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT34_BATLAST_SHIFT 19
#define  HIPWM1_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT34_BATLAST_MASK) >> HIPWM1_HBAT34_BATLAST_SHIFT)
#define  HIPWM1_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT34_BATLAST_SHIFT))

#define  HIPWM1_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT34_BATSIGN_MASK) >> HIPWM1_HBAT34_BATSIGN_SHIFT)
#define  HIPWM1_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT34_BATSIGN_SHIFT))

#define  HIPWM1_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT34_BATSHIFT_MASK) >> HIPWM1_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT34_BATFRAC_MASK) >> HIPWM1_HBAT34_BATFRAC_SHIFT)
#define  HIPWM1_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM1_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT35_RESERVED1_MASK) >> HIPWM1_HBAT35_RESERVED1_SHIFT)
#define  HIPWM1_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT35_RESERVED1_SHIFT))

#define  HIPWM1_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT35_BATLAST_SHIFT 19
#define  HIPWM1_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT35_BATLAST_MASK) >> HIPWM1_HBAT35_BATLAST_SHIFT)
#define  HIPWM1_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT35_BATLAST_SHIFT))

#define  HIPWM1_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT35_BATSIGN_MASK) >> HIPWM1_HBAT35_BATSIGN_SHIFT)
#define  HIPWM1_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT35_BATSIGN_SHIFT))

#define  HIPWM1_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT35_BATSHIFT_MASK) >> HIPWM1_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT35_BATFRAC_MASK) >> HIPWM1_HBAT35_BATFRAC_SHIFT)
#define  HIPWM1_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM1_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT36_RESERVED1_MASK) >> HIPWM1_HBAT36_RESERVED1_SHIFT)
#define  HIPWM1_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT36_RESERVED1_SHIFT))

#define  HIPWM1_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT36_BATLAST_SHIFT 19
#define  HIPWM1_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT36_BATLAST_MASK) >> HIPWM1_HBAT36_BATLAST_SHIFT)
#define  HIPWM1_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT36_BATLAST_SHIFT))

#define  HIPWM1_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT36_BATSIGN_MASK) >> HIPWM1_HBAT36_BATSIGN_SHIFT)
#define  HIPWM1_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT36_BATSIGN_SHIFT))

#define  HIPWM1_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT36_BATSHIFT_MASK) >> HIPWM1_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT36_BATFRAC_MASK) >> HIPWM1_HBAT36_BATFRAC_SHIFT)
#define  HIPWM1_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM1_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT37_RESERVED1_MASK) >> HIPWM1_HBAT37_RESERVED1_SHIFT)
#define  HIPWM1_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT37_RESERVED1_SHIFT))

#define  HIPWM1_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT37_BATLAST_SHIFT 19
#define  HIPWM1_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT37_BATLAST_MASK) >> HIPWM1_HBAT37_BATLAST_SHIFT)
#define  HIPWM1_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT37_BATLAST_SHIFT))

#define  HIPWM1_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT37_BATSIGN_MASK) >> HIPWM1_HBAT37_BATSIGN_SHIFT)
#define  HIPWM1_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT37_BATSIGN_SHIFT))

#define  HIPWM1_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT37_BATSHIFT_MASK) >> HIPWM1_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT37_BATFRAC_MASK) >> HIPWM1_HBAT37_BATFRAC_SHIFT)
#define  HIPWM1_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM1_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT38_RESERVED1_MASK) >> HIPWM1_HBAT38_RESERVED1_SHIFT)
#define  HIPWM1_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT38_RESERVED1_SHIFT))

#define  HIPWM1_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT38_BATLAST_SHIFT 19
#define  HIPWM1_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT38_BATLAST_MASK) >> HIPWM1_HBAT38_BATLAST_SHIFT)
#define  HIPWM1_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT38_BATLAST_SHIFT))

#define  HIPWM1_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT38_BATSIGN_MASK) >> HIPWM1_HBAT38_BATSIGN_SHIFT)
#define  HIPWM1_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT38_BATSIGN_SHIFT))

#define  HIPWM1_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT38_BATSHIFT_MASK) >> HIPWM1_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT38_BATFRAC_MASK) >> HIPWM1_HBAT38_BATFRAC_SHIFT)
#define  HIPWM1_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM1_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT39_RESERVED1_MASK) >> HIPWM1_HBAT39_RESERVED1_SHIFT)
#define  HIPWM1_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT39_RESERVED1_SHIFT))

#define  HIPWM1_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT39_BATLAST_SHIFT 19
#define  HIPWM1_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT39_BATLAST_MASK) >> HIPWM1_HBAT39_BATLAST_SHIFT)
#define  HIPWM1_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT39_BATLAST_SHIFT))

#define  HIPWM1_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT39_BATSIGN_MASK) >> HIPWM1_HBAT39_BATSIGN_SHIFT)
#define  HIPWM1_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT39_BATSIGN_SHIFT))

#define  HIPWM1_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT39_BATSHIFT_MASK) >> HIPWM1_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT39_BATFRAC_MASK) >> HIPWM1_HBAT39_BATFRAC_SHIFT)
#define  HIPWM1_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM1_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT40_RESERVED1_MASK) >> HIPWM1_HBAT40_RESERVED1_SHIFT)
#define  HIPWM1_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT40_RESERVED1_SHIFT))

#define  HIPWM1_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT40_BATLAST_SHIFT 19
#define  HIPWM1_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT40_BATLAST_MASK) >> HIPWM1_HBAT40_BATLAST_SHIFT)
#define  HIPWM1_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT40_BATLAST_SHIFT))

#define  HIPWM1_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT40_BATSIGN_MASK) >> HIPWM1_HBAT40_BATSIGN_SHIFT)
#define  HIPWM1_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT40_BATSIGN_SHIFT))

#define  HIPWM1_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT40_BATSHIFT_MASK) >> HIPWM1_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT40_BATFRAC_MASK) >> HIPWM1_HBAT40_BATFRAC_SHIFT)
#define  HIPWM1_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM1_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT41_RESERVED1_MASK) >> HIPWM1_HBAT41_RESERVED1_SHIFT)
#define  HIPWM1_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT41_RESERVED1_SHIFT))

#define  HIPWM1_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT41_BATLAST_SHIFT 19
#define  HIPWM1_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT41_BATLAST_MASK) >> HIPWM1_HBAT41_BATLAST_SHIFT)
#define  HIPWM1_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT41_BATLAST_SHIFT))

#define  HIPWM1_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT41_BATSIGN_MASK) >> HIPWM1_HBAT41_BATSIGN_SHIFT)
#define  HIPWM1_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT41_BATSIGN_SHIFT))

#define  HIPWM1_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT41_BATSHIFT_MASK) >> HIPWM1_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT41_BATFRAC_MASK) >> HIPWM1_HBAT41_BATFRAC_SHIFT)
#define  HIPWM1_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM1_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT42_RESERVED1_MASK) >> HIPWM1_HBAT42_RESERVED1_SHIFT)
#define  HIPWM1_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT42_RESERVED1_SHIFT))

#define  HIPWM1_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT42_BATLAST_SHIFT 19
#define  HIPWM1_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT42_BATLAST_MASK) >> HIPWM1_HBAT42_BATLAST_SHIFT)
#define  HIPWM1_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT42_BATLAST_SHIFT))

#define  HIPWM1_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT42_BATSIGN_MASK) >> HIPWM1_HBAT42_BATSIGN_SHIFT)
#define  HIPWM1_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT42_BATSIGN_SHIFT))

#define  HIPWM1_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT42_BATSHIFT_MASK) >> HIPWM1_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT42_BATFRAC_MASK) >> HIPWM1_HBAT42_BATFRAC_SHIFT)
#define  HIPWM1_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM1_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT43_RESERVED1_MASK) >> HIPWM1_HBAT43_RESERVED1_SHIFT)
#define  HIPWM1_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT43_RESERVED1_SHIFT))

#define  HIPWM1_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT43_BATLAST_SHIFT 19
#define  HIPWM1_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT43_BATLAST_MASK) >> HIPWM1_HBAT43_BATLAST_SHIFT)
#define  HIPWM1_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT43_BATLAST_SHIFT))

#define  HIPWM1_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT43_BATSIGN_MASK) >> HIPWM1_HBAT43_BATSIGN_SHIFT)
#define  HIPWM1_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT43_BATSIGN_SHIFT))

#define  HIPWM1_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT43_BATSHIFT_MASK) >> HIPWM1_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT43_BATFRAC_MASK) >> HIPWM1_HBAT43_BATFRAC_SHIFT)
#define  HIPWM1_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM1_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT44_RESERVED1_MASK) >> HIPWM1_HBAT44_RESERVED1_SHIFT)
#define  HIPWM1_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT44_RESERVED1_SHIFT))

#define  HIPWM1_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT44_BATLAST_SHIFT 19
#define  HIPWM1_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT44_BATLAST_MASK) >> HIPWM1_HBAT44_BATLAST_SHIFT)
#define  HIPWM1_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT44_BATLAST_SHIFT))

#define  HIPWM1_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT44_BATSIGN_MASK) >> HIPWM1_HBAT44_BATSIGN_SHIFT)
#define  HIPWM1_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT44_BATSIGN_SHIFT))

#define  HIPWM1_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT44_BATSHIFT_MASK) >> HIPWM1_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT44_BATFRAC_MASK) >> HIPWM1_HBAT44_BATFRAC_SHIFT)
#define  HIPWM1_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM1_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT45_RESERVED1_MASK) >> HIPWM1_HBAT45_RESERVED1_SHIFT)
#define  HIPWM1_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT45_RESERVED1_SHIFT))

#define  HIPWM1_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT45_BATLAST_SHIFT 19
#define  HIPWM1_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT45_BATLAST_MASK) >> HIPWM1_HBAT45_BATLAST_SHIFT)
#define  HIPWM1_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT45_BATLAST_SHIFT))

#define  HIPWM1_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT45_BATSIGN_MASK) >> HIPWM1_HBAT45_BATSIGN_SHIFT)
#define  HIPWM1_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT45_BATSIGN_SHIFT))

#define  HIPWM1_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT45_BATSHIFT_MASK) >> HIPWM1_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT45_BATFRAC_MASK) >> HIPWM1_HBAT45_BATFRAC_SHIFT)
#define  HIPWM1_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM1_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT46_RESERVED1_MASK) >> HIPWM1_HBAT46_RESERVED1_SHIFT)
#define  HIPWM1_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT46_RESERVED1_SHIFT))

#define  HIPWM1_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT46_BATLAST_SHIFT 19
#define  HIPWM1_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT46_BATLAST_MASK) >> HIPWM1_HBAT46_BATLAST_SHIFT)
#define  HIPWM1_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT46_BATLAST_SHIFT))

#define  HIPWM1_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT46_BATSIGN_MASK) >> HIPWM1_HBAT46_BATSIGN_SHIFT)
#define  HIPWM1_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT46_BATSIGN_SHIFT))

#define  HIPWM1_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT46_BATSHIFT_MASK) >> HIPWM1_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT46_BATFRAC_MASK) >> HIPWM1_HBAT46_BATFRAC_SHIFT)
#define  HIPWM1_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM1_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT47_RESERVED1_MASK) >> HIPWM1_HBAT47_RESERVED1_SHIFT)
#define  HIPWM1_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT47_RESERVED1_SHIFT))

#define  HIPWM1_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT47_BATLAST_SHIFT 19
#define  HIPWM1_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT47_BATLAST_MASK) >> HIPWM1_HBAT47_BATLAST_SHIFT)
#define  HIPWM1_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT47_BATLAST_SHIFT))

#define  HIPWM1_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT47_BATSIGN_MASK) >> HIPWM1_HBAT47_BATSIGN_SHIFT)
#define  HIPWM1_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT47_BATSIGN_SHIFT))

#define  HIPWM1_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT47_BATSHIFT_MASK) >> HIPWM1_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT47_BATFRAC_MASK) >> HIPWM1_HBAT47_BATFRAC_SHIFT)
#define  HIPWM1_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM1_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT48_RESERVED1_MASK) >> HIPWM1_HBAT48_RESERVED1_SHIFT)
#define  HIPWM1_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT48_RESERVED1_SHIFT))

#define  HIPWM1_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT48_BATLAST_SHIFT 19
#define  HIPWM1_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT48_BATLAST_MASK) >> HIPWM1_HBAT48_BATLAST_SHIFT)
#define  HIPWM1_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT48_BATLAST_SHIFT))

#define  HIPWM1_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT48_BATSIGN_MASK) >> HIPWM1_HBAT48_BATSIGN_SHIFT)
#define  HIPWM1_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT48_BATSIGN_SHIFT))

#define  HIPWM1_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT48_BATSHIFT_MASK) >> HIPWM1_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT48_BATFRAC_MASK) >> HIPWM1_HBAT48_BATFRAC_SHIFT)
#define  HIPWM1_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM1_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT49_RESERVED1_MASK) >> HIPWM1_HBAT49_RESERVED1_SHIFT)
#define  HIPWM1_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT49_RESERVED1_SHIFT))

#define  HIPWM1_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT49_BATLAST_SHIFT 19
#define  HIPWM1_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT49_BATLAST_MASK) >> HIPWM1_HBAT49_BATLAST_SHIFT)
#define  HIPWM1_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT49_BATLAST_SHIFT))

#define  HIPWM1_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT49_BATSIGN_MASK) >> HIPWM1_HBAT49_BATSIGN_SHIFT)
#define  HIPWM1_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT49_BATSIGN_SHIFT))

#define  HIPWM1_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT49_BATSHIFT_MASK) >> HIPWM1_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT49_BATFRAC_MASK) >> HIPWM1_HBAT49_BATFRAC_SHIFT)
#define  HIPWM1_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM1_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT50_RESERVED1_MASK) >> HIPWM1_HBAT50_RESERVED1_SHIFT)
#define  HIPWM1_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT50_RESERVED1_SHIFT))

#define  HIPWM1_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT50_BATLAST_SHIFT 19
#define  HIPWM1_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT50_BATLAST_MASK) >> HIPWM1_HBAT50_BATLAST_SHIFT)
#define  HIPWM1_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT50_BATLAST_SHIFT))

#define  HIPWM1_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT50_BATSIGN_MASK) >> HIPWM1_HBAT50_BATSIGN_SHIFT)
#define  HIPWM1_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT50_BATSIGN_SHIFT))

#define  HIPWM1_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT50_BATSHIFT_MASK) >> HIPWM1_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT50_BATFRAC_MASK) >> HIPWM1_HBAT50_BATFRAC_SHIFT)
#define  HIPWM1_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM1_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT51_RESERVED1_MASK) >> HIPWM1_HBAT51_RESERVED1_SHIFT)
#define  HIPWM1_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT51_RESERVED1_SHIFT))

#define  HIPWM1_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT51_BATLAST_SHIFT 19
#define  HIPWM1_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT51_BATLAST_MASK) >> HIPWM1_HBAT51_BATLAST_SHIFT)
#define  HIPWM1_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT51_BATLAST_SHIFT))

#define  HIPWM1_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT51_BATSIGN_MASK) >> HIPWM1_HBAT51_BATSIGN_SHIFT)
#define  HIPWM1_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT51_BATSIGN_SHIFT))

#define  HIPWM1_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT51_BATSHIFT_MASK) >> HIPWM1_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT51_BATFRAC_MASK) >> HIPWM1_HBAT51_BATFRAC_SHIFT)
#define  HIPWM1_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM1_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT52_RESERVED1_MASK) >> HIPWM1_HBAT52_RESERVED1_SHIFT)
#define  HIPWM1_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT52_RESERVED1_SHIFT))

#define  HIPWM1_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT52_BATLAST_SHIFT 19
#define  HIPWM1_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT52_BATLAST_MASK) >> HIPWM1_HBAT52_BATLAST_SHIFT)
#define  HIPWM1_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT52_BATLAST_SHIFT))

#define  HIPWM1_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT52_BATSIGN_MASK) >> HIPWM1_HBAT52_BATSIGN_SHIFT)
#define  HIPWM1_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT52_BATSIGN_SHIFT))

#define  HIPWM1_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT52_BATSHIFT_MASK) >> HIPWM1_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT52_BATFRAC_MASK) >> HIPWM1_HBAT52_BATFRAC_SHIFT)
#define  HIPWM1_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM1_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT53_RESERVED1_MASK) >> HIPWM1_HBAT53_RESERVED1_SHIFT)
#define  HIPWM1_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT53_RESERVED1_SHIFT))

#define  HIPWM1_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT53_BATLAST_SHIFT 19
#define  HIPWM1_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT53_BATLAST_MASK) >> HIPWM1_HBAT53_BATLAST_SHIFT)
#define  HIPWM1_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT53_BATLAST_SHIFT))

#define  HIPWM1_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT53_BATSIGN_MASK) >> HIPWM1_HBAT53_BATSIGN_SHIFT)
#define  HIPWM1_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT53_BATSIGN_SHIFT))

#define  HIPWM1_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT53_BATSHIFT_MASK) >> HIPWM1_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT53_BATFRAC_MASK) >> HIPWM1_HBAT53_BATFRAC_SHIFT)
#define  HIPWM1_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM1_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT54_RESERVED1_MASK) >> HIPWM1_HBAT54_RESERVED1_SHIFT)
#define  HIPWM1_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT54_RESERVED1_SHIFT))

#define  HIPWM1_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT54_BATLAST_SHIFT 19
#define  HIPWM1_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT54_BATLAST_MASK) >> HIPWM1_HBAT54_BATLAST_SHIFT)
#define  HIPWM1_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT54_BATLAST_SHIFT))

#define  HIPWM1_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT54_BATSIGN_MASK) >> HIPWM1_HBAT54_BATSIGN_SHIFT)
#define  HIPWM1_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT54_BATSIGN_SHIFT))

#define  HIPWM1_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT54_BATSHIFT_MASK) >> HIPWM1_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT54_BATFRAC_MASK) >> HIPWM1_HBAT54_BATFRAC_SHIFT)
#define  HIPWM1_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM1_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT55_RESERVED1_MASK) >> HIPWM1_HBAT55_RESERVED1_SHIFT)
#define  HIPWM1_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT55_RESERVED1_SHIFT))

#define  HIPWM1_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT55_BATLAST_SHIFT 19
#define  HIPWM1_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT55_BATLAST_MASK) >> HIPWM1_HBAT55_BATLAST_SHIFT)
#define  HIPWM1_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT55_BATLAST_SHIFT))

#define  HIPWM1_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT55_BATSIGN_MASK) >> HIPWM1_HBAT55_BATSIGN_SHIFT)
#define  HIPWM1_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT55_BATSIGN_SHIFT))

#define  HIPWM1_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT55_BATSHIFT_MASK) >> HIPWM1_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT55_BATFRAC_MASK) >> HIPWM1_HBAT55_BATFRAC_SHIFT)
#define  HIPWM1_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM1_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT56_RESERVED1_MASK) >> HIPWM1_HBAT56_RESERVED1_SHIFT)
#define  HIPWM1_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT56_RESERVED1_SHIFT))

#define  HIPWM1_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT56_BATLAST_SHIFT 19
#define  HIPWM1_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT56_BATLAST_MASK) >> HIPWM1_HBAT56_BATLAST_SHIFT)
#define  HIPWM1_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT56_BATLAST_SHIFT))

#define  HIPWM1_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT56_BATSIGN_MASK) >> HIPWM1_HBAT56_BATSIGN_SHIFT)
#define  HIPWM1_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT56_BATSIGN_SHIFT))

#define  HIPWM1_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT56_BATSHIFT_MASK) >> HIPWM1_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT56_BATFRAC_MASK) >> HIPWM1_HBAT56_BATFRAC_SHIFT)
#define  HIPWM1_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM1_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT57_RESERVED1_MASK) >> HIPWM1_HBAT57_RESERVED1_SHIFT)
#define  HIPWM1_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT57_RESERVED1_SHIFT))

#define  HIPWM1_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT57_BATLAST_SHIFT 19
#define  HIPWM1_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT57_BATLAST_MASK) >> HIPWM1_HBAT57_BATLAST_SHIFT)
#define  HIPWM1_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT57_BATLAST_SHIFT))

#define  HIPWM1_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT57_BATSIGN_MASK) >> HIPWM1_HBAT57_BATSIGN_SHIFT)
#define  HIPWM1_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT57_BATSIGN_SHIFT))

#define  HIPWM1_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT57_BATSHIFT_MASK) >> HIPWM1_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT57_BATFRAC_MASK) >> HIPWM1_HBAT57_BATFRAC_SHIFT)
#define  HIPWM1_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM1_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT58_RESERVED1_MASK) >> HIPWM1_HBAT58_RESERVED1_SHIFT)
#define  HIPWM1_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT58_RESERVED1_SHIFT))

#define  HIPWM1_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT58_BATLAST_SHIFT 19
#define  HIPWM1_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT58_BATLAST_MASK) >> HIPWM1_HBAT58_BATLAST_SHIFT)
#define  HIPWM1_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT58_BATLAST_SHIFT))

#define  HIPWM1_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT58_BATSIGN_MASK) >> HIPWM1_HBAT58_BATSIGN_SHIFT)
#define  HIPWM1_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT58_BATSIGN_SHIFT))

#define  HIPWM1_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT58_BATSHIFT_MASK) >> HIPWM1_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT58_BATFRAC_MASK) >> HIPWM1_HBAT58_BATFRAC_SHIFT)
#define  HIPWM1_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM1_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT59_RESERVED1_MASK) >> HIPWM1_HBAT59_RESERVED1_SHIFT)
#define  HIPWM1_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT59_RESERVED1_SHIFT))

#define  HIPWM1_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT59_BATLAST_SHIFT 19
#define  HIPWM1_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT59_BATLAST_MASK) >> HIPWM1_HBAT59_BATLAST_SHIFT)
#define  HIPWM1_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT59_BATLAST_SHIFT))

#define  HIPWM1_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT59_BATSIGN_MASK) >> HIPWM1_HBAT59_BATSIGN_SHIFT)
#define  HIPWM1_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT59_BATSIGN_SHIFT))

#define  HIPWM1_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT59_BATSHIFT_MASK) >> HIPWM1_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT59_BATFRAC_MASK) >> HIPWM1_HBAT59_BATFRAC_SHIFT)
#define  HIPWM1_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM1_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT60_RESERVED1_MASK) >> HIPWM1_HBAT60_RESERVED1_SHIFT)
#define  HIPWM1_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT60_RESERVED1_SHIFT))

#define  HIPWM1_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT60_BATLAST_SHIFT 19
#define  HIPWM1_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT60_BATLAST_MASK) >> HIPWM1_HBAT60_BATLAST_SHIFT)
#define  HIPWM1_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT60_BATLAST_SHIFT))

#define  HIPWM1_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT60_BATSIGN_MASK) >> HIPWM1_HBAT60_BATSIGN_SHIFT)
#define  HIPWM1_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT60_BATSIGN_SHIFT))

#define  HIPWM1_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT60_BATSHIFT_MASK) >> HIPWM1_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT60_BATFRAC_MASK) >> HIPWM1_HBAT60_BATFRAC_SHIFT)
#define  HIPWM1_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM1_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT61_RESERVED1_MASK) >> HIPWM1_HBAT61_RESERVED1_SHIFT)
#define  HIPWM1_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT61_RESERVED1_SHIFT))

#define  HIPWM1_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT61_BATLAST_SHIFT 19
#define  HIPWM1_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT61_BATLAST_MASK) >> HIPWM1_HBAT61_BATLAST_SHIFT)
#define  HIPWM1_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT61_BATLAST_SHIFT))

#define  HIPWM1_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT61_BATSIGN_MASK) >> HIPWM1_HBAT61_BATSIGN_SHIFT)
#define  HIPWM1_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT61_BATSIGN_SHIFT))

#define  HIPWM1_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT61_BATSHIFT_MASK) >> HIPWM1_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT61_BATFRAC_MASK) >> HIPWM1_HBAT61_BATFRAC_SHIFT)
#define  HIPWM1_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM1_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT62_RESERVED1_MASK) >> HIPWM1_HBAT62_RESERVED1_SHIFT)
#define  HIPWM1_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT62_RESERVED1_SHIFT))

#define  HIPWM1_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT62_BATLAST_SHIFT 19
#define  HIPWM1_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT62_BATLAST_MASK) >> HIPWM1_HBAT62_BATLAST_SHIFT)
#define  HIPWM1_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT62_BATLAST_SHIFT))

#define  HIPWM1_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT62_BATSIGN_MASK) >> HIPWM1_HBAT62_BATSIGN_SHIFT)
#define  HIPWM1_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT62_BATSIGN_SHIFT))

#define  HIPWM1_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT62_BATSHIFT_MASK) >> HIPWM1_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT62_BATFRAC_MASK) >> HIPWM1_HBAT62_BATFRAC_SHIFT)
#define  HIPWM1_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM1_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM1_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM1_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT63_RESERVED1_MASK) >> HIPWM1_HBAT63_RESERVED1_SHIFT)
#define  HIPWM1_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HBAT63_RESERVED1_SHIFT))

#define  HIPWM1_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM1_HBAT63_BATLAST_SHIFT 19
#define  HIPWM1_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT63_BATLAST_MASK) >> HIPWM1_HBAT63_BATLAST_SHIFT)
#define  HIPWM1_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM1_HBAT63_BATLAST_SHIFT))

#define  HIPWM1_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM1_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM1_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT63_BATSIGN_MASK) >> HIPWM1_HBAT63_BATSIGN_SHIFT)
#define  HIPWM1_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM1_HBAT63_BATSIGN_SHIFT))

#define  HIPWM1_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM1_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM1_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT63_BATSHIFT_MASK) >> HIPWM1_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM1_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM1_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM1_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM1_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM1_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM1_HBAT63_BATFRAC_MASK) >> HIPWM1_HBAT63_BATFRAC_SHIFT)
#define  HIPWM1_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM1_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM1_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC0_RESERVED1_MASK) >> HIPWM1_HMIC0_RESERVED1_SHIFT)
#define  HIPWM1_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC0_RESERVED1_SHIFT))

#define  HIPWM1_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC0_MICINTPIX_MASK) >> HIPWM1_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC0_MICFRACPIX_MASK) >> HIPWM1_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM1_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC1_RESERVED1_MASK) >> HIPWM1_HMIC1_RESERVED1_SHIFT)
#define  HIPWM1_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC1_RESERVED1_SHIFT))

#define  HIPWM1_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC1_MICINTPIX_MASK) >> HIPWM1_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC1_MICFRACPIX_MASK) >> HIPWM1_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM1_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC2_RESERVED1_MASK) >> HIPWM1_HMIC2_RESERVED1_SHIFT)
#define  HIPWM1_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC2_RESERVED1_SHIFT))

#define  HIPWM1_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC2_MICINTPIX_MASK) >> HIPWM1_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC2_MICFRACPIX_MASK) >> HIPWM1_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM1_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC3_RESERVED1_MASK) >> HIPWM1_HMIC3_RESERVED1_SHIFT)
#define  HIPWM1_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC3_RESERVED1_SHIFT))

#define  HIPWM1_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC3_MICINTPIX_MASK) >> HIPWM1_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC3_MICFRACPIX_MASK) >> HIPWM1_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM1_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC4_RESERVED1_MASK) >> HIPWM1_HMIC4_RESERVED1_SHIFT)
#define  HIPWM1_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC4_RESERVED1_SHIFT))

#define  HIPWM1_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC4_MICINTPIX_MASK) >> HIPWM1_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC4_MICFRACPIX_MASK) >> HIPWM1_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM1_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC5_RESERVED1_MASK) >> HIPWM1_HMIC5_RESERVED1_SHIFT)
#define  HIPWM1_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC5_RESERVED1_SHIFT))

#define  HIPWM1_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC5_MICINTPIX_MASK) >> HIPWM1_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC5_MICFRACPIX_MASK) >> HIPWM1_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM1_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC6_RESERVED1_MASK) >> HIPWM1_HMIC6_RESERVED1_SHIFT)
#define  HIPWM1_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC6_RESERVED1_SHIFT))

#define  HIPWM1_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC6_MICINTPIX_MASK) >> HIPWM1_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC6_MICFRACPIX_MASK) >> HIPWM1_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM1_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC7_RESERVED1_MASK) >> HIPWM1_HMIC7_RESERVED1_SHIFT)
#define  HIPWM1_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC7_RESERVED1_SHIFT))

#define  HIPWM1_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC7_MICINTPIX_MASK) >> HIPWM1_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC7_MICFRACPIX_MASK) >> HIPWM1_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM1_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC8_RESERVED1_MASK) >> HIPWM1_HMIC8_RESERVED1_SHIFT)
#define  HIPWM1_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC8_RESERVED1_SHIFT))

#define  HIPWM1_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC8_MICINTPIX_MASK) >> HIPWM1_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC8_MICFRACPIX_MASK) >> HIPWM1_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM1_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC9_RESERVED1_MASK) >> HIPWM1_HMIC9_RESERVED1_SHIFT)
#define  HIPWM1_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC9_RESERVED1_SHIFT))

#define  HIPWM1_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC9_MICINTPIX_MASK) >> HIPWM1_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC9_MICFRACPIX_MASK) >> HIPWM1_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM1_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC10_RESERVED1_MASK) >> HIPWM1_HMIC10_RESERVED1_SHIFT)
#define  HIPWM1_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC10_RESERVED1_SHIFT))

#define  HIPWM1_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC10_MICINTPIX_MASK) >> HIPWM1_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC10_MICFRACPIX_MASK) >> HIPWM1_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM1_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM1_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM1_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC11_RESERVED1_MASK) >> HIPWM1_HMIC11_RESERVED1_SHIFT)
#define  HIPWM1_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM1_HMIC11_RESERVED1_SHIFT))

#define  HIPWM1_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM1_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM1_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC11_MICINTPIX_MASK) >> HIPWM1_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM1_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM1_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM1_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM1_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM1_HMIC11_MICFRACPIX_MASK) >> HIPWM1_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM1_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM1_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM1_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 3 of 8) (HiPWM2)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM2_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM2_HCR_RESERVED1_SHIFT 21
#define  HIPWM2_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_RESERVED1_MASK) >> HIPWM2_HCR_RESERVED1_SHIFT)
#define  HIPWM2_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HCR_RESERVED1_SHIFT))

#define  HIPWM2_HCR_EDGESEL_MASK 0x100000
#define  HIPWM2_HCR_EDGESEL_SHIFT 20
#define  HIPWM2_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_EDGESEL_MASK) >> HIPWM2_HCR_EDGESEL_SHIFT)
#define  HIPWM2_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM2_HCR_EDGESEL_SHIFT))

#define  HIPWM2_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM2_HCR_NUMEDGE_SHIFT 19
#define  HIPWM2_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_NUMEDGE_MASK) >> HIPWM2_HCR_NUMEDGE_SHIFT)
#define  HIPWM2_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM2_HCR_NUMEDGE_SHIFT))

#define  HIPWM2_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM2_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM2_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM2_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM2_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM2_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM2_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM2_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM2_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM2_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM2_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM2_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM2_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM2_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM2_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM2_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM2_HCR_NOBATLAST_SHIFT 15
#define  HIPWM2_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_NOBATLAST_MASK) >> HIPWM2_HCR_NOBATLAST_SHIFT)
#define  HIPWM2_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM2_HCR_NOBATLAST_SHIFT))

#define  HIPWM2_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM2_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM2_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_DUALMARGIN_MASK) >> HIPWM2_HCR_DUALMARGIN_SHIFT)
#define  HIPWM2_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM2_HCR_DUALMARGIN_SHIFT))

#define  HIPWM2_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM2_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM2_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_FILTERPULSES_MASK) >> HIPWM2_HCR_FILTERPULSES_SHIFT)
#define  HIPWM2_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM2_HCR_FILTERPULSES_SHIFT))

#define  HIPWM2_HCR_CRCRST_MASK 0x1000
#define  HIPWM2_HCR_CRCRST_SHIFT 12
#define  HIPWM2_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CRCRST_MASK) >> HIPWM2_HCR_CRCRST_SHIFT)
#define  HIPWM2_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM2_HCR_CRCRST_SHIFT))

#define  HIPWM2_HCR_HIPSDIR_MASK 0x800
#define  HIPWM2_HCR_HIPSDIR_SHIFT 11
#define  HIPWM2_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_HIPSDIR_MASK) >> HIPWM2_HCR_HIPSDIR_SHIFT)
#define  HIPWM2_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM2_HCR_HIPSDIR_SHIFT))

#define  HIPWM2_HCR_PTWIDTH_MASK 0x400
#define  HIPWM2_HCR_PTWIDTH_SHIFT 10
#define  HIPWM2_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_PTWIDTH_MASK) >> HIPWM2_HCR_PTWIDTH_SHIFT)
#define  HIPWM2_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM2_HCR_PTWIDTH_SHIFT))

#define  HIPWM2_HCR_TESTMODE_MASK 0x200
#define  HIPWM2_HCR_TESTMODE_SHIFT 9
#define  HIPWM2_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_TESTMODE_MASK) >> HIPWM2_HCR_TESTMODE_SHIFT)
#define  HIPWM2_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM2_HCR_TESTMODE_SHIFT))

#define  HIPWM2_HCR_CHANZERO_MASK 0x100
#define  HIPWM2_HCR_CHANZERO_SHIFT 8
#define  HIPWM2_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CHANZERO_MASK) >> HIPWM2_HCR_CHANZERO_SHIFT)
#define  HIPWM2_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM2_HCR_CHANZERO_SHIFT))

#define  HIPWM2_HCR_INVPT_MASK 0x80
#define  HIPWM2_HCR_INVPT_SHIFT 7
#define  HIPWM2_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_INVPT_MASK) >> HIPWM2_HCR_INVPT_SHIFT)
#define  HIPWM2_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM2_HCR_INVPT_SHIFT))

#define  HIPWM2_HCR_CPUACCESS_MASK 0x40
#define  HIPWM2_HCR_CPUACCESS_SHIFT 6
#define  HIPWM2_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_CPUACCESS_MASK) >> HIPWM2_HCR_CPUACCESS_SHIFT)
#define  HIPWM2_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM2_HCR_CPUACCESS_SHIFT))

#define  HIPWM2_HCR_PECEN_MASK 0x20
#define  HIPWM2_HCR_PECEN_SHIFT 5
#define  HIPWM2_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_PECEN_MASK) >> HIPWM2_HCR_PECEN_SHIFT)
#define  HIPWM2_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_PECEN_SHIFT))

#define  HIPWM2_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM2_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM2_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_PIGTOPHSYNC_MASK) >> HIPWM2_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM2_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM2_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM2_HCR_PIGEN_MASK 0x8
#define  HIPWM2_HCR_PIGEN_SHIFT 3
#define  HIPWM2_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_PIGEN_MASK) >> HIPWM2_HCR_PIGEN_SHIFT)
#define  HIPWM2_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_PIGEN_SHIFT))

#define  HIPWM2_HCR_BENDEREN_MASK 0x4
#define  HIPWM2_HCR_BENDEREN_SHIFT 2
#define  HIPWM2_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_BENDEREN_MASK) >> HIPWM2_HCR_BENDEREN_SHIFT)
#define  HIPWM2_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM2_HCR_BENDEREN_SHIFT))

#define  HIPWM2_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM2_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM2_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_SYNTHHSYNCEN_MASK) >> HIPWM2_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM2_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM2_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM2_HCR_ENABLE_MASK 0x1
#define  HIPWM2_HCR_ENABLE_SHIFT 0
#define  HIPWM2_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM2_HCR_ENABLE_MASK) >> HIPWM2_HCR_ENABLE_SHIFT)
#define  HIPWM2_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM2_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM2_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM2_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM2_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM2_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM2_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM2_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM2_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM2_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM2_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM2_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM2_HSMR_SIDEMARGIN_MASK) >> HIPWM2_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM2_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM2_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM2_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM2_HTSR_RESERVED1_SHIFT 8
#define  HIPWM2_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HTSR_RESERVED1_MASK) >> HIPWM2_HTSR_RESERVED1_SHIFT)
#define  HIPWM2_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HTSR_RESERVED1_SHIFT))

#define  HIPWM2_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM2_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM2_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM2_HTSR_TOPSKEW_MASK) >> HIPWM2_HTSR_TOPSKEW_SHIFT)
#define  HIPWM2_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM2_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM2_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HSR_RESERVED1_SHIFT 12
#define  HIPWM2_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_RESERVED1_MASK) >> HIPWM2_HSR_RESERVED1_SHIFT)
#define  HIPWM2_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HSR_RESERVED1_SHIFT))

#define  HIPWM2_HSR_INDEX_MASK 0xf00
#define  HIPWM2_HSR_INDEX_SHIFT 8
#define  HIPWM2_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_INDEX_MASK) >> HIPWM2_HSR_INDEX_SHIFT)
#define  HIPWM2_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM2_HSR_INDEX_SHIFT))

#define  HIPWM2_HSR_DIRRTOL_MASK 0x80
#define  HIPWM2_HSR_DIRRTOL_SHIFT 7
#define  HIPWM2_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_DIRRTOL_MASK) >> HIPWM2_HSR_DIRRTOL_SHIFT)
#define  HIPWM2_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM2_HSR_DIRRTOL_SHIFT))

#define  HIPWM2_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM2_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM2_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_PAGE_STATE_MASK) >> HIPWM2_HSR_PAGE_STATE_SHIFT)
#define  HIPWM2_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM2_HSR_PAGE_STATE_SHIFT))

#define  HIPWM2_HSR_RESERVED2_MASK 0x8
#define  HIPWM2_HSR_RESERVED2_SHIFT 3
#define  HIPWM2_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_RESERVED2_MASK) >> HIPWM2_HSR_RESERVED2_SHIFT)
#define  HIPWM2_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM2_HSR_RESERVED2_SHIFT))

#define  HIPWM2_HSR_READY_IN_MASK 0x4
#define  HIPWM2_HSR_READY_IN_SHIFT 2
#define  HIPWM2_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_READY_IN_MASK) >> HIPWM2_HSR_READY_IN_SHIFT)
#define  HIPWM2_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM2_HSR_READY_IN_SHIFT))

#define  HIPWM2_HSR_VALID_IN_MASK 0x2
#define  HIPWM2_HSR_VALID_IN_SHIFT 1
#define  HIPWM2_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_VALID_IN_MASK) >> HIPWM2_HSR_VALID_IN_SHIFT)
#define  HIPWM2_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM2_HSR_VALID_IN_SHIFT))

#define  HIPWM2_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM2_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM2_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM2_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM2_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM2_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM2_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM2_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM2_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HSPWR_RESERVED1_MASK) >> HIPWM2_HSPWR_RESERVED1_SHIFT)
#define  HIPWM2_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HSPWR_RESERVED1_SHIFT))

#define  HIPWM2_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM2_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM2_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM2_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM2_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM2_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM2_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM2_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM2_HSQR_RESERVED1_SHIFT 24
#define  HIPWM2_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HSQR_RESERVED1_MASK) >> HIPWM2_HSQR_RESERVED1_SHIFT)
#define  HIPWM2_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HSQR_RESERVED1_SHIFT))

#define  HIPWM2_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM2_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM2_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM2_HSQR_QUIWIDTH_MASK) >> HIPWM2_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM2_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM2_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM2_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM2_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM2_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM2_PRRA_PEC_VALUE_MASK) >> HIPWM2_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM2_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM2_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM2_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM2_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPVR_RESERVED1_MASK) >> HIPWM2_HPPVR_RESERVED1_SHIFT)
#define  HIPWM2_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPPVR_RESERVED1_SHIFT))

#define  HIPWM2_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM2_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM2_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPVR_PIGPTVAL_MASK) >> HIPWM2_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM2_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM2_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM2_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPSR_RESERVED1_SHIFT 16
#define  HIPWM2_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPSR_RESERVED1_MASK) >> HIPWM2_HPSR_RESERVED1_SHIFT)
#define  HIPWM2_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPSR_RESERVED1_SHIFT))

#define  HIPWM2_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM2_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM2_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM2_HPSR_PIGPIXSZ_MASK) >> HIPWM2_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM2_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM2_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM2_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPCR_RESERVED1_SHIFT 16
#define  HIPWM2_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPCR_RESERVED1_MASK) >> HIPWM2_HPCR_RESERVED1_SHIFT)
#define  HIPWM2_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPCR_RESERVED1_SHIFT))

#define  HIPWM2_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM2_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM2_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM2_HPCR_PIGPIXCNT_MASK) >> HIPWM2_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM2_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM2_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM2_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM2_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPSR_RESERVED1_MASK) >> HIPWM2_HPPSR_RESERVED1_SHIFT)
#define  HIPWM2_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPPSR_RESERVED1_SHIFT))

#define  HIPWM2_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM2_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM2_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPSR_PIGPIXSPACE_MASK) >> HIPWM2_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM2_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM2_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM2_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM2_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPLSR_RESERVED1_MASK) >> HIPWM2_HPLSR_RESERVED1_SHIFT)
#define  HIPWM2_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPLSR_RESERVED1_SHIFT))

#define  HIPWM2_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM2_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM2_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM2_HPLSR_PIGLINESPACE_MASK) >> HIPWM2_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM2_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM2_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM2_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM2_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPOER_RESERVED1_MASK) >> HIPWM2_HPPOER_RESERVED1_SHIFT)
#define  HIPWM2_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPPOER_RESERVED1_SHIFT))

#define  HIPWM2_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM2_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM2_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM2_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM2_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM2_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM2_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM2_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPOOR_RESERVED1_MASK) >> HIPWM2_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM2_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM2_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM2_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM2_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM2_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM2_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM2_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM2_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM2_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPLOR_RESERVED1_MASK) >> HIPWM2_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM2_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM2_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM2_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM2_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM2_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM2_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM2_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM2_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM2_HCRC_CRC_MASK 0xffffffff
#define  HIPWM2_HCRC_CRC_SHIFT 0
#define  HIPWM2_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM2_HCRC_CRC_MASK) >> HIPWM2_HCRC_CRC_SHIFT)
#define  HIPWM2_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM2_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM2_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HBCR_RESERVED1_SHIFT 12
#define  HIPWM2_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBCR_RESERVED1_MASK) >> HIPWM2_HBCR_RESERVED1_SHIFT)
#define  HIPWM2_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBCR_RESERVED1_SHIFT))

#define  HIPWM2_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM2_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM2_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM2_HBCR_SAMPLESPERSEG_MASK) >> HIPWM2_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM2_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM2_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM2_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM2_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM2_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HLBDR_RESERVED1_MASK) >> HIPWM2_HLBDR_RESERVED1_SHIFT)
#define  HIPWM2_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HLBDR_RESERVED1_SHIFT))

#define  HIPWM2_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM2_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM2_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM2_HLBDR_LBDRINT_MASK) >> HIPWM2_HLBDR_LBDRINT_SHIFT)
#define  HIPWM2_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM2_HLBDR_LBDRINT_SHIFT))

#define  HIPWM2_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM2_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM2_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HLBDR_LBDRFRAC_MASK) >> HIPWM2_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM2_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM2_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM2_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM2_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM2_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HRBDR_RESERVED1_MASK) >> HIPWM2_HRBDR_RESERVED1_SHIFT)
#define  HIPWM2_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HRBDR_RESERVED1_SHIFT))

#define  HIPWM2_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM2_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM2_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM2_HRBDR_RBDRINT_MASK) >> HIPWM2_HRBDR_RBDRINT_SHIFT)
#define  HIPWM2_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM2_HRBDR_RBDRINT_SHIFT))

#define  HIPWM2_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM2_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM2_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HRBDR_RBDRFRAC_MASK) >> HIPWM2_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM2_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM2_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM2_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM2_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM2_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCR_RESERVED1_MASK) >> HIPWM2_HBNCR_RESERVED1_SHIFT)
#define  HIPWM2_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBNCR_RESERVED1_SHIFT))

#define  HIPWM2_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM2_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM2_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCR_LFSRINITCNTL_MASK) >> HIPWM2_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM2_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM2_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM2_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM2_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM2_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCR_BENDERLFSREN_MASK) >> HIPWM2_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM2_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM2_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM2_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM2_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM2_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM2_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM2_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM2_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM2_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM2_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNINIT_RESERVED1_MASK) >> HIPWM2_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM2_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM2_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM2_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM2_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM2_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM2_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM2_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM2_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM2_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM2_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCV_RESERVED1_MASK) >> HIPWM2_HBNCV_RESERVED1_SHIFT)
#define  HIPWM2_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBNCV_RESERVED1_SHIFT))

#define  HIPWM2_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM2_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM2_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM2_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM2_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM2_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM2_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM2_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT0_RESERVED1_MASK) >> HIPWM2_HBAT0_RESERVED1_SHIFT)
#define  HIPWM2_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT0_RESERVED1_SHIFT))

#define  HIPWM2_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT0_BATLAST_SHIFT 19
#define  HIPWM2_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT0_BATLAST_MASK) >> HIPWM2_HBAT0_BATLAST_SHIFT)
#define  HIPWM2_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT0_BATLAST_SHIFT))

#define  HIPWM2_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT0_BATSIGN_MASK) >> HIPWM2_HBAT0_BATSIGN_SHIFT)
#define  HIPWM2_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT0_BATSIGN_SHIFT))

#define  HIPWM2_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT0_BATSHIFT_MASK) >> HIPWM2_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT0_BATFRAC_MASK) >> HIPWM2_HBAT0_BATFRAC_SHIFT)
#define  HIPWM2_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM2_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT1_RESERVED1_MASK) >> HIPWM2_HBAT1_RESERVED1_SHIFT)
#define  HIPWM2_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT1_RESERVED1_SHIFT))

#define  HIPWM2_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT1_BATLAST_SHIFT 19
#define  HIPWM2_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT1_BATLAST_MASK) >> HIPWM2_HBAT1_BATLAST_SHIFT)
#define  HIPWM2_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT1_BATLAST_SHIFT))

#define  HIPWM2_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT1_BATSIGN_MASK) >> HIPWM2_HBAT1_BATSIGN_SHIFT)
#define  HIPWM2_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT1_BATSIGN_SHIFT))

#define  HIPWM2_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT1_BATSHIFT_MASK) >> HIPWM2_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT1_BATFRAC_MASK) >> HIPWM2_HBAT1_BATFRAC_SHIFT)
#define  HIPWM2_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM2_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT2_RESERVED1_MASK) >> HIPWM2_HBAT2_RESERVED1_SHIFT)
#define  HIPWM2_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT2_RESERVED1_SHIFT))

#define  HIPWM2_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT2_BATLAST_SHIFT 19
#define  HIPWM2_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT2_BATLAST_MASK) >> HIPWM2_HBAT2_BATLAST_SHIFT)
#define  HIPWM2_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT2_BATLAST_SHIFT))

#define  HIPWM2_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT2_BATSIGN_MASK) >> HIPWM2_HBAT2_BATSIGN_SHIFT)
#define  HIPWM2_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT2_BATSIGN_SHIFT))

#define  HIPWM2_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT2_BATSHIFT_MASK) >> HIPWM2_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT2_BATFRAC_MASK) >> HIPWM2_HBAT2_BATFRAC_SHIFT)
#define  HIPWM2_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM2_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT3_RESERVED1_MASK) >> HIPWM2_HBAT3_RESERVED1_SHIFT)
#define  HIPWM2_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT3_RESERVED1_SHIFT))

#define  HIPWM2_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT3_BATLAST_SHIFT 19
#define  HIPWM2_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT3_BATLAST_MASK) >> HIPWM2_HBAT3_BATLAST_SHIFT)
#define  HIPWM2_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT3_BATLAST_SHIFT))

#define  HIPWM2_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT3_BATSIGN_MASK) >> HIPWM2_HBAT3_BATSIGN_SHIFT)
#define  HIPWM2_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT3_BATSIGN_SHIFT))

#define  HIPWM2_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT3_BATSHIFT_MASK) >> HIPWM2_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT3_BATFRAC_MASK) >> HIPWM2_HBAT3_BATFRAC_SHIFT)
#define  HIPWM2_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM2_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT4_RESERVED1_MASK) >> HIPWM2_HBAT4_RESERVED1_SHIFT)
#define  HIPWM2_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT4_RESERVED1_SHIFT))

#define  HIPWM2_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT4_BATLAST_SHIFT 19
#define  HIPWM2_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT4_BATLAST_MASK) >> HIPWM2_HBAT4_BATLAST_SHIFT)
#define  HIPWM2_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT4_BATLAST_SHIFT))

#define  HIPWM2_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT4_BATSIGN_MASK) >> HIPWM2_HBAT4_BATSIGN_SHIFT)
#define  HIPWM2_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT4_BATSIGN_SHIFT))

#define  HIPWM2_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT4_BATSHIFT_MASK) >> HIPWM2_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT4_BATFRAC_MASK) >> HIPWM2_HBAT4_BATFRAC_SHIFT)
#define  HIPWM2_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM2_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT5_RESERVED1_MASK) >> HIPWM2_HBAT5_RESERVED1_SHIFT)
#define  HIPWM2_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT5_RESERVED1_SHIFT))

#define  HIPWM2_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT5_BATLAST_SHIFT 19
#define  HIPWM2_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT5_BATLAST_MASK) >> HIPWM2_HBAT5_BATLAST_SHIFT)
#define  HIPWM2_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT5_BATLAST_SHIFT))

#define  HIPWM2_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT5_BATSIGN_MASK) >> HIPWM2_HBAT5_BATSIGN_SHIFT)
#define  HIPWM2_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT5_BATSIGN_SHIFT))

#define  HIPWM2_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT5_BATSHIFT_MASK) >> HIPWM2_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT5_BATFRAC_MASK) >> HIPWM2_HBAT5_BATFRAC_SHIFT)
#define  HIPWM2_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM2_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT6_RESERVED1_MASK) >> HIPWM2_HBAT6_RESERVED1_SHIFT)
#define  HIPWM2_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT6_RESERVED1_SHIFT))

#define  HIPWM2_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT6_BATLAST_SHIFT 19
#define  HIPWM2_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT6_BATLAST_MASK) >> HIPWM2_HBAT6_BATLAST_SHIFT)
#define  HIPWM2_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT6_BATLAST_SHIFT))

#define  HIPWM2_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT6_BATSIGN_MASK) >> HIPWM2_HBAT6_BATSIGN_SHIFT)
#define  HIPWM2_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT6_BATSIGN_SHIFT))

#define  HIPWM2_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT6_BATSHIFT_MASK) >> HIPWM2_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT6_BATFRAC_MASK) >> HIPWM2_HBAT6_BATFRAC_SHIFT)
#define  HIPWM2_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM2_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT7_RESERVED1_MASK) >> HIPWM2_HBAT7_RESERVED1_SHIFT)
#define  HIPWM2_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT7_RESERVED1_SHIFT))

#define  HIPWM2_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT7_BATLAST_SHIFT 19
#define  HIPWM2_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT7_BATLAST_MASK) >> HIPWM2_HBAT7_BATLAST_SHIFT)
#define  HIPWM2_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT7_BATLAST_SHIFT))

#define  HIPWM2_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT7_BATSIGN_MASK) >> HIPWM2_HBAT7_BATSIGN_SHIFT)
#define  HIPWM2_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT7_BATSIGN_SHIFT))

#define  HIPWM2_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT7_BATSHIFT_MASK) >> HIPWM2_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT7_BATFRAC_MASK) >> HIPWM2_HBAT7_BATFRAC_SHIFT)
#define  HIPWM2_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM2_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT8_RESERVED1_MASK) >> HIPWM2_HBAT8_RESERVED1_SHIFT)
#define  HIPWM2_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT8_RESERVED1_SHIFT))

#define  HIPWM2_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT8_BATLAST_SHIFT 19
#define  HIPWM2_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT8_BATLAST_MASK) >> HIPWM2_HBAT8_BATLAST_SHIFT)
#define  HIPWM2_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT8_BATLAST_SHIFT))

#define  HIPWM2_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT8_BATSIGN_MASK) >> HIPWM2_HBAT8_BATSIGN_SHIFT)
#define  HIPWM2_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT8_BATSIGN_SHIFT))

#define  HIPWM2_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT8_BATSHIFT_MASK) >> HIPWM2_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT8_BATFRAC_MASK) >> HIPWM2_HBAT8_BATFRAC_SHIFT)
#define  HIPWM2_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM2_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT9_RESERVED1_MASK) >> HIPWM2_HBAT9_RESERVED1_SHIFT)
#define  HIPWM2_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT9_RESERVED1_SHIFT))

#define  HIPWM2_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT9_BATLAST_SHIFT 19
#define  HIPWM2_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT9_BATLAST_MASK) >> HIPWM2_HBAT9_BATLAST_SHIFT)
#define  HIPWM2_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT9_BATLAST_SHIFT))

#define  HIPWM2_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT9_BATSIGN_MASK) >> HIPWM2_HBAT9_BATSIGN_SHIFT)
#define  HIPWM2_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT9_BATSIGN_SHIFT))

#define  HIPWM2_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT9_BATSHIFT_MASK) >> HIPWM2_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT9_BATFRAC_MASK) >> HIPWM2_HBAT9_BATFRAC_SHIFT)
#define  HIPWM2_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM2_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT10_RESERVED1_MASK) >> HIPWM2_HBAT10_RESERVED1_SHIFT)
#define  HIPWM2_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT10_RESERVED1_SHIFT))

#define  HIPWM2_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT10_BATLAST_SHIFT 19
#define  HIPWM2_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT10_BATLAST_MASK) >> HIPWM2_HBAT10_BATLAST_SHIFT)
#define  HIPWM2_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT10_BATLAST_SHIFT))

#define  HIPWM2_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT10_BATSIGN_MASK) >> HIPWM2_HBAT10_BATSIGN_SHIFT)
#define  HIPWM2_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT10_BATSIGN_SHIFT))

#define  HIPWM2_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT10_BATSHIFT_MASK) >> HIPWM2_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT10_BATFRAC_MASK) >> HIPWM2_HBAT10_BATFRAC_SHIFT)
#define  HIPWM2_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM2_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT11_RESERVED1_MASK) >> HIPWM2_HBAT11_RESERVED1_SHIFT)
#define  HIPWM2_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT11_RESERVED1_SHIFT))

#define  HIPWM2_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT11_BATLAST_SHIFT 19
#define  HIPWM2_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT11_BATLAST_MASK) >> HIPWM2_HBAT11_BATLAST_SHIFT)
#define  HIPWM2_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT11_BATLAST_SHIFT))

#define  HIPWM2_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT11_BATSIGN_MASK) >> HIPWM2_HBAT11_BATSIGN_SHIFT)
#define  HIPWM2_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT11_BATSIGN_SHIFT))

#define  HIPWM2_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT11_BATSHIFT_MASK) >> HIPWM2_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT11_BATFRAC_MASK) >> HIPWM2_HBAT11_BATFRAC_SHIFT)
#define  HIPWM2_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM2_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT12_RESERVED1_MASK) >> HIPWM2_HBAT12_RESERVED1_SHIFT)
#define  HIPWM2_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT12_RESERVED1_SHIFT))

#define  HIPWM2_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT12_BATLAST_SHIFT 19
#define  HIPWM2_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT12_BATLAST_MASK) >> HIPWM2_HBAT12_BATLAST_SHIFT)
#define  HIPWM2_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT12_BATLAST_SHIFT))

#define  HIPWM2_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT12_BATSIGN_MASK) >> HIPWM2_HBAT12_BATSIGN_SHIFT)
#define  HIPWM2_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT12_BATSIGN_SHIFT))

#define  HIPWM2_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT12_BATSHIFT_MASK) >> HIPWM2_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT12_BATFRAC_MASK) >> HIPWM2_HBAT12_BATFRAC_SHIFT)
#define  HIPWM2_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM2_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT13_RESERVED1_MASK) >> HIPWM2_HBAT13_RESERVED1_SHIFT)
#define  HIPWM2_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT13_RESERVED1_SHIFT))

#define  HIPWM2_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT13_BATLAST_SHIFT 19
#define  HIPWM2_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT13_BATLAST_MASK) >> HIPWM2_HBAT13_BATLAST_SHIFT)
#define  HIPWM2_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT13_BATLAST_SHIFT))

#define  HIPWM2_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT13_BATSIGN_MASK) >> HIPWM2_HBAT13_BATSIGN_SHIFT)
#define  HIPWM2_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT13_BATSIGN_SHIFT))

#define  HIPWM2_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT13_BATSHIFT_MASK) >> HIPWM2_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT13_BATFRAC_MASK) >> HIPWM2_HBAT13_BATFRAC_SHIFT)
#define  HIPWM2_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM2_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT14_RESERVED1_MASK) >> HIPWM2_HBAT14_RESERVED1_SHIFT)
#define  HIPWM2_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT14_RESERVED1_SHIFT))

#define  HIPWM2_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT14_BATLAST_SHIFT 19
#define  HIPWM2_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT14_BATLAST_MASK) >> HIPWM2_HBAT14_BATLAST_SHIFT)
#define  HIPWM2_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT14_BATLAST_SHIFT))

#define  HIPWM2_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT14_BATSIGN_MASK) >> HIPWM2_HBAT14_BATSIGN_SHIFT)
#define  HIPWM2_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT14_BATSIGN_SHIFT))

#define  HIPWM2_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT14_BATSHIFT_MASK) >> HIPWM2_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT14_BATFRAC_MASK) >> HIPWM2_HBAT14_BATFRAC_SHIFT)
#define  HIPWM2_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM2_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT15_RESERVED1_MASK) >> HIPWM2_HBAT15_RESERVED1_SHIFT)
#define  HIPWM2_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT15_RESERVED1_SHIFT))

#define  HIPWM2_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT15_BATLAST_SHIFT 19
#define  HIPWM2_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT15_BATLAST_MASK) >> HIPWM2_HBAT15_BATLAST_SHIFT)
#define  HIPWM2_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT15_BATLAST_SHIFT))

#define  HIPWM2_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT15_BATSIGN_MASK) >> HIPWM2_HBAT15_BATSIGN_SHIFT)
#define  HIPWM2_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT15_BATSIGN_SHIFT))

#define  HIPWM2_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT15_BATSHIFT_MASK) >> HIPWM2_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT15_BATFRAC_MASK) >> HIPWM2_HBAT15_BATFRAC_SHIFT)
#define  HIPWM2_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM2_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT16_RESERVED1_MASK) >> HIPWM2_HBAT16_RESERVED1_SHIFT)
#define  HIPWM2_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT16_RESERVED1_SHIFT))

#define  HIPWM2_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT16_BATLAST_SHIFT 19
#define  HIPWM2_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT16_BATLAST_MASK) >> HIPWM2_HBAT16_BATLAST_SHIFT)
#define  HIPWM2_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT16_BATLAST_SHIFT))

#define  HIPWM2_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT16_BATSIGN_MASK) >> HIPWM2_HBAT16_BATSIGN_SHIFT)
#define  HIPWM2_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT16_BATSIGN_SHIFT))

#define  HIPWM2_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT16_BATSHIFT_MASK) >> HIPWM2_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT16_BATFRAC_MASK) >> HIPWM2_HBAT16_BATFRAC_SHIFT)
#define  HIPWM2_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM2_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT17_RESERVED1_MASK) >> HIPWM2_HBAT17_RESERVED1_SHIFT)
#define  HIPWM2_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT17_RESERVED1_SHIFT))

#define  HIPWM2_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT17_BATLAST_SHIFT 19
#define  HIPWM2_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT17_BATLAST_MASK) >> HIPWM2_HBAT17_BATLAST_SHIFT)
#define  HIPWM2_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT17_BATLAST_SHIFT))

#define  HIPWM2_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT17_BATSIGN_MASK) >> HIPWM2_HBAT17_BATSIGN_SHIFT)
#define  HIPWM2_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT17_BATSIGN_SHIFT))

#define  HIPWM2_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT17_BATSHIFT_MASK) >> HIPWM2_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT17_BATFRAC_MASK) >> HIPWM2_HBAT17_BATFRAC_SHIFT)
#define  HIPWM2_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM2_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT18_RESERVED1_MASK) >> HIPWM2_HBAT18_RESERVED1_SHIFT)
#define  HIPWM2_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT18_RESERVED1_SHIFT))

#define  HIPWM2_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT18_BATLAST_SHIFT 19
#define  HIPWM2_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT18_BATLAST_MASK) >> HIPWM2_HBAT18_BATLAST_SHIFT)
#define  HIPWM2_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT18_BATLAST_SHIFT))

#define  HIPWM2_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT18_BATSIGN_MASK) >> HIPWM2_HBAT18_BATSIGN_SHIFT)
#define  HIPWM2_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT18_BATSIGN_SHIFT))

#define  HIPWM2_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT18_BATSHIFT_MASK) >> HIPWM2_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT18_BATFRAC_MASK) >> HIPWM2_HBAT18_BATFRAC_SHIFT)
#define  HIPWM2_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM2_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT19_RESERVED1_MASK) >> HIPWM2_HBAT19_RESERVED1_SHIFT)
#define  HIPWM2_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT19_RESERVED1_SHIFT))

#define  HIPWM2_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT19_BATLAST_SHIFT 19
#define  HIPWM2_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT19_BATLAST_MASK) >> HIPWM2_HBAT19_BATLAST_SHIFT)
#define  HIPWM2_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT19_BATLAST_SHIFT))

#define  HIPWM2_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT19_BATSIGN_MASK) >> HIPWM2_HBAT19_BATSIGN_SHIFT)
#define  HIPWM2_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT19_BATSIGN_SHIFT))

#define  HIPWM2_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT19_BATSHIFT_MASK) >> HIPWM2_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT19_BATFRAC_MASK) >> HIPWM2_HBAT19_BATFRAC_SHIFT)
#define  HIPWM2_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM2_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT20_RESERVED1_MASK) >> HIPWM2_HBAT20_RESERVED1_SHIFT)
#define  HIPWM2_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT20_RESERVED1_SHIFT))

#define  HIPWM2_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT20_BATLAST_SHIFT 19
#define  HIPWM2_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT20_BATLAST_MASK) >> HIPWM2_HBAT20_BATLAST_SHIFT)
#define  HIPWM2_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT20_BATLAST_SHIFT))

#define  HIPWM2_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT20_BATSIGN_MASK) >> HIPWM2_HBAT20_BATSIGN_SHIFT)
#define  HIPWM2_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT20_BATSIGN_SHIFT))

#define  HIPWM2_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT20_BATSHIFT_MASK) >> HIPWM2_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT20_BATFRAC_MASK) >> HIPWM2_HBAT20_BATFRAC_SHIFT)
#define  HIPWM2_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM2_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT21_RESERVED1_MASK) >> HIPWM2_HBAT21_RESERVED1_SHIFT)
#define  HIPWM2_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT21_RESERVED1_SHIFT))

#define  HIPWM2_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT21_BATLAST_SHIFT 19
#define  HIPWM2_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT21_BATLAST_MASK) >> HIPWM2_HBAT21_BATLAST_SHIFT)
#define  HIPWM2_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT21_BATLAST_SHIFT))

#define  HIPWM2_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT21_BATSIGN_MASK) >> HIPWM2_HBAT21_BATSIGN_SHIFT)
#define  HIPWM2_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT21_BATSIGN_SHIFT))

#define  HIPWM2_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT21_BATSHIFT_MASK) >> HIPWM2_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT21_BATFRAC_MASK) >> HIPWM2_HBAT21_BATFRAC_SHIFT)
#define  HIPWM2_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM2_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT22_RESERVED1_MASK) >> HIPWM2_HBAT22_RESERVED1_SHIFT)
#define  HIPWM2_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT22_RESERVED1_SHIFT))

#define  HIPWM2_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT22_BATLAST_SHIFT 19
#define  HIPWM2_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT22_BATLAST_MASK) >> HIPWM2_HBAT22_BATLAST_SHIFT)
#define  HIPWM2_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT22_BATLAST_SHIFT))

#define  HIPWM2_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT22_BATSIGN_MASK) >> HIPWM2_HBAT22_BATSIGN_SHIFT)
#define  HIPWM2_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT22_BATSIGN_SHIFT))

#define  HIPWM2_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT22_BATSHIFT_MASK) >> HIPWM2_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT22_BATFRAC_MASK) >> HIPWM2_HBAT22_BATFRAC_SHIFT)
#define  HIPWM2_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM2_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT23_RESERVED1_MASK) >> HIPWM2_HBAT23_RESERVED1_SHIFT)
#define  HIPWM2_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT23_RESERVED1_SHIFT))

#define  HIPWM2_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT23_BATLAST_SHIFT 19
#define  HIPWM2_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT23_BATLAST_MASK) >> HIPWM2_HBAT23_BATLAST_SHIFT)
#define  HIPWM2_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT23_BATLAST_SHIFT))

#define  HIPWM2_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT23_BATSIGN_MASK) >> HIPWM2_HBAT23_BATSIGN_SHIFT)
#define  HIPWM2_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT23_BATSIGN_SHIFT))

#define  HIPWM2_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT23_BATSHIFT_MASK) >> HIPWM2_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT23_BATFRAC_MASK) >> HIPWM2_HBAT23_BATFRAC_SHIFT)
#define  HIPWM2_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM2_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT24_RESERVED1_MASK) >> HIPWM2_HBAT24_RESERVED1_SHIFT)
#define  HIPWM2_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT24_RESERVED1_SHIFT))

#define  HIPWM2_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT24_BATLAST_SHIFT 19
#define  HIPWM2_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT24_BATLAST_MASK) >> HIPWM2_HBAT24_BATLAST_SHIFT)
#define  HIPWM2_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT24_BATLAST_SHIFT))

#define  HIPWM2_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT24_BATSIGN_MASK) >> HIPWM2_HBAT24_BATSIGN_SHIFT)
#define  HIPWM2_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT24_BATSIGN_SHIFT))

#define  HIPWM2_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT24_BATSHIFT_MASK) >> HIPWM2_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT24_BATFRAC_MASK) >> HIPWM2_HBAT24_BATFRAC_SHIFT)
#define  HIPWM2_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM2_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT25_RESERVED1_MASK) >> HIPWM2_HBAT25_RESERVED1_SHIFT)
#define  HIPWM2_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT25_RESERVED1_SHIFT))

#define  HIPWM2_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT25_BATLAST_SHIFT 19
#define  HIPWM2_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT25_BATLAST_MASK) >> HIPWM2_HBAT25_BATLAST_SHIFT)
#define  HIPWM2_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT25_BATLAST_SHIFT))

#define  HIPWM2_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT25_BATSIGN_MASK) >> HIPWM2_HBAT25_BATSIGN_SHIFT)
#define  HIPWM2_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT25_BATSIGN_SHIFT))

#define  HIPWM2_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT25_BATSHIFT_MASK) >> HIPWM2_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT25_BATFRAC_MASK) >> HIPWM2_HBAT25_BATFRAC_SHIFT)
#define  HIPWM2_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM2_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT26_RESERVED1_MASK) >> HIPWM2_HBAT26_RESERVED1_SHIFT)
#define  HIPWM2_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT26_RESERVED1_SHIFT))

#define  HIPWM2_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT26_BATLAST_SHIFT 19
#define  HIPWM2_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT26_BATLAST_MASK) >> HIPWM2_HBAT26_BATLAST_SHIFT)
#define  HIPWM2_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT26_BATLAST_SHIFT))

#define  HIPWM2_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT26_BATSIGN_MASK) >> HIPWM2_HBAT26_BATSIGN_SHIFT)
#define  HIPWM2_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT26_BATSIGN_SHIFT))

#define  HIPWM2_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT26_BATSHIFT_MASK) >> HIPWM2_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT26_BATFRAC_MASK) >> HIPWM2_HBAT26_BATFRAC_SHIFT)
#define  HIPWM2_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM2_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT27_RESERVED1_MASK) >> HIPWM2_HBAT27_RESERVED1_SHIFT)
#define  HIPWM2_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT27_RESERVED1_SHIFT))

#define  HIPWM2_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT27_BATLAST_SHIFT 19
#define  HIPWM2_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT27_BATLAST_MASK) >> HIPWM2_HBAT27_BATLAST_SHIFT)
#define  HIPWM2_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT27_BATLAST_SHIFT))

#define  HIPWM2_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT27_BATSIGN_MASK) >> HIPWM2_HBAT27_BATSIGN_SHIFT)
#define  HIPWM2_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT27_BATSIGN_SHIFT))

#define  HIPWM2_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT27_BATSHIFT_MASK) >> HIPWM2_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT27_BATFRAC_MASK) >> HIPWM2_HBAT27_BATFRAC_SHIFT)
#define  HIPWM2_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM2_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT28_RESERVED1_MASK) >> HIPWM2_HBAT28_RESERVED1_SHIFT)
#define  HIPWM2_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT28_RESERVED1_SHIFT))

#define  HIPWM2_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT28_BATLAST_SHIFT 19
#define  HIPWM2_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT28_BATLAST_MASK) >> HIPWM2_HBAT28_BATLAST_SHIFT)
#define  HIPWM2_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT28_BATLAST_SHIFT))

#define  HIPWM2_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT28_BATSIGN_MASK) >> HIPWM2_HBAT28_BATSIGN_SHIFT)
#define  HIPWM2_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT28_BATSIGN_SHIFT))

#define  HIPWM2_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT28_BATSHIFT_MASK) >> HIPWM2_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT28_BATFRAC_MASK) >> HIPWM2_HBAT28_BATFRAC_SHIFT)
#define  HIPWM2_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM2_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT29_RESERVED1_MASK) >> HIPWM2_HBAT29_RESERVED1_SHIFT)
#define  HIPWM2_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT29_RESERVED1_SHIFT))

#define  HIPWM2_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT29_BATLAST_SHIFT 19
#define  HIPWM2_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT29_BATLAST_MASK) >> HIPWM2_HBAT29_BATLAST_SHIFT)
#define  HIPWM2_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT29_BATLAST_SHIFT))

#define  HIPWM2_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT29_BATSIGN_MASK) >> HIPWM2_HBAT29_BATSIGN_SHIFT)
#define  HIPWM2_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT29_BATSIGN_SHIFT))

#define  HIPWM2_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT29_BATSHIFT_MASK) >> HIPWM2_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT29_BATFRAC_MASK) >> HIPWM2_HBAT29_BATFRAC_SHIFT)
#define  HIPWM2_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM2_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT30_RESERVED1_MASK) >> HIPWM2_HBAT30_RESERVED1_SHIFT)
#define  HIPWM2_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT30_RESERVED1_SHIFT))

#define  HIPWM2_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT30_BATLAST_SHIFT 19
#define  HIPWM2_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT30_BATLAST_MASK) >> HIPWM2_HBAT30_BATLAST_SHIFT)
#define  HIPWM2_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT30_BATLAST_SHIFT))

#define  HIPWM2_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT30_BATSIGN_MASK) >> HIPWM2_HBAT30_BATSIGN_SHIFT)
#define  HIPWM2_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT30_BATSIGN_SHIFT))

#define  HIPWM2_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT30_BATSHIFT_MASK) >> HIPWM2_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT30_BATFRAC_MASK) >> HIPWM2_HBAT30_BATFRAC_SHIFT)
#define  HIPWM2_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM2_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT31_RESERVED1_MASK) >> HIPWM2_HBAT31_RESERVED1_SHIFT)
#define  HIPWM2_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT31_RESERVED1_SHIFT))

#define  HIPWM2_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT31_BATLAST_SHIFT 19
#define  HIPWM2_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT31_BATLAST_MASK) >> HIPWM2_HBAT31_BATLAST_SHIFT)
#define  HIPWM2_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT31_BATLAST_SHIFT))

#define  HIPWM2_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT31_BATSIGN_MASK) >> HIPWM2_HBAT31_BATSIGN_SHIFT)
#define  HIPWM2_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT31_BATSIGN_SHIFT))

#define  HIPWM2_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT31_BATSHIFT_MASK) >> HIPWM2_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT31_BATFRAC_MASK) >> HIPWM2_HBAT31_BATFRAC_SHIFT)
#define  HIPWM2_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM2_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT32_RESERVED1_MASK) >> HIPWM2_HBAT32_RESERVED1_SHIFT)
#define  HIPWM2_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT32_RESERVED1_SHIFT))

#define  HIPWM2_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT32_BATLAST_SHIFT 19
#define  HIPWM2_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT32_BATLAST_MASK) >> HIPWM2_HBAT32_BATLAST_SHIFT)
#define  HIPWM2_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT32_BATLAST_SHIFT))

#define  HIPWM2_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT32_BATSIGN_MASK) >> HIPWM2_HBAT32_BATSIGN_SHIFT)
#define  HIPWM2_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT32_BATSIGN_SHIFT))

#define  HIPWM2_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT32_BATSHIFT_MASK) >> HIPWM2_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT32_BATFRAC_MASK) >> HIPWM2_HBAT32_BATFRAC_SHIFT)
#define  HIPWM2_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM2_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT33_RESERVED1_MASK) >> HIPWM2_HBAT33_RESERVED1_SHIFT)
#define  HIPWM2_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT33_RESERVED1_SHIFT))

#define  HIPWM2_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT33_BATLAST_SHIFT 19
#define  HIPWM2_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT33_BATLAST_MASK) >> HIPWM2_HBAT33_BATLAST_SHIFT)
#define  HIPWM2_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT33_BATLAST_SHIFT))

#define  HIPWM2_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT33_BATSIGN_MASK) >> HIPWM2_HBAT33_BATSIGN_SHIFT)
#define  HIPWM2_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT33_BATSIGN_SHIFT))

#define  HIPWM2_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT33_BATSHIFT_MASK) >> HIPWM2_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT33_BATFRAC_MASK) >> HIPWM2_HBAT33_BATFRAC_SHIFT)
#define  HIPWM2_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM2_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT34_RESERVED1_MASK) >> HIPWM2_HBAT34_RESERVED1_SHIFT)
#define  HIPWM2_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT34_RESERVED1_SHIFT))

#define  HIPWM2_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT34_BATLAST_SHIFT 19
#define  HIPWM2_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT34_BATLAST_MASK) >> HIPWM2_HBAT34_BATLAST_SHIFT)
#define  HIPWM2_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT34_BATLAST_SHIFT))

#define  HIPWM2_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT34_BATSIGN_MASK) >> HIPWM2_HBAT34_BATSIGN_SHIFT)
#define  HIPWM2_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT34_BATSIGN_SHIFT))

#define  HIPWM2_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT34_BATSHIFT_MASK) >> HIPWM2_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT34_BATFRAC_MASK) >> HIPWM2_HBAT34_BATFRAC_SHIFT)
#define  HIPWM2_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM2_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT35_RESERVED1_MASK) >> HIPWM2_HBAT35_RESERVED1_SHIFT)
#define  HIPWM2_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT35_RESERVED1_SHIFT))

#define  HIPWM2_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT35_BATLAST_SHIFT 19
#define  HIPWM2_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT35_BATLAST_MASK) >> HIPWM2_HBAT35_BATLAST_SHIFT)
#define  HIPWM2_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT35_BATLAST_SHIFT))

#define  HIPWM2_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT35_BATSIGN_MASK) >> HIPWM2_HBAT35_BATSIGN_SHIFT)
#define  HIPWM2_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT35_BATSIGN_SHIFT))

#define  HIPWM2_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT35_BATSHIFT_MASK) >> HIPWM2_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT35_BATFRAC_MASK) >> HIPWM2_HBAT35_BATFRAC_SHIFT)
#define  HIPWM2_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM2_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT36_RESERVED1_MASK) >> HIPWM2_HBAT36_RESERVED1_SHIFT)
#define  HIPWM2_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT36_RESERVED1_SHIFT))

#define  HIPWM2_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT36_BATLAST_SHIFT 19
#define  HIPWM2_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT36_BATLAST_MASK) >> HIPWM2_HBAT36_BATLAST_SHIFT)
#define  HIPWM2_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT36_BATLAST_SHIFT))

#define  HIPWM2_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT36_BATSIGN_MASK) >> HIPWM2_HBAT36_BATSIGN_SHIFT)
#define  HIPWM2_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT36_BATSIGN_SHIFT))

#define  HIPWM2_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT36_BATSHIFT_MASK) >> HIPWM2_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT36_BATFRAC_MASK) >> HIPWM2_HBAT36_BATFRAC_SHIFT)
#define  HIPWM2_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM2_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT37_RESERVED1_MASK) >> HIPWM2_HBAT37_RESERVED1_SHIFT)
#define  HIPWM2_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT37_RESERVED1_SHIFT))

#define  HIPWM2_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT37_BATLAST_SHIFT 19
#define  HIPWM2_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT37_BATLAST_MASK) >> HIPWM2_HBAT37_BATLAST_SHIFT)
#define  HIPWM2_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT37_BATLAST_SHIFT))

#define  HIPWM2_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT37_BATSIGN_MASK) >> HIPWM2_HBAT37_BATSIGN_SHIFT)
#define  HIPWM2_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT37_BATSIGN_SHIFT))

#define  HIPWM2_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT37_BATSHIFT_MASK) >> HIPWM2_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT37_BATFRAC_MASK) >> HIPWM2_HBAT37_BATFRAC_SHIFT)
#define  HIPWM2_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM2_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT38_RESERVED1_MASK) >> HIPWM2_HBAT38_RESERVED1_SHIFT)
#define  HIPWM2_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT38_RESERVED1_SHIFT))

#define  HIPWM2_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT38_BATLAST_SHIFT 19
#define  HIPWM2_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT38_BATLAST_MASK) >> HIPWM2_HBAT38_BATLAST_SHIFT)
#define  HIPWM2_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT38_BATLAST_SHIFT))

#define  HIPWM2_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT38_BATSIGN_MASK) >> HIPWM2_HBAT38_BATSIGN_SHIFT)
#define  HIPWM2_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT38_BATSIGN_SHIFT))

#define  HIPWM2_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT38_BATSHIFT_MASK) >> HIPWM2_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT38_BATFRAC_MASK) >> HIPWM2_HBAT38_BATFRAC_SHIFT)
#define  HIPWM2_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM2_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT39_RESERVED1_MASK) >> HIPWM2_HBAT39_RESERVED1_SHIFT)
#define  HIPWM2_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT39_RESERVED1_SHIFT))

#define  HIPWM2_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT39_BATLAST_SHIFT 19
#define  HIPWM2_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT39_BATLAST_MASK) >> HIPWM2_HBAT39_BATLAST_SHIFT)
#define  HIPWM2_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT39_BATLAST_SHIFT))

#define  HIPWM2_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT39_BATSIGN_MASK) >> HIPWM2_HBAT39_BATSIGN_SHIFT)
#define  HIPWM2_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT39_BATSIGN_SHIFT))

#define  HIPWM2_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT39_BATSHIFT_MASK) >> HIPWM2_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT39_BATFRAC_MASK) >> HIPWM2_HBAT39_BATFRAC_SHIFT)
#define  HIPWM2_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM2_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT40_RESERVED1_MASK) >> HIPWM2_HBAT40_RESERVED1_SHIFT)
#define  HIPWM2_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT40_RESERVED1_SHIFT))

#define  HIPWM2_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT40_BATLAST_SHIFT 19
#define  HIPWM2_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT40_BATLAST_MASK) >> HIPWM2_HBAT40_BATLAST_SHIFT)
#define  HIPWM2_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT40_BATLAST_SHIFT))

#define  HIPWM2_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT40_BATSIGN_MASK) >> HIPWM2_HBAT40_BATSIGN_SHIFT)
#define  HIPWM2_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT40_BATSIGN_SHIFT))

#define  HIPWM2_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT40_BATSHIFT_MASK) >> HIPWM2_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT40_BATFRAC_MASK) >> HIPWM2_HBAT40_BATFRAC_SHIFT)
#define  HIPWM2_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM2_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT41_RESERVED1_MASK) >> HIPWM2_HBAT41_RESERVED1_SHIFT)
#define  HIPWM2_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT41_RESERVED1_SHIFT))

#define  HIPWM2_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT41_BATLAST_SHIFT 19
#define  HIPWM2_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT41_BATLAST_MASK) >> HIPWM2_HBAT41_BATLAST_SHIFT)
#define  HIPWM2_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT41_BATLAST_SHIFT))

#define  HIPWM2_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT41_BATSIGN_MASK) >> HIPWM2_HBAT41_BATSIGN_SHIFT)
#define  HIPWM2_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT41_BATSIGN_SHIFT))

#define  HIPWM2_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT41_BATSHIFT_MASK) >> HIPWM2_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT41_BATFRAC_MASK) >> HIPWM2_HBAT41_BATFRAC_SHIFT)
#define  HIPWM2_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM2_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT42_RESERVED1_MASK) >> HIPWM2_HBAT42_RESERVED1_SHIFT)
#define  HIPWM2_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT42_RESERVED1_SHIFT))

#define  HIPWM2_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT42_BATLAST_SHIFT 19
#define  HIPWM2_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT42_BATLAST_MASK) >> HIPWM2_HBAT42_BATLAST_SHIFT)
#define  HIPWM2_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT42_BATLAST_SHIFT))

#define  HIPWM2_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT42_BATSIGN_MASK) >> HIPWM2_HBAT42_BATSIGN_SHIFT)
#define  HIPWM2_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT42_BATSIGN_SHIFT))

#define  HIPWM2_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT42_BATSHIFT_MASK) >> HIPWM2_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT42_BATFRAC_MASK) >> HIPWM2_HBAT42_BATFRAC_SHIFT)
#define  HIPWM2_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM2_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT43_RESERVED1_MASK) >> HIPWM2_HBAT43_RESERVED1_SHIFT)
#define  HIPWM2_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT43_RESERVED1_SHIFT))

#define  HIPWM2_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT43_BATLAST_SHIFT 19
#define  HIPWM2_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT43_BATLAST_MASK) >> HIPWM2_HBAT43_BATLAST_SHIFT)
#define  HIPWM2_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT43_BATLAST_SHIFT))

#define  HIPWM2_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT43_BATSIGN_MASK) >> HIPWM2_HBAT43_BATSIGN_SHIFT)
#define  HIPWM2_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT43_BATSIGN_SHIFT))

#define  HIPWM2_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT43_BATSHIFT_MASK) >> HIPWM2_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT43_BATFRAC_MASK) >> HIPWM2_HBAT43_BATFRAC_SHIFT)
#define  HIPWM2_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM2_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT44_RESERVED1_MASK) >> HIPWM2_HBAT44_RESERVED1_SHIFT)
#define  HIPWM2_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT44_RESERVED1_SHIFT))

#define  HIPWM2_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT44_BATLAST_SHIFT 19
#define  HIPWM2_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT44_BATLAST_MASK) >> HIPWM2_HBAT44_BATLAST_SHIFT)
#define  HIPWM2_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT44_BATLAST_SHIFT))

#define  HIPWM2_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT44_BATSIGN_MASK) >> HIPWM2_HBAT44_BATSIGN_SHIFT)
#define  HIPWM2_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT44_BATSIGN_SHIFT))

#define  HIPWM2_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT44_BATSHIFT_MASK) >> HIPWM2_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT44_BATFRAC_MASK) >> HIPWM2_HBAT44_BATFRAC_SHIFT)
#define  HIPWM2_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM2_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT45_RESERVED1_MASK) >> HIPWM2_HBAT45_RESERVED1_SHIFT)
#define  HIPWM2_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT45_RESERVED1_SHIFT))

#define  HIPWM2_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT45_BATLAST_SHIFT 19
#define  HIPWM2_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT45_BATLAST_MASK) >> HIPWM2_HBAT45_BATLAST_SHIFT)
#define  HIPWM2_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT45_BATLAST_SHIFT))

#define  HIPWM2_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT45_BATSIGN_MASK) >> HIPWM2_HBAT45_BATSIGN_SHIFT)
#define  HIPWM2_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT45_BATSIGN_SHIFT))

#define  HIPWM2_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT45_BATSHIFT_MASK) >> HIPWM2_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT45_BATFRAC_MASK) >> HIPWM2_HBAT45_BATFRAC_SHIFT)
#define  HIPWM2_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM2_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT46_RESERVED1_MASK) >> HIPWM2_HBAT46_RESERVED1_SHIFT)
#define  HIPWM2_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT46_RESERVED1_SHIFT))

#define  HIPWM2_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT46_BATLAST_SHIFT 19
#define  HIPWM2_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT46_BATLAST_MASK) >> HIPWM2_HBAT46_BATLAST_SHIFT)
#define  HIPWM2_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT46_BATLAST_SHIFT))

#define  HIPWM2_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT46_BATSIGN_MASK) >> HIPWM2_HBAT46_BATSIGN_SHIFT)
#define  HIPWM2_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT46_BATSIGN_SHIFT))

#define  HIPWM2_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT46_BATSHIFT_MASK) >> HIPWM2_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT46_BATFRAC_MASK) >> HIPWM2_HBAT46_BATFRAC_SHIFT)
#define  HIPWM2_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM2_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT47_RESERVED1_MASK) >> HIPWM2_HBAT47_RESERVED1_SHIFT)
#define  HIPWM2_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT47_RESERVED1_SHIFT))

#define  HIPWM2_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT47_BATLAST_SHIFT 19
#define  HIPWM2_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT47_BATLAST_MASK) >> HIPWM2_HBAT47_BATLAST_SHIFT)
#define  HIPWM2_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT47_BATLAST_SHIFT))

#define  HIPWM2_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT47_BATSIGN_MASK) >> HIPWM2_HBAT47_BATSIGN_SHIFT)
#define  HIPWM2_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT47_BATSIGN_SHIFT))

#define  HIPWM2_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT47_BATSHIFT_MASK) >> HIPWM2_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT47_BATFRAC_MASK) >> HIPWM2_HBAT47_BATFRAC_SHIFT)
#define  HIPWM2_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM2_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT48_RESERVED1_MASK) >> HIPWM2_HBAT48_RESERVED1_SHIFT)
#define  HIPWM2_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT48_RESERVED1_SHIFT))

#define  HIPWM2_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT48_BATLAST_SHIFT 19
#define  HIPWM2_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT48_BATLAST_MASK) >> HIPWM2_HBAT48_BATLAST_SHIFT)
#define  HIPWM2_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT48_BATLAST_SHIFT))

#define  HIPWM2_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT48_BATSIGN_MASK) >> HIPWM2_HBAT48_BATSIGN_SHIFT)
#define  HIPWM2_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT48_BATSIGN_SHIFT))

#define  HIPWM2_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT48_BATSHIFT_MASK) >> HIPWM2_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT48_BATFRAC_MASK) >> HIPWM2_HBAT48_BATFRAC_SHIFT)
#define  HIPWM2_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM2_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT49_RESERVED1_MASK) >> HIPWM2_HBAT49_RESERVED1_SHIFT)
#define  HIPWM2_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT49_RESERVED1_SHIFT))

#define  HIPWM2_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT49_BATLAST_SHIFT 19
#define  HIPWM2_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT49_BATLAST_MASK) >> HIPWM2_HBAT49_BATLAST_SHIFT)
#define  HIPWM2_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT49_BATLAST_SHIFT))

#define  HIPWM2_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT49_BATSIGN_MASK) >> HIPWM2_HBAT49_BATSIGN_SHIFT)
#define  HIPWM2_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT49_BATSIGN_SHIFT))

#define  HIPWM2_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT49_BATSHIFT_MASK) >> HIPWM2_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT49_BATFRAC_MASK) >> HIPWM2_HBAT49_BATFRAC_SHIFT)
#define  HIPWM2_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM2_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT50_RESERVED1_MASK) >> HIPWM2_HBAT50_RESERVED1_SHIFT)
#define  HIPWM2_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT50_RESERVED1_SHIFT))

#define  HIPWM2_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT50_BATLAST_SHIFT 19
#define  HIPWM2_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT50_BATLAST_MASK) >> HIPWM2_HBAT50_BATLAST_SHIFT)
#define  HIPWM2_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT50_BATLAST_SHIFT))

#define  HIPWM2_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT50_BATSIGN_MASK) >> HIPWM2_HBAT50_BATSIGN_SHIFT)
#define  HIPWM2_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT50_BATSIGN_SHIFT))

#define  HIPWM2_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT50_BATSHIFT_MASK) >> HIPWM2_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT50_BATFRAC_MASK) >> HIPWM2_HBAT50_BATFRAC_SHIFT)
#define  HIPWM2_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM2_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT51_RESERVED1_MASK) >> HIPWM2_HBAT51_RESERVED1_SHIFT)
#define  HIPWM2_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT51_RESERVED1_SHIFT))

#define  HIPWM2_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT51_BATLAST_SHIFT 19
#define  HIPWM2_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT51_BATLAST_MASK) >> HIPWM2_HBAT51_BATLAST_SHIFT)
#define  HIPWM2_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT51_BATLAST_SHIFT))

#define  HIPWM2_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT51_BATSIGN_MASK) >> HIPWM2_HBAT51_BATSIGN_SHIFT)
#define  HIPWM2_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT51_BATSIGN_SHIFT))

#define  HIPWM2_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT51_BATSHIFT_MASK) >> HIPWM2_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT51_BATFRAC_MASK) >> HIPWM2_HBAT51_BATFRAC_SHIFT)
#define  HIPWM2_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM2_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT52_RESERVED1_MASK) >> HIPWM2_HBAT52_RESERVED1_SHIFT)
#define  HIPWM2_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT52_RESERVED1_SHIFT))

#define  HIPWM2_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT52_BATLAST_SHIFT 19
#define  HIPWM2_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT52_BATLAST_MASK) >> HIPWM2_HBAT52_BATLAST_SHIFT)
#define  HIPWM2_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT52_BATLAST_SHIFT))

#define  HIPWM2_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT52_BATSIGN_MASK) >> HIPWM2_HBAT52_BATSIGN_SHIFT)
#define  HIPWM2_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT52_BATSIGN_SHIFT))

#define  HIPWM2_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT52_BATSHIFT_MASK) >> HIPWM2_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT52_BATFRAC_MASK) >> HIPWM2_HBAT52_BATFRAC_SHIFT)
#define  HIPWM2_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM2_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT53_RESERVED1_MASK) >> HIPWM2_HBAT53_RESERVED1_SHIFT)
#define  HIPWM2_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT53_RESERVED1_SHIFT))

#define  HIPWM2_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT53_BATLAST_SHIFT 19
#define  HIPWM2_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT53_BATLAST_MASK) >> HIPWM2_HBAT53_BATLAST_SHIFT)
#define  HIPWM2_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT53_BATLAST_SHIFT))

#define  HIPWM2_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT53_BATSIGN_MASK) >> HIPWM2_HBAT53_BATSIGN_SHIFT)
#define  HIPWM2_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT53_BATSIGN_SHIFT))

#define  HIPWM2_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT53_BATSHIFT_MASK) >> HIPWM2_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT53_BATFRAC_MASK) >> HIPWM2_HBAT53_BATFRAC_SHIFT)
#define  HIPWM2_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM2_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT54_RESERVED1_MASK) >> HIPWM2_HBAT54_RESERVED1_SHIFT)
#define  HIPWM2_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT54_RESERVED1_SHIFT))

#define  HIPWM2_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT54_BATLAST_SHIFT 19
#define  HIPWM2_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT54_BATLAST_MASK) >> HIPWM2_HBAT54_BATLAST_SHIFT)
#define  HIPWM2_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT54_BATLAST_SHIFT))

#define  HIPWM2_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT54_BATSIGN_MASK) >> HIPWM2_HBAT54_BATSIGN_SHIFT)
#define  HIPWM2_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT54_BATSIGN_SHIFT))

#define  HIPWM2_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT54_BATSHIFT_MASK) >> HIPWM2_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT54_BATFRAC_MASK) >> HIPWM2_HBAT54_BATFRAC_SHIFT)
#define  HIPWM2_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM2_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT55_RESERVED1_MASK) >> HIPWM2_HBAT55_RESERVED1_SHIFT)
#define  HIPWM2_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT55_RESERVED1_SHIFT))

#define  HIPWM2_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT55_BATLAST_SHIFT 19
#define  HIPWM2_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT55_BATLAST_MASK) >> HIPWM2_HBAT55_BATLAST_SHIFT)
#define  HIPWM2_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT55_BATLAST_SHIFT))

#define  HIPWM2_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT55_BATSIGN_MASK) >> HIPWM2_HBAT55_BATSIGN_SHIFT)
#define  HIPWM2_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT55_BATSIGN_SHIFT))

#define  HIPWM2_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT55_BATSHIFT_MASK) >> HIPWM2_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT55_BATFRAC_MASK) >> HIPWM2_HBAT55_BATFRAC_SHIFT)
#define  HIPWM2_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM2_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT56_RESERVED1_MASK) >> HIPWM2_HBAT56_RESERVED1_SHIFT)
#define  HIPWM2_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT56_RESERVED1_SHIFT))

#define  HIPWM2_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT56_BATLAST_SHIFT 19
#define  HIPWM2_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT56_BATLAST_MASK) >> HIPWM2_HBAT56_BATLAST_SHIFT)
#define  HIPWM2_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT56_BATLAST_SHIFT))

#define  HIPWM2_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT56_BATSIGN_MASK) >> HIPWM2_HBAT56_BATSIGN_SHIFT)
#define  HIPWM2_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT56_BATSIGN_SHIFT))

#define  HIPWM2_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT56_BATSHIFT_MASK) >> HIPWM2_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT56_BATFRAC_MASK) >> HIPWM2_HBAT56_BATFRAC_SHIFT)
#define  HIPWM2_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM2_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT57_RESERVED1_MASK) >> HIPWM2_HBAT57_RESERVED1_SHIFT)
#define  HIPWM2_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT57_RESERVED1_SHIFT))

#define  HIPWM2_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT57_BATLAST_SHIFT 19
#define  HIPWM2_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT57_BATLAST_MASK) >> HIPWM2_HBAT57_BATLAST_SHIFT)
#define  HIPWM2_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT57_BATLAST_SHIFT))

#define  HIPWM2_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT57_BATSIGN_MASK) >> HIPWM2_HBAT57_BATSIGN_SHIFT)
#define  HIPWM2_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT57_BATSIGN_SHIFT))

#define  HIPWM2_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT57_BATSHIFT_MASK) >> HIPWM2_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT57_BATFRAC_MASK) >> HIPWM2_HBAT57_BATFRAC_SHIFT)
#define  HIPWM2_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM2_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT58_RESERVED1_MASK) >> HIPWM2_HBAT58_RESERVED1_SHIFT)
#define  HIPWM2_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT58_RESERVED1_SHIFT))

#define  HIPWM2_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT58_BATLAST_SHIFT 19
#define  HIPWM2_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT58_BATLAST_MASK) >> HIPWM2_HBAT58_BATLAST_SHIFT)
#define  HIPWM2_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT58_BATLAST_SHIFT))

#define  HIPWM2_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT58_BATSIGN_MASK) >> HIPWM2_HBAT58_BATSIGN_SHIFT)
#define  HIPWM2_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT58_BATSIGN_SHIFT))

#define  HIPWM2_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT58_BATSHIFT_MASK) >> HIPWM2_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT58_BATFRAC_MASK) >> HIPWM2_HBAT58_BATFRAC_SHIFT)
#define  HIPWM2_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM2_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT59_RESERVED1_MASK) >> HIPWM2_HBAT59_RESERVED1_SHIFT)
#define  HIPWM2_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT59_RESERVED1_SHIFT))

#define  HIPWM2_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT59_BATLAST_SHIFT 19
#define  HIPWM2_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT59_BATLAST_MASK) >> HIPWM2_HBAT59_BATLAST_SHIFT)
#define  HIPWM2_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT59_BATLAST_SHIFT))

#define  HIPWM2_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT59_BATSIGN_MASK) >> HIPWM2_HBAT59_BATSIGN_SHIFT)
#define  HIPWM2_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT59_BATSIGN_SHIFT))

#define  HIPWM2_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT59_BATSHIFT_MASK) >> HIPWM2_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT59_BATFRAC_MASK) >> HIPWM2_HBAT59_BATFRAC_SHIFT)
#define  HIPWM2_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM2_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT60_RESERVED1_MASK) >> HIPWM2_HBAT60_RESERVED1_SHIFT)
#define  HIPWM2_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT60_RESERVED1_SHIFT))

#define  HIPWM2_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT60_BATLAST_SHIFT 19
#define  HIPWM2_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT60_BATLAST_MASK) >> HIPWM2_HBAT60_BATLAST_SHIFT)
#define  HIPWM2_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT60_BATLAST_SHIFT))

#define  HIPWM2_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT60_BATSIGN_MASK) >> HIPWM2_HBAT60_BATSIGN_SHIFT)
#define  HIPWM2_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT60_BATSIGN_SHIFT))

#define  HIPWM2_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT60_BATSHIFT_MASK) >> HIPWM2_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT60_BATFRAC_MASK) >> HIPWM2_HBAT60_BATFRAC_SHIFT)
#define  HIPWM2_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM2_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT61_RESERVED1_MASK) >> HIPWM2_HBAT61_RESERVED1_SHIFT)
#define  HIPWM2_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT61_RESERVED1_SHIFT))

#define  HIPWM2_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT61_BATLAST_SHIFT 19
#define  HIPWM2_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT61_BATLAST_MASK) >> HIPWM2_HBAT61_BATLAST_SHIFT)
#define  HIPWM2_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT61_BATLAST_SHIFT))

#define  HIPWM2_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT61_BATSIGN_MASK) >> HIPWM2_HBAT61_BATSIGN_SHIFT)
#define  HIPWM2_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT61_BATSIGN_SHIFT))

#define  HIPWM2_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT61_BATSHIFT_MASK) >> HIPWM2_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT61_BATFRAC_MASK) >> HIPWM2_HBAT61_BATFRAC_SHIFT)
#define  HIPWM2_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM2_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT62_RESERVED1_MASK) >> HIPWM2_HBAT62_RESERVED1_SHIFT)
#define  HIPWM2_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT62_RESERVED1_SHIFT))

#define  HIPWM2_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT62_BATLAST_SHIFT 19
#define  HIPWM2_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT62_BATLAST_MASK) >> HIPWM2_HBAT62_BATLAST_SHIFT)
#define  HIPWM2_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT62_BATLAST_SHIFT))

#define  HIPWM2_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT62_BATSIGN_MASK) >> HIPWM2_HBAT62_BATSIGN_SHIFT)
#define  HIPWM2_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT62_BATSIGN_SHIFT))

#define  HIPWM2_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT62_BATSHIFT_MASK) >> HIPWM2_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT62_BATFRAC_MASK) >> HIPWM2_HBAT62_BATFRAC_SHIFT)
#define  HIPWM2_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM2_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM2_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM2_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT63_RESERVED1_MASK) >> HIPWM2_HBAT63_RESERVED1_SHIFT)
#define  HIPWM2_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HBAT63_RESERVED1_SHIFT))

#define  HIPWM2_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM2_HBAT63_BATLAST_SHIFT 19
#define  HIPWM2_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT63_BATLAST_MASK) >> HIPWM2_HBAT63_BATLAST_SHIFT)
#define  HIPWM2_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM2_HBAT63_BATLAST_SHIFT))

#define  HIPWM2_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM2_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM2_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT63_BATSIGN_MASK) >> HIPWM2_HBAT63_BATSIGN_SHIFT)
#define  HIPWM2_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM2_HBAT63_BATSIGN_SHIFT))

#define  HIPWM2_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM2_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM2_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT63_BATSHIFT_MASK) >> HIPWM2_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM2_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM2_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM2_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM2_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM2_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM2_HBAT63_BATFRAC_MASK) >> HIPWM2_HBAT63_BATFRAC_SHIFT)
#define  HIPWM2_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM2_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM2_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC0_RESERVED1_MASK) >> HIPWM2_HMIC0_RESERVED1_SHIFT)
#define  HIPWM2_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC0_RESERVED1_SHIFT))

#define  HIPWM2_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC0_MICINTPIX_MASK) >> HIPWM2_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC0_MICFRACPIX_MASK) >> HIPWM2_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM2_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC1_RESERVED1_MASK) >> HIPWM2_HMIC1_RESERVED1_SHIFT)
#define  HIPWM2_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC1_RESERVED1_SHIFT))

#define  HIPWM2_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC1_MICINTPIX_MASK) >> HIPWM2_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC1_MICFRACPIX_MASK) >> HIPWM2_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM2_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC2_RESERVED1_MASK) >> HIPWM2_HMIC2_RESERVED1_SHIFT)
#define  HIPWM2_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC2_RESERVED1_SHIFT))

#define  HIPWM2_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC2_MICINTPIX_MASK) >> HIPWM2_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC2_MICFRACPIX_MASK) >> HIPWM2_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM2_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC3_RESERVED1_MASK) >> HIPWM2_HMIC3_RESERVED1_SHIFT)
#define  HIPWM2_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC3_RESERVED1_SHIFT))

#define  HIPWM2_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC3_MICINTPIX_MASK) >> HIPWM2_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC3_MICFRACPIX_MASK) >> HIPWM2_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM2_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC4_RESERVED1_MASK) >> HIPWM2_HMIC4_RESERVED1_SHIFT)
#define  HIPWM2_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC4_RESERVED1_SHIFT))

#define  HIPWM2_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC4_MICINTPIX_MASK) >> HIPWM2_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC4_MICFRACPIX_MASK) >> HIPWM2_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM2_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC5_RESERVED1_MASK) >> HIPWM2_HMIC5_RESERVED1_SHIFT)
#define  HIPWM2_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC5_RESERVED1_SHIFT))

#define  HIPWM2_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC5_MICINTPIX_MASK) >> HIPWM2_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC5_MICFRACPIX_MASK) >> HIPWM2_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM2_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC6_RESERVED1_MASK) >> HIPWM2_HMIC6_RESERVED1_SHIFT)
#define  HIPWM2_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC6_RESERVED1_SHIFT))

#define  HIPWM2_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC6_MICINTPIX_MASK) >> HIPWM2_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC6_MICFRACPIX_MASK) >> HIPWM2_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM2_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC7_RESERVED1_MASK) >> HIPWM2_HMIC7_RESERVED1_SHIFT)
#define  HIPWM2_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC7_RESERVED1_SHIFT))

#define  HIPWM2_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC7_MICINTPIX_MASK) >> HIPWM2_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC7_MICFRACPIX_MASK) >> HIPWM2_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM2_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC8_RESERVED1_MASK) >> HIPWM2_HMIC8_RESERVED1_SHIFT)
#define  HIPWM2_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC8_RESERVED1_SHIFT))

#define  HIPWM2_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC8_MICINTPIX_MASK) >> HIPWM2_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC8_MICFRACPIX_MASK) >> HIPWM2_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM2_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC9_RESERVED1_MASK) >> HIPWM2_HMIC9_RESERVED1_SHIFT)
#define  HIPWM2_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC9_RESERVED1_SHIFT))

#define  HIPWM2_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC9_MICINTPIX_MASK) >> HIPWM2_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC9_MICFRACPIX_MASK) >> HIPWM2_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM2_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC10_RESERVED1_MASK) >> HIPWM2_HMIC10_RESERVED1_SHIFT)
#define  HIPWM2_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC10_RESERVED1_SHIFT))

#define  HIPWM2_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC10_MICINTPIX_MASK) >> HIPWM2_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC10_MICFRACPIX_MASK) >> HIPWM2_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM2_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM2_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM2_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC11_RESERVED1_MASK) >> HIPWM2_HMIC11_RESERVED1_SHIFT)
#define  HIPWM2_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM2_HMIC11_RESERVED1_SHIFT))

#define  HIPWM2_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM2_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM2_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC11_MICINTPIX_MASK) >> HIPWM2_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM2_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM2_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM2_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM2_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM2_HMIC11_MICFRACPIX_MASK) >> HIPWM2_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM2_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM2_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM2_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 4 of 8) (HiPWM3)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM3_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM3_HCR_RESERVED1_SHIFT 21
#define  HIPWM3_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_RESERVED1_MASK) >> HIPWM3_HCR_RESERVED1_SHIFT)
#define  HIPWM3_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HCR_RESERVED1_SHIFT))

#define  HIPWM3_HCR_EDGESEL_MASK 0x100000
#define  HIPWM3_HCR_EDGESEL_SHIFT 20
#define  HIPWM3_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_EDGESEL_MASK) >> HIPWM3_HCR_EDGESEL_SHIFT)
#define  HIPWM3_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM3_HCR_EDGESEL_SHIFT))

#define  HIPWM3_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM3_HCR_NUMEDGE_SHIFT 19
#define  HIPWM3_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_NUMEDGE_MASK) >> HIPWM3_HCR_NUMEDGE_SHIFT)
#define  HIPWM3_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM3_HCR_NUMEDGE_SHIFT))

#define  HIPWM3_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM3_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM3_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM3_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM3_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM3_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM3_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM3_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM3_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM3_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM3_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM3_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM3_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM3_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM3_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM3_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM3_HCR_NOBATLAST_SHIFT 15
#define  HIPWM3_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_NOBATLAST_MASK) >> HIPWM3_HCR_NOBATLAST_SHIFT)
#define  HIPWM3_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM3_HCR_NOBATLAST_SHIFT))

#define  HIPWM3_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM3_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM3_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_DUALMARGIN_MASK) >> HIPWM3_HCR_DUALMARGIN_SHIFT)
#define  HIPWM3_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM3_HCR_DUALMARGIN_SHIFT))

#define  HIPWM3_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM3_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM3_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_FILTERPULSES_MASK) >> HIPWM3_HCR_FILTERPULSES_SHIFT)
#define  HIPWM3_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM3_HCR_FILTERPULSES_SHIFT))

#define  HIPWM3_HCR_CRCRST_MASK 0x1000
#define  HIPWM3_HCR_CRCRST_SHIFT 12
#define  HIPWM3_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CRCRST_MASK) >> HIPWM3_HCR_CRCRST_SHIFT)
#define  HIPWM3_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM3_HCR_CRCRST_SHIFT))

#define  HIPWM3_HCR_HIPSDIR_MASK 0x800
#define  HIPWM3_HCR_HIPSDIR_SHIFT 11
#define  HIPWM3_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_HIPSDIR_MASK) >> HIPWM3_HCR_HIPSDIR_SHIFT)
#define  HIPWM3_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM3_HCR_HIPSDIR_SHIFT))

#define  HIPWM3_HCR_PTWIDTH_MASK 0x400
#define  HIPWM3_HCR_PTWIDTH_SHIFT 10
#define  HIPWM3_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_PTWIDTH_MASK) >> HIPWM3_HCR_PTWIDTH_SHIFT)
#define  HIPWM3_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM3_HCR_PTWIDTH_SHIFT))

#define  HIPWM3_HCR_TESTMODE_MASK 0x200
#define  HIPWM3_HCR_TESTMODE_SHIFT 9
#define  HIPWM3_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_TESTMODE_MASK) >> HIPWM3_HCR_TESTMODE_SHIFT)
#define  HIPWM3_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM3_HCR_TESTMODE_SHIFT))

#define  HIPWM3_HCR_CHANZERO_MASK 0x100
#define  HIPWM3_HCR_CHANZERO_SHIFT 8
#define  HIPWM3_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CHANZERO_MASK) >> HIPWM3_HCR_CHANZERO_SHIFT)
#define  HIPWM3_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM3_HCR_CHANZERO_SHIFT))

#define  HIPWM3_HCR_INVPT_MASK 0x80
#define  HIPWM3_HCR_INVPT_SHIFT 7
#define  HIPWM3_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_INVPT_MASK) >> HIPWM3_HCR_INVPT_SHIFT)
#define  HIPWM3_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM3_HCR_INVPT_SHIFT))

#define  HIPWM3_HCR_CPUACCESS_MASK 0x40
#define  HIPWM3_HCR_CPUACCESS_SHIFT 6
#define  HIPWM3_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_CPUACCESS_MASK) >> HIPWM3_HCR_CPUACCESS_SHIFT)
#define  HIPWM3_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM3_HCR_CPUACCESS_SHIFT))

#define  HIPWM3_HCR_PECEN_MASK 0x20
#define  HIPWM3_HCR_PECEN_SHIFT 5
#define  HIPWM3_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_PECEN_MASK) >> HIPWM3_HCR_PECEN_SHIFT)
#define  HIPWM3_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_PECEN_SHIFT))

#define  HIPWM3_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM3_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM3_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_PIGTOPHSYNC_MASK) >> HIPWM3_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM3_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM3_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM3_HCR_PIGEN_MASK 0x8
#define  HIPWM3_HCR_PIGEN_SHIFT 3
#define  HIPWM3_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_PIGEN_MASK) >> HIPWM3_HCR_PIGEN_SHIFT)
#define  HIPWM3_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_PIGEN_SHIFT))

#define  HIPWM3_HCR_BENDEREN_MASK 0x4
#define  HIPWM3_HCR_BENDEREN_SHIFT 2
#define  HIPWM3_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_BENDEREN_MASK) >> HIPWM3_HCR_BENDEREN_SHIFT)
#define  HIPWM3_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM3_HCR_BENDEREN_SHIFT))

#define  HIPWM3_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM3_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM3_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_SYNTHHSYNCEN_MASK) >> HIPWM3_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM3_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM3_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM3_HCR_ENABLE_MASK 0x1
#define  HIPWM3_HCR_ENABLE_SHIFT 0
#define  HIPWM3_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM3_HCR_ENABLE_MASK) >> HIPWM3_HCR_ENABLE_SHIFT)
#define  HIPWM3_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM3_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM3_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM3_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM3_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM3_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM3_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM3_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM3_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM3_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM3_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM3_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM3_HSMR_SIDEMARGIN_MASK) >> HIPWM3_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM3_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM3_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM3_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM3_HTSR_RESERVED1_SHIFT 8
#define  HIPWM3_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HTSR_RESERVED1_MASK) >> HIPWM3_HTSR_RESERVED1_SHIFT)
#define  HIPWM3_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HTSR_RESERVED1_SHIFT))

#define  HIPWM3_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM3_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM3_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM3_HTSR_TOPSKEW_MASK) >> HIPWM3_HTSR_TOPSKEW_SHIFT)
#define  HIPWM3_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM3_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM3_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HSR_RESERVED1_SHIFT 12
#define  HIPWM3_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_RESERVED1_MASK) >> HIPWM3_HSR_RESERVED1_SHIFT)
#define  HIPWM3_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HSR_RESERVED1_SHIFT))

#define  HIPWM3_HSR_INDEX_MASK 0xf00
#define  HIPWM3_HSR_INDEX_SHIFT 8
#define  HIPWM3_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_INDEX_MASK) >> HIPWM3_HSR_INDEX_SHIFT)
#define  HIPWM3_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM3_HSR_INDEX_SHIFT))

#define  HIPWM3_HSR_DIRRTOL_MASK 0x80
#define  HIPWM3_HSR_DIRRTOL_SHIFT 7
#define  HIPWM3_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_DIRRTOL_MASK) >> HIPWM3_HSR_DIRRTOL_SHIFT)
#define  HIPWM3_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM3_HSR_DIRRTOL_SHIFT))

#define  HIPWM3_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM3_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM3_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_PAGE_STATE_MASK) >> HIPWM3_HSR_PAGE_STATE_SHIFT)
#define  HIPWM3_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM3_HSR_PAGE_STATE_SHIFT))

#define  HIPWM3_HSR_RESERVED2_MASK 0x8
#define  HIPWM3_HSR_RESERVED2_SHIFT 3
#define  HIPWM3_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_RESERVED2_MASK) >> HIPWM3_HSR_RESERVED2_SHIFT)
#define  HIPWM3_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM3_HSR_RESERVED2_SHIFT))

#define  HIPWM3_HSR_READY_IN_MASK 0x4
#define  HIPWM3_HSR_READY_IN_SHIFT 2
#define  HIPWM3_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_READY_IN_MASK) >> HIPWM3_HSR_READY_IN_SHIFT)
#define  HIPWM3_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM3_HSR_READY_IN_SHIFT))

#define  HIPWM3_HSR_VALID_IN_MASK 0x2
#define  HIPWM3_HSR_VALID_IN_SHIFT 1
#define  HIPWM3_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_VALID_IN_MASK) >> HIPWM3_HSR_VALID_IN_SHIFT)
#define  HIPWM3_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM3_HSR_VALID_IN_SHIFT))

#define  HIPWM3_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM3_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM3_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM3_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM3_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM3_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM3_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM3_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM3_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HSPWR_RESERVED1_MASK) >> HIPWM3_HSPWR_RESERVED1_SHIFT)
#define  HIPWM3_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HSPWR_RESERVED1_SHIFT))

#define  HIPWM3_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM3_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM3_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM3_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM3_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM3_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM3_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM3_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM3_HSQR_RESERVED1_SHIFT 24
#define  HIPWM3_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HSQR_RESERVED1_MASK) >> HIPWM3_HSQR_RESERVED1_SHIFT)
#define  HIPWM3_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HSQR_RESERVED1_SHIFT))

#define  HIPWM3_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM3_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM3_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM3_HSQR_QUIWIDTH_MASK) >> HIPWM3_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM3_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM3_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM3_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM3_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM3_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM3_PRRA_PEC_VALUE_MASK) >> HIPWM3_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM3_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM3_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM3_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM3_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPVR_RESERVED1_MASK) >> HIPWM3_HPPVR_RESERVED1_SHIFT)
#define  HIPWM3_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPPVR_RESERVED1_SHIFT))

#define  HIPWM3_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM3_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM3_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPVR_PIGPTVAL_MASK) >> HIPWM3_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM3_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM3_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM3_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPSR_RESERVED1_SHIFT 16
#define  HIPWM3_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPSR_RESERVED1_MASK) >> HIPWM3_HPSR_RESERVED1_SHIFT)
#define  HIPWM3_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPSR_RESERVED1_SHIFT))

#define  HIPWM3_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM3_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM3_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM3_HPSR_PIGPIXSZ_MASK) >> HIPWM3_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM3_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM3_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM3_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPCR_RESERVED1_SHIFT 16
#define  HIPWM3_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPCR_RESERVED1_MASK) >> HIPWM3_HPCR_RESERVED1_SHIFT)
#define  HIPWM3_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPCR_RESERVED1_SHIFT))

#define  HIPWM3_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM3_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM3_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM3_HPCR_PIGPIXCNT_MASK) >> HIPWM3_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM3_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM3_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM3_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM3_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPSR_RESERVED1_MASK) >> HIPWM3_HPPSR_RESERVED1_SHIFT)
#define  HIPWM3_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPPSR_RESERVED1_SHIFT))

#define  HIPWM3_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM3_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM3_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPSR_PIGPIXSPACE_MASK) >> HIPWM3_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM3_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM3_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM3_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM3_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPLSR_RESERVED1_MASK) >> HIPWM3_HPLSR_RESERVED1_SHIFT)
#define  HIPWM3_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPLSR_RESERVED1_SHIFT))

#define  HIPWM3_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM3_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM3_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM3_HPLSR_PIGLINESPACE_MASK) >> HIPWM3_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM3_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM3_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM3_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM3_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPOER_RESERVED1_MASK) >> HIPWM3_HPPOER_RESERVED1_SHIFT)
#define  HIPWM3_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPPOER_RESERVED1_SHIFT))

#define  HIPWM3_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM3_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM3_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM3_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM3_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM3_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM3_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM3_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPOOR_RESERVED1_MASK) >> HIPWM3_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM3_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM3_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM3_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM3_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM3_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM3_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM3_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM3_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM3_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPLOR_RESERVED1_MASK) >> HIPWM3_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM3_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM3_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM3_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM3_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM3_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM3_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM3_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM3_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM3_HCRC_CRC_MASK 0xffffffff
#define  HIPWM3_HCRC_CRC_SHIFT 0
#define  HIPWM3_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM3_HCRC_CRC_MASK) >> HIPWM3_HCRC_CRC_SHIFT)
#define  HIPWM3_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM3_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM3_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HBCR_RESERVED1_SHIFT 12
#define  HIPWM3_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBCR_RESERVED1_MASK) >> HIPWM3_HBCR_RESERVED1_SHIFT)
#define  HIPWM3_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBCR_RESERVED1_SHIFT))

#define  HIPWM3_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM3_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM3_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM3_HBCR_SAMPLESPERSEG_MASK) >> HIPWM3_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM3_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM3_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM3_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM3_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM3_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HLBDR_RESERVED1_MASK) >> HIPWM3_HLBDR_RESERVED1_SHIFT)
#define  HIPWM3_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HLBDR_RESERVED1_SHIFT))

#define  HIPWM3_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM3_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM3_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM3_HLBDR_LBDRINT_MASK) >> HIPWM3_HLBDR_LBDRINT_SHIFT)
#define  HIPWM3_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM3_HLBDR_LBDRINT_SHIFT))

#define  HIPWM3_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM3_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM3_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HLBDR_LBDRFRAC_MASK) >> HIPWM3_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM3_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM3_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM3_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM3_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM3_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HRBDR_RESERVED1_MASK) >> HIPWM3_HRBDR_RESERVED1_SHIFT)
#define  HIPWM3_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HRBDR_RESERVED1_SHIFT))

#define  HIPWM3_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM3_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM3_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM3_HRBDR_RBDRINT_MASK) >> HIPWM3_HRBDR_RBDRINT_SHIFT)
#define  HIPWM3_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM3_HRBDR_RBDRINT_SHIFT))

#define  HIPWM3_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM3_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM3_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HRBDR_RBDRFRAC_MASK) >> HIPWM3_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM3_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM3_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM3_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM3_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM3_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCR_RESERVED1_MASK) >> HIPWM3_HBNCR_RESERVED1_SHIFT)
#define  HIPWM3_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBNCR_RESERVED1_SHIFT))

#define  HIPWM3_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM3_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM3_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCR_LFSRINITCNTL_MASK) >> HIPWM3_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM3_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM3_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM3_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM3_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM3_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCR_BENDERLFSREN_MASK) >> HIPWM3_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM3_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM3_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM3_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM3_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM3_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM3_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM3_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM3_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM3_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM3_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNINIT_RESERVED1_MASK) >> HIPWM3_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM3_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM3_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM3_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM3_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM3_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM3_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM3_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM3_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM3_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM3_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCV_RESERVED1_MASK) >> HIPWM3_HBNCV_RESERVED1_SHIFT)
#define  HIPWM3_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBNCV_RESERVED1_SHIFT))

#define  HIPWM3_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM3_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM3_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM3_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM3_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM3_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM3_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM3_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT0_RESERVED1_MASK) >> HIPWM3_HBAT0_RESERVED1_SHIFT)
#define  HIPWM3_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT0_RESERVED1_SHIFT))

#define  HIPWM3_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT0_BATLAST_SHIFT 19
#define  HIPWM3_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT0_BATLAST_MASK) >> HIPWM3_HBAT0_BATLAST_SHIFT)
#define  HIPWM3_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT0_BATLAST_SHIFT))

#define  HIPWM3_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT0_BATSIGN_MASK) >> HIPWM3_HBAT0_BATSIGN_SHIFT)
#define  HIPWM3_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT0_BATSIGN_SHIFT))

#define  HIPWM3_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT0_BATSHIFT_MASK) >> HIPWM3_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT0_BATFRAC_MASK) >> HIPWM3_HBAT0_BATFRAC_SHIFT)
#define  HIPWM3_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM3_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT1_RESERVED1_MASK) >> HIPWM3_HBAT1_RESERVED1_SHIFT)
#define  HIPWM3_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT1_RESERVED1_SHIFT))

#define  HIPWM3_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT1_BATLAST_SHIFT 19
#define  HIPWM3_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT1_BATLAST_MASK) >> HIPWM3_HBAT1_BATLAST_SHIFT)
#define  HIPWM3_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT1_BATLAST_SHIFT))

#define  HIPWM3_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT1_BATSIGN_MASK) >> HIPWM3_HBAT1_BATSIGN_SHIFT)
#define  HIPWM3_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT1_BATSIGN_SHIFT))

#define  HIPWM3_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT1_BATSHIFT_MASK) >> HIPWM3_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT1_BATFRAC_MASK) >> HIPWM3_HBAT1_BATFRAC_SHIFT)
#define  HIPWM3_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM3_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT2_RESERVED1_MASK) >> HIPWM3_HBAT2_RESERVED1_SHIFT)
#define  HIPWM3_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT2_RESERVED1_SHIFT))

#define  HIPWM3_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT2_BATLAST_SHIFT 19
#define  HIPWM3_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT2_BATLAST_MASK) >> HIPWM3_HBAT2_BATLAST_SHIFT)
#define  HIPWM3_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT2_BATLAST_SHIFT))

#define  HIPWM3_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT2_BATSIGN_MASK) >> HIPWM3_HBAT2_BATSIGN_SHIFT)
#define  HIPWM3_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT2_BATSIGN_SHIFT))

#define  HIPWM3_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT2_BATSHIFT_MASK) >> HIPWM3_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT2_BATFRAC_MASK) >> HIPWM3_HBAT2_BATFRAC_SHIFT)
#define  HIPWM3_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM3_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT3_RESERVED1_MASK) >> HIPWM3_HBAT3_RESERVED1_SHIFT)
#define  HIPWM3_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT3_RESERVED1_SHIFT))

#define  HIPWM3_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT3_BATLAST_SHIFT 19
#define  HIPWM3_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT3_BATLAST_MASK) >> HIPWM3_HBAT3_BATLAST_SHIFT)
#define  HIPWM3_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT3_BATLAST_SHIFT))

#define  HIPWM3_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT3_BATSIGN_MASK) >> HIPWM3_HBAT3_BATSIGN_SHIFT)
#define  HIPWM3_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT3_BATSIGN_SHIFT))

#define  HIPWM3_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT3_BATSHIFT_MASK) >> HIPWM3_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT3_BATFRAC_MASK) >> HIPWM3_HBAT3_BATFRAC_SHIFT)
#define  HIPWM3_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM3_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT4_RESERVED1_MASK) >> HIPWM3_HBAT4_RESERVED1_SHIFT)
#define  HIPWM3_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT4_RESERVED1_SHIFT))

#define  HIPWM3_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT4_BATLAST_SHIFT 19
#define  HIPWM3_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT4_BATLAST_MASK) >> HIPWM3_HBAT4_BATLAST_SHIFT)
#define  HIPWM3_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT4_BATLAST_SHIFT))

#define  HIPWM3_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT4_BATSIGN_MASK) >> HIPWM3_HBAT4_BATSIGN_SHIFT)
#define  HIPWM3_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT4_BATSIGN_SHIFT))

#define  HIPWM3_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT4_BATSHIFT_MASK) >> HIPWM3_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT4_BATFRAC_MASK) >> HIPWM3_HBAT4_BATFRAC_SHIFT)
#define  HIPWM3_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM3_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT5_RESERVED1_MASK) >> HIPWM3_HBAT5_RESERVED1_SHIFT)
#define  HIPWM3_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT5_RESERVED1_SHIFT))

#define  HIPWM3_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT5_BATLAST_SHIFT 19
#define  HIPWM3_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT5_BATLAST_MASK) >> HIPWM3_HBAT5_BATLAST_SHIFT)
#define  HIPWM3_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT5_BATLAST_SHIFT))

#define  HIPWM3_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT5_BATSIGN_MASK) >> HIPWM3_HBAT5_BATSIGN_SHIFT)
#define  HIPWM3_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT5_BATSIGN_SHIFT))

#define  HIPWM3_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT5_BATSHIFT_MASK) >> HIPWM3_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT5_BATFRAC_MASK) >> HIPWM3_HBAT5_BATFRAC_SHIFT)
#define  HIPWM3_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM3_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT6_RESERVED1_MASK) >> HIPWM3_HBAT6_RESERVED1_SHIFT)
#define  HIPWM3_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT6_RESERVED1_SHIFT))

#define  HIPWM3_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT6_BATLAST_SHIFT 19
#define  HIPWM3_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT6_BATLAST_MASK) >> HIPWM3_HBAT6_BATLAST_SHIFT)
#define  HIPWM3_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT6_BATLAST_SHIFT))

#define  HIPWM3_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT6_BATSIGN_MASK) >> HIPWM3_HBAT6_BATSIGN_SHIFT)
#define  HIPWM3_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT6_BATSIGN_SHIFT))

#define  HIPWM3_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT6_BATSHIFT_MASK) >> HIPWM3_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT6_BATFRAC_MASK) >> HIPWM3_HBAT6_BATFRAC_SHIFT)
#define  HIPWM3_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM3_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT7_RESERVED1_MASK) >> HIPWM3_HBAT7_RESERVED1_SHIFT)
#define  HIPWM3_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT7_RESERVED1_SHIFT))

#define  HIPWM3_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT7_BATLAST_SHIFT 19
#define  HIPWM3_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT7_BATLAST_MASK) >> HIPWM3_HBAT7_BATLAST_SHIFT)
#define  HIPWM3_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT7_BATLAST_SHIFT))

#define  HIPWM3_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT7_BATSIGN_MASK) >> HIPWM3_HBAT7_BATSIGN_SHIFT)
#define  HIPWM3_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT7_BATSIGN_SHIFT))

#define  HIPWM3_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT7_BATSHIFT_MASK) >> HIPWM3_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT7_BATFRAC_MASK) >> HIPWM3_HBAT7_BATFRAC_SHIFT)
#define  HIPWM3_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM3_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT8_RESERVED1_MASK) >> HIPWM3_HBAT8_RESERVED1_SHIFT)
#define  HIPWM3_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT8_RESERVED1_SHIFT))

#define  HIPWM3_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT8_BATLAST_SHIFT 19
#define  HIPWM3_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT8_BATLAST_MASK) >> HIPWM3_HBAT8_BATLAST_SHIFT)
#define  HIPWM3_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT8_BATLAST_SHIFT))

#define  HIPWM3_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT8_BATSIGN_MASK) >> HIPWM3_HBAT8_BATSIGN_SHIFT)
#define  HIPWM3_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT8_BATSIGN_SHIFT))

#define  HIPWM3_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT8_BATSHIFT_MASK) >> HIPWM3_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT8_BATFRAC_MASK) >> HIPWM3_HBAT8_BATFRAC_SHIFT)
#define  HIPWM3_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM3_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT9_RESERVED1_MASK) >> HIPWM3_HBAT9_RESERVED1_SHIFT)
#define  HIPWM3_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT9_RESERVED1_SHIFT))

#define  HIPWM3_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT9_BATLAST_SHIFT 19
#define  HIPWM3_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT9_BATLAST_MASK) >> HIPWM3_HBAT9_BATLAST_SHIFT)
#define  HIPWM3_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT9_BATLAST_SHIFT))

#define  HIPWM3_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT9_BATSIGN_MASK) >> HIPWM3_HBAT9_BATSIGN_SHIFT)
#define  HIPWM3_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT9_BATSIGN_SHIFT))

#define  HIPWM3_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT9_BATSHIFT_MASK) >> HIPWM3_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT9_BATFRAC_MASK) >> HIPWM3_HBAT9_BATFRAC_SHIFT)
#define  HIPWM3_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM3_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT10_RESERVED1_MASK) >> HIPWM3_HBAT10_RESERVED1_SHIFT)
#define  HIPWM3_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT10_RESERVED1_SHIFT))

#define  HIPWM3_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT10_BATLAST_SHIFT 19
#define  HIPWM3_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT10_BATLAST_MASK) >> HIPWM3_HBAT10_BATLAST_SHIFT)
#define  HIPWM3_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT10_BATLAST_SHIFT))

#define  HIPWM3_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT10_BATSIGN_MASK) >> HIPWM3_HBAT10_BATSIGN_SHIFT)
#define  HIPWM3_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT10_BATSIGN_SHIFT))

#define  HIPWM3_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT10_BATSHIFT_MASK) >> HIPWM3_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT10_BATFRAC_MASK) >> HIPWM3_HBAT10_BATFRAC_SHIFT)
#define  HIPWM3_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM3_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT11_RESERVED1_MASK) >> HIPWM3_HBAT11_RESERVED1_SHIFT)
#define  HIPWM3_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT11_RESERVED1_SHIFT))

#define  HIPWM3_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT11_BATLAST_SHIFT 19
#define  HIPWM3_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT11_BATLAST_MASK) >> HIPWM3_HBAT11_BATLAST_SHIFT)
#define  HIPWM3_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT11_BATLAST_SHIFT))

#define  HIPWM3_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT11_BATSIGN_MASK) >> HIPWM3_HBAT11_BATSIGN_SHIFT)
#define  HIPWM3_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT11_BATSIGN_SHIFT))

#define  HIPWM3_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT11_BATSHIFT_MASK) >> HIPWM3_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT11_BATFRAC_MASK) >> HIPWM3_HBAT11_BATFRAC_SHIFT)
#define  HIPWM3_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM3_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT12_RESERVED1_MASK) >> HIPWM3_HBAT12_RESERVED1_SHIFT)
#define  HIPWM3_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT12_RESERVED1_SHIFT))

#define  HIPWM3_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT12_BATLAST_SHIFT 19
#define  HIPWM3_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT12_BATLAST_MASK) >> HIPWM3_HBAT12_BATLAST_SHIFT)
#define  HIPWM3_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT12_BATLAST_SHIFT))

#define  HIPWM3_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT12_BATSIGN_MASK) >> HIPWM3_HBAT12_BATSIGN_SHIFT)
#define  HIPWM3_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT12_BATSIGN_SHIFT))

#define  HIPWM3_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT12_BATSHIFT_MASK) >> HIPWM3_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT12_BATFRAC_MASK) >> HIPWM3_HBAT12_BATFRAC_SHIFT)
#define  HIPWM3_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM3_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT13_RESERVED1_MASK) >> HIPWM3_HBAT13_RESERVED1_SHIFT)
#define  HIPWM3_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT13_RESERVED1_SHIFT))

#define  HIPWM3_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT13_BATLAST_SHIFT 19
#define  HIPWM3_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT13_BATLAST_MASK) >> HIPWM3_HBAT13_BATLAST_SHIFT)
#define  HIPWM3_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT13_BATLAST_SHIFT))

#define  HIPWM3_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT13_BATSIGN_MASK) >> HIPWM3_HBAT13_BATSIGN_SHIFT)
#define  HIPWM3_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT13_BATSIGN_SHIFT))

#define  HIPWM3_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT13_BATSHIFT_MASK) >> HIPWM3_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT13_BATFRAC_MASK) >> HIPWM3_HBAT13_BATFRAC_SHIFT)
#define  HIPWM3_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM3_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT14_RESERVED1_MASK) >> HIPWM3_HBAT14_RESERVED1_SHIFT)
#define  HIPWM3_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT14_RESERVED1_SHIFT))

#define  HIPWM3_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT14_BATLAST_SHIFT 19
#define  HIPWM3_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT14_BATLAST_MASK) >> HIPWM3_HBAT14_BATLAST_SHIFT)
#define  HIPWM3_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT14_BATLAST_SHIFT))

#define  HIPWM3_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT14_BATSIGN_MASK) >> HIPWM3_HBAT14_BATSIGN_SHIFT)
#define  HIPWM3_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT14_BATSIGN_SHIFT))

#define  HIPWM3_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT14_BATSHIFT_MASK) >> HIPWM3_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT14_BATFRAC_MASK) >> HIPWM3_HBAT14_BATFRAC_SHIFT)
#define  HIPWM3_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM3_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT15_RESERVED1_MASK) >> HIPWM3_HBAT15_RESERVED1_SHIFT)
#define  HIPWM3_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT15_RESERVED1_SHIFT))

#define  HIPWM3_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT15_BATLAST_SHIFT 19
#define  HIPWM3_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT15_BATLAST_MASK) >> HIPWM3_HBAT15_BATLAST_SHIFT)
#define  HIPWM3_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT15_BATLAST_SHIFT))

#define  HIPWM3_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT15_BATSIGN_MASK) >> HIPWM3_HBAT15_BATSIGN_SHIFT)
#define  HIPWM3_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT15_BATSIGN_SHIFT))

#define  HIPWM3_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT15_BATSHIFT_MASK) >> HIPWM3_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT15_BATFRAC_MASK) >> HIPWM3_HBAT15_BATFRAC_SHIFT)
#define  HIPWM3_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM3_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT16_RESERVED1_MASK) >> HIPWM3_HBAT16_RESERVED1_SHIFT)
#define  HIPWM3_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT16_RESERVED1_SHIFT))

#define  HIPWM3_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT16_BATLAST_SHIFT 19
#define  HIPWM3_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT16_BATLAST_MASK) >> HIPWM3_HBAT16_BATLAST_SHIFT)
#define  HIPWM3_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT16_BATLAST_SHIFT))

#define  HIPWM3_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT16_BATSIGN_MASK) >> HIPWM3_HBAT16_BATSIGN_SHIFT)
#define  HIPWM3_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT16_BATSIGN_SHIFT))

#define  HIPWM3_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT16_BATSHIFT_MASK) >> HIPWM3_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT16_BATFRAC_MASK) >> HIPWM3_HBAT16_BATFRAC_SHIFT)
#define  HIPWM3_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM3_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT17_RESERVED1_MASK) >> HIPWM3_HBAT17_RESERVED1_SHIFT)
#define  HIPWM3_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT17_RESERVED1_SHIFT))

#define  HIPWM3_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT17_BATLAST_SHIFT 19
#define  HIPWM3_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT17_BATLAST_MASK) >> HIPWM3_HBAT17_BATLAST_SHIFT)
#define  HIPWM3_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT17_BATLAST_SHIFT))

#define  HIPWM3_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT17_BATSIGN_MASK) >> HIPWM3_HBAT17_BATSIGN_SHIFT)
#define  HIPWM3_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT17_BATSIGN_SHIFT))

#define  HIPWM3_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT17_BATSHIFT_MASK) >> HIPWM3_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT17_BATFRAC_MASK) >> HIPWM3_HBAT17_BATFRAC_SHIFT)
#define  HIPWM3_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM3_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT18_RESERVED1_MASK) >> HIPWM3_HBAT18_RESERVED1_SHIFT)
#define  HIPWM3_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT18_RESERVED1_SHIFT))

#define  HIPWM3_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT18_BATLAST_SHIFT 19
#define  HIPWM3_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT18_BATLAST_MASK) >> HIPWM3_HBAT18_BATLAST_SHIFT)
#define  HIPWM3_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT18_BATLAST_SHIFT))

#define  HIPWM3_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT18_BATSIGN_MASK) >> HIPWM3_HBAT18_BATSIGN_SHIFT)
#define  HIPWM3_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT18_BATSIGN_SHIFT))

#define  HIPWM3_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT18_BATSHIFT_MASK) >> HIPWM3_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT18_BATFRAC_MASK) >> HIPWM3_HBAT18_BATFRAC_SHIFT)
#define  HIPWM3_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM3_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT19_RESERVED1_MASK) >> HIPWM3_HBAT19_RESERVED1_SHIFT)
#define  HIPWM3_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT19_RESERVED1_SHIFT))

#define  HIPWM3_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT19_BATLAST_SHIFT 19
#define  HIPWM3_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT19_BATLAST_MASK) >> HIPWM3_HBAT19_BATLAST_SHIFT)
#define  HIPWM3_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT19_BATLAST_SHIFT))

#define  HIPWM3_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT19_BATSIGN_MASK) >> HIPWM3_HBAT19_BATSIGN_SHIFT)
#define  HIPWM3_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT19_BATSIGN_SHIFT))

#define  HIPWM3_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT19_BATSHIFT_MASK) >> HIPWM3_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT19_BATFRAC_MASK) >> HIPWM3_HBAT19_BATFRAC_SHIFT)
#define  HIPWM3_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM3_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT20_RESERVED1_MASK) >> HIPWM3_HBAT20_RESERVED1_SHIFT)
#define  HIPWM3_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT20_RESERVED1_SHIFT))

#define  HIPWM3_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT20_BATLAST_SHIFT 19
#define  HIPWM3_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT20_BATLAST_MASK) >> HIPWM3_HBAT20_BATLAST_SHIFT)
#define  HIPWM3_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT20_BATLAST_SHIFT))

#define  HIPWM3_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT20_BATSIGN_MASK) >> HIPWM3_HBAT20_BATSIGN_SHIFT)
#define  HIPWM3_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT20_BATSIGN_SHIFT))

#define  HIPWM3_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT20_BATSHIFT_MASK) >> HIPWM3_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT20_BATFRAC_MASK) >> HIPWM3_HBAT20_BATFRAC_SHIFT)
#define  HIPWM3_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM3_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT21_RESERVED1_MASK) >> HIPWM3_HBAT21_RESERVED1_SHIFT)
#define  HIPWM3_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT21_RESERVED1_SHIFT))

#define  HIPWM3_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT21_BATLAST_SHIFT 19
#define  HIPWM3_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT21_BATLAST_MASK) >> HIPWM3_HBAT21_BATLAST_SHIFT)
#define  HIPWM3_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT21_BATLAST_SHIFT))

#define  HIPWM3_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT21_BATSIGN_MASK) >> HIPWM3_HBAT21_BATSIGN_SHIFT)
#define  HIPWM3_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT21_BATSIGN_SHIFT))

#define  HIPWM3_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT21_BATSHIFT_MASK) >> HIPWM3_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT21_BATFRAC_MASK) >> HIPWM3_HBAT21_BATFRAC_SHIFT)
#define  HIPWM3_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM3_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT22_RESERVED1_MASK) >> HIPWM3_HBAT22_RESERVED1_SHIFT)
#define  HIPWM3_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT22_RESERVED1_SHIFT))

#define  HIPWM3_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT22_BATLAST_SHIFT 19
#define  HIPWM3_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT22_BATLAST_MASK) >> HIPWM3_HBAT22_BATLAST_SHIFT)
#define  HIPWM3_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT22_BATLAST_SHIFT))

#define  HIPWM3_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT22_BATSIGN_MASK) >> HIPWM3_HBAT22_BATSIGN_SHIFT)
#define  HIPWM3_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT22_BATSIGN_SHIFT))

#define  HIPWM3_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT22_BATSHIFT_MASK) >> HIPWM3_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT22_BATFRAC_MASK) >> HIPWM3_HBAT22_BATFRAC_SHIFT)
#define  HIPWM3_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM3_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT23_RESERVED1_MASK) >> HIPWM3_HBAT23_RESERVED1_SHIFT)
#define  HIPWM3_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT23_RESERVED1_SHIFT))

#define  HIPWM3_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT23_BATLAST_SHIFT 19
#define  HIPWM3_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT23_BATLAST_MASK) >> HIPWM3_HBAT23_BATLAST_SHIFT)
#define  HIPWM3_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT23_BATLAST_SHIFT))

#define  HIPWM3_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT23_BATSIGN_MASK) >> HIPWM3_HBAT23_BATSIGN_SHIFT)
#define  HIPWM3_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT23_BATSIGN_SHIFT))

#define  HIPWM3_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT23_BATSHIFT_MASK) >> HIPWM3_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT23_BATFRAC_MASK) >> HIPWM3_HBAT23_BATFRAC_SHIFT)
#define  HIPWM3_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM3_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT24_RESERVED1_MASK) >> HIPWM3_HBAT24_RESERVED1_SHIFT)
#define  HIPWM3_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT24_RESERVED1_SHIFT))

#define  HIPWM3_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT24_BATLAST_SHIFT 19
#define  HIPWM3_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT24_BATLAST_MASK) >> HIPWM3_HBAT24_BATLAST_SHIFT)
#define  HIPWM3_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT24_BATLAST_SHIFT))

#define  HIPWM3_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT24_BATSIGN_MASK) >> HIPWM3_HBAT24_BATSIGN_SHIFT)
#define  HIPWM3_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT24_BATSIGN_SHIFT))

#define  HIPWM3_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT24_BATSHIFT_MASK) >> HIPWM3_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT24_BATFRAC_MASK) >> HIPWM3_HBAT24_BATFRAC_SHIFT)
#define  HIPWM3_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM3_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT25_RESERVED1_MASK) >> HIPWM3_HBAT25_RESERVED1_SHIFT)
#define  HIPWM3_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT25_RESERVED1_SHIFT))

#define  HIPWM3_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT25_BATLAST_SHIFT 19
#define  HIPWM3_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT25_BATLAST_MASK) >> HIPWM3_HBAT25_BATLAST_SHIFT)
#define  HIPWM3_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT25_BATLAST_SHIFT))

#define  HIPWM3_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT25_BATSIGN_MASK) >> HIPWM3_HBAT25_BATSIGN_SHIFT)
#define  HIPWM3_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT25_BATSIGN_SHIFT))

#define  HIPWM3_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT25_BATSHIFT_MASK) >> HIPWM3_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT25_BATFRAC_MASK) >> HIPWM3_HBAT25_BATFRAC_SHIFT)
#define  HIPWM3_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM3_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT26_RESERVED1_MASK) >> HIPWM3_HBAT26_RESERVED1_SHIFT)
#define  HIPWM3_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT26_RESERVED1_SHIFT))

#define  HIPWM3_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT26_BATLAST_SHIFT 19
#define  HIPWM3_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT26_BATLAST_MASK) >> HIPWM3_HBAT26_BATLAST_SHIFT)
#define  HIPWM3_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT26_BATLAST_SHIFT))

#define  HIPWM3_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT26_BATSIGN_MASK) >> HIPWM3_HBAT26_BATSIGN_SHIFT)
#define  HIPWM3_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT26_BATSIGN_SHIFT))

#define  HIPWM3_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT26_BATSHIFT_MASK) >> HIPWM3_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT26_BATFRAC_MASK) >> HIPWM3_HBAT26_BATFRAC_SHIFT)
#define  HIPWM3_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM3_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT27_RESERVED1_MASK) >> HIPWM3_HBAT27_RESERVED1_SHIFT)
#define  HIPWM3_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT27_RESERVED1_SHIFT))

#define  HIPWM3_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT27_BATLAST_SHIFT 19
#define  HIPWM3_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT27_BATLAST_MASK) >> HIPWM3_HBAT27_BATLAST_SHIFT)
#define  HIPWM3_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT27_BATLAST_SHIFT))

#define  HIPWM3_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT27_BATSIGN_MASK) >> HIPWM3_HBAT27_BATSIGN_SHIFT)
#define  HIPWM3_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT27_BATSIGN_SHIFT))

#define  HIPWM3_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT27_BATSHIFT_MASK) >> HIPWM3_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT27_BATFRAC_MASK) >> HIPWM3_HBAT27_BATFRAC_SHIFT)
#define  HIPWM3_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM3_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT28_RESERVED1_MASK) >> HIPWM3_HBAT28_RESERVED1_SHIFT)
#define  HIPWM3_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT28_RESERVED1_SHIFT))

#define  HIPWM3_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT28_BATLAST_SHIFT 19
#define  HIPWM3_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT28_BATLAST_MASK) >> HIPWM3_HBAT28_BATLAST_SHIFT)
#define  HIPWM3_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT28_BATLAST_SHIFT))

#define  HIPWM3_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT28_BATSIGN_MASK) >> HIPWM3_HBAT28_BATSIGN_SHIFT)
#define  HIPWM3_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT28_BATSIGN_SHIFT))

#define  HIPWM3_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT28_BATSHIFT_MASK) >> HIPWM3_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT28_BATFRAC_MASK) >> HIPWM3_HBAT28_BATFRAC_SHIFT)
#define  HIPWM3_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM3_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT29_RESERVED1_MASK) >> HIPWM3_HBAT29_RESERVED1_SHIFT)
#define  HIPWM3_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT29_RESERVED1_SHIFT))

#define  HIPWM3_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT29_BATLAST_SHIFT 19
#define  HIPWM3_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT29_BATLAST_MASK) >> HIPWM3_HBAT29_BATLAST_SHIFT)
#define  HIPWM3_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT29_BATLAST_SHIFT))

#define  HIPWM3_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT29_BATSIGN_MASK) >> HIPWM3_HBAT29_BATSIGN_SHIFT)
#define  HIPWM3_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT29_BATSIGN_SHIFT))

#define  HIPWM3_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT29_BATSHIFT_MASK) >> HIPWM3_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT29_BATFRAC_MASK) >> HIPWM3_HBAT29_BATFRAC_SHIFT)
#define  HIPWM3_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM3_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT30_RESERVED1_MASK) >> HIPWM3_HBAT30_RESERVED1_SHIFT)
#define  HIPWM3_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT30_RESERVED1_SHIFT))

#define  HIPWM3_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT30_BATLAST_SHIFT 19
#define  HIPWM3_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT30_BATLAST_MASK) >> HIPWM3_HBAT30_BATLAST_SHIFT)
#define  HIPWM3_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT30_BATLAST_SHIFT))

#define  HIPWM3_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT30_BATSIGN_MASK) >> HIPWM3_HBAT30_BATSIGN_SHIFT)
#define  HIPWM3_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT30_BATSIGN_SHIFT))

#define  HIPWM3_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT30_BATSHIFT_MASK) >> HIPWM3_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT30_BATFRAC_MASK) >> HIPWM3_HBAT30_BATFRAC_SHIFT)
#define  HIPWM3_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM3_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT31_RESERVED1_MASK) >> HIPWM3_HBAT31_RESERVED1_SHIFT)
#define  HIPWM3_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT31_RESERVED1_SHIFT))

#define  HIPWM3_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT31_BATLAST_SHIFT 19
#define  HIPWM3_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT31_BATLAST_MASK) >> HIPWM3_HBAT31_BATLAST_SHIFT)
#define  HIPWM3_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT31_BATLAST_SHIFT))

#define  HIPWM3_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT31_BATSIGN_MASK) >> HIPWM3_HBAT31_BATSIGN_SHIFT)
#define  HIPWM3_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT31_BATSIGN_SHIFT))

#define  HIPWM3_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT31_BATSHIFT_MASK) >> HIPWM3_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT31_BATFRAC_MASK) >> HIPWM3_HBAT31_BATFRAC_SHIFT)
#define  HIPWM3_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM3_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT32_RESERVED1_MASK) >> HIPWM3_HBAT32_RESERVED1_SHIFT)
#define  HIPWM3_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT32_RESERVED1_SHIFT))

#define  HIPWM3_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT32_BATLAST_SHIFT 19
#define  HIPWM3_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT32_BATLAST_MASK) >> HIPWM3_HBAT32_BATLAST_SHIFT)
#define  HIPWM3_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT32_BATLAST_SHIFT))

#define  HIPWM3_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT32_BATSIGN_MASK) >> HIPWM3_HBAT32_BATSIGN_SHIFT)
#define  HIPWM3_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT32_BATSIGN_SHIFT))

#define  HIPWM3_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT32_BATSHIFT_MASK) >> HIPWM3_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT32_BATFRAC_MASK) >> HIPWM3_HBAT32_BATFRAC_SHIFT)
#define  HIPWM3_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM3_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT33_RESERVED1_MASK) >> HIPWM3_HBAT33_RESERVED1_SHIFT)
#define  HIPWM3_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT33_RESERVED1_SHIFT))

#define  HIPWM3_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT33_BATLAST_SHIFT 19
#define  HIPWM3_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT33_BATLAST_MASK) >> HIPWM3_HBAT33_BATLAST_SHIFT)
#define  HIPWM3_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT33_BATLAST_SHIFT))

#define  HIPWM3_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT33_BATSIGN_MASK) >> HIPWM3_HBAT33_BATSIGN_SHIFT)
#define  HIPWM3_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT33_BATSIGN_SHIFT))

#define  HIPWM3_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT33_BATSHIFT_MASK) >> HIPWM3_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT33_BATFRAC_MASK) >> HIPWM3_HBAT33_BATFRAC_SHIFT)
#define  HIPWM3_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM3_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT34_RESERVED1_MASK) >> HIPWM3_HBAT34_RESERVED1_SHIFT)
#define  HIPWM3_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT34_RESERVED1_SHIFT))

#define  HIPWM3_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT34_BATLAST_SHIFT 19
#define  HIPWM3_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT34_BATLAST_MASK) >> HIPWM3_HBAT34_BATLAST_SHIFT)
#define  HIPWM3_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT34_BATLAST_SHIFT))

#define  HIPWM3_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT34_BATSIGN_MASK) >> HIPWM3_HBAT34_BATSIGN_SHIFT)
#define  HIPWM3_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT34_BATSIGN_SHIFT))

#define  HIPWM3_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT34_BATSHIFT_MASK) >> HIPWM3_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT34_BATFRAC_MASK) >> HIPWM3_HBAT34_BATFRAC_SHIFT)
#define  HIPWM3_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM3_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT35_RESERVED1_MASK) >> HIPWM3_HBAT35_RESERVED1_SHIFT)
#define  HIPWM3_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT35_RESERVED1_SHIFT))

#define  HIPWM3_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT35_BATLAST_SHIFT 19
#define  HIPWM3_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT35_BATLAST_MASK) >> HIPWM3_HBAT35_BATLAST_SHIFT)
#define  HIPWM3_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT35_BATLAST_SHIFT))

#define  HIPWM3_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT35_BATSIGN_MASK) >> HIPWM3_HBAT35_BATSIGN_SHIFT)
#define  HIPWM3_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT35_BATSIGN_SHIFT))

#define  HIPWM3_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT35_BATSHIFT_MASK) >> HIPWM3_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT35_BATFRAC_MASK) >> HIPWM3_HBAT35_BATFRAC_SHIFT)
#define  HIPWM3_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM3_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT36_RESERVED1_MASK) >> HIPWM3_HBAT36_RESERVED1_SHIFT)
#define  HIPWM3_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT36_RESERVED1_SHIFT))

#define  HIPWM3_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT36_BATLAST_SHIFT 19
#define  HIPWM3_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT36_BATLAST_MASK) >> HIPWM3_HBAT36_BATLAST_SHIFT)
#define  HIPWM3_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT36_BATLAST_SHIFT))

#define  HIPWM3_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT36_BATSIGN_MASK) >> HIPWM3_HBAT36_BATSIGN_SHIFT)
#define  HIPWM3_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT36_BATSIGN_SHIFT))

#define  HIPWM3_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT36_BATSHIFT_MASK) >> HIPWM3_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT36_BATFRAC_MASK) >> HIPWM3_HBAT36_BATFRAC_SHIFT)
#define  HIPWM3_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM3_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT37_RESERVED1_MASK) >> HIPWM3_HBAT37_RESERVED1_SHIFT)
#define  HIPWM3_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT37_RESERVED1_SHIFT))

#define  HIPWM3_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT37_BATLAST_SHIFT 19
#define  HIPWM3_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT37_BATLAST_MASK) >> HIPWM3_HBAT37_BATLAST_SHIFT)
#define  HIPWM3_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT37_BATLAST_SHIFT))

#define  HIPWM3_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT37_BATSIGN_MASK) >> HIPWM3_HBAT37_BATSIGN_SHIFT)
#define  HIPWM3_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT37_BATSIGN_SHIFT))

#define  HIPWM3_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT37_BATSHIFT_MASK) >> HIPWM3_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT37_BATFRAC_MASK) >> HIPWM3_HBAT37_BATFRAC_SHIFT)
#define  HIPWM3_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM3_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT38_RESERVED1_MASK) >> HIPWM3_HBAT38_RESERVED1_SHIFT)
#define  HIPWM3_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT38_RESERVED1_SHIFT))

#define  HIPWM3_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT38_BATLAST_SHIFT 19
#define  HIPWM3_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT38_BATLAST_MASK) >> HIPWM3_HBAT38_BATLAST_SHIFT)
#define  HIPWM3_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT38_BATLAST_SHIFT))

#define  HIPWM3_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT38_BATSIGN_MASK) >> HIPWM3_HBAT38_BATSIGN_SHIFT)
#define  HIPWM3_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT38_BATSIGN_SHIFT))

#define  HIPWM3_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT38_BATSHIFT_MASK) >> HIPWM3_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT38_BATFRAC_MASK) >> HIPWM3_HBAT38_BATFRAC_SHIFT)
#define  HIPWM3_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM3_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT39_RESERVED1_MASK) >> HIPWM3_HBAT39_RESERVED1_SHIFT)
#define  HIPWM3_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT39_RESERVED1_SHIFT))

#define  HIPWM3_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT39_BATLAST_SHIFT 19
#define  HIPWM3_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT39_BATLAST_MASK) >> HIPWM3_HBAT39_BATLAST_SHIFT)
#define  HIPWM3_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT39_BATLAST_SHIFT))

#define  HIPWM3_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT39_BATSIGN_MASK) >> HIPWM3_HBAT39_BATSIGN_SHIFT)
#define  HIPWM3_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT39_BATSIGN_SHIFT))

#define  HIPWM3_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT39_BATSHIFT_MASK) >> HIPWM3_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT39_BATFRAC_MASK) >> HIPWM3_HBAT39_BATFRAC_SHIFT)
#define  HIPWM3_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM3_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT40_RESERVED1_MASK) >> HIPWM3_HBAT40_RESERVED1_SHIFT)
#define  HIPWM3_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT40_RESERVED1_SHIFT))

#define  HIPWM3_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT40_BATLAST_SHIFT 19
#define  HIPWM3_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT40_BATLAST_MASK) >> HIPWM3_HBAT40_BATLAST_SHIFT)
#define  HIPWM3_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT40_BATLAST_SHIFT))

#define  HIPWM3_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT40_BATSIGN_MASK) >> HIPWM3_HBAT40_BATSIGN_SHIFT)
#define  HIPWM3_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT40_BATSIGN_SHIFT))

#define  HIPWM3_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT40_BATSHIFT_MASK) >> HIPWM3_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT40_BATFRAC_MASK) >> HIPWM3_HBAT40_BATFRAC_SHIFT)
#define  HIPWM3_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM3_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT41_RESERVED1_MASK) >> HIPWM3_HBAT41_RESERVED1_SHIFT)
#define  HIPWM3_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT41_RESERVED1_SHIFT))

#define  HIPWM3_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT41_BATLAST_SHIFT 19
#define  HIPWM3_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT41_BATLAST_MASK) >> HIPWM3_HBAT41_BATLAST_SHIFT)
#define  HIPWM3_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT41_BATLAST_SHIFT))

#define  HIPWM3_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT41_BATSIGN_MASK) >> HIPWM3_HBAT41_BATSIGN_SHIFT)
#define  HIPWM3_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT41_BATSIGN_SHIFT))

#define  HIPWM3_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT41_BATSHIFT_MASK) >> HIPWM3_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT41_BATFRAC_MASK) >> HIPWM3_HBAT41_BATFRAC_SHIFT)
#define  HIPWM3_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM3_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT42_RESERVED1_MASK) >> HIPWM3_HBAT42_RESERVED1_SHIFT)
#define  HIPWM3_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT42_RESERVED1_SHIFT))

#define  HIPWM3_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT42_BATLAST_SHIFT 19
#define  HIPWM3_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT42_BATLAST_MASK) >> HIPWM3_HBAT42_BATLAST_SHIFT)
#define  HIPWM3_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT42_BATLAST_SHIFT))

#define  HIPWM3_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT42_BATSIGN_MASK) >> HIPWM3_HBAT42_BATSIGN_SHIFT)
#define  HIPWM3_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT42_BATSIGN_SHIFT))

#define  HIPWM3_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT42_BATSHIFT_MASK) >> HIPWM3_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT42_BATFRAC_MASK) >> HIPWM3_HBAT42_BATFRAC_SHIFT)
#define  HIPWM3_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM3_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT43_RESERVED1_MASK) >> HIPWM3_HBAT43_RESERVED1_SHIFT)
#define  HIPWM3_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT43_RESERVED1_SHIFT))

#define  HIPWM3_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT43_BATLAST_SHIFT 19
#define  HIPWM3_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT43_BATLAST_MASK) >> HIPWM3_HBAT43_BATLAST_SHIFT)
#define  HIPWM3_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT43_BATLAST_SHIFT))

#define  HIPWM3_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT43_BATSIGN_MASK) >> HIPWM3_HBAT43_BATSIGN_SHIFT)
#define  HIPWM3_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT43_BATSIGN_SHIFT))

#define  HIPWM3_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT43_BATSHIFT_MASK) >> HIPWM3_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT43_BATFRAC_MASK) >> HIPWM3_HBAT43_BATFRAC_SHIFT)
#define  HIPWM3_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM3_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT44_RESERVED1_MASK) >> HIPWM3_HBAT44_RESERVED1_SHIFT)
#define  HIPWM3_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT44_RESERVED1_SHIFT))

#define  HIPWM3_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT44_BATLAST_SHIFT 19
#define  HIPWM3_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT44_BATLAST_MASK) >> HIPWM3_HBAT44_BATLAST_SHIFT)
#define  HIPWM3_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT44_BATLAST_SHIFT))

#define  HIPWM3_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT44_BATSIGN_MASK) >> HIPWM3_HBAT44_BATSIGN_SHIFT)
#define  HIPWM3_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT44_BATSIGN_SHIFT))

#define  HIPWM3_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT44_BATSHIFT_MASK) >> HIPWM3_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT44_BATFRAC_MASK) >> HIPWM3_HBAT44_BATFRAC_SHIFT)
#define  HIPWM3_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM3_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT45_RESERVED1_MASK) >> HIPWM3_HBAT45_RESERVED1_SHIFT)
#define  HIPWM3_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT45_RESERVED1_SHIFT))

#define  HIPWM3_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT45_BATLAST_SHIFT 19
#define  HIPWM3_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT45_BATLAST_MASK) >> HIPWM3_HBAT45_BATLAST_SHIFT)
#define  HIPWM3_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT45_BATLAST_SHIFT))

#define  HIPWM3_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT45_BATSIGN_MASK) >> HIPWM3_HBAT45_BATSIGN_SHIFT)
#define  HIPWM3_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT45_BATSIGN_SHIFT))

#define  HIPWM3_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT45_BATSHIFT_MASK) >> HIPWM3_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT45_BATFRAC_MASK) >> HIPWM3_HBAT45_BATFRAC_SHIFT)
#define  HIPWM3_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM3_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT46_RESERVED1_MASK) >> HIPWM3_HBAT46_RESERVED1_SHIFT)
#define  HIPWM3_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT46_RESERVED1_SHIFT))

#define  HIPWM3_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT46_BATLAST_SHIFT 19
#define  HIPWM3_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT46_BATLAST_MASK) >> HIPWM3_HBAT46_BATLAST_SHIFT)
#define  HIPWM3_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT46_BATLAST_SHIFT))

#define  HIPWM3_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT46_BATSIGN_MASK) >> HIPWM3_HBAT46_BATSIGN_SHIFT)
#define  HIPWM3_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT46_BATSIGN_SHIFT))

#define  HIPWM3_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT46_BATSHIFT_MASK) >> HIPWM3_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT46_BATFRAC_MASK) >> HIPWM3_HBAT46_BATFRAC_SHIFT)
#define  HIPWM3_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM3_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT47_RESERVED1_MASK) >> HIPWM3_HBAT47_RESERVED1_SHIFT)
#define  HIPWM3_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT47_RESERVED1_SHIFT))

#define  HIPWM3_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT47_BATLAST_SHIFT 19
#define  HIPWM3_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT47_BATLAST_MASK) >> HIPWM3_HBAT47_BATLAST_SHIFT)
#define  HIPWM3_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT47_BATLAST_SHIFT))

#define  HIPWM3_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT47_BATSIGN_MASK) >> HIPWM3_HBAT47_BATSIGN_SHIFT)
#define  HIPWM3_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT47_BATSIGN_SHIFT))

#define  HIPWM3_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT47_BATSHIFT_MASK) >> HIPWM3_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT47_BATFRAC_MASK) >> HIPWM3_HBAT47_BATFRAC_SHIFT)
#define  HIPWM3_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM3_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT48_RESERVED1_MASK) >> HIPWM3_HBAT48_RESERVED1_SHIFT)
#define  HIPWM3_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT48_RESERVED1_SHIFT))

#define  HIPWM3_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT48_BATLAST_SHIFT 19
#define  HIPWM3_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT48_BATLAST_MASK) >> HIPWM3_HBAT48_BATLAST_SHIFT)
#define  HIPWM3_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT48_BATLAST_SHIFT))

#define  HIPWM3_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT48_BATSIGN_MASK) >> HIPWM3_HBAT48_BATSIGN_SHIFT)
#define  HIPWM3_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT48_BATSIGN_SHIFT))

#define  HIPWM3_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT48_BATSHIFT_MASK) >> HIPWM3_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT48_BATFRAC_MASK) >> HIPWM3_HBAT48_BATFRAC_SHIFT)
#define  HIPWM3_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM3_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT49_RESERVED1_MASK) >> HIPWM3_HBAT49_RESERVED1_SHIFT)
#define  HIPWM3_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT49_RESERVED1_SHIFT))

#define  HIPWM3_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT49_BATLAST_SHIFT 19
#define  HIPWM3_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT49_BATLAST_MASK) >> HIPWM3_HBAT49_BATLAST_SHIFT)
#define  HIPWM3_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT49_BATLAST_SHIFT))

#define  HIPWM3_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT49_BATSIGN_MASK) >> HIPWM3_HBAT49_BATSIGN_SHIFT)
#define  HIPWM3_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT49_BATSIGN_SHIFT))

#define  HIPWM3_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT49_BATSHIFT_MASK) >> HIPWM3_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT49_BATFRAC_MASK) >> HIPWM3_HBAT49_BATFRAC_SHIFT)
#define  HIPWM3_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM3_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT50_RESERVED1_MASK) >> HIPWM3_HBAT50_RESERVED1_SHIFT)
#define  HIPWM3_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT50_RESERVED1_SHIFT))

#define  HIPWM3_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT50_BATLAST_SHIFT 19
#define  HIPWM3_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT50_BATLAST_MASK) >> HIPWM3_HBAT50_BATLAST_SHIFT)
#define  HIPWM3_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT50_BATLAST_SHIFT))

#define  HIPWM3_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT50_BATSIGN_MASK) >> HIPWM3_HBAT50_BATSIGN_SHIFT)
#define  HIPWM3_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT50_BATSIGN_SHIFT))

#define  HIPWM3_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT50_BATSHIFT_MASK) >> HIPWM3_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT50_BATFRAC_MASK) >> HIPWM3_HBAT50_BATFRAC_SHIFT)
#define  HIPWM3_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM3_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT51_RESERVED1_MASK) >> HIPWM3_HBAT51_RESERVED1_SHIFT)
#define  HIPWM3_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT51_RESERVED1_SHIFT))

#define  HIPWM3_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT51_BATLAST_SHIFT 19
#define  HIPWM3_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT51_BATLAST_MASK) >> HIPWM3_HBAT51_BATLAST_SHIFT)
#define  HIPWM3_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT51_BATLAST_SHIFT))

#define  HIPWM3_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT51_BATSIGN_MASK) >> HIPWM3_HBAT51_BATSIGN_SHIFT)
#define  HIPWM3_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT51_BATSIGN_SHIFT))

#define  HIPWM3_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT51_BATSHIFT_MASK) >> HIPWM3_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT51_BATFRAC_MASK) >> HIPWM3_HBAT51_BATFRAC_SHIFT)
#define  HIPWM3_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM3_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT52_RESERVED1_MASK) >> HIPWM3_HBAT52_RESERVED1_SHIFT)
#define  HIPWM3_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT52_RESERVED1_SHIFT))

#define  HIPWM3_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT52_BATLAST_SHIFT 19
#define  HIPWM3_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT52_BATLAST_MASK) >> HIPWM3_HBAT52_BATLAST_SHIFT)
#define  HIPWM3_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT52_BATLAST_SHIFT))

#define  HIPWM3_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT52_BATSIGN_MASK) >> HIPWM3_HBAT52_BATSIGN_SHIFT)
#define  HIPWM3_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT52_BATSIGN_SHIFT))

#define  HIPWM3_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT52_BATSHIFT_MASK) >> HIPWM3_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT52_BATFRAC_MASK) >> HIPWM3_HBAT52_BATFRAC_SHIFT)
#define  HIPWM3_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM3_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT53_RESERVED1_MASK) >> HIPWM3_HBAT53_RESERVED1_SHIFT)
#define  HIPWM3_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT53_RESERVED1_SHIFT))

#define  HIPWM3_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT53_BATLAST_SHIFT 19
#define  HIPWM3_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT53_BATLAST_MASK) >> HIPWM3_HBAT53_BATLAST_SHIFT)
#define  HIPWM3_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT53_BATLAST_SHIFT))

#define  HIPWM3_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT53_BATSIGN_MASK) >> HIPWM3_HBAT53_BATSIGN_SHIFT)
#define  HIPWM3_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT53_BATSIGN_SHIFT))

#define  HIPWM3_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT53_BATSHIFT_MASK) >> HIPWM3_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT53_BATFRAC_MASK) >> HIPWM3_HBAT53_BATFRAC_SHIFT)
#define  HIPWM3_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM3_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT54_RESERVED1_MASK) >> HIPWM3_HBAT54_RESERVED1_SHIFT)
#define  HIPWM3_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT54_RESERVED1_SHIFT))

#define  HIPWM3_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT54_BATLAST_SHIFT 19
#define  HIPWM3_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT54_BATLAST_MASK) >> HIPWM3_HBAT54_BATLAST_SHIFT)
#define  HIPWM3_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT54_BATLAST_SHIFT))

#define  HIPWM3_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT54_BATSIGN_MASK) >> HIPWM3_HBAT54_BATSIGN_SHIFT)
#define  HIPWM3_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT54_BATSIGN_SHIFT))

#define  HIPWM3_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT54_BATSHIFT_MASK) >> HIPWM3_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT54_BATFRAC_MASK) >> HIPWM3_HBAT54_BATFRAC_SHIFT)
#define  HIPWM3_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM3_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT55_RESERVED1_MASK) >> HIPWM3_HBAT55_RESERVED1_SHIFT)
#define  HIPWM3_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT55_RESERVED1_SHIFT))

#define  HIPWM3_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT55_BATLAST_SHIFT 19
#define  HIPWM3_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT55_BATLAST_MASK) >> HIPWM3_HBAT55_BATLAST_SHIFT)
#define  HIPWM3_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT55_BATLAST_SHIFT))

#define  HIPWM3_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT55_BATSIGN_MASK) >> HIPWM3_HBAT55_BATSIGN_SHIFT)
#define  HIPWM3_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT55_BATSIGN_SHIFT))

#define  HIPWM3_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT55_BATSHIFT_MASK) >> HIPWM3_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT55_BATFRAC_MASK) >> HIPWM3_HBAT55_BATFRAC_SHIFT)
#define  HIPWM3_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM3_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT56_RESERVED1_MASK) >> HIPWM3_HBAT56_RESERVED1_SHIFT)
#define  HIPWM3_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT56_RESERVED1_SHIFT))

#define  HIPWM3_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT56_BATLAST_SHIFT 19
#define  HIPWM3_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT56_BATLAST_MASK) >> HIPWM3_HBAT56_BATLAST_SHIFT)
#define  HIPWM3_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT56_BATLAST_SHIFT))

#define  HIPWM3_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT56_BATSIGN_MASK) >> HIPWM3_HBAT56_BATSIGN_SHIFT)
#define  HIPWM3_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT56_BATSIGN_SHIFT))

#define  HIPWM3_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT56_BATSHIFT_MASK) >> HIPWM3_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT56_BATFRAC_MASK) >> HIPWM3_HBAT56_BATFRAC_SHIFT)
#define  HIPWM3_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM3_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT57_RESERVED1_MASK) >> HIPWM3_HBAT57_RESERVED1_SHIFT)
#define  HIPWM3_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT57_RESERVED1_SHIFT))

#define  HIPWM3_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT57_BATLAST_SHIFT 19
#define  HIPWM3_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT57_BATLAST_MASK) >> HIPWM3_HBAT57_BATLAST_SHIFT)
#define  HIPWM3_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT57_BATLAST_SHIFT))

#define  HIPWM3_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT57_BATSIGN_MASK) >> HIPWM3_HBAT57_BATSIGN_SHIFT)
#define  HIPWM3_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT57_BATSIGN_SHIFT))

#define  HIPWM3_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT57_BATSHIFT_MASK) >> HIPWM3_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT57_BATFRAC_MASK) >> HIPWM3_HBAT57_BATFRAC_SHIFT)
#define  HIPWM3_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM3_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT58_RESERVED1_MASK) >> HIPWM3_HBAT58_RESERVED1_SHIFT)
#define  HIPWM3_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT58_RESERVED1_SHIFT))

#define  HIPWM3_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT58_BATLAST_SHIFT 19
#define  HIPWM3_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT58_BATLAST_MASK) >> HIPWM3_HBAT58_BATLAST_SHIFT)
#define  HIPWM3_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT58_BATLAST_SHIFT))

#define  HIPWM3_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT58_BATSIGN_MASK) >> HIPWM3_HBAT58_BATSIGN_SHIFT)
#define  HIPWM3_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT58_BATSIGN_SHIFT))

#define  HIPWM3_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT58_BATSHIFT_MASK) >> HIPWM3_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT58_BATFRAC_MASK) >> HIPWM3_HBAT58_BATFRAC_SHIFT)
#define  HIPWM3_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM3_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT59_RESERVED1_MASK) >> HIPWM3_HBAT59_RESERVED1_SHIFT)
#define  HIPWM3_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT59_RESERVED1_SHIFT))

#define  HIPWM3_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT59_BATLAST_SHIFT 19
#define  HIPWM3_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT59_BATLAST_MASK) >> HIPWM3_HBAT59_BATLAST_SHIFT)
#define  HIPWM3_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT59_BATLAST_SHIFT))

#define  HIPWM3_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT59_BATSIGN_MASK) >> HIPWM3_HBAT59_BATSIGN_SHIFT)
#define  HIPWM3_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT59_BATSIGN_SHIFT))

#define  HIPWM3_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT59_BATSHIFT_MASK) >> HIPWM3_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT59_BATFRAC_MASK) >> HIPWM3_HBAT59_BATFRAC_SHIFT)
#define  HIPWM3_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM3_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT60_RESERVED1_MASK) >> HIPWM3_HBAT60_RESERVED1_SHIFT)
#define  HIPWM3_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT60_RESERVED1_SHIFT))

#define  HIPWM3_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT60_BATLAST_SHIFT 19
#define  HIPWM3_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT60_BATLAST_MASK) >> HIPWM3_HBAT60_BATLAST_SHIFT)
#define  HIPWM3_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT60_BATLAST_SHIFT))

#define  HIPWM3_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT60_BATSIGN_MASK) >> HIPWM3_HBAT60_BATSIGN_SHIFT)
#define  HIPWM3_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT60_BATSIGN_SHIFT))

#define  HIPWM3_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT60_BATSHIFT_MASK) >> HIPWM3_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT60_BATFRAC_MASK) >> HIPWM3_HBAT60_BATFRAC_SHIFT)
#define  HIPWM3_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM3_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT61_RESERVED1_MASK) >> HIPWM3_HBAT61_RESERVED1_SHIFT)
#define  HIPWM3_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT61_RESERVED1_SHIFT))

#define  HIPWM3_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT61_BATLAST_SHIFT 19
#define  HIPWM3_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT61_BATLAST_MASK) >> HIPWM3_HBAT61_BATLAST_SHIFT)
#define  HIPWM3_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT61_BATLAST_SHIFT))

#define  HIPWM3_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT61_BATSIGN_MASK) >> HIPWM3_HBAT61_BATSIGN_SHIFT)
#define  HIPWM3_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT61_BATSIGN_SHIFT))

#define  HIPWM3_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT61_BATSHIFT_MASK) >> HIPWM3_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT61_BATFRAC_MASK) >> HIPWM3_HBAT61_BATFRAC_SHIFT)
#define  HIPWM3_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM3_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT62_RESERVED1_MASK) >> HIPWM3_HBAT62_RESERVED1_SHIFT)
#define  HIPWM3_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT62_RESERVED1_SHIFT))

#define  HIPWM3_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT62_BATLAST_SHIFT 19
#define  HIPWM3_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT62_BATLAST_MASK) >> HIPWM3_HBAT62_BATLAST_SHIFT)
#define  HIPWM3_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT62_BATLAST_SHIFT))

#define  HIPWM3_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT62_BATSIGN_MASK) >> HIPWM3_HBAT62_BATSIGN_SHIFT)
#define  HIPWM3_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT62_BATSIGN_SHIFT))

#define  HIPWM3_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT62_BATSHIFT_MASK) >> HIPWM3_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT62_BATFRAC_MASK) >> HIPWM3_HBAT62_BATFRAC_SHIFT)
#define  HIPWM3_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM3_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM3_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM3_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT63_RESERVED1_MASK) >> HIPWM3_HBAT63_RESERVED1_SHIFT)
#define  HIPWM3_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HBAT63_RESERVED1_SHIFT))

#define  HIPWM3_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM3_HBAT63_BATLAST_SHIFT 19
#define  HIPWM3_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT63_BATLAST_MASK) >> HIPWM3_HBAT63_BATLAST_SHIFT)
#define  HIPWM3_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM3_HBAT63_BATLAST_SHIFT))

#define  HIPWM3_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM3_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM3_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT63_BATSIGN_MASK) >> HIPWM3_HBAT63_BATSIGN_SHIFT)
#define  HIPWM3_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM3_HBAT63_BATSIGN_SHIFT))

#define  HIPWM3_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM3_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM3_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT63_BATSHIFT_MASK) >> HIPWM3_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM3_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM3_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM3_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM3_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM3_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM3_HBAT63_BATFRAC_MASK) >> HIPWM3_HBAT63_BATFRAC_SHIFT)
#define  HIPWM3_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM3_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM3_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC0_RESERVED1_MASK) >> HIPWM3_HMIC0_RESERVED1_SHIFT)
#define  HIPWM3_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC0_RESERVED1_SHIFT))

#define  HIPWM3_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC0_MICINTPIX_MASK) >> HIPWM3_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC0_MICFRACPIX_MASK) >> HIPWM3_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM3_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC1_RESERVED1_MASK) >> HIPWM3_HMIC1_RESERVED1_SHIFT)
#define  HIPWM3_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC1_RESERVED1_SHIFT))

#define  HIPWM3_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC1_MICINTPIX_MASK) >> HIPWM3_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC1_MICFRACPIX_MASK) >> HIPWM3_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM3_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC2_RESERVED1_MASK) >> HIPWM3_HMIC2_RESERVED1_SHIFT)
#define  HIPWM3_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC2_RESERVED1_SHIFT))

#define  HIPWM3_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC2_MICINTPIX_MASK) >> HIPWM3_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC2_MICFRACPIX_MASK) >> HIPWM3_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM3_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC3_RESERVED1_MASK) >> HIPWM3_HMIC3_RESERVED1_SHIFT)
#define  HIPWM3_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC3_RESERVED1_SHIFT))

#define  HIPWM3_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC3_MICINTPIX_MASK) >> HIPWM3_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC3_MICFRACPIX_MASK) >> HIPWM3_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM3_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC4_RESERVED1_MASK) >> HIPWM3_HMIC4_RESERVED1_SHIFT)
#define  HIPWM3_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC4_RESERVED1_SHIFT))

#define  HIPWM3_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC4_MICINTPIX_MASK) >> HIPWM3_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC4_MICFRACPIX_MASK) >> HIPWM3_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM3_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC5_RESERVED1_MASK) >> HIPWM3_HMIC5_RESERVED1_SHIFT)
#define  HIPWM3_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC5_RESERVED1_SHIFT))

#define  HIPWM3_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC5_MICINTPIX_MASK) >> HIPWM3_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC5_MICFRACPIX_MASK) >> HIPWM3_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM3_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC6_RESERVED1_MASK) >> HIPWM3_HMIC6_RESERVED1_SHIFT)
#define  HIPWM3_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC6_RESERVED1_SHIFT))

#define  HIPWM3_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC6_MICINTPIX_MASK) >> HIPWM3_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC6_MICFRACPIX_MASK) >> HIPWM3_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM3_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC7_RESERVED1_MASK) >> HIPWM3_HMIC7_RESERVED1_SHIFT)
#define  HIPWM3_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC7_RESERVED1_SHIFT))

#define  HIPWM3_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC7_MICINTPIX_MASK) >> HIPWM3_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC7_MICFRACPIX_MASK) >> HIPWM3_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM3_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC8_RESERVED1_MASK) >> HIPWM3_HMIC8_RESERVED1_SHIFT)
#define  HIPWM3_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC8_RESERVED1_SHIFT))

#define  HIPWM3_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC8_MICINTPIX_MASK) >> HIPWM3_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC8_MICFRACPIX_MASK) >> HIPWM3_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM3_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC9_RESERVED1_MASK) >> HIPWM3_HMIC9_RESERVED1_SHIFT)
#define  HIPWM3_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC9_RESERVED1_SHIFT))

#define  HIPWM3_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC9_MICINTPIX_MASK) >> HIPWM3_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC9_MICFRACPIX_MASK) >> HIPWM3_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM3_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC10_RESERVED1_MASK) >> HIPWM3_HMIC10_RESERVED1_SHIFT)
#define  HIPWM3_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC10_RESERVED1_SHIFT))

#define  HIPWM3_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC10_MICINTPIX_MASK) >> HIPWM3_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC10_MICFRACPIX_MASK) >> HIPWM3_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM3_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM3_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM3_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC11_RESERVED1_MASK) >> HIPWM3_HMIC11_RESERVED1_SHIFT)
#define  HIPWM3_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM3_HMIC11_RESERVED1_SHIFT))

#define  HIPWM3_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM3_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM3_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC11_MICINTPIX_MASK) >> HIPWM3_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM3_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM3_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM3_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM3_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM3_HMIC11_MICFRACPIX_MASK) >> HIPWM3_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM3_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM3_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM3_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 5 of 8) (HiPWM4)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM4_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM4_HCR_RESERVED1_SHIFT 21
#define  HIPWM4_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_RESERVED1_MASK) >> HIPWM4_HCR_RESERVED1_SHIFT)
#define  HIPWM4_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HCR_RESERVED1_SHIFT))

#define  HIPWM4_HCR_EDGESEL_MASK 0x100000
#define  HIPWM4_HCR_EDGESEL_SHIFT 20
#define  HIPWM4_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_EDGESEL_MASK) >> HIPWM4_HCR_EDGESEL_SHIFT)
#define  HIPWM4_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM4_HCR_EDGESEL_SHIFT))

#define  HIPWM4_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM4_HCR_NUMEDGE_SHIFT 19
#define  HIPWM4_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_NUMEDGE_MASK) >> HIPWM4_HCR_NUMEDGE_SHIFT)
#define  HIPWM4_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM4_HCR_NUMEDGE_SHIFT))

#define  HIPWM4_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM4_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM4_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM4_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM4_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM4_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM4_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM4_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM4_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM4_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM4_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM4_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM4_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM4_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM4_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM4_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM4_HCR_NOBATLAST_SHIFT 15
#define  HIPWM4_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_NOBATLAST_MASK) >> HIPWM4_HCR_NOBATLAST_SHIFT)
#define  HIPWM4_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM4_HCR_NOBATLAST_SHIFT))

#define  HIPWM4_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM4_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM4_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_DUALMARGIN_MASK) >> HIPWM4_HCR_DUALMARGIN_SHIFT)
#define  HIPWM4_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM4_HCR_DUALMARGIN_SHIFT))

#define  HIPWM4_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM4_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM4_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_FILTERPULSES_MASK) >> HIPWM4_HCR_FILTERPULSES_SHIFT)
#define  HIPWM4_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM4_HCR_FILTERPULSES_SHIFT))

#define  HIPWM4_HCR_CRCRST_MASK 0x1000
#define  HIPWM4_HCR_CRCRST_SHIFT 12
#define  HIPWM4_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CRCRST_MASK) >> HIPWM4_HCR_CRCRST_SHIFT)
#define  HIPWM4_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM4_HCR_CRCRST_SHIFT))

#define  HIPWM4_HCR_HIPSDIR_MASK 0x800
#define  HIPWM4_HCR_HIPSDIR_SHIFT 11
#define  HIPWM4_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_HIPSDIR_MASK) >> HIPWM4_HCR_HIPSDIR_SHIFT)
#define  HIPWM4_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM4_HCR_HIPSDIR_SHIFT))

#define  HIPWM4_HCR_PTWIDTH_MASK 0x400
#define  HIPWM4_HCR_PTWIDTH_SHIFT 10
#define  HIPWM4_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_PTWIDTH_MASK) >> HIPWM4_HCR_PTWIDTH_SHIFT)
#define  HIPWM4_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM4_HCR_PTWIDTH_SHIFT))

#define  HIPWM4_HCR_TESTMODE_MASK 0x200
#define  HIPWM4_HCR_TESTMODE_SHIFT 9
#define  HIPWM4_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_TESTMODE_MASK) >> HIPWM4_HCR_TESTMODE_SHIFT)
#define  HIPWM4_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM4_HCR_TESTMODE_SHIFT))

#define  HIPWM4_HCR_CHANZERO_MASK 0x100
#define  HIPWM4_HCR_CHANZERO_SHIFT 8
#define  HIPWM4_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CHANZERO_MASK) >> HIPWM4_HCR_CHANZERO_SHIFT)
#define  HIPWM4_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM4_HCR_CHANZERO_SHIFT))

#define  HIPWM4_HCR_INVPT_MASK 0x80
#define  HIPWM4_HCR_INVPT_SHIFT 7
#define  HIPWM4_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_INVPT_MASK) >> HIPWM4_HCR_INVPT_SHIFT)
#define  HIPWM4_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM4_HCR_INVPT_SHIFT))

#define  HIPWM4_HCR_CPUACCESS_MASK 0x40
#define  HIPWM4_HCR_CPUACCESS_SHIFT 6
#define  HIPWM4_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_CPUACCESS_MASK) >> HIPWM4_HCR_CPUACCESS_SHIFT)
#define  HIPWM4_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM4_HCR_CPUACCESS_SHIFT))

#define  HIPWM4_HCR_PECEN_MASK 0x20
#define  HIPWM4_HCR_PECEN_SHIFT 5
#define  HIPWM4_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_PECEN_MASK) >> HIPWM4_HCR_PECEN_SHIFT)
#define  HIPWM4_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_PECEN_SHIFT))

#define  HIPWM4_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM4_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM4_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_PIGTOPHSYNC_MASK) >> HIPWM4_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM4_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM4_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM4_HCR_PIGEN_MASK 0x8
#define  HIPWM4_HCR_PIGEN_SHIFT 3
#define  HIPWM4_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_PIGEN_MASK) >> HIPWM4_HCR_PIGEN_SHIFT)
#define  HIPWM4_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_PIGEN_SHIFT))

#define  HIPWM4_HCR_BENDEREN_MASK 0x4
#define  HIPWM4_HCR_BENDEREN_SHIFT 2
#define  HIPWM4_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_BENDEREN_MASK) >> HIPWM4_HCR_BENDEREN_SHIFT)
#define  HIPWM4_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM4_HCR_BENDEREN_SHIFT))

#define  HIPWM4_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM4_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM4_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_SYNTHHSYNCEN_MASK) >> HIPWM4_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM4_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM4_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM4_HCR_ENABLE_MASK 0x1
#define  HIPWM4_HCR_ENABLE_SHIFT 0
#define  HIPWM4_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM4_HCR_ENABLE_MASK) >> HIPWM4_HCR_ENABLE_SHIFT)
#define  HIPWM4_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM4_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM4_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM4_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM4_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM4_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM4_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM4_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM4_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM4_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM4_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM4_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM4_HSMR_SIDEMARGIN_MASK) >> HIPWM4_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM4_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM4_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM4_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM4_HTSR_RESERVED1_SHIFT 8
#define  HIPWM4_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HTSR_RESERVED1_MASK) >> HIPWM4_HTSR_RESERVED1_SHIFT)
#define  HIPWM4_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HTSR_RESERVED1_SHIFT))

#define  HIPWM4_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM4_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM4_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM4_HTSR_TOPSKEW_MASK) >> HIPWM4_HTSR_TOPSKEW_SHIFT)
#define  HIPWM4_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM4_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM4_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HSR_RESERVED1_SHIFT 12
#define  HIPWM4_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_RESERVED1_MASK) >> HIPWM4_HSR_RESERVED1_SHIFT)
#define  HIPWM4_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HSR_RESERVED1_SHIFT))

#define  HIPWM4_HSR_INDEX_MASK 0xf00
#define  HIPWM4_HSR_INDEX_SHIFT 8
#define  HIPWM4_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_INDEX_MASK) >> HIPWM4_HSR_INDEX_SHIFT)
#define  HIPWM4_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM4_HSR_INDEX_SHIFT))

#define  HIPWM4_HSR_DIRRTOL_MASK 0x80
#define  HIPWM4_HSR_DIRRTOL_SHIFT 7
#define  HIPWM4_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_DIRRTOL_MASK) >> HIPWM4_HSR_DIRRTOL_SHIFT)
#define  HIPWM4_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM4_HSR_DIRRTOL_SHIFT))

#define  HIPWM4_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM4_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM4_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_PAGE_STATE_MASK) >> HIPWM4_HSR_PAGE_STATE_SHIFT)
#define  HIPWM4_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM4_HSR_PAGE_STATE_SHIFT))

#define  HIPWM4_HSR_RESERVED2_MASK 0x8
#define  HIPWM4_HSR_RESERVED2_SHIFT 3
#define  HIPWM4_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_RESERVED2_MASK) >> HIPWM4_HSR_RESERVED2_SHIFT)
#define  HIPWM4_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM4_HSR_RESERVED2_SHIFT))

#define  HIPWM4_HSR_READY_IN_MASK 0x4
#define  HIPWM4_HSR_READY_IN_SHIFT 2
#define  HIPWM4_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_READY_IN_MASK) >> HIPWM4_HSR_READY_IN_SHIFT)
#define  HIPWM4_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM4_HSR_READY_IN_SHIFT))

#define  HIPWM4_HSR_VALID_IN_MASK 0x2
#define  HIPWM4_HSR_VALID_IN_SHIFT 1
#define  HIPWM4_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_VALID_IN_MASK) >> HIPWM4_HSR_VALID_IN_SHIFT)
#define  HIPWM4_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM4_HSR_VALID_IN_SHIFT))

#define  HIPWM4_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM4_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM4_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM4_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM4_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM4_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM4_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM4_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM4_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HSPWR_RESERVED1_MASK) >> HIPWM4_HSPWR_RESERVED1_SHIFT)
#define  HIPWM4_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HSPWR_RESERVED1_SHIFT))

#define  HIPWM4_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM4_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM4_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM4_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM4_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM4_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM4_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM4_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM4_HSQR_RESERVED1_SHIFT 24
#define  HIPWM4_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HSQR_RESERVED1_MASK) >> HIPWM4_HSQR_RESERVED1_SHIFT)
#define  HIPWM4_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HSQR_RESERVED1_SHIFT))

#define  HIPWM4_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM4_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM4_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM4_HSQR_QUIWIDTH_MASK) >> HIPWM4_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM4_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM4_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM4_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM4_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM4_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM4_PRRA_PEC_VALUE_MASK) >> HIPWM4_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM4_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM4_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM4_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM4_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPVR_RESERVED1_MASK) >> HIPWM4_HPPVR_RESERVED1_SHIFT)
#define  HIPWM4_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPPVR_RESERVED1_SHIFT))

#define  HIPWM4_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM4_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM4_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPVR_PIGPTVAL_MASK) >> HIPWM4_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM4_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM4_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM4_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPSR_RESERVED1_SHIFT 16
#define  HIPWM4_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPSR_RESERVED1_MASK) >> HIPWM4_HPSR_RESERVED1_SHIFT)
#define  HIPWM4_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPSR_RESERVED1_SHIFT))

#define  HIPWM4_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM4_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM4_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM4_HPSR_PIGPIXSZ_MASK) >> HIPWM4_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM4_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM4_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM4_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPCR_RESERVED1_SHIFT 16
#define  HIPWM4_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPCR_RESERVED1_MASK) >> HIPWM4_HPCR_RESERVED1_SHIFT)
#define  HIPWM4_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPCR_RESERVED1_SHIFT))

#define  HIPWM4_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM4_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM4_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM4_HPCR_PIGPIXCNT_MASK) >> HIPWM4_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM4_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM4_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM4_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM4_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPSR_RESERVED1_MASK) >> HIPWM4_HPPSR_RESERVED1_SHIFT)
#define  HIPWM4_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPPSR_RESERVED1_SHIFT))

#define  HIPWM4_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM4_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM4_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPSR_PIGPIXSPACE_MASK) >> HIPWM4_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM4_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM4_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM4_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM4_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPLSR_RESERVED1_MASK) >> HIPWM4_HPLSR_RESERVED1_SHIFT)
#define  HIPWM4_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPLSR_RESERVED1_SHIFT))

#define  HIPWM4_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM4_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM4_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM4_HPLSR_PIGLINESPACE_MASK) >> HIPWM4_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM4_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM4_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM4_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM4_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPOER_RESERVED1_MASK) >> HIPWM4_HPPOER_RESERVED1_SHIFT)
#define  HIPWM4_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPPOER_RESERVED1_SHIFT))

#define  HIPWM4_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM4_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM4_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM4_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM4_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM4_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM4_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM4_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPOOR_RESERVED1_MASK) >> HIPWM4_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM4_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM4_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM4_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM4_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM4_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM4_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM4_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM4_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM4_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPLOR_RESERVED1_MASK) >> HIPWM4_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM4_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM4_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM4_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM4_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM4_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM4_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM4_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM4_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM4_HCRC_CRC_MASK 0xffffffff
#define  HIPWM4_HCRC_CRC_SHIFT 0
#define  HIPWM4_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM4_HCRC_CRC_MASK) >> HIPWM4_HCRC_CRC_SHIFT)
#define  HIPWM4_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM4_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM4_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HBCR_RESERVED1_SHIFT 12
#define  HIPWM4_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBCR_RESERVED1_MASK) >> HIPWM4_HBCR_RESERVED1_SHIFT)
#define  HIPWM4_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBCR_RESERVED1_SHIFT))

#define  HIPWM4_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM4_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM4_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM4_HBCR_SAMPLESPERSEG_MASK) >> HIPWM4_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM4_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM4_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM4_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM4_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM4_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HLBDR_RESERVED1_MASK) >> HIPWM4_HLBDR_RESERVED1_SHIFT)
#define  HIPWM4_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HLBDR_RESERVED1_SHIFT))

#define  HIPWM4_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM4_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM4_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM4_HLBDR_LBDRINT_MASK) >> HIPWM4_HLBDR_LBDRINT_SHIFT)
#define  HIPWM4_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM4_HLBDR_LBDRINT_SHIFT))

#define  HIPWM4_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM4_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM4_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HLBDR_LBDRFRAC_MASK) >> HIPWM4_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM4_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM4_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM4_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM4_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM4_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HRBDR_RESERVED1_MASK) >> HIPWM4_HRBDR_RESERVED1_SHIFT)
#define  HIPWM4_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HRBDR_RESERVED1_SHIFT))

#define  HIPWM4_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM4_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM4_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM4_HRBDR_RBDRINT_MASK) >> HIPWM4_HRBDR_RBDRINT_SHIFT)
#define  HIPWM4_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM4_HRBDR_RBDRINT_SHIFT))

#define  HIPWM4_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM4_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM4_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HRBDR_RBDRFRAC_MASK) >> HIPWM4_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM4_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM4_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM4_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM4_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM4_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCR_RESERVED1_MASK) >> HIPWM4_HBNCR_RESERVED1_SHIFT)
#define  HIPWM4_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBNCR_RESERVED1_SHIFT))

#define  HIPWM4_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM4_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM4_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCR_LFSRINITCNTL_MASK) >> HIPWM4_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM4_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM4_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM4_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM4_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM4_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCR_BENDERLFSREN_MASK) >> HIPWM4_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM4_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM4_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM4_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM4_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM4_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM4_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM4_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM4_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM4_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM4_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNINIT_RESERVED1_MASK) >> HIPWM4_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM4_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM4_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM4_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM4_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM4_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM4_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM4_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM4_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM4_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM4_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCV_RESERVED1_MASK) >> HIPWM4_HBNCV_RESERVED1_SHIFT)
#define  HIPWM4_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBNCV_RESERVED1_SHIFT))

#define  HIPWM4_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM4_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM4_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM4_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM4_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM4_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM4_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM4_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT0_RESERVED1_MASK) >> HIPWM4_HBAT0_RESERVED1_SHIFT)
#define  HIPWM4_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT0_RESERVED1_SHIFT))

#define  HIPWM4_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT0_BATLAST_SHIFT 19
#define  HIPWM4_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT0_BATLAST_MASK) >> HIPWM4_HBAT0_BATLAST_SHIFT)
#define  HIPWM4_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT0_BATLAST_SHIFT))

#define  HIPWM4_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT0_BATSIGN_MASK) >> HIPWM4_HBAT0_BATSIGN_SHIFT)
#define  HIPWM4_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT0_BATSIGN_SHIFT))

#define  HIPWM4_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT0_BATSHIFT_MASK) >> HIPWM4_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT0_BATFRAC_MASK) >> HIPWM4_HBAT0_BATFRAC_SHIFT)
#define  HIPWM4_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM4_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT1_RESERVED1_MASK) >> HIPWM4_HBAT1_RESERVED1_SHIFT)
#define  HIPWM4_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT1_RESERVED1_SHIFT))

#define  HIPWM4_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT1_BATLAST_SHIFT 19
#define  HIPWM4_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT1_BATLAST_MASK) >> HIPWM4_HBAT1_BATLAST_SHIFT)
#define  HIPWM4_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT1_BATLAST_SHIFT))

#define  HIPWM4_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT1_BATSIGN_MASK) >> HIPWM4_HBAT1_BATSIGN_SHIFT)
#define  HIPWM4_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT1_BATSIGN_SHIFT))

#define  HIPWM4_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT1_BATSHIFT_MASK) >> HIPWM4_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT1_BATFRAC_MASK) >> HIPWM4_HBAT1_BATFRAC_SHIFT)
#define  HIPWM4_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM4_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT2_RESERVED1_MASK) >> HIPWM4_HBAT2_RESERVED1_SHIFT)
#define  HIPWM4_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT2_RESERVED1_SHIFT))

#define  HIPWM4_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT2_BATLAST_SHIFT 19
#define  HIPWM4_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT2_BATLAST_MASK) >> HIPWM4_HBAT2_BATLAST_SHIFT)
#define  HIPWM4_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT2_BATLAST_SHIFT))

#define  HIPWM4_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT2_BATSIGN_MASK) >> HIPWM4_HBAT2_BATSIGN_SHIFT)
#define  HIPWM4_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT2_BATSIGN_SHIFT))

#define  HIPWM4_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT2_BATSHIFT_MASK) >> HIPWM4_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT2_BATFRAC_MASK) >> HIPWM4_HBAT2_BATFRAC_SHIFT)
#define  HIPWM4_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM4_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT3_RESERVED1_MASK) >> HIPWM4_HBAT3_RESERVED1_SHIFT)
#define  HIPWM4_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT3_RESERVED1_SHIFT))

#define  HIPWM4_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT3_BATLAST_SHIFT 19
#define  HIPWM4_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT3_BATLAST_MASK) >> HIPWM4_HBAT3_BATLAST_SHIFT)
#define  HIPWM4_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT3_BATLAST_SHIFT))

#define  HIPWM4_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT3_BATSIGN_MASK) >> HIPWM4_HBAT3_BATSIGN_SHIFT)
#define  HIPWM4_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT3_BATSIGN_SHIFT))

#define  HIPWM4_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT3_BATSHIFT_MASK) >> HIPWM4_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT3_BATFRAC_MASK) >> HIPWM4_HBAT3_BATFRAC_SHIFT)
#define  HIPWM4_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM4_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT4_RESERVED1_MASK) >> HIPWM4_HBAT4_RESERVED1_SHIFT)
#define  HIPWM4_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT4_RESERVED1_SHIFT))

#define  HIPWM4_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT4_BATLAST_SHIFT 19
#define  HIPWM4_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT4_BATLAST_MASK) >> HIPWM4_HBAT4_BATLAST_SHIFT)
#define  HIPWM4_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT4_BATLAST_SHIFT))

#define  HIPWM4_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT4_BATSIGN_MASK) >> HIPWM4_HBAT4_BATSIGN_SHIFT)
#define  HIPWM4_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT4_BATSIGN_SHIFT))

#define  HIPWM4_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT4_BATSHIFT_MASK) >> HIPWM4_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT4_BATFRAC_MASK) >> HIPWM4_HBAT4_BATFRAC_SHIFT)
#define  HIPWM4_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM4_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT5_RESERVED1_MASK) >> HIPWM4_HBAT5_RESERVED1_SHIFT)
#define  HIPWM4_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT5_RESERVED1_SHIFT))

#define  HIPWM4_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT5_BATLAST_SHIFT 19
#define  HIPWM4_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT5_BATLAST_MASK) >> HIPWM4_HBAT5_BATLAST_SHIFT)
#define  HIPWM4_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT5_BATLAST_SHIFT))

#define  HIPWM4_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT5_BATSIGN_MASK) >> HIPWM4_HBAT5_BATSIGN_SHIFT)
#define  HIPWM4_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT5_BATSIGN_SHIFT))

#define  HIPWM4_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT5_BATSHIFT_MASK) >> HIPWM4_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT5_BATFRAC_MASK) >> HIPWM4_HBAT5_BATFRAC_SHIFT)
#define  HIPWM4_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM4_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT6_RESERVED1_MASK) >> HIPWM4_HBAT6_RESERVED1_SHIFT)
#define  HIPWM4_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT6_RESERVED1_SHIFT))

#define  HIPWM4_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT6_BATLAST_SHIFT 19
#define  HIPWM4_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT6_BATLAST_MASK) >> HIPWM4_HBAT6_BATLAST_SHIFT)
#define  HIPWM4_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT6_BATLAST_SHIFT))

#define  HIPWM4_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT6_BATSIGN_MASK) >> HIPWM4_HBAT6_BATSIGN_SHIFT)
#define  HIPWM4_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT6_BATSIGN_SHIFT))

#define  HIPWM4_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT6_BATSHIFT_MASK) >> HIPWM4_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT6_BATFRAC_MASK) >> HIPWM4_HBAT6_BATFRAC_SHIFT)
#define  HIPWM4_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM4_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT7_RESERVED1_MASK) >> HIPWM4_HBAT7_RESERVED1_SHIFT)
#define  HIPWM4_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT7_RESERVED1_SHIFT))

#define  HIPWM4_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT7_BATLAST_SHIFT 19
#define  HIPWM4_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT7_BATLAST_MASK) >> HIPWM4_HBAT7_BATLAST_SHIFT)
#define  HIPWM4_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT7_BATLAST_SHIFT))

#define  HIPWM4_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT7_BATSIGN_MASK) >> HIPWM4_HBAT7_BATSIGN_SHIFT)
#define  HIPWM4_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT7_BATSIGN_SHIFT))

#define  HIPWM4_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT7_BATSHIFT_MASK) >> HIPWM4_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT7_BATFRAC_MASK) >> HIPWM4_HBAT7_BATFRAC_SHIFT)
#define  HIPWM4_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM4_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT8_RESERVED1_MASK) >> HIPWM4_HBAT8_RESERVED1_SHIFT)
#define  HIPWM4_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT8_RESERVED1_SHIFT))

#define  HIPWM4_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT8_BATLAST_SHIFT 19
#define  HIPWM4_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT8_BATLAST_MASK) >> HIPWM4_HBAT8_BATLAST_SHIFT)
#define  HIPWM4_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT8_BATLAST_SHIFT))

#define  HIPWM4_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT8_BATSIGN_MASK) >> HIPWM4_HBAT8_BATSIGN_SHIFT)
#define  HIPWM4_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT8_BATSIGN_SHIFT))

#define  HIPWM4_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT8_BATSHIFT_MASK) >> HIPWM4_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT8_BATFRAC_MASK) >> HIPWM4_HBAT8_BATFRAC_SHIFT)
#define  HIPWM4_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM4_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT9_RESERVED1_MASK) >> HIPWM4_HBAT9_RESERVED1_SHIFT)
#define  HIPWM4_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT9_RESERVED1_SHIFT))

#define  HIPWM4_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT9_BATLAST_SHIFT 19
#define  HIPWM4_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT9_BATLAST_MASK) >> HIPWM4_HBAT9_BATLAST_SHIFT)
#define  HIPWM4_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT9_BATLAST_SHIFT))

#define  HIPWM4_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT9_BATSIGN_MASK) >> HIPWM4_HBAT9_BATSIGN_SHIFT)
#define  HIPWM4_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT9_BATSIGN_SHIFT))

#define  HIPWM4_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT9_BATSHIFT_MASK) >> HIPWM4_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT9_BATFRAC_MASK) >> HIPWM4_HBAT9_BATFRAC_SHIFT)
#define  HIPWM4_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM4_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT10_RESERVED1_MASK) >> HIPWM4_HBAT10_RESERVED1_SHIFT)
#define  HIPWM4_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT10_RESERVED1_SHIFT))

#define  HIPWM4_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT10_BATLAST_SHIFT 19
#define  HIPWM4_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT10_BATLAST_MASK) >> HIPWM4_HBAT10_BATLAST_SHIFT)
#define  HIPWM4_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT10_BATLAST_SHIFT))

#define  HIPWM4_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT10_BATSIGN_MASK) >> HIPWM4_HBAT10_BATSIGN_SHIFT)
#define  HIPWM4_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT10_BATSIGN_SHIFT))

#define  HIPWM4_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT10_BATSHIFT_MASK) >> HIPWM4_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT10_BATFRAC_MASK) >> HIPWM4_HBAT10_BATFRAC_SHIFT)
#define  HIPWM4_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM4_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT11_RESERVED1_MASK) >> HIPWM4_HBAT11_RESERVED1_SHIFT)
#define  HIPWM4_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT11_RESERVED1_SHIFT))

#define  HIPWM4_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT11_BATLAST_SHIFT 19
#define  HIPWM4_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT11_BATLAST_MASK) >> HIPWM4_HBAT11_BATLAST_SHIFT)
#define  HIPWM4_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT11_BATLAST_SHIFT))

#define  HIPWM4_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT11_BATSIGN_MASK) >> HIPWM4_HBAT11_BATSIGN_SHIFT)
#define  HIPWM4_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT11_BATSIGN_SHIFT))

#define  HIPWM4_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT11_BATSHIFT_MASK) >> HIPWM4_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT11_BATFRAC_MASK) >> HIPWM4_HBAT11_BATFRAC_SHIFT)
#define  HIPWM4_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM4_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT12_RESERVED1_MASK) >> HIPWM4_HBAT12_RESERVED1_SHIFT)
#define  HIPWM4_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT12_RESERVED1_SHIFT))

#define  HIPWM4_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT12_BATLAST_SHIFT 19
#define  HIPWM4_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT12_BATLAST_MASK) >> HIPWM4_HBAT12_BATLAST_SHIFT)
#define  HIPWM4_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT12_BATLAST_SHIFT))

#define  HIPWM4_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT12_BATSIGN_MASK) >> HIPWM4_HBAT12_BATSIGN_SHIFT)
#define  HIPWM4_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT12_BATSIGN_SHIFT))

#define  HIPWM4_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT12_BATSHIFT_MASK) >> HIPWM4_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT12_BATFRAC_MASK) >> HIPWM4_HBAT12_BATFRAC_SHIFT)
#define  HIPWM4_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM4_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT13_RESERVED1_MASK) >> HIPWM4_HBAT13_RESERVED1_SHIFT)
#define  HIPWM4_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT13_RESERVED1_SHIFT))

#define  HIPWM4_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT13_BATLAST_SHIFT 19
#define  HIPWM4_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT13_BATLAST_MASK) >> HIPWM4_HBAT13_BATLAST_SHIFT)
#define  HIPWM4_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT13_BATLAST_SHIFT))

#define  HIPWM4_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT13_BATSIGN_MASK) >> HIPWM4_HBAT13_BATSIGN_SHIFT)
#define  HIPWM4_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT13_BATSIGN_SHIFT))

#define  HIPWM4_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT13_BATSHIFT_MASK) >> HIPWM4_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT13_BATFRAC_MASK) >> HIPWM4_HBAT13_BATFRAC_SHIFT)
#define  HIPWM4_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM4_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT14_RESERVED1_MASK) >> HIPWM4_HBAT14_RESERVED1_SHIFT)
#define  HIPWM4_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT14_RESERVED1_SHIFT))

#define  HIPWM4_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT14_BATLAST_SHIFT 19
#define  HIPWM4_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT14_BATLAST_MASK) >> HIPWM4_HBAT14_BATLAST_SHIFT)
#define  HIPWM4_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT14_BATLAST_SHIFT))

#define  HIPWM4_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT14_BATSIGN_MASK) >> HIPWM4_HBAT14_BATSIGN_SHIFT)
#define  HIPWM4_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT14_BATSIGN_SHIFT))

#define  HIPWM4_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT14_BATSHIFT_MASK) >> HIPWM4_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT14_BATFRAC_MASK) >> HIPWM4_HBAT14_BATFRAC_SHIFT)
#define  HIPWM4_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM4_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT15_RESERVED1_MASK) >> HIPWM4_HBAT15_RESERVED1_SHIFT)
#define  HIPWM4_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT15_RESERVED1_SHIFT))

#define  HIPWM4_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT15_BATLAST_SHIFT 19
#define  HIPWM4_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT15_BATLAST_MASK) >> HIPWM4_HBAT15_BATLAST_SHIFT)
#define  HIPWM4_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT15_BATLAST_SHIFT))

#define  HIPWM4_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT15_BATSIGN_MASK) >> HIPWM4_HBAT15_BATSIGN_SHIFT)
#define  HIPWM4_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT15_BATSIGN_SHIFT))

#define  HIPWM4_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT15_BATSHIFT_MASK) >> HIPWM4_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT15_BATFRAC_MASK) >> HIPWM4_HBAT15_BATFRAC_SHIFT)
#define  HIPWM4_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM4_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT16_RESERVED1_MASK) >> HIPWM4_HBAT16_RESERVED1_SHIFT)
#define  HIPWM4_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT16_RESERVED1_SHIFT))

#define  HIPWM4_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT16_BATLAST_SHIFT 19
#define  HIPWM4_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT16_BATLAST_MASK) >> HIPWM4_HBAT16_BATLAST_SHIFT)
#define  HIPWM4_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT16_BATLAST_SHIFT))

#define  HIPWM4_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT16_BATSIGN_MASK) >> HIPWM4_HBAT16_BATSIGN_SHIFT)
#define  HIPWM4_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT16_BATSIGN_SHIFT))

#define  HIPWM4_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT16_BATSHIFT_MASK) >> HIPWM4_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT16_BATFRAC_MASK) >> HIPWM4_HBAT16_BATFRAC_SHIFT)
#define  HIPWM4_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM4_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT17_RESERVED1_MASK) >> HIPWM4_HBAT17_RESERVED1_SHIFT)
#define  HIPWM4_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT17_RESERVED1_SHIFT))

#define  HIPWM4_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT17_BATLAST_SHIFT 19
#define  HIPWM4_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT17_BATLAST_MASK) >> HIPWM4_HBAT17_BATLAST_SHIFT)
#define  HIPWM4_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT17_BATLAST_SHIFT))

#define  HIPWM4_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT17_BATSIGN_MASK) >> HIPWM4_HBAT17_BATSIGN_SHIFT)
#define  HIPWM4_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT17_BATSIGN_SHIFT))

#define  HIPWM4_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT17_BATSHIFT_MASK) >> HIPWM4_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT17_BATFRAC_MASK) >> HIPWM4_HBAT17_BATFRAC_SHIFT)
#define  HIPWM4_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM4_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT18_RESERVED1_MASK) >> HIPWM4_HBAT18_RESERVED1_SHIFT)
#define  HIPWM4_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT18_RESERVED1_SHIFT))

#define  HIPWM4_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT18_BATLAST_SHIFT 19
#define  HIPWM4_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT18_BATLAST_MASK) >> HIPWM4_HBAT18_BATLAST_SHIFT)
#define  HIPWM4_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT18_BATLAST_SHIFT))

#define  HIPWM4_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT18_BATSIGN_MASK) >> HIPWM4_HBAT18_BATSIGN_SHIFT)
#define  HIPWM4_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT18_BATSIGN_SHIFT))

#define  HIPWM4_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT18_BATSHIFT_MASK) >> HIPWM4_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT18_BATFRAC_MASK) >> HIPWM4_HBAT18_BATFRAC_SHIFT)
#define  HIPWM4_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM4_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT19_RESERVED1_MASK) >> HIPWM4_HBAT19_RESERVED1_SHIFT)
#define  HIPWM4_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT19_RESERVED1_SHIFT))

#define  HIPWM4_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT19_BATLAST_SHIFT 19
#define  HIPWM4_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT19_BATLAST_MASK) >> HIPWM4_HBAT19_BATLAST_SHIFT)
#define  HIPWM4_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT19_BATLAST_SHIFT))

#define  HIPWM4_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT19_BATSIGN_MASK) >> HIPWM4_HBAT19_BATSIGN_SHIFT)
#define  HIPWM4_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT19_BATSIGN_SHIFT))

#define  HIPWM4_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT19_BATSHIFT_MASK) >> HIPWM4_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT19_BATFRAC_MASK) >> HIPWM4_HBAT19_BATFRAC_SHIFT)
#define  HIPWM4_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM4_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT20_RESERVED1_MASK) >> HIPWM4_HBAT20_RESERVED1_SHIFT)
#define  HIPWM4_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT20_RESERVED1_SHIFT))

#define  HIPWM4_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT20_BATLAST_SHIFT 19
#define  HIPWM4_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT20_BATLAST_MASK) >> HIPWM4_HBAT20_BATLAST_SHIFT)
#define  HIPWM4_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT20_BATLAST_SHIFT))

#define  HIPWM4_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT20_BATSIGN_MASK) >> HIPWM4_HBAT20_BATSIGN_SHIFT)
#define  HIPWM4_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT20_BATSIGN_SHIFT))

#define  HIPWM4_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT20_BATSHIFT_MASK) >> HIPWM4_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT20_BATFRAC_MASK) >> HIPWM4_HBAT20_BATFRAC_SHIFT)
#define  HIPWM4_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM4_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT21_RESERVED1_MASK) >> HIPWM4_HBAT21_RESERVED1_SHIFT)
#define  HIPWM4_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT21_RESERVED1_SHIFT))

#define  HIPWM4_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT21_BATLAST_SHIFT 19
#define  HIPWM4_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT21_BATLAST_MASK) >> HIPWM4_HBAT21_BATLAST_SHIFT)
#define  HIPWM4_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT21_BATLAST_SHIFT))

#define  HIPWM4_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT21_BATSIGN_MASK) >> HIPWM4_HBAT21_BATSIGN_SHIFT)
#define  HIPWM4_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT21_BATSIGN_SHIFT))

#define  HIPWM4_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT21_BATSHIFT_MASK) >> HIPWM4_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT21_BATFRAC_MASK) >> HIPWM4_HBAT21_BATFRAC_SHIFT)
#define  HIPWM4_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM4_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT22_RESERVED1_MASK) >> HIPWM4_HBAT22_RESERVED1_SHIFT)
#define  HIPWM4_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT22_RESERVED1_SHIFT))

#define  HIPWM4_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT22_BATLAST_SHIFT 19
#define  HIPWM4_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT22_BATLAST_MASK) >> HIPWM4_HBAT22_BATLAST_SHIFT)
#define  HIPWM4_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT22_BATLAST_SHIFT))

#define  HIPWM4_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT22_BATSIGN_MASK) >> HIPWM4_HBAT22_BATSIGN_SHIFT)
#define  HIPWM4_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT22_BATSIGN_SHIFT))

#define  HIPWM4_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT22_BATSHIFT_MASK) >> HIPWM4_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT22_BATFRAC_MASK) >> HIPWM4_HBAT22_BATFRAC_SHIFT)
#define  HIPWM4_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM4_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT23_RESERVED1_MASK) >> HIPWM4_HBAT23_RESERVED1_SHIFT)
#define  HIPWM4_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT23_RESERVED1_SHIFT))

#define  HIPWM4_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT23_BATLAST_SHIFT 19
#define  HIPWM4_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT23_BATLAST_MASK) >> HIPWM4_HBAT23_BATLAST_SHIFT)
#define  HIPWM4_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT23_BATLAST_SHIFT))

#define  HIPWM4_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT23_BATSIGN_MASK) >> HIPWM4_HBAT23_BATSIGN_SHIFT)
#define  HIPWM4_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT23_BATSIGN_SHIFT))

#define  HIPWM4_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT23_BATSHIFT_MASK) >> HIPWM4_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT23_BATFRAC_MASK) >> HIPWM4_HBAT23_BATFRAC_SHIFT)
#define  HIPWM4_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM4_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT24_RESERVED1_MASK) >> HIPWM4_HBAT24_RESERVED1_SHIFT)
#define  HIPWM4_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT24_RESERVED1_SHIFT))

#define  HIPWM4_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT24_BATLAST_SHIFT 19
#define  HIPWM4_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT24_BATLAST_MASK) >> HIPWM4_HBAT24_BATLAST_SHIFT)
#define  HIPWM4_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT24_BATLAST_SHIFT))

#define  HIPWM4_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT24_BATSIGN_MASK) >> HIPWM4_HBAT24_BATSIGN_SHIFT)
#define  HIPWM4_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT24_BATSIGN_SHIFT))

#define  HIPWM4_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT24_BATSHIFT_MASK) >> HIPWM4_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT24_BATFRAC_MASK) >> HIPWM4_HBAT24_BATFRAC_SHIFT)
#define  HIPWM4_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM4_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT25_RESERVED1_MASK) >> HIPWM4_HBAT25_RESERVED1_SHIFT)
#define  HIPWM4_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT25_RESERVED1_SHIFT))

#define  HIPWM4_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT25_BATLAST_SHIFT 19
#define  HIPWM4_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT25_BATLAST_MASK) >> HIPWM4_HBAT25_BATLAST_SHIFT)
#define  HIPWM4_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT25_BATLAST_SHIFT))

#define  HIPWM4_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT25_BATSIGN_MASK) >> HIPWM4_HBAT25_BATSIGN_SHIFT)
#define  HIPWM4_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT25_BATSIGN_SHIFT))

#define  HIPWM4_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT25_BATSHIFT_MASK) >> HIPWM4_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT25_BATFRAC_MASK) >> HIPWM4_HBAT25_BATFRAC_SHIFT)
#define  HIPWM4_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM4_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT26_RESERVED1_MASK) >> HIPWM4_HBAT26_RESERVED1_SHIFT)
#define  HIPWM4_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT26_RESERVED1_SHIFT))

#define  HIPWM4_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT26_BATLAST_SHIFT 19
#define  HIPWM4_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT26_BATLAST_MASK) >> HIPWM4_HBAT26_BATLAST_SHIFT)
#define  HIPWM4_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT26_BATLAST_SHIFT))

#define  HIPWM4_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT26_BATSIGN_MASK) >> HIPWM4_HBAT26_BATSIGN_SHIFT)
#define  HIPWM4_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT26_BATSIGN_SHIFT))

#define  HIPWM4_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT26_BATSHIFT_MASK) >> HIPWM4_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT26_BATFRAC_MASK) >> HIPWM4_HBAT26_BATFRAC_SHIFT)
#define  HIPWM4_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM4_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT27_RESERVED1_MASK) >> HIPWM4_HBAT27_RESERVED1_SHIFT)
#define  HIPWM4_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT27_RESERVED1_SHIFT))

#define  HIPWM4_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT27_BATLAST_SHIFT 19
#define  HIPWM4_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT27_BATLAST_MASK) >> HIPWM4_HBAT27_BATLAST_SHIFT)
#define  HIPWM4_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT27_BATLAST_SHIFT))

#define  HIPWM4_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT27_BATSIGN_MASK) >> HIPWM4_HBAT27_BATSIGN_SHIFT)
#define  HIPWM4_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT27_BATSIGN_SHIFT))

#define  HIPWM4_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT27_BATSHIFT_MASK) >> HIPWM4_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT27_BATFRAC_MASK) >> HIPWM4_HBAT27_BATFRAC_SHIFT)
#define  HIPWM4_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM4_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT28_RESERVED1_MASK) >> HIPWM4_HBAT28_RESERVED1_SHIFT)
#define  HIPWM4_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT28_RESERVED1_SHIFT))

#define  HIPWM4_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT28_BATLAST_SHIFT 19
#define  HIPWM4_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT28_BATLAST_MASK) >> HIPWM4_HBAT28_BATLAST_SHIFT)
#define  HIPWM4_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT28_BATLAST_SHIFT))

#define  HIPWM4_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT28_BATSIGN_MASK) >> HIPWM4_HBAT28_BATSIGN_SHIFT)
#define  HIPWM4_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT28_BATSIGN_SHIFT))

#define  HIPWM4_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT28_BATSHIFT_MASK) >> HIPWM4_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT28_BATFRAC_MASK) >> HIPWM4_HBAT28_BATFRAC_SHIFT)
#define  HIPWM4_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM4_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT29_RESERVED1_MASK) >> HIPWM4_HBAT29_RESERVED1_SHIFT)
#define  HIPWM4_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT29_RESERVED1_SHIFT))

#define  HIPWM4_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT29_BATLAST_SHIFT 19
#define  HIPWM4_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT29_BATLAST_MASK) >> HIPWM4_HBAT29_BATLAST_SHIFT)
#define  HIPWM4_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT29_BATLAST_SHIFT))

#define  HIPWM4_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT29_BATSIGN_MASK) >> HIPWM4_HBAT29_BATSIGN_SHIFT)
#define  HIPWM4_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT29_BATSIGN_SHIFT))

#define  HIPWM4_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT29_BATSHIFT_MASK) >> HIPWM4_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT29_BATFRAC_MASK) >> HIPWM4_HBAT29_BATFRAC_SHIFT)
#define  HIPWM4_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM4_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT30_RESERVED1_MASK) >> HIPWM4_HBAT30_RESERVED1_SHIFT)
#define  HIPWM4_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT30_RESERVED1_SHIFT))

#define  HIPWM4_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT30_BATLAST_SHIFT 19
#define  HIPWM4_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT30_BATLAST_MASK) >> HIPWM4_HBAT30_BATLAST_SHIFT)
#define  HIPWM4_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT30_BATLAST_SHIFT))

#define  HIPWM4_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT30_BATSIGN_MASK) >> HIPWM4_HBAT30_BATSIGN_SHIFT)
#define  HIPWM4_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT30_BATSIGN_SHIFT))

#define  HIPWM4_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT30_BATSHIFT_MASK) >> HIPWM4_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT30_BATFRAC_MASK) >> HIPWM4_HBAT30_BATFRAC_SHIFT)
#define  HIPWM4_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM4_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT31_RESERVED1_MASK) >> HIPWM4_HBAT31_RESERVED1_SHIFT)
#define  HIPWM4_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT31_RESERVED1_SHIFT))

#define  HIPWM4_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT31_BATLAST_SHIFT 19
#define  HIPWM4_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT31_BATLAST_MASK) >> HIPWM4_HBAT31_BATLAST_SHIFT)
#define  HIPWM4_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT31_BATLAST_SHIFT))

#define  HIPWM4_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT31_BATSIGN_MASK) >> HIPWM4_HBAT31_BATSIGN_SHIFT)
#define  HIPWM4_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT31_BATSIGN_SHIFT))

#define  HIPWM4_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT31_BATSHIFT_MASK) >> HIPWM4_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT31_BATFRAC_MASK) >> HIPWM4_HBAT31_BATFRAC_SHIFT)
#define  HIPWM4_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM4_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT32_RESERVED1_MASK) >> HIPWM4_HBAT32_RESERVED1_SHIFT)
#define  HIPWM4_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT32_RESERVED1_SHIFT))

#define  HIPWM4_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT32_BATLAST_SHIFT 19
#define  HIPWM4_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT32_BATLAST_MASK) >> HIPWM4_HBAT32_BATLAST_SHIFT)
#define  HIPWM4_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT32_BATLAST_SHIFT))

#define  HIPWM4_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT32_BATSIGN_MASK) >> HIPWM4_HBAT32_BATSIGN_SHIFT)
#define  HIPWM4_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT32_BATSIGN_SHIFT))

#define  HIPWM4_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT32_BATSHIFT_MASK) >> HIPWM4_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT32_BATFRAC_MASK) >> HIPWM4_HBAT32_BATFRAC_SHIFT)
#define  HIPWM4_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM4_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT33_RESERVED1_MASK) >> HIPWM4_HBAT33_RESERVED1_SHIFT)
#define  HIPWM4_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT33_RESERVED1_SHIFT))

#define  HIPWM4_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT33_BATLAST_SHIFT 19
#define  HIPWM4_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT33_BATLAST_MASK) >> HIPWM4_HBAT33_BATLAST_SHIFT)
#define  HIPWM4_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT33_BATLAST_SHIFT))

#define  HIPWM4_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT33_BATSIGN_MASK) >> HIPWM4_HBAT33_BATSIGN_SHIFT)
#define  HIPWM4_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT33_BATSIGN_SHIFT))

#define  HIPWM4_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT33_BATSHIFT_MASK) >> HIPWM4_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT33_BATFRAC_MASK) >> HIPWM4_HBAT33_BATFRAC_SHIFT)
#define  HIPWM4_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM4_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT34_RESERVED1_MASK) >> HIPWM4_HBAT34_RESERVED1_SHIFT)
#define  HIPWM4_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT34_RESERVED1_SHIFT))

#define  HIPWM4_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT34_BATLAST_SHIFT 19
#define  HIPWM4_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT34_BATLAST_MASK) >> HIPWM4_HBAT34_BATLAST_SHIFT)
#define  HIPWM4_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT34_BATLAST_SHIFT))

#define  HIPWM4_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT34_BATSIGN_MASK) >> HIPWM4_HBAT34_BATSIGN_SHIFT)
#define  HIPWM4_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT34_BATSIGN_SHIFT))

#define  HIPWM4_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT34_BATSHIFT_MASK) >> HIPWM4_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT34_BATFRAC_MASK) >> HIPWM4_HBAT34_BATFRAC_SHIFT)
#define  HIPWM4_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM4_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT35_RESERVED1_MASK) >> HIPWM4_HBAT35_RESERVED1_SHIFT)
#define  HIPWM4_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT35_RESERVED1_SHIFT))

#define  HIPWM4_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT35_BATLAST_SHIFT 19
#define  HIPWM4_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT35_BATLAST_MASK) >> HIPWM4_HBAT35_BATLAST_SHIFT)
#define  HIPWM4_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT35_BATLAST_SHIFT))

#define  HIPWM4_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT35_BATSIGN_MASK) >> HIPWM4_HBAT35_BATSIGN_SHIFT)
#define  HIPWM4_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT35_BATSIGN_SHIFT))

#define  HIPWM4_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT35_BATSHIFT_MASK) >> HIPWM4_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT35_BATFRAC_MASK) >> HIPWM4_HBAT35_BATFRAC_SHIFT)
#define  HIPWM4_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM4_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT36_RESERVED1_MASK) >> HIPWM4_HBAT36_RESERVED1_SHIFT)
#define  HIPWM4_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT36_RESERVED1_SHIFT))

#define  HIPWM4_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT36_BATLAST_SHIFT 19
#define  HIPWM4_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT36_BATLAST_MASK) >> HIPWM4_HBAT36_BATLAST_SHIFT)
#define  HIPWM4_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT36_BATLAST_SHIFT))

#define  HIPWM4_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT36_BATSIGN_MASK) >> HIPWM4_HBAT36_BATSIGN_SHIFT)
#define  HIPWM4_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT36_BATSIGN_SHIFT))

#define  HIPWM4_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT36_BATSHIFT_MASK) >> HIPWM4_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT36_BATFRAC_MASK) >> HIPWM4_HBAT36_BATFRAC_SHIFT)
#define  HIPWM4_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM4_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT37_RESERVED1_MASK) >> HIPWM4_HBAT37_RESERVED1_SHIFT)
#define  HIPWM4_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT37_RESERVED1_SHIFT))

#define  HIPWM4_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT37_BATLAST_SHIFT 19
#define  HIPWM4_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT37_BATLAST_MASK) >> HIPWM4_HBAT37_BATLAST_SHIFT)
#define  HIPWM4_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT37_BATLAST_SHIFT))

#define  HIPWM4_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT37_BATSIGN_MASK) >> HIPWM4_HBAT37_BATSIGN_SHIFT)
#define  HIPWM4_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT37_BATSIGN_SHIFT))

#define  HIPWM4_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT37_BATSHIFT_MASK) >> HIPWM4_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT37_BATFRAC_MASK) >> HIPWM4_HBAT37_BATFRAC_SHIFT)
#define  HIPWM4_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM4_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT38_RESERVED1_MASK) >> HIPWM4_HBAT38_RESERVED1_SHIFT)
#define  HIPWM4_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT38_RESERVED1_SHIFT))

#define  HIPWM4_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT38_BATLAST_SHIFT 19
#define  HIPWM4_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT38_BATLAST_MASK) >> HIPWM4_HBAT38_BATLAST_SHIFT)
#define  HIPWM4_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT38_BATLAST_SHIFT))

#define  HIPWM4_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT38_BATSIGN_MASK) >> HIPWM4_HBAT38_BATSIGN_SHIFT)
#define  HIPWM4_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT38_BATSIGN_SHIFT))

#define  HIPWM4_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT38_BATSHIFT_MASK) >> HIPWM4_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT38_BATFRAC_MASK) >> HIPWM4_HBAT38_BATFRAC_SHIFT)
#define  HIPWM4_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM4_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT39_RESERVED1_MASK) >> HIPWM4_HBAT39_RESERVED1_SHIFT)
#define  HIPWM4_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT39_RESERVED1_SHIFT))

#define  HIPWM4_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT39_BATLAST_SHIFT 19
#define  HIPWM4_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT39_BATLAST_MASK) >> HIPWM4_HBAT39_BATLAST_SHIFT)
#define  HIPWM4_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT39_BATLAST_SHIFT))

#define  HIPWM4_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT39_BATSIGN_MASK) >> HIPWM4_HBAT39_BATSIGN_SHIFT)
#define  HIPWM4_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT39_BATSIGN_SHIFT))

#define  HIPWM4_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT39_BATSHIFT_MASK) >> HIPWM4_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT39_BATFRAC_MASK) >> HIPWM4_HBAT39_BATFRAC_SHIFT)
#define  HIPWM4_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM4_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT40_RESERVED1_MASK) >> HIPWM4_HBAT40_RESERVED1_SHIFT)
#define  HIPWM4_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT40_RESERVED1_SHIFT))

#define  HIPWM4_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT40_BATLAST_SHIFT 19
#define  HIPWM4_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT40_BATLAST_MASK) >> HIPWM4_HBAT40_BATLAST_SHIFT)
#define  HIPWM4_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT40_BATLAST_SHIFT))

#define  HIPWM4_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT40_BATSIGN_MASK) >> HIPWM4_HBAT40_BATSIGN_SHIFT)
#define  HIPWM4_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT40_BATSIGN_SHIFT))

#define  HIPWM4_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT40_BATSHIFT_MASK) >> HIPWM4_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT40_BATFRAC_MASK) >> HIPWM4_HBAT40_BATFRAC_SHIFT)
#define  HIPWM4_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM4_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT41_RESERVED1_MASK) >> HIPWM4_HBAT41_RESERVED1_SHIFT)
#define  HIPWM4_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT41_RESERVED1_SHIFT))

#define  HIPWM4_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT41_BATLAST_SHIFT 19
#define  HIPWM4_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT41_BATLAST_MASK) >> HIPWM4_HBAT41_BATLAST_SHIFT)
#define  HIPWM4_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT41_BATLAST_SHIFT))

#define  HIPWM4_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT41_BATSIGN_MASK) >> HIPWM4_HBAT41_BATSIGN_SHIFT)
#define  HIPWM4_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT41_BATSIGN_SHIFT))

#define  HIPWM4_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT41_BATSHIFT_MASK) >> HIPWM4_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT41_BATFRAC_MASK) >> HIPWM4_HBAT41_BATFRAC_SHIFT)
#define  HIPWM4_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM4_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT42_RESERVED1_MASK) >> HIPWM4_HBAT42_RESERVED1_SHIFT)
#define  HIPWM4_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT42_RESERVED1_SHIFT))

#define  HIPWM4_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT42_BATLAST_SHIFT 19
#define  HIPWM4_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT42_BATLAST_MASK) >> HIPWM4_HBAT42_BATLAST_SHIFT)
#define  HIPWM4_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT42_BATLAST_SHIFT))

#define  HIPWM4_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT42_BATSIGN_MASK) >> HIPWM4_HBAT42_BATSIGN_SHIFT)
#define  HIPWM4_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT42_BATSIGN_SHIFT))

#define  HIPWM4_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT42_BATSHIFT_MASK) >> HIPWM4_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT42_BATFRAC_MASK) >> HIPWM4_HBAT42_BATFRAC_SHIFT)
#define  HIPWM4_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM4_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT43_RESERVED1_MASK) >> HIPWM4_HBAT43_RESERVED1_SHIFT)
#define  HIPWM4_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT43_RESERVED1_SHIFT))

#define  HIPWM4_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT43_BATLAST_SHIFT 19
#define  HIPWM4_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT43_BATLAST_MASK) >> HIPWM4_HBAT43_BATLAST_SHIFT)
#define  HIPWM4_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT43_BATLAST_SHIFT))

#define  HIPWM4_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT43_BATSIGN_MASK) >> HIPWM4_HBAT43_BATSIGN_SHIFT)
#define  HIPWM4_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT43_BATSIGN_SHIFT))

#define  HIPWM4_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT43_BATSHIFT_MASK) >> HIPWM4_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT43_BATFRAC_MASK) >> HIPWM4_HBAT43_BATFRAC_SHIFT)
#define  HIPWM4_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM4_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT44_RESERVED1_MASK) >> HIPWM4_HBAT44_RESERVED1_SHIFT)
#define  HIPWM4_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT44_RESERVED1_SHIFT))

#define  HIPWM4_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT44_BATLAST_SHIFT 19
#define  HIPWM4_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT44_BATLAST_MASK) >> HIPWM4_HBAT44_BATLAST_SHIFT)
#define  HIPWM4_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT44_BATLAST_SHIFT))

#define  HIPWM4_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT44_BATSIGN_MASK) >> HIPWM4_HBAT44_BATSIGN_SHIFT)
#define  HIPWM4_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT44_BATSIGN_SHIFT))

#define  HIPWM4_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT44_BATSHIFT_MASK) >> HIPWM4_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT44_BATFRAC_MASK) >> HIPWM4_HBAT44_BATFRAC_SHIFT)
#define  HIPWM4_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM4_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT45_RESERVED1_MASK) >> HIPWM4_HBAT45_RESERVED1_SHIFT)
#define  HIPWM4_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT45_RESERVED1_SHIFT))

#define  HIPWM4_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT45_BATLAST_SHIFT 19
#define  HIPWM4_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT45_BATLAST_MASK) >> HIPWM4_HBAT45_BATLAST_SHIFT)
#define  HIPWM4_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT45_BATLAST_SHIFT))

#define  HIPWM4_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT45_BATSIGN_MASK) >> HIPWM4_HBAT45_BATSIGN_SHIFT)
#define  HIPWM4_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT45_BATSIGN_SHIFT))

#define  HIPWM4_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT45_BATSHIFT_MASK) >> HIPWM4_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT45_BATFRAC_MASK) >> HIPWM4_HBAT45_BATFRAC_SHIFT)
#define  HIPWM4_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM4_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT46_RESERVED1_MASK) >> HIPWM4_HBAT46_RESERVED1_SHIFT)
#define  HIPWM4_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT46_RESERVED1_SHIFT))

#define  HIPWM4_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT46_BATLAST_SHIFT 19
#define  HIPWM4_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT46_BATLAST_MASK) >> HIPWM4_HBAT46_BATLAST_SHIFT)
#define  HIPWM4_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT46_BATLAST_SHIFT))

#define  HIPWM4_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT46_BATSIGN_MASK) >> HIPWM4_HBAT46_BATSIGN_SHIFT)
#define  HIPWM4_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT46_BATSIGN_SHIFT))

#define  HIPWM4_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT46_BATSHIFT_MASK) >> HIPWM4_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT46_BATFRAC_MASK) >> HIPWM4_HBAT46_BATFRAC_SHIFT)
#define  HIPWM4_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM4_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT47_RESERVED1_MASK) >> HIPWM4_HBAT47_RESERVED1_SHIFT)
#define  HIPWM4_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT47_RESERVED1_SHIFT))

#define  HIPWM4_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT47_BATLAST_SHIFT 19
#define  HIPWM4_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT47_BATLAST_MASK) >> HIPWM4_HBAT47_BATLAST_SHIFT)
#define  HIPWM4_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT47_BATLAST_SHIFT))

#define  HIPWM4_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT47_BATSIGN_MASK) >> HIPWM4_HBAT47_BATSIGN_SHIFT)
#define  HIPWM4_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT47_BATSIGN_SHIFT))

#define  HIPWM4_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT47_BATSHIFT_MASK) >> HIPWM4_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT47_BATFRAC_MASK) >> HIPWM4_HBAT47_BATFRAC_SHIFT)
#define  HIPWM4_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM4_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT48_RESERVED1_MASK) >> HIPWM4_HBAT48_RESERVED1_SHIFT)
#define  HIPWM4_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT48_RESERVED1_SHIFT))

#define  HIPWM4_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT48_BATLAST_SHIFT 19
#define  HIPWM4_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT48_BATLAST_MASK) >> HIPWM4_HBAT48_BATLAST_SHIFT)
#define  HIPWM4_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT48_BATLAST_SHIFT))

#define  HIPWM4_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT48_BATSIGN_MASK) >> HIPWM4_HBAT48_BATSIGN_SHIFT)
#define  HIPWM4_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT48_BATSIGN_SHIFT))

#define  HIPWM4_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT48_BATSHIFT_MASK) >> HIPWM4_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT48_BATFRAC_MASK) >> HIPWM4_HBAT48_BATFRAC_SHIFT)
#define  HIPWM4_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM4_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT49_RESERVED1_MASK) >> HIPWM4_HBAT49_RESERVED1_SHIFT)
#define  HIPWM4_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT49_RESERVED1_SHIFT))

#define  HIPWM4_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT49_BATLAST_SHIFT 19
#define  HIPWM4_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT49_BATLAST_MASK) >> HIPWM4_HBAT49_BATLAST_SHIFT)
#define  HIPWM4_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT49_BATLAST_SHIFT))

#define  HIPWM4_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT49_BATSIGN_MASK) >> HIPWM4_HBAT49_BATSIGN_SHIFT)
#define  HIPWM4_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT49_BATSIGN_SHIFT))

#define  HIPWM4_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT49_BATSHIFT_MASK) >> HIPWM4_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT49_BATFRAC_MASK) >> HIPWM4_HBAT49_BATFRAC_SHIFT)
#define  HIPWM4_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM4_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT50_RESERVED1_MASK) >> HIPWM4_HBAT50_RESERVED1_SHIFT)
#define  HIPWM4_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT50_RESERVED1_SHIFT))

#define  HIPWM4_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT50_BATLAST_SHIFT 19
#define  HIPWM4_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT50_BATLAST_MASK) >> HIPWM4_HBAT50_BATLAST_SHIFT)
#define  HIPWM4_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT50_BATLAST_SHIFT))

#define  HIPWM4_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT50_BATSIGN_MASK) >> HIPWM4_HBAT50_BATSIGN_SHIFT)
#define  HIPWM4_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT50_BATSIGN_SHIFT))

#define  HIPWM4_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT50_BATSHIFT_MASK) >> HIPWM4_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT50_BATFRAC_MASK) >> HIPWM4_HBAT50_BATFRAC_SHIFT)
#define  HIPWM4_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM4_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT51_RESERVED1_MASK) >> HIPWM4_HBAT51_RESERVED1_SHIFT)
#define  HIPWM4_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT51_RESERVED1_SHIFT))

#define  HIPWM4_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT51_BATLAST_SHIFT 19
#define  HIPWM4_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT51_BATLAST_MASK) >> HIPWM4_HBAT51_BATLAST_SHIFT)
#define  HIPWM4_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT51_BATLAST_SHIFT))

#define  HIPWM4_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT51_BATSIGN_MASK) >> HIPWM4_HBAT51_BATSIGN_SHIFT)
#define  HIPWM4_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT51_BATSIGN_SHIFT))

#define  HIPWM4_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT51_BATSHIFT_MASK) >> HIPWM4_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT51_BATFRAC_MASK) >> HIPWM4_HBAT51_BATFRAC_SHIFT)
#define  HIPWM4_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM4_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT52_RESERVED1_MASK) >> HIPWM4_HBAT52_RESERVED1_SHIFT)
#define  HIPWM4_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT52_RESERVED1_SHIFT))

#define  HIPWM4_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT52_BATLAST_SHIFT 19
#define  HIPWM4_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT52_BATLAST_MASK) >> HIPWM4_HBAT52_BATLAST_SHIFT)
#define  HIPWM4_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT52_BATLAST_SHIFT))

#define  HIPWM4_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT52_BATSIGN_MASK) >> HIPWM4_HBAT52_BATSIGN_SHIFT)
#define  HIPWM4_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT52_BATSIGN_SHIFT))

#define  HIPWM4_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT52_BATSHIFT_MASK) >> HIPWM4_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT52_BATFRAC_MASK) >> HIPWM4_HBAT52_BATFRAC_SHIFT)
#define  HIPWM4_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM4_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT53_RESERVED1_MASK) >> HIPWM4_HBAT53_RESERVED1_SHIFT)
#define  HIPWM4_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT53_RESERVED1_SHIFT))

#define  HIPWM4_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT53_BATLAST_SHIFT 19
#define  HIPWM4_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT53_BATLAST_MASK) >> HIPWM4_HBAT53_BATLAST_SHIFT)
#define  HIPWM4_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT53_BATLAST_SHIFT))

#define  HIPWM4_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT53_BATSIGN_MASK) >> HIPWM4_HBAT53_BATSIGN_SHIFT)
#define  HIPWM4_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT53_BATSIGN_SHIFT))

#define  HIPWM4_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT53_BATSHIFT_MASK) >> HIPWM4_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT53_BATFRAC_MASK) >> HIPWM4_HBAT53_BATFRAC_SHIFT)
#define  HIPWM4_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM4_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT54_RESERVED1_MASK) >> HIPWM4_HBAT54_RESERVED1_SHIFT)
#define  HIPWM4_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT54_RESERVED1_SHIFT))

#define  HIPWM4_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT54_BATLAST_SHIFT 19
#define  HIPWM4_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT54_BATLAST_MASK) >> HIPWM4_HBAT54_BATLAST_SHIFT)
#define  HIPWM4_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT54_BATLAST_SHIFT))

#define  HIPWM4_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT54_BATSIGN_MASK) >> HIPWM4_HBAT54_BATSIGN_SHIFT)
#define  HIPWM4_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT54_BATSIGN_SHIFT))

#define  HIPWM4_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT54_BATSHIFT_MASK) >> HIPWM4_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT54_BATFRAC_MASK) >> HIPWM4_HBAT54_BATFRAC_SHIFT)
#define  HIPWM4_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM4_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT55_RESERVED1_MASK) >> HIPWM4_HBAT55_RESERVED1_SHIFT)
#define  HIPWM4_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT55_RESERVED1_SHIFT))

#define  HIPWM4_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT55_BATLAST_SHIFT 19
#define  HIPWM4_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT55_BATLAST_MASK) >> HIPWM4_HBAT55_BATLAST_SHIFT)
#define  HIPWM4_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT55_BATLAST_SHIFT))

#define  HIPWM4_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT55_BATSIGN_MASK) >> HIPWM4_HBAT55_BATSIGN_SHIFT)
#define  HIPWM4_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT55_BATSIGN_SHIFT))

#define  HIPWM4_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT55_BATSHIFT_MASK) >> HIPWM4_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT55_BATFRAC_MASK) >> HIPWM4_HBAT55_BATFRAC_SHIFT)
#define  HIPWM4_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM4_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT56_RESERVED1_MASK) >> HIPWM4_HBAT56_RESERVED1_SHIFT)
#define  HIPWM4_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT56_RESERVED1_SHIFT))

#define  HIPWM4_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT56_BATLAST_SHIFT 19
#define  HIPWM4_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT56_BATLAST_MASK) >> HIPWM4_HBAT56_BATLAST_SHIFT)
#define  HIPWM4_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT56_BATLAST_SHIFT))

#define  HIPWM4_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT56_BATSIGN_MASK) >> HIPWM4_HBAT56_BATSIGN_SHIFT)
#define  HIPWM4_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT56_BATSIGN_SHIFT))

#define  HIPWM4_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT56_BATSHIFT_MASK) >> HIPWM4_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT56_BATFRAC_MASK) >> HIPWM4_HBAT56_BATFRAC_SHIFT)
#define  HIPWM4_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM4_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT57_RESERVED1_MASK) >> HIPWM4_HBAT57_RESERVED1_SHIFT)
#define  HIPWM4_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT57_RESERVED1_SHIFT))

#define  HIPWM4_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT57_BATLAST_SHIFT 19
#define  HIPWM4_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT57_BATLAST_MASK) >> HIPWM4_HBAT57_BATLAST_SHIFT)
#define  HIPWM4_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT57_BATLAST_SHIFT))

#define  HIPWM4_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT57_BATSIGN_MASK) >> HIPWM4_HBAT57_BATSIGN_SHIFT)
#define  HIPWM4_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT57_BATSIGN_SHIFT))

#define  HIPWM4_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT57_BATSHIFT_MASK) >> HIPWM4_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT57_BATFRAC_MASK) >> HIPWM4_HBAT57_BATFRAC_SHIFT)
#define  HIPWM4_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM4_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT58_RESERVED1_MASK) >> HIPWM4_HBAT58_RESERVED1_SHIFT)
#define  HIPWM4_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT58_RESERVED1_SHIFT))

#define  HIPWM4_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT58_BATLAST_SHIFT 19
#define  HIPWM4_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT58_BATLAST_MASK) >> HIPWM4_HBAT58_BATLAST_SHIFT)
#define  HIPWM4_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT58_BATLAST_SHIFT))

#define  HIPWM4_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT58_BATSIGN_MASK) >> HIPWM4_HBAT58_BATSIGN_SHIFT)
#define  HIPWM4_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT58_BATSIGN_SHIFT))

#define  HIPWM4_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT58_BATSHIFT_MASK) >> HIPWM4_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT58_BATFRAC_MASK) >> HIPWM4_HBAT58_BATFRAC_SHIFT)
#define  HIPWM4_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM4_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT59_RESERVED1_MASK) >> HIPWM4_HBAT59_RESERVED1_SHIFT)
#define  HIPWM4_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT59_RESERVED1_SHIFT))

#define  HIPWM4_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT59_BATLAST_SHIFT 19
#define  HIPWM4_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT59_BATLAST_MASK) >> HIPWM4_HBAT59_BATLAST_SHIFT)
#define  HIPWM4_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT59_BATLAST_SHIFT))

#define  HIPWM4_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT59_BATSIGN_MASK) >> HIPWM4_HBAT59_BATSIGN_SHIFT)
#define  HIPWM4_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT59_BATSIGN_SHIFT))

#define  HIPWM4_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT59_BATSHIFT_MASK) >> HIPWM4_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT59_BATFRAC_MASK) >> HIPWM4_HBAT59_BATFRAC_SHIFT)
#define  HIPWM4_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM4_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT60_RESERVED1_MASK) >> HIPWM4_HBAT60_RESERVED1_SHIFT)
#define  HIPWM4_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT60_RESERVED1_SHIFT))

#define  HIPWM4_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT60_BATLAST_SHIFT 19
#define  HIPWM4_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT60_BATLAST_MASK) >> HIPWM4_HBAT60_BATLAST_SHIFT)
#define  HIPWM4_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT60_BATLAST_SHIFT))

#define  HIPWM4_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT60_BATSIGN_MASK) >> HIPWM4_HBAT60_BATSIGN_SHIFT)
#define  HIPWM4_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT60_BATSIGN_SHIFT))

#define  HIPWM4_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT60_BATSHIFT_MASK) >> HIPWM4_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT60_BATFRAC_MASK) >> HIPWM4_HBAT60_BATFRAC_SHIFT)
#define  HIPWM4_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM4_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT61_RESERVED1_MASK) >> HIPWM4_HBAT61_RESERVED1_SHIFT)
#define  HIPWM4_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT61_RESERVED1_SHIFT))

#define  HIPWM4_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT61_BATLAST_SHIFT 19
#define  HIPWM4_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT61_BATLAST_MASK) >> HIPWM4_HBAT61_BATLAST_SHIFT)
#define  HIPWM4_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT61_BATLAST_SHIFT))

#define  HIPWM4_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT61_BATSIGN_MASK) >> HIPWM4_HBAT61_BATSIGN_SHIFT)
#define  HIPWM4_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT61_BATSIGN_SHIFT))

#define  HIPWM4_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT61_BATSHIFT_MASK) >> HIPWM4_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT61_BATFRAC_MASK) >> HIPWM4_HBAT61_BATFRAC_SHIFT)
#define  HIPWM4_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM4_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT62_RESERVED1_MASK) >> HIPWM4_HBAT62_RESERVED1_SHIFT)
#define  HIPWM4_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT62_RESERVED1_SHIFT))

#define  HIPWM4_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT62_BATLAST_SHIFT 19
#define  HIPWM4_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT62_BATLAST_MASK) >> HIPWM4_HBAT62_BATLAST_SHIFT)
#define  HIPWM4_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT62_BATLAST_SHIFT))

#define  HIPWM4_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT62_BATSIGN_MASK) >> HIPWM4_HBAT62_BATSIGN_SHIFT)
#define  HIPWM4_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT62_BATSIGN_SHIFT))

#define  HIPWM4_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT62_BATSHIFT_MASK) >> HIPWM4_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT62_BATFRAC_MASK) >> HIPWM4_HBAT62_BATFRAC_SHIFT)
#define  HIPWM4_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM4_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM4_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM4_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT63_RESERVED1_MASK) >> HIPWM4_HBAT63_RESERVED1_SHIFT)
#define  HIPWM4_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HBAT63_RESERVED1_SHIFT))

#define  HIPWM4_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM4_HBAT63_BATLAST_SHIFT 19
#define  HIPWM4_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT63_BATLAST_MASK) >> HIPWM4_HBAT63_BATLAST_SHIFT)
#define  HIPWM4_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM4_HBAT63_BATLAST_SHIFT))

#define  HIPWM4_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM4_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM4_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT63_BATSIGN_MASK) >> HIPWM4_HBAT63_BATSIGN_SHIFT)
#define  HIPWM4_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM4_HBAT63_BATSIGN_SHIFT))

#define  HIPWM4_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM4_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM4_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT63_BATSHIFT_MASK) >> HIPWM4_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM4_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM4_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM4_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM4_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM4_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM4_HBAT63_BATFRAC_MASK) >> HIPWM4_HBAT63_BATFRAC_SHIFT)
#define  HIPWM4_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM4_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM4_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC0_RESERVED1_MASK) >> HIPWM4_HMIC0_RESERVED1_SHIFT)
#define  HIPWM4_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC0_RESERVED1_SHIFT))

#define  HIPWM4_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC0_MICINTPIX_MASK) >> HIPWM4_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC0_MICFRACPIX_MASK) >> HIPWM4_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM4_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC1_RESERVED1_MASK) >> HIPWM4_HMIC1_RESERVED1_SHIFT)
#define  HIPWM4_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC1_RESERVED1_SHIFT))

#define  HIPWM4_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC1_MICINTPIX_MASK) >> HIPWM4_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC1_MICFRACPIX_MASK) >> HIPWM4_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM4_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC2_RESERVED1_MASK) >> HIPWM4_HMIC2_RESERVED1_SHIFT)
#define  HIPWM4_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC2_RESERVED1_SHIFT))

#define  HIPWM4_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC2_MICINTPIX_MASK) >> HIPWM4_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC2_MICFRACPIX_MASK) >> HIPWM4_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM4_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC3_RESERVED1_MASK) >> HIPWM4_HMIC3_RESERVED1_SHIFT)
#define  HIPWM4_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC3_RESERVED1_SHIFT))

#define  HIPWM4_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC3_MICINTPIX_MASK) >> HIPWM4_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC3_MICFRACPIX_MASK) >> HIPWM4_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM4_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC4_RESERVED1_MASK) >> HIPWM4_HMIC4_RESERVED1_SHIFT)
#define  HIPWM4_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC4_RESERVED1_SHIFT))

#define  HIPWM4_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC4_MICINTPIX_MASK) >> HIPWM4_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC4_MICFRACPIX_MASK) >> HIPWM4_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM4_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC5_RESERVED1_MASK) >> HIPWM4_HMIC5_RESERVED1_SHIFT)
#define  HIPWM4_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC5_RESERVED1_SHIFT))

#define  HIPWM4_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC5_MICINTPIX_MASK) >> HIPWM4_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC5_MICFRACPIX_MASK) >> HIPWM4_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM4_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC6_RESERVED1_MASK) >> HIPWM4_HMIC6_RESERVED1_SHIFT)
#define  HIPWM4_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC6_RESERVED1_SHIFT))

#define  HIPWM4_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC6_MICINTPIX_MASK) >> HIPWM4_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC6_MICFRACPIX_MASK) >> HIPWM4_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM4_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC7_RESERVED1_MASK) >> HIPWM4_HMIC7_RESERVED1_SHIFT)
#define  HIPWM4_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC7_RESERVED1_SHIFT))

#define  HIPWM4_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC7_MICINTPIX_MASK) >> HIPWM4_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC7_MICFRACPIX_MASK) >> HIPWM4_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM4_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC8_RESERVED1_MASK) >> HIPWM4_HMIC8_RESERVED1_SHIFT)
#define  HIPWM4_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC8_RESERVED1_SHIFT))

#define  HIPWM4_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC8_MICINTPIX_MASK) >> HIPWM4_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC8_MICFRACPIX_MASK) >> HIPWM4_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM4_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC9_RESERVED1_MASK) >> HIPWM4_HMIC9_RESERVED1_SHIFT)
#define  HIPWM4_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC9_RESERVED1_SHIFT))

#define  HIPWM4_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC9_MICINTPIX_MASK) >> HIPWM4_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC9_MICFRACPIX_MASK) >> HIPWM4_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM4_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC10_RESERVED1_MASK) >> HIPWM4_HMIC10_RESERVED1_SHIFT)
#define  HIPWM4_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC10_RESERVED1_SHIFT))

#define  HIPWM4_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC10_MICINTPIX_MASK) >> HIPWM4_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC10_MICFRACPIX_MASK) >> HIPWM4_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM4_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM4_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM4_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC11_RESERVED1_MASK) >> HIPWM4_HMIC11_RESERVED1_SHIFT)
#define  HIPWM4_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM4_HMIC11_RESERVED1_SHIFT))

#define  HIPWM4_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM4_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM4_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC11_MICINTPIX_MASK) >> HIPWM4_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM4_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM4_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM4_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM4_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM4_HMIC11_MICFRACPIX_MASK) >> HIPWM4_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM4_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM4_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM4_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 6 of 8) (HiPWM5)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM5_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM5_HCR_RESERVED1_SHIFT 21
#define  HIPWM5_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_RESERVED1_MASK) >> HIPWM5_HCR_RESERVED1_SHIFT)
#define  HIPWM5_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HCR_RESERVED1_SHIFT))

#define  HIPWM5_HCR_EDGESEL_MASK 0x100000
#define  HIPWM5_HCR_EDGESEL_SHIFT 20
#define  HIPWM5_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_EDGESEL_MASK) >> HIPWM5_HCR_EDGESEL_SHIFT)
#define  HIPWM5_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM5_HCR_EDGESEL_SHIFT))

#define  HIPWM5_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM5_HCR_NUMEDGE_SHIFT 19
#define  HIPWM5_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_NUMEDGE_MASK) >> HIPWM5_HCR_NUMEDGE_SHIFT)
#define  HIPWM5_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM5_HCR_NUMEDGE_SHIFT))

#define  HIPWM5_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM5_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM5_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM5_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM5_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM5_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM5_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM5_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM5_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM5_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM5_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM5_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM5_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM5_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM5_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM5_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM5_HCR_NOBATLAST_SHIFT 15
#define  HIPWM5_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_NOBATLAST_MASK) >> HIPWM5_HCR_NOBATLAST_SHIFT)
#define  HIPWM5_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM5_HCR_NOBATLAST_SHIFT))

#define  HIPWM5_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM5_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM5_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_DUALMARGIN_MASK) >> HIPWM5_HCR_DUALMARGIN_SHIFT)
#define  HIPWM5_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM5_HCR_DUALMARGIN_SHIFT))

#define  HIPWM5_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM5_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM5_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_FILTERPULSES_MASK) >> HIPWM5_HCR_FILTERPULSES_SHIFT)
#define  HIPWM5_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM5_HCR_FILTERPULSES_SHIFT))

#define  HIPWM5_HCR_CRCRST_MASK 0x1000
#define  HIPWM5_HCR_CRCRST_SHIFT 12
#define  HIPWM5_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CRCRST_MASK) >> HIPWM5_HCR_CRCRST_SHIFT)
#define  HIPWM5_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM5_HCR_CRCRST_SHIFT))

#define  HIPWM5_HCR_HIPSDIR_MASK 0x800
#define  HIPWM5_HCR_HIPSDIR_SHIFT 11
#define  HIPWM5_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_HIPSDIR_MASK) >> HIPWM5_HCR_HIPSDIR_SHIFT)
#define  HIPWM5_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM5_HCR_HIPSDIR_SHIFT))

#define  HIPWM5_HCR_PTWIDTH_MASK 0x400
#define  HIPWM5_HCR_PTWIDTH_SHIFT 10
#define  HIPWM5_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_PTWIDTH_MASK) >> HIPWM5_HCR_PTWIDTH_SHIFT)
#define  HIPWM5_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM5_HCR_PTWIDTH_SHIFT))

#define  HIPWM5_HCR_TESTMODE_MASK 0x200
#define  HIPWM5_HCR_TESTMODE_SHIFT 9
#define  HIPWM5_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_TESTMODE_MASK) >> HIPWM5_HCR_TESTMODE_SHIFT)
#define  HIPWM5_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM5_HCR_TESTMODE_SHIFT))

#define  HIPWM5_HCR_CHANZERO_MASK 0x100
#define  HIPWM5_HCR_CHANZERO_SHIFT 8
#define  HIPWM5_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CHANZERO_MASK) >> HIPWM5_HCR_CHANZERO_SHIFT)
#define  HIPWM5_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM5_HCR_CHANZERO_SHIFT))

#define  HIPWM5_HCR_INVPT_MASK 0x80
#define  HIPWM5_HCR_INVPT_SHIFT 7
#define  HIPWM5_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_INVPT_MASK) >> HIPWM5_HCR_INVPT_SHIFT)
#define  HIPWM5_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM5_HCR_INVPT_SHIFT))

#define  HIPWM5_HCR_CPUACCESS_MASK 0x40
#define  HIPWM5_HCR_CPUACCESS_SHIFT 6
#define  HIPWM5_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_CPUACCESS_MASK) >> HIPWM5_HCR_CPUACCESS_SHIFT)
#define  HIPWM5_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM5_HCR_CPUACCESS_SHIFT))

#define  HIPWM5_HCR_PECEN_MASK 0x20
#define  HIPWM5_HCR_PECEN_SHIFT 5
#define  HIPWM5_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_PECEN_MASK) >> HIPWM5_HCR_PECEN_SHIFT)
#define  HIPWM5_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_PECEN_SHIFT))

#define  HIPWM5_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM5_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM5_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_PIGTOPHSYNC_MASK) >> HIPWM5_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM5_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM5_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM5_HCR_PIGEN_MASK 0x8
#define  HIPWM5_HCR_PIGEN_SHIFT 3
#define  HIPWM5_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_PIGEN_MASK) >> HIPWM5_HCR_PIGEN_SHIFT)
#define  HIPWM5_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_PIGEN_SHIFT))

#define  HIPWM5_HCR_BENDEREN_MASK 0x4
#define  HIPWM5_HCR_BENDEREN_SHIFT 2
#define  HIPWM5_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_BENDEREN_MASK) >> HIPWM5_HCR_BENDEREN_SHIFT)
#define  HIPWM5_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM5_HCR_BENDEREN_SHIFT))

#define  HIPWM5_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM5_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM5_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_SYNTHHSYNCEN_MASK) >> HIPWM5_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM5_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM5_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM5_HCR_ENABLE_MASK 0x1
#define  HIPWM5_HCR_ENABLE_SHIFT 0
#define  HIPWM5_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM5_HCR_ENABLE_MASK) >> HIPWM5_HCR_ENABLE_SHIFT)
#define  HIPWM5_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM5_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM5_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM5_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM5_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM5_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM5_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM5_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM5_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM5_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM5_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM5_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM5_HSMR_SIDEMARGIN_MASK) >> HIPWM5_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM5_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM5_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM5_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM5_HTSR_RESERVED1_SHIFT 8
#define  HIPWM5_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HTSR_RESERVED1_MASK) >> HIPWM5_HTSR_RESERVED1_SHIFT)
#define  HIPWM5_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HTSR_RESERVED1_SHIFT))

#define  HIPWM5_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM5_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM5_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM5_HTSR_TOPSKEW_MASK) >> HIPWM5_HTSR_TOPSKEW_SHIFT)
#define  HIPWM5_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM5_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM5_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HSR_RESERVED1_SHIFT 12
#define  HIPWM5_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_RESERVED1_MASK) >> HIPWM5_HSR_RESERVED1_SHIFT)
#define  HIPWM5_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HSR_RESERVED1_SHIFT))

#define  HIPWM5_HSR_INDEX_MASK 0xf00
#define  HIPWM5_HSR_INDEX_SHIFT 8
#define  HIPWM5_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_INDEX_MASK) >> HIPWM5_HSR_INDEX_SHIFT)
#define  HIPWM5_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM5_HSR_INDEX_SHIFT))

#define  HIPWM5_HSR_DIRRTOL_MASK 0x80
#define  HIPWM5_HSR_DIRRTOL_SHIFT 7
#define  HIPWM5_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_DIRRTOL_MASK) >> HIPWM5_HSR_DIRRTOL_SHIFT)
#define  HIPWM5_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM5_HSR_DIRRTOL_SHIFT))

#define  HIPWM5_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM5_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM5_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_PAGE_STATE_MASK) >> HIPWM5_HSR_PAGE_STATE_SHIFT)
#define  HIPWM5_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM5_HSR_PAGE_STATE_SHIFT))

#define  HIPWM5_HSR_RESERVED2_MASK 0x8
#define  HIPWM5_HSR_RESERVED2_SHIFT 3
#define  HIPWM5_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_RESERVED2_MASK) >> HIPWM5_HSR_RESERVED2_SHIFT)
#define  HIPWM5_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM5_HSR_RESERVED2_SHIFT))

#define  HIPWM5_HSR_READY_IN_MASK 0x4
#define  HIPWM5_HSR_READY_IN_SHIFT 2
#define  HIPWM5_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_READY_IN_MASK) >> HIPWM5_HSR_READY_IN_SHIFT)
#define  HIPWM5_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM5_HSR_READY_IN_SHIFT))

#define  HIPWM5_HSR_VALID_IN_MASK 0x2
#define  HIPWM5_HSR_VALID_IN_SHIFT 1
#define  HIPWM5_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_VALID_IN_MASK) >> HIPWM5_HSR_VALID_IN_SHIFT)
#define  HIPWM5_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM5_HSR_VALID_IN_SHIFT))

#define  HIPWM5_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM5_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM5_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM5_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM5_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM5_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM5_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM5_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM5_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HSPWR_RESERVED1_MASK) >> HIPWM5_HSPWR_RESERVED1_SHIFT)
#define  HIPWM5_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HSPWR_RESERVED1_SHIFT))

#define  HIPWM5_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM5_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM5_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM5_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM5_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM5_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM5_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM5_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM5_HSQR_RESERVED1_SHIFT 24
#define  HIPWM5_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HSQR_RESERVED1_MASK) >> HIPWM5_HSQR_RESERVED1_SHIFT)
#define  HIPWM5_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HSQR_RESERVED1_SHIFT))

#define  HIPWM5_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM5_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM5_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM5_HSQR_QUIWIDTH_MASK) >> HIPWM5_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM5_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM5_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM5_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM5_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM5_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM5_PRRA_PEC_VALUE_MASK) >> HIPWM5_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM5_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM5_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM5_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM5_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPVR_RESERVED1_MASK) >> HIPWM5_HPPVR_RESERVED1_SHIFT)
#define  HIPWM5_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPPVR_RESERVED1_SHIFT))

#define  HIPWM5_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM5_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM5_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPVR_PIGPTVAL_MASK) >> HIPWM5_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM5_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM5_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM5_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPSR_RESERVED1_SHIFT 16
#define  HIPWM5_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPSR_RESERVED1_MASK) >> HIPWM5_HPSR_RESERVED1_SHIFT)
#define  HIPWM5_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPSR_RESERVED1_SHIFT))

#define  HIPWM5_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM5_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM5_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM5_HPSR_PIGPIXSZ_MASK) >> HIPWM5_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM5_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM5_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM5_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPCR_RESERVED1_SHIFT 16
#define  HIPWM5_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPCR_RESERVED1_MASK) >> HIPWM5_HPCR_RESERVED1_SHIFT)
#define  HIPWM5_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPCR_RESERVED1_SHIFT))

#define  HIPWM5_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM5_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM5_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM5_HPCR_PIGPIXCNT_MASK) >> HIPWM5_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM5_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM5_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM5_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM5_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPSR_RESERVED1_MASK) >> HIPWM5_HPPSR_RESERVED1_SHIFT)
#define  HIPWM5_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPPSR_RESERVED1_SHIFT))

#define  HIPWM5_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM5_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM5_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPSR_PIGPIXSPACE_MASK) >> HIPWM5_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM5_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM5_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM5_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM5_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPLSR_RESERVED1_MASK) >> HIPWM5_HPLSR_RESERVED1_SHIFT)
#define  HIPWM5_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPLSR_RESERVED1_SHIFT))

#define  HIPWM5_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM5_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM5_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM5_HPLSR_PIGLINESPACE_MASK) >> HIPWM5_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM5_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM5_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM5_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM5_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPOER_RESERVED1_MASK) >> HIPWM5_HPPOER_RESERVED1_SHIFT)
#define  HIPWM5_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPPOER_RESERVED1_SHIFT))

#define  HIPWM5_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM5_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM5_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM5_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM5_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM5_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM5_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM5_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPOOR_RESERVED1_MASK) >> HIPWM5_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM5_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM5_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM5_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM5_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM5_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM5_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM5_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM5_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM5_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPLOR_RESERVED1_MASK) >> HIPWM5_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM5_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM5_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM5_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM5_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM5_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM5_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM5_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM5_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM5_HCRC_CRC_MASK 0xffffffff
#define  HIPWM5_HCRC_CRC_SHIFT 0
#define  HIPWM5_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM5_HCRC_CRC_MASK) >> HIPWM5_HCRC_CRC_SHIFT)
#define  HIPWM5_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM5_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM5_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HBCR_RESERVED1_SHIFT 12
#define  HIPWM5_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBCR_RESERVED1_MASK) >> HIPWM5_HBCR_RESERVED1_SHIFT)
#define  HIPWM5_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBCR_RESERVED1_SHIFT))

#define  HIPWM5_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM5_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM5_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM5_HBCR_SAMPLESPERSEG_MASK) >> HIPWM5_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM5_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM5_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM5_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM5_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM5_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HLBDR_RESERVED1_MASK) >> HIPWM5_HLBDR_RESERVED1_SHIFT)
#define  HIPWM5_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HLBDR_RESERVED1_SHIFT))

#define  HIPWM5_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM5_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM5_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM5_HLBDR_LBDRINT_MASK) >> HIPWM5_HLBDR_LBDRINT_SHIFT)
#define  HIPWM5_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM5_HLBDR_LBDRINT_SHIFT))

#define  HIPWM5_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM5_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM5_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HLBDR_LBDRFRAC_MASK) >> HIPWM5_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM5_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM5_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM5_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM5_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM5_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HRBDR_RESERVED1_MASK) >> HIPWM5_HRBDR_RESERVED1_SHIFT)
#define  HIPWM5_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HRBDR_RESERVED1_SHIFT))

#define  HIPWM5_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM5_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM5_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM5_HRBDR_RBDRINT_MASK) >> HIPWM5_HRBDR_RBDRINT_SHIFT)
#define  HIPWM5_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM5_HRBDR_RBDRINT_SHIFT))

#define  HIPWM5_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM5_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM5_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HRBDR_RBDRFRAC_MASK) >> HIPWM5_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM5_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM5_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM5_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM5_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM5_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCR_RESERVED1_MASK) >> HIPWM5_HBNCR_RESERVED1_SHIFT)
#define  HIPWM5_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBNCR_RESERVED1_SHIFT))

#define  HIPWM5_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM5_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM5_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCR_LFSRINITCNTL_MASK) >> HIPWM5_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM5_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM5_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM5_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM5_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM5_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCR_BENDERLFSREN_MASK) >> HIPWM5_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM5_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM5_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM5_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM5_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM5_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM5_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM5_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM5_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM5_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM5_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNINIT_RESERVED1_MASK) >> HIPWM5_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM5_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM5_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM5_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM5_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM5_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM5_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM5_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM5_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM5_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM5_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCV_RESERVED1_MASK) >> HIPWM5_HBNCV_RESERVED1_SHIFT)
#define  HIPWM5_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBNCV_RESERVED1_SHIFT))

#define  HIPWM5_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM5_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM5_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM5_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM5_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM5_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM5_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM5_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT0_RESERVED1_MASK) >> HIPWM5_HBAT0_RESERVED1_SHIFT)
#define  HIPWM5_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT0_RESERVED1_SHIFT))

#define  HIPWM5_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT0_BATLAST_SHIFT 19
#define  HIPWM5_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT0_BATLAST_MASK) >> HIPWM5_HBAT0_BATLAST_SHIFT)
#define  HIPWM5_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT0_BATLAST_SHIFT))

#define  HIPWM5_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT0_BATSIGN_MASK) >> HIPWM5_HBAT0_BATSIGN_SHIFT)
#define  HIPWM5_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT0_BATSIGN_SHIFT))

#define  HIPWM5_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT0_BATSHIFT_MASK) >> HIPWM5_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT0_BATFRAC_MASK) >> HIPWM5_HBAT0_BATFRAC_SHIFT)
#define  HIPWM5_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM5_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT1_RESERVED1_MASK) >> HIPWM5_HBAT1_RESERVED1_SHIFT)
#define  HIPWM5_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT1_RESERVED1_SHIFT))

#define  HIPWM5_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT1_BATLAST_SHIFT 19
#define  HIPWM5_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT1_BATLAST_MASK) >> HIPWM5_HBAT1_BATLAST_SHIFT)
#define  HIPWM5_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT1_BATLAST_SHIFT))

#define  HIPWM5_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT1_BATSIGN_MASK) >> HIPWM5_HBAT1_BATSIGN_SHIFT)
#define  HIPWM5_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT1_BATSIGN_SHIFT))

#define  HIPWM5_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT1_BATSHIFT_MASK) >> HIPWM5_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT1_BATFRAC_MASK) >> HIPWM5_HBAT1_BATFRAC_SHIFT)
#define  HIPWM5_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM5_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT2_RESERVED1_MASK) >> HIPWM5_HBAT2_RESERVED1_SHIFT)
#define  HIPWM5_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT2_RESERVED1_SHIFT))

#define  HIPWM5_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT2_BATLAST_SHIFT 19
#define  HIPWM5_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT2_BATLAST_MASK) >> HIPWM5_HBAT2_BATLAST_SHIFT)
#define  HIPWM5_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT2_BATLAST_SHIFT))

#define  HIPWM5_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT2_BATSIGN_MASK) >> HIPWM5_HBAT2_BATSIGN_SHIFT)
#define  HIPWM5_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT2_BATSIGN_SHIFT))

#define  HIPWM5_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT2_BATSHIFT_MASK) >> HIPWM5_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT2_BATFRAC_MASK) >> HIPWM5_HBAT2_BATFRAC_SHIFT)
#define  HIPWM5_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM5_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT3_RESERVED1_MASK) >> HIPWM5_HBAT3_RESERVED1_SHIFT)
#define  HIPWM5_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT3_RESERVED1_SHIFT))

#define  HIPWM5_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT3_BATLAST_SHIFT 19
#define  HIPWM5_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT3_BATLAST_MASK) >> HIPWM5_HBAT3_BATLAST_SHIFT)
#define  HIPWM5_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT3_BATLAST_SHIFT))

#define  HIPWM5_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT3_BATSIGN_MASK) >> HIPWM5_HBAT3_BATSIGN_SHIFT)
#define  HIPWM5_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT3_BATSIGN_SHIFT))

#define  HIPWM5_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT3_BATSHIFT_MASK) >> HIPWM5_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT3_BATFRAC_MASK) >> HIPWM5_HBAT3_BATFRAC_SHIFT)
#define  HIPWM5_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM5_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT4_RESERVED1_MASK) >> HIPWM5_HBAT4_RESERVED1_SHIFT)
#define  HIPWM5_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT4_RESERVED1_SHIFT))

#define  HIPWM5_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT4_BATLAST_SHIFT 19
#define  HIPWM5_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT4_BATLAST_MASK) >> HIPWM5_HBAT4_BATLAST_SHIFT)
#define  HIPWM5_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT4_BATLAST_SHIFT))

#define  HIPWM5_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT4_BATSIGN_MASK) >> HIPWM5_HBAT4_BATSIGN_SHIFT)
#define  HIPWM5_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT4_BATSIGN_SHIFT))

#define  HIPWM5_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT4_BATSHIFT_MASK) >> HIPWM5_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT4_BATFRAC_MASK) >> HIPWM5_HBAT4_BATFRAC_SHIFT)
#define  HIPWM5_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM5_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT5_RESERVED1_MASK) >> HIPWM5_HBAT5_RESERVED1_SHIFT)
#define  HIPWM5_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT5_RESERVED1_SHIFT))

#define  HIPWM5_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT5_BATLAST_SHIFT 19
#define  HIPWM5_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT5_BATLAST_MASK) >> HIPWM5_HBAT5_BATLAST_SHIFT)
#define  HIPWM5_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT5_BATLAST_SHIFT))

#define  HIPWM5_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT5_BATSIGN_MASK) >> HIPWM5_HBAT5_BATSIGN_SHIFT)
#define  HIPWM5_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT5_BATSIGN_SHIFT))

#define  HIPWM5_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT5_BATSHIFT_MASK) >> HIPWM5_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT5_BATFRAC_MASK) >> HIPWM5_HBAT5_BATFRAC_SHIFT)
#define  HIPWM5_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM5_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT6_RESERVED1_MASK) >> HIPWM5_HBAT6_RESERVED1_SHIFT)
#define  HIPWM5_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT6_RESERVED1_SHIFT))

#define  HIPWM5_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT6_BATLAST_SHIFT 19
#define  HIPWM5_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT6_BATLAST_MASK) >> HIPWM5_HBAT6_BATLAST_SHIFT)
#define  HIPWM5_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT6_BATLAST_SHIFT))

#define  HIPWM5_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT6_BATSIGN_MASK) >> HIPWM5_HBAT6_BATSIGN_SHIFT)
#define  HIPWM5_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT6_BATSIGN_SHIFT))

#define  HIPWM5_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT6_BATSHIFT_MASK) >> HIPWM5_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT6_BATFRAC_MASK) >> HIPWM5_HBAT6_BATFRAC_SHIFT)
#define  HIPWM5_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM5_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT7_RESERVED1_MASK) >> HIPWM5_HBAT7_RESERVED1_SHIFT)
#define  HIPWM5_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT7_RESERVED1_SHIFT))

#define  HIPWM5_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT7_BATLAST_SHIFT 19
#define  HIPWM5_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT7_BATLAST_MASK) >> HIPWM5_HBAT7_BATLAST_SHIFT)
#define  HIPWM5_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT7_BATLAST_SHIFT))

#define  HIPWM5_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT7_BATSIGN_MASK) >> HIPWM5_HBAT7_BATSIGN_SHIFT)
#define  HIPWM5_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT7_BATSIGN_SHIFT))

#define  HIPWM5_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT7_BATSHIFT_MASK) >> HIPWM5_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT7_BATFRAC_MASK) >> HIPWM5_HBAT7_BATFRAC_SHIFT)
#define  HIPWM5_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM5_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT8_RESERVED1_MASK) >> HIPWM5_HBAT8_RESERVED1_SHIFT)
#define  HIPWM5_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT8_RESERVED1_SHIFT))

#define  HIPWM5_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT8_BATLAST_SHIFT 19
#define  HIPWM5_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT8_BATLAST_MASK) >> HIPWM5_HBAT8_BATLAST_SHIFT)
#define  HIPWM5_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT8_BATLAST_SHIFT))

#define  HIPWM5_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT8_BATSIGN_MASK) >> HIPWM5_HBAT8_BATSIGN_SHIFT)
#define  HIPWM5_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT8_BATSIGN_SHIFT))

#define  HIPWM5_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT8_BATSHIFT_MASK) >> HIPWM5_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT8_BATFRAC_MASK) >> HIPWM5_HBAT8_BATFRAC_SHIFT)
#define  HIPWM5_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM5_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT9_RESERVED1_MASK) >> HIPWM5_HBAT9_RESERVED1_SHIFT)
#define  HIPWM5_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT9_RESERVED1_SHIFT))

#define  HIPWM5_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT9_BATLAST_SHIFT 19
#define  HIPWM5_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT9_BATLAST_MASK) >> HIPWM5_HBAT9_BATLAST_SHIFT)
#define  HIPWM5_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT9_BATLAST_SHIFT))

#define  HIPWM5_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT9_BATSIGN_MASK) >> HIPWM5_HBAT9_BATSIGN_SHIFT)
#define  HIPWM5_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT9_BATSIGN_SHIFT))

#define  HIPWM5_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT9_BATSHIFT_MASK) >> HIPWM5_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT9_BATFRAC_MASK) >> HIPWM5_HBAT9_BATFRAC_SHIFT)
#define  HIPWM5_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM5_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT10_RESERVED1_MASK) >> HIPWM5_HBAT10_RESERVED1_SHIFT)
#define  HIPWM5_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT10_RESERVED1_SHIFT))

#define  HIPWM5_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT10_BATLAST_SHIFT 19
#define  HIPWM5_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT10_BATLAST_MASK) >> HIPWM5_HBAT10_BATLAST_SHIFT)
#define  HIPWM5_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT10_BATLAST_SHIFT))

#define  HIPWM5_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT10_BATSIGN_MASK) >> HIPWM5_HBAT10_BATSIGN_SHIFT)
#define  HIPWM5_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT10_BATSIGN_SHIFT))

#define  HIPWM5_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT10_BATSHIFT_MASK) >> HIPWM5_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT10_BATFRAC_MASK) >> HIPWM5_HBAT10_BATFRAC_SHIFT)
#define  HIPWM5_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM5_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT11_RESERVED1_MASK) >> HIPWM5_HBAT11_RESERVED1_SHIFT)
#define  HIPWM5_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT11_RESERVED1_SHIFT))

#define  HIPWM5_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT11_BATLAST_SHIFT 19
#define  HIPWM5_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT11_BATLAST_MASK) >> HIPWM5_HBAT11_BATLAST_SHIFT)
#define  HIPWM5_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT11_BATLAST_SHIFT))

#define  HIPWM5_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT11_BATSIGN_MASK) >> HIPWM5_HBAT11_BATSIGN_SHIFT)
#define  HIPWM5_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT11_BATSIGN_SHIFT))

#define  HIPWM5_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT11_BATSHIFT_MASK) >> HIPWM5_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT11_BATFRAC_MASK) >> HIPWM5_HBAT11_BATFRAC_SHIFT)
#define  HIPWM5_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM5_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT12_RESERVED1_MASK) >> HIPWM5_HBAT12_RESERVED1_SHIFT)
#define  HIPWM5_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT12_RESERVED1_SHIFT))

#define  HIPWM5_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT12_BATLAST_SHIFT 19
#define  HIPWM5_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT12_BATLAST_MASK) >> HIPWM5_HBAT12_BATLAST_SHIFT)
#define  HIPWM5_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT12_BATLAST_SHIFT))

#define  HIPWM5_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT12_BATSIGN_MASK) >> HIPWM5_HBAT12_BATSIGN_SHIFT)
#define  HIPWM5_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT12_BATSIGN_SHIFT))

#define  HIPWM5_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT12_BATSHIFT_MASK) >> HIPWM5_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT12_BATFRAC_MASK) >> HIPWM5_HBAT12_BATFRAC_SHIFT)
#define  HIPWM5_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM5_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT13_RESERVED1_MASK) >> HIPWM5_HBAT13_RESERVED1_SHIFT)
#define  HIPWM5_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT13_RESERVED1_SHIFT))

#define  HIPWM5_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT13_BATLAST_SHIFT 19
#define  HIPWM5_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT13_BATLAST_MASK) >> HIPWM5_HBAT13_BATLAST_SHIFT)
#define  HIPWM5_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT13_BATLAST_SHIFT))

#define  HIPWM5_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT13_BATSIGN_MASK) >> HIPWM5_HBAT13_BATSIGN_SHIFT)
#define  HIPWM5_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT13_BATSIGN_SHIFT))

#define  HIPWM5_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT13_BATSHIFT_MASK) >> HIPWM5_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT13_BATFRAC_MASK) >> HIPWM5_HBAT13_BATFRAC_SHIFT)
#define  HIPWM5_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM5_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT14_RESERVED1_MASK) >> HIPWM5_HBAT14_RESERVED1_SHIFT)
#define  HIPWM5_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT14_RESERVED1_SHIFT))

#define  HIPWM5_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT14_BATLAST_SHIFT 19
#define  HIPWM5_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT14_BATLAST_MASK) >> HIPWM5_HBAT14_BATLAST_SHIFT)
#define  HIPWM5_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT14_BATLAST_SHIFT))

#define  HIPWM5_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT14_BATSIGN_MASK) >> HIPWM5_HBAT14_BATSIGN_SHIFT)
#define  HIPWM5_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT14_BATSIGN_SHIFT))

#define  HIPWM5_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT14_BATSHIFT_MASK) >> HIPWM5_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT14_BATFRAC_MASK) >> HIPWM5_HBAT14_BATFRAC_SHIFT)
#define  HIPWM5_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM5_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT15_RESERVED1_MASK) >> HIPWM5_HBAT15_RESERVED1_SHIFT)
#define  HIPWM5_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT15_RESERVED1_SHIFT))

#define  HIPWM5_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT15_BATLAST_SHIFT 19
#define  HIPWM5_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT15_BATLAST_MASK) >> HIPWM5_HBAT15_BATLAST_SHIFT)
#define  HIPWM5_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT15_BATLAST_SHIFT))

#define  HIPWM5_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT15_BATSIGN_MASK) >> HIPWM5_HBAT15_BATSIGN_SHIFT)
#define  HIPWM5_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT15_BATSIGN_SHIFT))

#define  HIPWM5_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT15_BATSHIFT_MASK) >> HIPWM5_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT15_BATFRAC_MASK) >> HIPWM5_HBAT15_BATFRAC_SHIFT)
#define  HIPWM5_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM5_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT16_RESERVED1_MASK) >> HIPWM5_HBAT16_RESERVED1_SHIFT)
#define  HIPWM5_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT16_RESERVED1_SHIFT))

#define  HIPWM5_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT16_BATLAST_SHIFT 19
#define  HIPWM5_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT16_BATLAST_MASK) >> HIPWM5_HBAT16_BATLAST_SHIFT)
#define  HIPWM5_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT16_BATLAST_SHIFT))

#define  HIPWM5_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT16_BATSIGN_MASK) >> HIPWM5_HBAT16_BATSIGN_SHIFT)
#define  HIPWM5_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT16_BATSIGN_SHIFT))

#define  HIPWM5_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT16_BATSHIFT_MASK) >> HIPWM5_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT16_BATFRAC_MASK) >> HIPWM5_HBAT16_BATFRAC_SHIFT)
#define  HIPWM5_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM5_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT17_RESERVED1_MASK) >> HIPWM5_HBAT17_RESERVED1_SHIFT)
#define  HIPWM5_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT17_RESERVED1_SHIFT))

#define  HIPWM5_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT17_BATLAST_SHIFT 19
#define  HIPWM5_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT17_BATLAST_MASK) >> HIPWM5_HBAT17_BATLAST_SHIFT)
#define  HIPWM5_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT17_BATLAST_SHIFT))

#define  HIPWM5_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT17_BATSIGN_MASK) >> HIPWM5_HBAT17_BATSIGN_SHIFT)
#define  HIPWM5_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT17_BATSIGN_SHIFT))

#define  HIPWM5_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT17_BATSHIFT_MASK) >> HIPWM5_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT17_BATFRAC_MASK) >> HIPWM5_HBAT17_BATFRAC_SHIFT)
#define  HIPWM5_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM5_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT18_RESERVED1_MASK) >> HIPWM5_HBAT18_RESERVED1_SHIFT)
#define  HIPWM5_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT18_RESERVED1_SHIFT))

#define  HIPWM5_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT18_BATLAST_SHIFT 19
#define  HIPWM5_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT18_BATLAST_MASK) >> HIPWM5_HBAT18_BATLAST_SHIFT)
#define  HIPWM5_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT18_BATLAST_SHIFT))

#define  HIPWM5_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT18_BATSIGN_MASK) >> HIPWM5_HBAT18_BATSIGN_SHIFT)
#define  HIPWM5_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT18_BATSIGN_SHIFT))

#define  HIPWM5_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT18_BATSHIFT_MASK) >> HIPWM5_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT18_BATFRAC_MASK) >> HIPWM5_HBAT18_BATFRAC_SHIFT)
#define  HIPWM5_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM5_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT19_RESERVED1_MASK) >> HIPWM5_HBAT19_RESERVED1_SHIFT)
#define  HIPWM5_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT19_RESERVED1_SHIFT))

#define  HIPWM5_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT19_BATLAST_SHIFT 19
#define  HIPWM5_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT19_BATLAST_MASK) >> HIPWM5_HBAT19_BATLAST_SHIFT)
#define  HIPWM5_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT19_BATLAST_SHIFT))

#define  HIPWM5_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT19_BATSIGN_MASK) >> HIPWM5_HBAT19_BATSIGN_SHIFT)
#define  HIPWM5_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT19_BATSIGN_SHIFT))

#define  HIPWM5_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT19_BATSHIFT_MASK) >> HIPWM5_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT19_BATFRAC_MASK) >> HIPWM5_HBAT19_BATFRAC_SHIFT)
#define  HIPWM5_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM5_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT20_RESERVED1_MASK) >> HIPWM5_HBAT20_RESERVED1_SHIFT)
#define  HIPWM5_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT20_RESERVED1_SHIFT))

#define  HIPWM5_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT20_BATLAST_SHIFT 19
#define  HIPWM5_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT20_BATLAST_MASK) >> HIPWM5_HBAT20_BATLAST_SHIFT)
#define  HIPWM5_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT20_BATLAST_SHIFT))

#define  HIPWM5_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT20_BATSIGN_MASK) >> HIPWM5_HBAT20_BATSIGN_SHIFT)
#define  HIPWM5_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT20_BATSIGN_SHIFT))

#define  HIPWM5_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT20_BATSHIFT_MASK) >> HIPWM5_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT20_BATFRAC_MASK) >> HIPWM5_HBAT20_BATFRAC_SHIFT)
#define  HIPWM5_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM5_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT21_RESERVED1_MASK) >> HIPWM5_HBAT21_RESERVED1_SHIFT)
#define  HIPWM5_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT21_RESERVED1_SHIFT))

#define  HIPWM5_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT21_BATLAST_SHIFT 19
#define  HIPWM5_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT21_BATLAST_MASK) >> HIPWM5_HBAT21_BATLAST_SHIFT)
#define  HIPWM5_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT21_BATLAST_SHIFT))

#define  HIPWM5_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT21_BATSIGN_MASK) >> HIPWM5_HBAT21_BATSIGN_SHIFT)
#define  HIPWM5_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT21_BATSIGN_SHIFT))

#define  HIPWM5_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT21_BATSHIFT_MASK) >> HIPWM5_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT21_BATFRAC_MASK) >> HIPWM5_HBAT21_BATFRAC_SHIFT)
#define  HIPWM5_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM5_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT22_RESERVED1_MASK) >> HIPWM5_HBAT22_RESERVED1_SHIFT)
#define  HIPWM5_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT22_RESERVED1_SHIFT))

#define  HIPWM5_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT22_BATLAST_SHIFT 19
#define  HIPWM5_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT22_BATLAST_MASK) >> HIPWM5_HBAT22_BATLAST_SHIFT)
#define  HIPWM5_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT22_BATLAST_SHIFT))

#define  HIPWM5_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT22_BATSIGN_MASK) >> HIPWM5_HBAT22_BATSIGN_SHIFT)
#define  HIPWM5_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT22_BATSIGN_SHIFT))

#define  HIPWM5_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT22_BATSHIFT_MASK) >> HIPWM5_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT22_BATFRAC_MASK) >> HIPWM5_HBAT22_BATFRAC_SHIFT)
#define  HIPWM5_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM5_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT23_RESERVED1_MASK) >> HIPWM5_HBAT23_RESERVED1_SHIFT)
#define  HIPWM5_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT23_RESERVED1_SHIFT))

#define  HIPWM5_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT23_BATLAST_SHIFT 19
#define  HIPWM5_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT23_BATLAST_MASK) >> HIPWM5_HBAT23_BATLAST_SHIFT)
#define  HIPWM5_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT23_BATLAST_SHIFT))

#define  HIPWM5_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT23_BATSIGN_MASK) >> HIPWM5_HBAT23_BATSIGN_SHIFT)
#define  HIPWM5_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT23_BATSIGN_SHIFT))

#define  HIPWM5_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT23_BATSHIFT_MASK) >> HIPWM5_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT23_BATFRAC_MASK) >> HIPWM5_HBAT23_BATFRAC_SHIFT)
#define  HIPWM5_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM5_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT24_RESERVED1_MASK) >> HIPWM5_HBAT24_RESERVED1_SHIFT)
#define  HIPWM5_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT24_RESERVED1_SHIFT))

#define  HIPWM5_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT24_BATLAST_SHIFT 19
#define  HIPWM5_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT24_BATLAST_MASK) >> HIPWM5_HBAT24_BATLAST_SHIFT)
#define  HIPWM5_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT24_BATLAST_SHIFT))

#define  HIPWM5_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT24_BATSIGN_MASK) >> HIPWM5_HBAT24_BATSIGN_SHIFT)
#define  HIPWM5_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT24_BATSIGN_SHIFT))

#define  HIPWM5_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT24_BATSHIFT_MASK) >> HIPWM5_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT24_BATFRAC_MASK) >> HIPWM5_HBAT24_BATFRAC_SHIFT)
#define  HIPWM5_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM5_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT25_RESERVED1_MASK) >> HIPWM5_HBAT25_RESERVED1_SHIFT)
#define  HIPWM5_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT25_RESERVED1_SHIFT))

#define  HIPWM5_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT25_BATLAST_SHIFT 19
#define  HIPWM5_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT25_BATLAST_MASK) >> HIPWM5_HBAT25_BATLAST_SHIFT)
#define  HIPWM5_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT25_BATLAST_SHIFT))

#define  HIPWM5_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT25_BATSIGN_MASK) >> HIPWM5_HBAT25_BATSIGN_SHIFT)
#define  HIPWM5_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT25_BATSIGN_SHIFT))

#define  HIPWM5_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT25_BATSHIFT_MASK) >> HIPWM5_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT25_BATFRAC_MASK) >> HIPWM5_HBAT25_BATFRAC_SHIFT)
#define  HIPWM5_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM5_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT26_RESERVED1_MASK) >> HIPWM5_HBAT26_RESERVED1_SHIFT)
#define  HIPWM5_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT26_RESERVED1_SHIFT))

#define  HIPWM5_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT26_BATLAST_SHIFT 19
#define  HIPWM5_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT26_BATLAST_MASK) >> HIPWM5_HBAT26_BATLAST_SHIFT)
#define  HIPWM5_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT26_BATLAST_SHIFT))

#define  HIPWM5_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT26_BATSIGN_MASK) >> HIPWM5_HBAT26_BATSIGN_SHIFT)
#define  HIPWM5_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT26_BATSIGN_SHIFT))

#define  HIPWM5_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT26_BATSHIFT_MASK) >> HIPWM5_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT26_BATFRAC_MASK) >> HIPWM5_HBAT26_BATFRAC_SHIFT)
#define  HIPWM5_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM5_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT27_RESERVED1_MASK) >> HIPWM5_HBAT27_RESERVED1_SHIFT)
#define  HIPWM5_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT27_RESERVED1_SHIFT))

#define  HIPWM5_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT27_BATLAST_SHIFT 19
#define  HIPWM5_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT27_BATLAST_MASK) >> HIPWM5_HBAT27_BATLAST_SHIFT)
#define  HIPWM5_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT27_BATLAST_SHIFT))

#define  HIPWM5_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT27_BATSIGN_MASK) >> HIPWM5_HBAT27_BATSIGN_SHIFT)
#define  HIPWM5_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT27_BATSIGN_SHIFT))

#define  HIPWM5_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT27_BATSHIFT_MASK) >> HIPWM5_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT27_BATFRAC_MASK) >> HIPWM5_HBAT27_BATFRAC_SHIFT)
#define  HIPWM5_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM5_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT28_RESERVED1_MASK) >> HIPWM5_HBAT28_RESERVED1_SHIFT)
#define  HIPWM5_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT28_RESERVED1_SHIFT))

#define  HIPWM5_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT28_BATLAST_SHIFT 19
#define  HIPWM5_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT28_BATLAST_MASK) >> HIPWM5_HBAT28_BATLAST_SHIFT)
#define  HIPWM5_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT28_BATLAST_SHIFT))

#define  HIPWM5_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT28_BATSIGN_MASK) >> HIPWM5_HBAT28_BATSIGN_SHIFT)
#define  HIPWM5_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT28_BATSIGN_SHIFT))

#define  HIPWM5_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT28_BATSHIFT_MASK) >> HIPWM5_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT28_BATFRAC_MASK) >> HIPWM5_HBAT28_BATFRAC_SHIFT)
#define  HIPWM5_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM5_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT29_RESERVED1_MASK) >> HIPWM5_HBAT29_RESERVED1_SHIFT)
#define  HIPWM5_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT29_RESERVED1_SHIFT))

#define  HIPWM5_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT29_BATLAST_SHIFT 19
#define  HIPWM5_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT29_BATLAST_MASK) >> HIPWM5_HBAT29_BATLAST_SHIFT)
#define  HIPWM5_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT29_BATLAST_SHIFT))

#define  HIPWM5_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT29_BATSIGN_MASK) >> HIPWM5_HBAT29_BATSIGN_SHIFT)
#define  HIPWM5_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT29_BATSIGN_SHIFT))

#define  HIPWM5_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT29_BATSHIFT_MASK) >> HIPWM5_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT29_BATFRAC_MASK) >> HIPWM5_HBAT29_BATFRAC_SHIFT)
#define  HIPWM5_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM5_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT30_RESERVED1_MASK) >> HIPWM5_HBAT30_RESERVED1_SHIFT)
#define  HIPWM5_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT30_RESERVED1_SHIFT))

#define  HIPWM5_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT30_BATLAST_SHIFT 19
#define  HIPWM5_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT30_BATLAST_MASK) >> HIPWM5_HBAT30_BATLAST_SHIFT)
#define  HIPWM5_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT30_BATLAST_SHIFT))

#define  HIPWM5_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT30_BATSIGN_MASK) >> HIPWM5_HBAT30_BATSIGN_SHIFT)
#define  HIPWM5_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT30_BATSIGN_SHIFT))

#define  HIPWM5_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT30_BATSHIFT_MASK) >> HIPWM5_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT30_BATFRAC_MASK) >> HIPWM5_HBAT30_BATFRAC_SHIFT)
#define  HIPWM5_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM5_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT31_RESERVED1_MASK) >> HIPWM5_HBAT31_RESERVED1_SHIFT)
#define  HIPWM5_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT31_RESERVED1_SHIFT))

#define  HIPWM5_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT31_BATLAST_SHIFT 19
#define  HIPWM5_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT31_BATLAST_MASK) >> HIPWM5_HBAT31_BATLAST_SHIFT)
#define  HIPWM5_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT31_BATLAST_SHIFT))

#define  HIPWM5_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT31_BATSIGN_MASK) >> HIPWM5_HBAT31_BATSIGN_SHIFT)
#define  HIPWM5_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT31_BATSIGN_SHIFT))

#define  HIPWM5_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT31_BATSHIFT_MASK) >> HIPWM5_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT31_BATFRAC_MASK) >> HIPWM5_HBAT31_BATFRAC_SHIFT)
#define  HIPWM5_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM5_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT32_RESERVED1_MASK) >> HIPWM5_HBAT32_RESERVED1_SHIFT)
#define  HIPWM5_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT32_RESERVED1_SHIFT))

#define  HIPWM5_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT32_BATLAST_SHIFT 19
#define  HIPWM5_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT32_BATLAST_MASK) >> HIPWM5_HBAT32_BATLAST_SHIFT)
#define  HIPWM5_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT32_BATLAST_SHIFT))

#define  HIPWM5_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT32_BATSIGN_MASK) >> HIPWM5_HBAT32_BATSIGN_SHIFT)
#define  HIPWM5_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT32_BATSIGN_SHIFT))

#define  HIPWM5_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT32_BATSHIFT_MASK) >> HIPWM5_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT32_BATFRAC_MASK) >> HIPWM5_HBAT32_BATFRAC_SHIFT)
#define  HIPWM5_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM5_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT33_RESERVED1_MASK) >> HIPWM5_HBAT33_RESERVED1_SHIFT)
#define  HIPWM5_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT33_RESERVED1_SHIFT))

#define  HIPWM5_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT33_BATLAST_SHIFT 19
#define  HIPWM5_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT33_BATLAST_MASK) >> HIPWM5_HBAT33_BATLAST_SHIFT)
#define  HIPWM5_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT33_BATLAST_SHIFT))

#define  HIPWM5_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT33_BATSIGN_MASK) >> HIPWM5_HBAT33_BATSIGN_SHIFT)
#define  HIPWM5_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT33_BATSIGN_SHIFT))

#define  HIPWM5_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT33_BATSHIFT_MASK) >> HIPWM5_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT33_BATFRAC_MASK) >> HIPWM5_HBAT33_BATFRAC_SHIFT)
#define  HIPWM5_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM5_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT34_RESERVED1_MASK) >> HIPWM5_HBAT34_RESERVED1_SHIFT)
#define  HIPWM5_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT34_RESERVED1_SHIFT))

#define  HIPWM5_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT34_BATLAST_SHIFT 19
#define  HIPWM5_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT34_BATLAST_MASK) >> HIPWM5_HBAT34_BATLAST_SHIFT)
#define  HIPWM5_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT34_BATLAST_SHIFT))

#define  HIPWM5_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT34_BATSIGN_MASK) >> HIPWM5_HBAT34_BATSIGN_SHIFT)
#define  HIPWM5_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT34_BATSIGN_SHIFT))

#define  HIPWM5_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT34_BATSHIFT_MASK) >> HIPWM5_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT34_BATFRAC_MASK) >> HIPWM5_HBAT34_BATFRAC_SHIFT)
#define  HIPWM5_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM5_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT35_RESERVED1_MASK) >> HIPWM5_HBAT35_RESERVED1_SHIFT)
#define  HIPWM5_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT35_RESERVED1_SHIFT))

#define  HIPWM5_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT35_BATLAST_SHIFT 19
#define  HIPWM5_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT35_BATLAST_MASK) >> HIPWM5_HBAT35_BATLAST_SHIFT)
#define  HIPWM5_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT35_BATLAST_SHIFT))

#define  HIPWM5_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT35_BATSIGN_MASK) >> HIPWM5_HBAT35_BATSIGN_SHIFT)
#define  HIPWM5_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT35_BATSIGN_SHIFT))

#define  HIPWM5_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT35_BATSHIFT_MASK) >> HIPWM5_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT35_BATFRAC_MASK) >> HIPWM5_HBAT35_BATFRAC_SHIFT)
#define  HIPWM5_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM5_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT36_RESERVED1_MASK) >> HIPWM5_HBAT36_RESERVED1_SHIFT)
#define  HIPWM5_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT36_RESERVED1_SHIFT))

#define  HIPWM5_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT36_BATLAST_SHIFT 19
#define  HIPWM5_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT36_BATLAST_MASK) >> HIPWM5_HBAT36_BATLAST_SHIFT)
#define  HIPWM5_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT36_BATLAST_SHIFT))

#define  HIPWM5_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT36_BATSIGN_MASK) >> HIPWM5_HBAT36_BATSIGN_SHIFT)
#define  HIPWM5_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT36_BATSIGN_SHIFT))

#define  HIPWM5_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT36_BATSHIFT_MASK) >> HIPWM5_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT36_BATFRAC_MASK) >> HIPWM5_HBAT36_BATFRAC_SHIFT)
#define  HIPWM5_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM5_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT37_RESERVED1_MASK) >> HIPWM5_HBAT37_RESERVED1_SHIFT)
#define  HIPWM5_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT37_RESERVED1_SHIFT))

#define  HIPWM5_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT37_BATLAST_SHIFT 19
#define  HIPWM5_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT37_BATLAST_MASK) >> HIPWM5_HBAT37_BATLAST_SHIFT)
#define  HIPWM5_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT37_BATLAST_SHIFT))

#define  HIPWM5_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT37_BATSIGN_MASK) >> HIPWM5_HBAT37_BATSIGN_SHIFT)
#define  HIPWM5_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT37_BATSIGN_SHIFT))

#define  HIPWM5_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT37_BATSHIFT_MASK) >> HIPWM5_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT37_BATFRAC_MASK) >> HIPWM5_HBAT37_BATFRAC_SHIFT)
#define  HIPWM5_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM5_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT38_RESERVED1_MASK) >> HIPWM5_HBAT38_RESERVED1_SHIFT)
#define  HIPWM5_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT38_RESERVED1_SHIFT))

#define  HIPWM5_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT38_BATLAST_SHIFT 19
#define  HIPWM5_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT38_BATLAST_MASK) >> HIPWM5_HBAT38_BATLAST_SHIFT)
#define  HIPWM5_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT38_BATLAST_SHIFT))

#define  HIPWM5_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT38_BATSIGN_MASK) >> HIPWM5_HBAT38_BATSIGN_SHIFT)
#define  HIPWM5_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT38_BATSIGN_SHIFT))

#define  HIPWM5_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT38_BATSHIFT_MASK) >> HIPWM5_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT38_BATFRAC_MASK) >> HIPWM5_HBAT38_BATFRAC_SHIFT)
#define  HIPWM5_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM5_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT39_RESERVED1_MASK) >> HIPWM5_HBAT39_RESERVED1_SHIFT)
#define  HIPWM5_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT39_RESERVED1_SHIFT))

#define  HIPWM5_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT39_BATLAST_SHIFT 19
#define  HIPWM5_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT39_BATLAST_MASK) >> HIPWM5_HBAT39_BATLAST_SHIFT)
#define  HIPWM5_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT39_BATLAST_SHIFT))

#define  HIPWM5_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT39_BATSIGN_MASK) >> HIPWM5_HBAT39_BATSIGN_SHIFT)
#define  HIPWM5_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT39_BATSIGN_SHIFT))

#define  HIPWM5_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT39_BATSHIFT_MASK) >> HIPWM5_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT39_BATFRAC_MASK) >> HIPWM5_HBAT39_BATFRAC_SHIFT)
#define  HIPWM5_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM5_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT40_RESERVED1_MASK) >> HIPWM5_HBAT40_RESERVED1_SHIFT)
#define  HIPWM5_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT40_RESERVED1_SHIFT))

#define  HIPWM5_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT40_BATLAST_SHIFT 19
#define  HIPWM5_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT40_BATLAST_MASK) >> HIPWM5_HBAT40_BATLAST_SHIFT)
#define  HIPWM5_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT40_BATLAST_SHIFT))

#define  HIPWM5_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT40_BATSIGN_MASK) >> HIPWM5_HBAT40_BATSIGN_SHIFT)
#define  HIPWM5_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT40_BATSIGN_SHIFT))

#define  HIPWM5_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT40_BATSHIFT_MASK) >> HIPWM5_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT40_BATFRAC_MASK) >> HIPWM5_HBAT40_BATFRAC_SHIFT)
#define  HIPWM5_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM5_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT41_RESERVED1_MASK) >> HIPWM5_HBAT41_RESERVED1_SHIFT)
#define  HIPWM5_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT41_RESERVED1_SHIFT))

#define  HIPWM5_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT41_BATLAST_SHIFT 19
#define  HIPWM5_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT41_BATLAST_MASK) >> HIPWM5_HBAT41_BATLAST_SHIFT)
#define  HIPWM5_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT41_BATLAST_SHIFT))

#define  HIPWM5_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT41_BATSIGN_MASK) >> HIPWM5_HBAT41_BATSIGN_SHIFT)
#define  HIPWM5_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT41_BATSIGN_SHIFT))

#define  HIPWM5_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT41_BATSHIFT_MASK) >> HIPWM5_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT41_BATFRAC_MASK) >> HIPWM5_HBAT41_BATFRAC_SHIFT)
#define  HIPWM5_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM5_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT42_RESERVED1_MASK) >> HIPWM5_HBAT42_RESERVED1_SHIFT)
#define  HIPWM5_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT42_RESERVED1_SHIFT))

#define  HIPWM5_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT42_BATLAST_SHIFT 19
#define  HIPWM5_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT42_BATLAST_MASK) >> HIPWM5_HBAT42_BATLAST_SHIFT)
#define  HIPWM5_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT42_BATLAST_SHIFT))

#define  HIPWM5_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT42_BATSIGN_MASK) >> HIPWM5_HBAT42_BATSIGN_SHIFT)
#define  HIPWM5_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT42_BATSIGN_SHIFT))

#define  HIPWM5_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT42_BATSHIFT_MASK) >> HIPWM5_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT42_BATFRAC_MASK) >> HIPWM5_HBAT42_BATFRAC_SHIFT)
#define  HIPWM5_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM5_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT43_RESERVED1_MASK) >> HIPWM5_HBAT43_RESERVED1_SHIFT)
#define  HIPWM5_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT43_RESERVED1_SHIFT))

#define  HIPWM5_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT43_BATLAST_SHIFT 19
#define  HIPWM5_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT43_BATLAST_MASK) >> HIPWM5_HBAT43_BATLAST_SHIFT)
#define  HIPWM5_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT43_BATLAST_SHIFT))

#define  HIPWM5_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT43_BATSIGN_MASK) >> HIPWM5_HBAT43_BATSIGN_SHIFT)
#define  HIPWM5_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT43_BATSIGN_SHIFT))

#define  HIPWM5_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT43_BATSHIFT_MASK) >> HIPWM5_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT43_BATFRAC_MASK) >> HIPWM5_HBAT43_BATFRAC_SHIFT)
#define  HIPWM5_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM5_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT44_RESERVED1_MASK) >> HIPWM5_HBAT44_RESERVED1_SHIFT)
#define  HIPWM5_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT44_RESERVED1_SHIFT))

#define  HIPWM5_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT44_BATLAST_SHIFT 19
#define  HIPWM5_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT44_BATLAST_MASK) >> HIPWM5_HBAT44_BATLAST_SHIFT)
#define  HIPWM5_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT44_BATLAST_SHIFT))

#define  HIPWM5_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT44_BATSIGN_MASK) >> HIPWM5_HBAT44_BATSIGN_SHIFT)
#define  HIPWM5_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT44_BATSIGN_SHIFT))

#define  HIPWM5_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT44_BATSHIFT_MASK) >> HIPWM5_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT44_BATFRAC_MASK) >> HIPWM5_HBAT44_BATFRAC_SHIFT)
#define  HIPWM5_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM5_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT45_RESERVED1_MASK) >> HIPWM5_HBAT45_RESERVED1_SHIFT)
#define  HIPWM5_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT45_RESERVED1_SHIFT))

#define  HIPWM5_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT45_BATLAST_SHIFT 19
#define  HIPWM5_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT45_BATLAST_MASK) >> HIPWM5_HBAT45_BATLAST_SHIFT)
#define  HIPWM5_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT45_BATLAST_SHIFT))

#define  HIPWM5_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT45_BATSIGN_MASK) >> HIPWM5_HBAT45_BATSIGN_SHIFT)
#define  HIPWM5_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT45_BATSIGN_SHIFT))

#define  HIPWM5_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT45_BATSHIFT_MASK) >> HIPWM5_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT45_BATFRAC_MASK) >> HIPWM5_HBAT45_BATFRAC_SHIFT)
#define  HIPWM5_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM5_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT46_RESERVED1_MASK) >> HIPWM5_HBAT46_RESERVED1_SHIFT)
#define  HIPWM5_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT46_RESERVED1_SHIFT))

#define  HIPWM5_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT46_BATLAST_SHIFT 19
#define  HIPWM5_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT46_BATLAST_MASK) >> HIPWM5_HBAT46_BATLAST_SHIFT)
#define  HIPWM5_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT46_BATLAST_SHIFT))

#define  HIPWM5_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT46_BATSIGN_MASK) >> HIPWM5_HBAT46_BATSIGN_SHIFT)
#define  HIPWM5_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT46_BATSIGN_SHIFT))

#define  HIPWM5_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT46_BATSHIFT_MASK) >> HIPWM5_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT46_BATFRAC_MASK) >> HIPWM5_HBAT46_BATFRAC_SHIFT)
#define  HIPWM5_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM5_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT47_RESERVED1_MASK) >> HIPWM5_HBAT47_RESERVED1_SHIFT)
#define  HIPWM5_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT47_RESERVED1_SHIFT))

#define  HIPWM5_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT47_BATLAST_SHIFT 19
#define  HIPWM5_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT47_BATLAST_MASK) >> HIPWM5_HBAT47_BATLAST_SHIFT)
#define  HIPWM5_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT47_BATLAST_SHIFT))

#define  HIPWM5_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT47_BATSIGN_MASK) >> HIPWM5_HBAT47_BATSIGN_SHIFT)
#define  HIPWM5_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT47_BATSIGN_SHIFT))

#define  HIPWM5_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT47_BATSHIFT_MASK) >> HIPWM5_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT47_BATFRAC_MASK) >> HIPWM5_HBAT47_BATFRAC_SHIFT)
#define  HIPWM5_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM5_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT48_RESERVED1_MASK) >> HIPWM5_HBAT48_RESERVED1_SHIFT)
#define  HIPWM5_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT48_RESERVED1_SHIFT))

#define  HIPWM5_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT48_BATLAST_SHIFT 19
#define  HIPWM5_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT48_BATLAST_MASK) >> HIPWM5_HBAT48_BATLAST_SHIFT)
#define  HIPWM5_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT48_BATLAST_SHIFT))

#define  HIPWM5_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT48_BATSIGN_MASK) >> HIPWM5_HBAT48_BATSIGN_SHIFT)
#define  HIPWM5_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT48_BATSIGN_SHIFT))

#define  HIPWM5_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT48_BATSHIFT_MASK) >> HIPWM5_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT48_BATFRAC_MASK) >> HIPWM5_HBAT48_BATFRAC_SHIFT)
#define  HIPWM5_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM5_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT49_RESERVED1_MASK) >> HIPWM5_HBAT49_RESERVED1_SHIFT)
#define  HIPWM5_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT49_RESERVED1_SHIFT))

#define  HIPWM5_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT49_BATLAST_SHIFT 19
#define  HIPWM5_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT49_BATLAST_MASK) >> HIPWM5_HBAT49_BATLAST_SHIFT)
#define  HIPWM5_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT49_BATLAST_SHIFT))

#define  HIPWM5_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT49_BATSIGN_MASK) >> HIPWM5_HBAT49_BATSIGN_SHIFT)
#define  HIPWM5_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT49_BATSIGN_SHIFT))

#define  HIPWM5_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT49_BATSHIFT_MASK) >> HIPWM5_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT49_BATFRAC_MASK) >> HIPWM5_HBAT49_BATFRAC_SHIFT)
#define  HIPWM5_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM5_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT50_RESERVED1_MASK) >> HIPWM5_HBAT50_RESERVED1_SHIFT)
#define  HIPWM5_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT50_RESERVED1_SHIFT))

#define  HIPWM5_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT50_BATLAST_SHIFT 19
#define  HIPWM5_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT50_BATLAST_MASK) >> HIPWM5_HBAT50_BATLAST_SHIFT)
#define  HIPWM5_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT50_BATLAST_SHIFT))

#define  HIPWM5_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT50_BATSIGN_MASK) >> HIPWM5_HBAT50_BATSIGN_SHIFT)
#define  HIPWM5_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT50_BATSIGN_SHIFT))

#define  HIPWM5_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT50_BATSHIFT_MASK) >> HIPWM5_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT50_BATFRAC_MASK) >> HIPWM5_HBAT50_BATFRAC_SHIFT)
#define  HIPWM5_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM5_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT51_RESERVED1_MASK) >> HIPWM5_HBAT51_RESERVED1_SHIFT)
#define  HIPWM5_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT51_RESERVED1_SHIFT))

#define  HIPWM5_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT51_BATLAST_SHIFT 19
#define  HIPWM5_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT51_BATLAST_MASK) >> HIPWM5_HBAT51_BATLAST_SHIFT)
#define  HIPWM5_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT51_BATLAST_SHIFT))

#define  HIPWM5_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT51_BATSIGN_MASK) >> HIPWM5_HBAT51_BATSIGN_SHIFT)
#define  HIPWM5_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT51_BATSIGN_SHIFT))

#define  HIPWM5_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT51_BATSHIFT_MASK) >> HIPWM5_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT51_BATFRAC_MASK) >> HIPWM5_HBAT51_BATFRAC_SHIFT)
#define  HIPWM5_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM5_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT52_RESERVED1_MASK) >> HIPWM5_HBAT52_RESERVED1_SHIFT)
#define  HIPWM5_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT52_RESERVED1_SHIFT))

#define  HIPWM5_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT52_BATLAST_SHIFT 19
#define  HIPWM5_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT52_BATLAST_MASK) >> HIPWM5_HBAT52_BATLAST_SHIFT)
#define  HIPWM5_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT52_BATLAST_SHIFT))

#define  HIPWM5_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT52_BATSIGN_MASK) >> HIPWM5_HBAT52_BATSIGN_SHIFT)
#define  HIPWM5_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT52_BATSIGN_SHIFT))

#define  HIPWM5_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT52_BATSHIFT_MASK) >> HIPWM5_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT52_BATFRAC_MASK) >> HIPWM5_HBAT52_BATFRAC_SHIFT)
#define  HIPWM5_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM5_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT53_RESERVED1_MASK) >> HIPWM5_HBAT53_RESERVED1_SHIFT)
#define  HIPWM5_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT53_RESERVED1_SHIFT))

#define  HIPWM5_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT53_BATLAST_SHIFT 19
#define  HIPWM5_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT53_BATLAST_MASK) >> HIPWM5_HBAT53_BATLAST_SHIFT)
#define  HIPWM5_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT53_BATLAST_SHIFT))

#define  HIPWM5_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT53_BATSIGN_MASK) >> HIPWM5_HBAT53_BATSIGN_SHIFT)
#define  HIPWM5_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT53_BATSIGN_SHIFT))

#define  HIPWM5_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT53_BATSHIFT_MASK) >> HIPWM5_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT53_BATFRAC_MASK) >> HIPWM5_HBAT53_BATFRAC_SHIFT)
#define  HIPWM5_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM5_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT54_RESERVED1_MASK) >> HIPWM5_HBAT54_RESERVED1_SHIFT)
#define  HIPWM5_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT54_RESERVED1_SHIFT))

#define  HIPWM5_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT54_BATLAST_SHIFT 19
#define  HIPWM5_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT54_BATLAST_MASK) >> HIPWM5_HBAT54_BATLAST_SHIFT)
#define  HIPWM5_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT54_BATLAST_SHIFT))

#define  HIPWM5_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT54_BATSIGN_MASK) >> HIPWM5_HBAT54_BATSIGN_SHIFT)
#define  HIPWM5_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT54_BATSIGN_SHIFT))

#define  HIPWM5_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT54_BATSHIFT_MASK) >> HIPWM5_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT54_BATFRAC_MASK) >> HIPWM5_HBAT54_BATFRAC_SHIFT)
#define  HIPWM5_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM5_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT55_RESERVED1_MASK) >> HIPWM5_HBAT55_RESERVED1_SHIFT)
#define  HIPWM5_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT55_RESERVED1_SHIFT))

#define  HIPWM5_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT55_BATLAST_SHIFT 19
#define  HIPWM5_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT55_BATLAST_MASK) >> HIPWM5_HBAT55_BATLAST_SHIFT)
#define  HIPWM5_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT55_BATLAST_SHIFT))

#define  HIPWM5_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT55_BATSIGN_MASK) >> HIPWM5_HBAT55_BATSIGN_SHIFT)
#define  HIPWM5_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT55_BATSIGN_SHIFT))

#define  HIPWM5_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT55_BATSHIFT_MASK) >> HIPWM5_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT55_BATFRAC_MASK) >> HIPWM5_HBAT55_BATFRAC_SHIFT)
#define  HIPWM5_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM5_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT56_RESERVED1_MASK) >> HIPWM5_HBAT56_RESERVED1_SHIFT)
#define  HIPWM5_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT56_RESERVED1_SHIFT))

#define  HIPWM5_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT56_BATLAST_SHIFT 19
#define  HIPWM5_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT56_BATLAST_MASK) >> HIPWM5_HBAT56_BATLAST_SHIFT)
#define  HIPWM5_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT56_BATLAST_SHIFT))

#define  HIPWM5_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT56_BATSIGN_MASK) >> HIPWM5_HBAT56_BATSIGN_SHIFT)
#define  HIPWM5_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT56_BATSIGN_SHIFT))

#define  HIPWM5_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT56_BATSHIFT_MASK) >> HIPWM5_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT56_BATFRAC_MASK) >> HIPWM5_HBAT56_BATFRAC_SHIFT)
#define  HIPWM5_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM5_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT57_RESERVED1_MASK) >> HIPWM5_HBAT57_RESERVED1_SHIFT)
#define  HIPWM5_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT57_RESERVED1_SHIFT))

#define  HIPWM5_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT57_BATLAST_SHIFT 19
#define  HIPWM5_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT57_BATLAST_MASK) >> HIPWM5_HBAT57_BATLAST_SHIFT)
#define  HIPWM5_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT57_BATLAST_SHIFT))

#define  HIPWM5_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT57_BATSIGN_MASK) >> HIPWM5_HBAT57_BATSIGN_SHIFT)
#define  HIPWM5_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT57_BATSIGN_SHIFT))

#define  HIPWM5_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT57_BATSHIFT_MASK) >> HIPWM5_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT57_BATFRAC_MASK) >> HIPWM5_HBAT57_BATFRAC_SHIFT)
#define  HIPWM5_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM5_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT58_RESERVED1_MASK) >> HIPWM5_HBAT58_RESERVED1_SHIFT)
#define  HIPWM5_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT58_RESERVED1_SHIFT))

#define  HIPWM5_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT58_BATLAST_SHIFT 19
#define  HIPWM5_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT58_BATLAST_MASK) >> HIPWM5_HBAT58_BATLAST_SHIFT)
#define  HIPWM5_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT58_BATLAST_SHIFT))

#define  HIPWM5_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT58_BATSIGN_MASK) >> HIPWM5_HBAT58_BATSIGN_SHIFT)
#define  HIPWM5_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT58_BATSIGN_SHIFT))

#define  HIPWM5_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT58_BATSHIFT_MASK) >> HIPWM5_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT58_BATFRAC_MASK) >> HIPWM5_HBAT58_BATFRAC_SHIFT)
#define  HIPWM5_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM5_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT59_RESERVED1_MASK) >> HIPWM5_HBAT59_RESERVED1_SHIFT)
#define  HIPWM5_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT59_RESERVED1_SHIFT))

#define  HIPWM5_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT59_BATLAST_SHIFT 19
#define  HIPWM5_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT59_BATLAST_MASK) >> HIPWM5_HBAT59_BATLAST_SHIFT)
#define  HIPWM5_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT59_BATLAST_SHIFT))

#define  HIPWM5_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT59_BATSIGN_MASK) >> HIPWM5_HBAT59_BATSIGN_SHIFT)
#define  HIPWM5_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT59_BATSIGN_SHIFT))

#define  HIPWM5_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT59_BATSHIFT_MASK) >> HIPWM5_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT59_BATFRAC_MASK) >> HIPWM5_HBAT59_BATFRAC_SHIFT)
#define  HIPWM5_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM5_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT60_RESERVED1_MASK) >> HIPWM5_HBAT60_RESERVED1_SHIFT)
#define  HIPWM5_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT60_RESERVED1_SHIFT))

#define  HIPWM5_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT60_BATLAST_SHIFT 19
#define  HIPWM5_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT60_BATLAST_MASK) >> HIPWM5_HBAT60_BATLAST_SHIFT)
#define  HIPWM5_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT60_BATLAST_SHIFT))

#define  HIPWM5_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT60_BATSIGN_MASK) >> HIPWM5_HBAT60_BATSIGN_SHIFT)
#define  HIPWM5_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT60_BATSIGN_SHIFT))

#define  HIPWM5_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT60_BATSHIFT_MASK) >> HIPWM5_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT60_BATFRAC_MASK) >> HIPWM5_HBAT60_BATFRAC_SHIFT)
#define  HIPWM5_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM5_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT61_RESERVED1_MASK) >> HIPWM5_HBAT61_RESERVED1_SHIFT)
#define  HIPWM5_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT61_RESERVED1_SHIFT))

#define  HIPWM5_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT61_BATLAST_SHIFT 19
#define  HIPWM5_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT61_BATLAST_MASK) >> HIPWM5_HBAT61_BATLAST_SHIFT)
#define  HIPWM5_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT61_BATLAST_SHIFT))

#define  HIPWM5_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT61_BATSIGN_MASK) >> HIPWM5_HBAT61_BATSIGN_SHIFT)
#define  HIPWM5_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT61_BATSIGN_SHIFT))

#define  HIPWM5_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT61_BATSHIFT_MASK) >> HIPWM5_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT61_BATFRAC_MASK) >> HIPWM5_HBAT61_BATFRAC_SHIFT)
#define  HIPWM5_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM5_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT62_RESERVED1_MASK) >> HIPWM5_HBAT62_RESERVED1_SHIFT)
#define  HIPWM5_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT62_RESERVED1_SHIFT))

#define  HIPWM5_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT62_BATLAST_SHIFT 19
#define  HIPWM5_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT62_BATLAST_MASK) >> HIPWM5_HBAT62_BATLAST_SHIFT)
#define  HIPWM5_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT62_BATLAST_SHIFT))

#define  HIPWM5_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT62_BATSIGN_MASK) >> HIPWM5_HBAT62_BATSIGN_SHIFT)
#define  HIPWM5_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT62_BATSIGN_SHIFT))

#define  HIPWM5_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT62_BATSHIFT_MASK) >> HIPWM5_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT62_BATFRAC_MASK) >> HIPWM5_HBAT62_BATFRAC_SHIFT)
#define  HIPWM5_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM5_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM5_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM5_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT63_RESERVED1_MASK) >> HIPWM5_HBAT63_RESERVED1_SHIFT)
#define  HIPWM5_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HBAT63_RESERVED1_SHIFT))

#define  HIPWM5_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM5_HBAT63_BATLAST_SHIFT 19
#define  HIPWM5_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT63_BATLAST_MASK) >> HIPWM5_HBAT63_BATLAST_SHIFT)
#define  HIPWM5_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM5_HBAT63_BATLAST_SHIFT))

#define  HIPWM5_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM5_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM5_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT63_BATSIGN_MASK) >> HIPWM5_HBAT63_BATSIGN_SHIFT)
#define  HIPWM5_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM5_HBAT63_BATSIGN_SHIFT))

#define  HIPWM5_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM5_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM5_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT63_BATSHIFT_MASK) >> HIPWM5_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM5_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM5_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM5_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM5_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM5_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM5_HBAT63_BATFRAC_MASK) >> HIPWM5_HBAT63_BATFRAC_SHIFT)
#define  HIPWM5_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM5_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM5_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC0_RESERVED1_MASK) >> HIPWM5_HMIC0_RESERVED1_SHIFT)
#define  HIPWM5_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC0_RESERVED1_SHIFT))

#define  HIPWM5_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC0_MICINTPIX_MASK) >> HIPWM5_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC0_MICFRACPIX_MASK) >> HIPWM5_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM5_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC1_RESERVED1_MASK) >> HIPWM5_HMIC1_RESERVED1_SHIFT)
#define  HIPWM5_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC1_RESERVED1_SHIFT))

#define  HIPWM5_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC1_MICINTPIX_MASK) >> HIPWM5_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC1_MICFRACPIX_MASK) >> HIPWM5_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM5_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC2_RESERVED1_MASK) >> HIPWM5_HMIC2_RESERVED1_SHIFT)
#define  HIPWM5_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC2_RESERVED1_SHIFT))

#define  HIPWM5_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC2_MICINTPIX_MASK) >> HIPWM5_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC2_MICFRACPIX_MASK) >> HIPWM5_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM5_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC3_RESERVED1_MASK) >> HIPWM5_HMIC3_RESERVED1_SHIFT)
#define  HIPWM5_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC3_RESERVED1_SHIFT))

#define  HIPWM5_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC3_MICINTPIX_MASK) >> HIPWM5_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC3_MICFRACPIX_MASK) >> HIPWM5_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM5_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC4_RESERVED1_MASK) >> HIPWM5_HMIC4_RESERVED1_SHIFT)
#define  HIPWM5_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC4_RESERVED1_SHIFT))

#define  HIPWM5_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC4_MICINTPIX_MASK) >> HIPWM5_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC4_MICFRACPIX_MASK) >> HIPWM5_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM5_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC5_RESERVED1_MASK) >> HIPWM5_HMIC5_RESERVED1_SHIFT)
#define  HIPWM5_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC5_RESERVED1_SHIFT))

#define  HIPWM5_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC5_MICINTPIX_MASK) >> HIPWM5_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC5_MICFRACPIX_MASK) >> HIPWM5_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM5_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC6_RESERVED1_MASK) >> HIPWM5_HMIC6_RESERVED1_SHIFT)
#define  HIPWM5_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC6_RESERVED1_SHIFT))

#define  HIPWM5_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC6_MICINTPIX_MASK) >> HIPWM5_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC6_MICFRACPIX_MASK) >> HIPWM5_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM5_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC7_RESERVED1_MASK) >> HIPWM5_HMIC7_RESERVED1_SHIFT)
#define  HIPWM5_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC7_RESERVED1_SHIFT))

#define  HIPWM5_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC7_MICINTPIX_MASK) >> HIPWM5_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC7_MICFRACPIX_MASK) >> HIPWM5_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM5_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC8_RESERVED1_MASK) >> HIPWM5_HMIC8_RESERVED1_SHIFT)
#define  HIPWM5_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC8_RESERVED1_SHIFT))

#define  HIPWM5_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC8_MICINTPIX_MASK) >> HIPWM5_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC8_MICFRACPIX_MASK) >> HIPWM5_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM5_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC9_RESERVED1_MASK) >> HIPWM5_HMIC9_RESERVED1_SHIFT)
#define  HIPWM5_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC9_RESERVED1_SHIFT))

#define  HIPWM5_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC9_MICINTPIX_MASK) >> HIPWM5_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC9_MICFRACPIX_MASK) >> HIPWM5_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM5_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC10_RESERVED1_MASK) >> HIPWM5_HMIC10_RESERVED1_SHIFT)
#define  HIPWM5_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC10_RESERVED1_SHIFT))

#define  HIPWM5_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC10_MICINTPIX_MASK) >> HIPWM5_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC10_MICFRACPIX_MASK) >> HIPWM5_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM5_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM5_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM5_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC11_RESERVED1_MASK) >> HIPWM5_HMIC11_RESERVED1_SHIFT)
#define  HIPWM5_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM5_HMIC11_RESERVED1_SHIFT))

#define  HIPWM5_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM5_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM5_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC11_MICINTPIX_MASK) >> HIPWM5_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM5_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM5_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM5_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM5_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM5_HMIC11_MICFRACPIX_MASK) >> HIPWM5_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM5_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM5_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM5_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 7 of 8) (HiPWM6)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM6_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM6_HCR_RESERVED1_SHIFT 21
#define  HIPWM6_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_RESERVED1_MASK) >> HIPWM6_HCR_RESERVED1_SHIFT)
#define  HIPWM6_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HCR_RESERVED1_SHIFT))

#define  HIPWM6_HCR_EDGESEL_MASK 0x100000
#define  HIPWM6_HCR_EDGESEL_SHIFT 20
#define  HIPWM6_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_EDGESEL_MASK) >> HIPWM6_HCR_EDGESEL_SHIFT)
#define  HIPWM6_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM6_HCR_EDGESEL_SHIFT))

#define  HIPWM6_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM6_HCR_NUMEDGE_SHIFT 19
#define  HIPWM6_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_NUMEDGE_MASK) >> HIPWM6_HCR_NUMEDGE_SHIFT)
#define  HIPWM6_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM6_HCR_NUMEDGE_SHIFT))

#define  HIPWM6_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM6_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM6_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM6_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM6_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM6_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM6_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM6_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM6_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM6_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM6_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM6_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM6_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM6_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM6_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM6_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM6_HCR_NOBATLAST_SHIFT 15
#define  HIPWM6_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_NOBATLAST_MASK) >> HIPWM6_HCR_NOBATLAST_SHIFT)
#define  HIPWM6_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM6_HCR_NOBATLAST_SHIFT))

#define  HIPWM6_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM6_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM6_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_DUALMARGIN_MASK) >> HIPWM6_HCR_DUALMARGIN_SHIFT)
#define  HIPWM6_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM6_HCR_DUALMARGIN_SHIFT))

#define  HIPWM6_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM6_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM6_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_FILTERPULSES_MASK) >> HIPWM6_HCR_FILTERPULSES_SHIFT)
#define  HIPWM6_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM6_HCR_FILTERPULSES_SHIFT))

#define  HIPWM6_HCR_CRCRST_MASK 0x1000
#define  HIPWM6_HCR_CRCRST_SHIFT 12
#define  HIPWM6_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CRCRST_MASK) >> HIPWM6_HCR_CRCRST_SHIFT)
#define  HIPWM6_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM6_HCR_CRCRST_SHIFT))

#define  HIPWM6_HCR_HIPSDIR_MASK 0x800
#define  HIPWM6_HCR_HIPSDIR_SHIFT 11
#define  HIPWM6_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_HIPSDIR_MASK) >> HIPWM6_HCR_HIPSDIR_SHIFT)
#define  HIPWM6_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM6_HCR_HIPSDIR_SHIFT))

#define  HIPWM6_HCR_PTWIDTH_MASK 0x400
#define  HIPWM6_HCR_PTWIDTH_SHIFT 10
#define  HIPWM6_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_PTWIDTH_MASK) >> HIPWM6_HCR_PTWIDTH_SHIFT)
#define  HIPWM6_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM6_HCR_PTWIDTH_SHIFT))

#define  HIPWM6_HCR_TESTMODE_MASK 0x200
#define  HIPWM6_HCR_TESTMODE_SHIFT 9
#define  HIPWM6_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_TESTMODE_MASK) >> HIPWM6_HCR_TESTMODE_SHIFT)
#define  HIPWM6_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM6_HCR_TESTMODE_SHIFT))

#define  HIPWM6_HCR_CHANZERO_MASK 0x100
#define  HIPWM6_HCR_CHANZERO_SHIFT 8
#define  HIPWM6_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CHANZERO_MASK) >> HIPWM6_HCR_CHANZERO_SHIFT)
#define  HIPWM6_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM6_HCR_CHANZERO_SHIFT))

#define  HIPWM6_HCR_INVPT_MASK 0x80
#define  HIPWM6_HCR_INVPT_SHIFT 7
#define  HIPWM6_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_INVPT_MASK) >> HIPWM6_HCR_INVPT_SHIFT)
#define  HIPWM6_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM6_HCR_INVPT_SHIFT))

#define  HIPWM6_HCR_CPUACCESS_MASK 0x40
#define  HIPWM6_HCR_CPUACCESS_SHIFT 6
#define  HIPWM6_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_CPUACCESS_MASK) >> HIPWM6_HCR_CPUACCESS_SHIFT)
#define  HIPWM6_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM6_HCR_CPUACCESS_SHIFT))

#define  HIPWM6_HCR_PECEN_MASK 0x20
#define  HIPWM6_HCR_PECEN_SHIFT 5
#define  HIPWM6_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_PECEN_MASK) >> HIPWM6_HCR_PECEN_SHIFT)
#define  HIPWM6_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_PECEN_SHIFT))

#define  HIPWM6_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM6_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM6_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_PIGTOPHSYNC_MASK) >> HIPWM6_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM6_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM6_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM6_HCR_PIGEN_MASK 0x8
#define  HIPWM6_HCR_PIGEN_SHIFT 3
#define  HIPWM6_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_PIGEN_MASK) >> HIPWM6_HCR_PIGEN_SHIFT)
#define  HIPWM6_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_PIGEN_SHIFT))

#define  HIPWM6_HCR_BENDEREN_MASK 0x4
#define  HIPWM6_HCR_BENDEREN_SHIFT 2
#define  HIPWM6_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_BENDEREN_MASK) >> HIPWM6_HCR_BENDEREN_SHIFT)
#define  HIPWM6_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM6_HCR_BENDEREN_SHIFT))

#define  HIPWM6_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM6_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM6_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_SYNTHHSYNCEN_MASK) >> HIPWM6_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM6_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM6_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM6_HCR_ENABLE_MASK 0x1
#define  HIPWM6_HCR_ENABLE_SHIFT 0
#define  HIPWM6_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM6_HCR_ENABLE_MASK) >> HIPWM6_HCR_ENABLE_SHIFT)
#define  HIPWM6_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM6_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM6_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM6_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM6_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM6_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM6_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM6_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM6_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM6_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM6_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM6_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM6_HSMR_SIDEMARGIN_MASK) >> HIPWM6_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM6_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM6_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM6_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM6_HTSR_RESERVED1_SHIFT 8
#define  HIPWM6_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HTSR_RESERVED1_MASK) >> HIPWM6_HTSR_RESERVED1_SHIFT)
#define  HIPWM6_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HTSR_RESERVED1_SHIFT))

#define  HIPWM6_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM6_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM6_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM6_HTSR_TOPSKEW_MASK) >> HIPWM6_HTSR_TOPSKEW_SHIFT)
#define  HIPWM6_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM6_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM6_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HSR_RESERVED1_SHIFT 12
#define  HIPWM6_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_RESERVED1_MASK) >> HIPWM6_HSR_RESERVED1_SHIFT)
#define  HIPWM6_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HSR_RESERVED1_SHIFT))

#define  HIPWM6_HSR_INDEX_MASK 0xf00
#define  HIPWM6_HSR_INDEX_SHIFT 8
#define  HIPWM6_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_INDEX_MASK) >> HIPWM6_HSR_INDEX_SHIFT)
#define  HIPWM6_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM6_HSR_INDEX_SHIFT))

#define  HIPWM6_HSR_DIRRTOL_MASK 0x80
#define  HIPWM6_HSR_DIRRTOL_SHIFT 7
#define  HIPWM6_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_DIRRTOL_MASK) >> HIPWM6_HSR_DIRRTOL_SHIFT)
#define  HIPWM6_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM6_HSR_DIRRTOL_SHIFT))

#define  HIPWM6_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM6_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM6_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_PAGE_STATE_MASK) >> HIPWM6_HSR_PAGE_STATE_SHIFT)
#define  HIPWM6_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM6_HSR_PAGE_STATE_SHIFT))

#define  HIPWM6_HSR_RESERVED2_MASK 0x8
#define  HIPWM6_HSR_RESERVED2_SHIFT 3
#define  HIPWM6_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_RESERVED2_MASK) >> HIPWM6_HSR_RESERVED2_SHIFT)
#define  HIPWM6_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM6_HSR_RESERVED2_SHIFT))

#define  HIPWM6_HSR_READY_IN_MASK 0x4
#define  HIPWM6_HSR_READY_IN_SHIFT 2
#define  HIPWM6_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_READY_IN_MASK) >> HIPWM6_HSR_READY_IN_SHIFT)
#define  HIPWM6_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM6_HSR_READY_IN_SHIFT))

#define  HIPWM6_HSR_VALID_IN_MASK 0x2
#define  HIPWM6_HSR_VALID_IN_SHIFT 1
#define  HIPWM6_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_VALID_IN_MASK) >> HIPWM6_HSR_VALID_IN_SHIFT)
#define  HIPWM6_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM6_HSR_VALID_IN_SHIFT))

#define  HIPWM6_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM6_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM6_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM6_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM6_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM6_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM6_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM6_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM6_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HSPWR_RESERVED1_MASK) >> HIPWM6_HSPWR_RESERVED1_SHIFT)
#define  HIPWM6_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HSPWR_RESERVED1_SHIFT))

#define  HIPWM6_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM6_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM6_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM6_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM6_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM6_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM6_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM6_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM6_HSQR_RESERVED1_SHIFT 24
#define  HIPWM6_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HSQR_RESERVED1_MASK) >> HIPWM6_HSQR_RESERVED1_SHIFT)
#define  HIPWM6_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HSQR_RESERVED1_SHIFT))

#define  HIPWM6_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM6_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM6_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM6_HSQR_QUIWIDTH_MASK) >> HIPWM6_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM6_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM6_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM6_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM6_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM6_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM6_PRRA_PEC_VALUE_MASK) >> HIPWM6_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM6_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM6_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM6_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM6_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPVR_RESERVED1_MASK) >> HIPWM6_HPPVR_RESERVED1_SHIFT)
#define  HIPWM6_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPPVR_RESERVED1_SHIFT))

#define  HIPWM6_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM6_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM6_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPVR_PIGPTVAL_MASK) >> HIPWM6_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM6_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM6_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM6_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPSR_RESERVED1_SHIFT 16
#define  HIPWM6_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPSR_RESERVED1_MASK) >> HIPWM6_HPSR_RESERVED1_SHIFT)
#define  HIPWM6_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPSR_RESERVED1_SHIFT))

#define  HIPWM6_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM6_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM6_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM6_HPSR_PIGPIXSZ_MASK) >> HIPWM6_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM6_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM6_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM6_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPCR_RESERVED1_SHIFT 16
#define  HIPWM6_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPCR_RESERVED1_MASK) >> HIPWM6_HPCR_RESERVED1_SHIFT)
#define  HIPWM6_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPCR_RESERVED1_SHIFT))

#define  HIPWM6_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM6_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM6_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM6_HPCR_PIGPIXCNT_MASK) >> HIPWM6_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM6_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM6_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM6_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM6_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPSR_RESERVED1_MASK) >> HIPWM6_HPPSR_RESERVED1_SHIFT)
#define  HIPWM6_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPPSR_RESERVED1_SHIFT))

#define  HIPWM6_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM6_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM6_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPSR_PIGPIXSPACE_MASK) >> HIPWM6_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM6_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM6_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM6_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM6_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPLSR_RESERVED1_MASK) >> HIPWM6_HPLSR_RESERVED1_SHIFT)
#define  HIPWM6_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPLSR_RESERVED1_SHIFT))

#define  HIPWM6_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM6_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM6_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM6_HPLSR_PIGLINESPACE_MASK) >> HIPWM6_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM6_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM6_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM6_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM6_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPOER_RESERVED1_MASK) >> HIPWM6_HPPOER_RESERVED1_SHIFT)
#define  HIPWM6_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPPOER_RESERVED1_SHIFT))

#define  HIPWM6_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM6_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM6_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM6_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM6_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM6_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM6_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM6_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPOOR_RESERVED1_MASK) >> HIPWM6_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM6_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM6_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM6_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM6_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM6_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM6_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM6_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM6_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM6_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPLOR_RESERVED1_MASK) >> HIPWM6_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM6_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM6_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM6_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM6_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM6_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM6_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM6_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM6_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM6_HCRC_CRC_MASK 0xffffffff
#define  HIPWM6_HCRC_CRC_SHIFT 0
#define  HIPWM6_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM6_HCRC_CRC_MASK) >> HIPWM6_HCRC_CRC_SHIFT)
#define  HIPWM6_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM6_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM6_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HBCR_RESERVED1_SHIFT 12
#define  HIPWM6_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBCR_RESERVED1_MASK) >> HIPWM6_HBCR_RESERVED1_SHIFT)
#define  HIPWM6_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBCR_RESERVED1_SHIFT))

#define  HIPWM6_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM6_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM6_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM6_HBCR_SAMPLESPERSEG_MASK) >> HIPWM6_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM6_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM6_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM6_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM6_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM6_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HLBDR_RESERVED1_MASK) >> HIPWM6_HLBDR_RESERVED1_SHIFT)
#define  HIPWM6_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HLBDR_RESERVED1_SHIFT))

#define  HIPWM6_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM6_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM6_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM6_HLBDR_LBDRINT_MASK) >> HIPWM6_HLBDR_LBDRINT_SHIFT)
#define  HIPWM6_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM6_HLBDR_LBDRINT_SHIFT))

#define  HIPWM6_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM6_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM6_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HLBDR_LBDRFRAC_MASK) >> HIPWM6_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM6_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM6_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM6_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM6_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM6_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HRBDR_RESERVED1_MASK) >> HIPWM6_HRBDR_RESERVED1_SHIFT)
#define  HIPWM6_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HRBDR_RESERVED1_SHIFT))

#define  HIPWM6_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM6_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM6_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM6_HRBDR_RBDRINT_MASK) >> HIPWM6_HRBDR_RBDRINT_SHIFT)
#define  HIPWM6_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM6_HRBDR_RBDRINT_SHIFT))

#define  HIPWM6_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM6_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM6_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HRBDR_RBDRFRAC_MASK) >> HIPWM6_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM6_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM6_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM6_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM6_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM6_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCR_RESERVED1_MASK) >> HIPWM6_HBNCR_RESERVED1_SHIFT)
#define  HIPWM6_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBNCR_RESERVED1_SHIFT))

#define  HIPWM6_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM6_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM6_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCR_LFSRINITCNTL_MASK) >> HIPWM6_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM6_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM6_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM6_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM6_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM6_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCR_BENDERLFSREN_MASK) >> HIPWM6_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM6_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM6_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM6_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM6_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM6_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM6_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM6_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM6_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM6_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM6_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNINIT_RESERVED1_MASK) >> HIPWM6_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM6_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM6_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM6_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM6_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM6_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM6_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM6_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM6_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM6_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM6_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCV_RESERVED1_MASK) >> HIPWM6_HBNCV_RESERVED1_SHIFT)
#define  HIPWM6_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBNCV_RESERVED1_SHIFT))

#define  HIPWM6_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM6_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM6_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM6_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM6_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM6_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM6_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM6_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT0_RESERVED1_MASK) >> HIPWM6_HBAT0_RESERVED1_SHIFT)
#define  HIPWM6_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT0_RESERVED1_SHIFT))

#define  HIPWM6_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT0_BATLAST_SHIFT 19
#define  HIPWM6_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT0_BATLAST_MASK) >> HIPWM6_HBAT0_BATLAST_SHIFT)
#define  HIPWM6_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT0_BATLAST_SHIFT))

#define  HIPWM6_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT0_BATSIGN_MASK) >> HIPWM6_HBAT0_BATSIGN_SHIFT)
#define  HIPWM6_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT0_BATSIGN_SHIFT))

#define  HIPWM6_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT0_BATSHIFT_MASK) >> HIPWM6_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT0_BATFRAC_MASK) >> HIPWM6_HBAT0_BATFRAC_SHIFT)
#define  HIPWM6_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM6_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT1_RESERVED1_MASK) >> HIPWM6_HBAT1_RESERVED1_SHIFT)
#define  HIPWM6_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT1_RESERVED1_SHIFT))

#define  HIPWM6_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT1_BATLAST_SHIFT 19
#define  HIPWM6_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT1_BATLAST_MASK) >> HIPWM6_HBAT1_BATLAST_SHIFT)
#define  HIPWM6_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT1_BATLAST_SHIFT))

#define  HIPWM6_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT1_BATSIGN_MASK) >> HIPWM6_HBAT1_BATSIGN_SHIFT)
#define  HIPWM6_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT1_BATSIGN_SHIFT))

#define  HIPWM6_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT1_BATSHIFT_MASK) >> HIPWM6_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT1_BATFRAC_MASK) >> HIPWM6_HBAT1_BATFRAC_SHIFT)
#define  HIPWM6_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM6_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT2_RESERVED1_MASK) >> HIPWM6_HBAT2_RESERVED1_SHIFT)
#define  HIPWM6_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT2_RESERVED1_SHIFT))

#define  HIPWM6_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT2_BATLAST_SHIFT 19
#define  HIPWM6_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT2_BATLAST_MASK) >> HIPWM6_HBAT2_BATLAST_SHIFT)
#define  HIPWM6_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT2_BATLAST_SHIFT))

#define  HIPWM6_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT2_BATSIGN_MASK) >> HIPWM6_HBAT2_BATSIGN_SHIFT)
#define  HIPWM6_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT2_BATSIGN_SHIFT))

#define  HIPWM6_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT2_BATSHIFT_MASK) >> HIPWM6_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT2_BATFRAC_MASK) >> HIPWM6_HBAT2_BATFRAC_SHIFT)
#define  HIPWM6_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM6_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT3_RESERVED1_MASK) >> HIPWM6_HBAT3_RESERVED1_SHIFT)
#define  HIPWM6_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT3_RESERVED1_SHIFT))

#define  HIPWM6_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT3_BATLAST_SHIFT 19
#define  HIPWM6_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT3_BATLAST_MASK) >> HIPWM6_HBAT3_BATLAST_SHIFT)
#define  HIPWM6_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT3_BATLAST_SHIFT))

#define  HIPWM6_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT3_BATSIGN_MASK) >> HIPWM6_HBAT3_BATSIGN_SHIFT)
#define  HIPWM6_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT3_BATSIGN_SHIFT))

#define  HIPWM6_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT3_BATSHIFT_MASK) >> HIPWM6_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT3_BATFRAC_MASK) >> HIPWM6_HBAT3_BATFRAC_SHIFT)
#define  HIPWM6_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM6_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT4_RESERVED1_MASK) >> HIPWM6_HBAT4_RESERVED1_SHIFT)
#define  HIPWM6_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT4_RESERVED1_SHIFT))

#define  HIPWM6_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT4_BATLAST_SHIFT 19
#define  HIPWM6_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT4_BATLAST_MASK) >> HIPWM6_HBAT4_BATLAST_SHIFT)
#define  HIPWM6_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT4_BATLAST_SHIFT))

#define  HIPWM6_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT4_BATSIGN_MASK) >> HIPWM6_HBAT4_BATSIGN_SHIFT)
#define  HIPWM6_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT4_BATSIGN_SHIFT))

#define  HIPWM6_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT4_BATSHIFT_MASK) >> HIPWM6_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT4_BATFRAC_MASK) >> HIPWM6_HBAT4_BATFRAC_SHIFT)
#define  HIPWM6_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM6_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT5_RESERVED1_MASK) >> HIPWM6_HBAT5_RESERVED1_SHIFT)
#define  HIPWM6_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT5_RESERVED1_SHIFT))

#define  HIPWM6_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT5_BATLAST_SHIFT 19
#define  HIPWM6_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT5_BATLAST_MASK) >> HIPWM6_HBAT5_BATLAST_SHIFT)
#define  HIPWM6_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT5_BATLAST_SHIFT))

#define  HIPWM6_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT5_BATSIGN_MASK) >> HIPWM6_HBAT5_BATSIGN_SHIFT)
#define  HIPWM6_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT5_BATSIGN_SHIFT))

#define  HIPWM6_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT5_BATSHIFT_MASK) >> HIPWM6_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT5_BATFRAC_MASK) >> HIPWM6_HBAT5_BATFRAC_SHIFT)
#define  HIPWM6_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM6_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT6_RESERVED1_MASK) >> HIPWM6_HBAT6_RESERVED1_SHIFT)
#define  HIPWM6_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT6_RESERVED1_SHIFT))

#define  HIPWM6_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT6_BATLAST_SHIFT 19
#define  HIPWM6_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT6_BATLAST_MASK) >> HIPWM6_HBAT6_BATLAST_SHIFT)
#define  HIPWM6_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT6_BATLAST_SHIFT))

#define  HIPWM6_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT6_BATSIGN_MASK) >> HIPWM6_HBAT6_BATSIGN_SHIFT)
#define  HIPWM6_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT6_BATSIGN_SHIFT))

#define  HIPWM6_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT6_BATSHIFT_MASK) >> HIPWM6_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT6_BATFRAC_MASK) >> HIPWM6_HBAT6_BATFRAC_SHIFT)
#define  HIPWM6_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM6_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT7_RESERVED1_MASK) >> HIPWM6_HBAT7_RESERVED1_SHIFT)
#define  HIPWM6_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT7_RESERVED1_SHIFT))

#define  HIPWM6_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT7_BATLAST_SHIFT 19
#define  HIPWM6_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT7_BATLAST_MASK) >> HIPWM6_HBAT7_BATLAST_SHIFT)
#define  HIPWM6_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT7_BATLAST_SHIFT))

#define  HIPWM6_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT7_BATSIGN_MASK) >> HIPWM6_HBAT7_BATSIGN_SHIFT)
#define  HIPWM6_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT7_BATSIGN_SHIFT))

#define  HIPWM6_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT7_BATSHIFT_MASK) >> HIPWM6_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT7_BATFRAC_MASK) >> HIPWM6_HBAT7_BATFRAC_SHIFT)
#define  HIPWM6_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM6_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT8_RESERVED1_MASK) >> HIPWM6_HBAT8_RESERVED1_SHIFT)
#define  HIPWM6_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT8_RESERVED1_SHIFT))

#define  HIPWM6_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT8_BATLAST_SHIFT 19
#define  HIPWM6_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT8_BATLAST_MASK) >> HIPWM6_HBAT8_BATLAST_SHIFT)
#define  HIPWM6_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT8_BATLAST_SHIFT))

#define  HIPWM6_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT8_BATSIGN_MASK) >> HIPWM6_HBAT8_BATSIGN_SHIFT)
#define  HIPWM6_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT8_BATSIGN_SHIFT))

#define  HIPWM6_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT8_BATSHIFT_MASK) >> HIPWM6_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT8_BATFRAC_MASK) >> HIPWM6_HBAT8_BATFRAC_SHIFT)
#define  HIPWM6_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM6_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT9_RESERVED1_MASK) >> HIPWM6_HBAT9_RESERVED1_SHIFT)
#define  HIPWM6_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT9_RESERVED1_SHIFT))

#define  HIPWM6_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT9_BATLAST_SHIFT 19
#define  HIPWM6_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT9_BATLAST_MASK) >> HIPWM6_HBAT9_BATLAST_SHIFT)
#define  HIPWM6_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT9_BATLAST_SHIFT))

#define  HIPWM6_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT9_BATSIGN_MASK) >> HIPWM6_HBAT9_BATSIGN_SHIFT)
#define  HIPWM6_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT9_BATSIGN_SHIFT))

#define  HIPWM6_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT9_BATSHIFT_MASK) >> HIPWM6_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT9_BATFRAC_MASK) >> HIPWM6_HBAT9_BATFRAC_SHIFT)
#define  HIPWM6_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM6_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT10_RESERVED1_MASK) >> HIPWM6_HBAT10_RESERVED1_SHIFT)
#define  HIPWM6_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT10_RESERVED1_SHIFT))

#define  HIPWM6_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT10_BATLAST_SHIFT 19
#define  HIPWM6_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT10_BATLAST_MASK) >> HIPWM6_HBAT10_BATLAST_SHIFT)
#define  HIPWM6_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT10_BATLAST_SHIFT))

#define  HIPWM6_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT10_BATSIGN_MASK) >> HIPWM6_HBAT10_BATSIGN_SHIFT)
#define  HIPWM6_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT10_BATSIGN_SHIFT))

#define  HIPWM6_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT10_BATSHIFT_MASK) >> HIPWM6_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT10_BATFRAC_MASK) >> HIPWM6_HBAT10_BATFRAC_SHIFT)
#define  HIPWM6_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM6_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT11_RESERVED1_MASK) >> HIPWM6_HBAT11_RESERVED1_SHIFT)
#define  HIPWM6_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT11_RESERVED1_SHIFT))

#define  HIPWM6_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT11_BATLAST_SHIFT 19
#define  HIPWM6_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT11_BATLAST_MASK) >> HIPWM6_HBAT11_BATLAST_SHIFT)
#define  HIPWM6_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT11_BATLAST_SHIFT))

#define  HIPWM6_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT11_BATSIGN_MASK) >> HIPWM6_HBAT11_BATSIGN_SHIFT)
#define  HIPWM6_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT11_BATSIGN_SHIFT))

#define  HIPWM6_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT11_BATSHIFT_MASK) >> HIPWM6_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT11_BATFRAC_MASK) >> HIPWM6_HBAT11_BATFRAC_SHIFT)
#define  HIPWM6_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM6_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT12_RESERVED1_MASK) >> HIPWM6_HBAT12_RESERVED1_SHIFT)
#define  HIPWM6_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT12_RESERVED1_SHIFT))

#define  HIPWM6_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT12_BATLAST_SHIFT 19
#define  HIPWM6_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT12_BATLAST_MASK) >> HIPWM6_HBAT12_BATLAST_SHIFT)
#define  HIPWM6_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT12_BATLAST_SHIFT))

#define  HIPWM6_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT12_BATSIGN_MASK) >> HIPWM6_HBAT12_BATSIGN_SHIFT)
#define  HIPWM6_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT12_BATSIGN_SHIFT))

#define  HIPWM6_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT12_BATSHIFT_MASK) >> HIPWM6_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT12_BATFRAC_MASK) >> HIPWM6_HBAT12_BATFRAC_SHIFT)
#define  HIPWM6_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM6_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT13_RESERVED1_MASK) >> HIPWM6_HBAT13_RESERVED1_SHIFT)
#define  HIPWM6_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT13_RESERVED1_SHIFT))

#define  HIPWM6_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT13_BATLAST_SHIFT 19
#define  HIPWM6_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT13_BATLAST_MASK) >> HIPWM6_HBAT13_BATLAST_SHIFT)
#define  HIPWM6_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT13_BATLAST_SHIFT))

#define  HIPWM6_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT13_BATSIGN_MASK) >> HIPWM6_HBAT13_BATSIGN_SHIFT)
#define  HIPWM6_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT13_BATSIGN_SHIFT))

#define  HIPWM6_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT13_BATSHIFT_MASK) >> HIPWM6_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT13_BATFRAC_MASK) >> HIPWM6_HBAT13_BATFRAC_SHIFT)
#define  HIPWM6_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM6_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT14_RESERVED1_MASK) >> HIPWM6_HBAT14_RESERVED1_SHIFT)
#define  HIPWM6_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT14_RESERVED1_SHIFT))

#define  HIPWM6_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT14_BATLAST_SHIFT 19
#define  HIPWM6_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT14_BATLAST_MASK) >> HIPWM6_HBAT14_BATLAST_SHIFT)
#define  HIPWM6_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT14_BATLAST_SHIFT))

#define  HIPWM6_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT14_BATSIGN_MASK) >> HIPWM6_HBAT14_BATSIGN_SHIFT)
#define  HIPWM6_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT14_BATSIGN_SHIFT))

#define  HIPWM6_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT14_BATSHIFT_MASK) >> HIPWM6_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT14_BATFRAC_MASK) >> HIPWM6_HBAT14_BATFRAC_SHIFT)
#define  HIPWM6_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM6_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT15_RESERVED1_MASK) >> HIPWM6_HBAT15_RESERVED1_SHIFT)
#define  HIPWM6_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT15_RESERVED1_SHIFT))

#define  HIPWM6_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT15_BATLAST_SHIFT 19
#define  HIPWM6_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT15_BATLAST_MASK) >> HIPWM6_HBAT15_BATLAST_SHIFT)
#define  HIPWM6_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT15_BATLAST_SHIFT))

#define  HIPWM6_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT15_BATSIGN_MASK) >> HIPWM6_HBAT15_BATSIGN_SHIFT)
#define  HIPWM6_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT15_BATSIGN_SHIFT))

#define  HIPWM6_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT15_BATSHIFT_MASK) >> HIPWM6_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT15_BATFRAC_MASK) >> HIPWM6_HBAT15_BATFRAC_SHIFT)
#define  HIPWM6_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM6_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT16_RESERVED1_MASK) >> HIPWM6_HBAT16_RESERVED1_SHIFT)
#define  HIPWM6_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT16_RESERVED1_SHIFT))

#define  HIPWM6_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT16_BATLAST_SHIFT 19
#define  HIPWM6_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT16_BATLAST_MASK) >> HIPWM6_HBAT16_BATLAST_SHIFT)
#define  HIPWM6_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT16_BATLAST_SHIFT))

#define  HIPWM6_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT16_BATSIGN_MASK) >> HIPWM6_HBAT16_BATSIGN_SHIFT)
#define  HIPWM6_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT16_BATSIGN_SHIFT))

#define  HIPWM6_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT16_BATSHIFT_MASK) >> HIPWM6_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT16_BATFRAC_MASK) >> HIPWM6_HBAT16_BATFRAC_SHIFT)
#define  HIPWM6_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM6_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT17_RESERVED1_MASK) >> HIPWM6_HBAT17_RESERVED1_SHIFT)
#define  HIPWM6_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT17_RESERVED1_SHIFT))

#define  HIPWM6_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT17_BATLAST_SHIFT 19
#define  HIPWM6_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT17_BATLAST_MASK) >> HIPWM6_HBAT17_BATLAST_SHIFT)
#define  HIPWM6_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT17_BATLAST_SHIFT))

#define  HIPWM6_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT17_BATSIGN_MASK) >> HIPWM6_HBAT17_BATSIGN_SHIFT)
#define  HIPWM6_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT17_BATSIGN_SHIFT))

#define  HIPWM6_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT17_BATSHIFT_MASK) >> HIPWM6_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT17_BATFRAC_MASK) >> HIPWM6_HBAT17_BATFRAC_SHIFT)
#define  HIPWM6_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM6_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT18_RESERVED1_MASK) >> HIPWM6_HBAT18_RESERVED1_SHIFT)
#define  HIPWM6_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT18_RESERVED1_SHIFT))

#define  HIPWM6_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT18_BATLAST_SHIFT 19
#define  HIPWM6_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT18_BATLAST_MASK) >> HIPWM6_HBAT18_BATLAST_SHIFT)
#define  HIPWM6_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT18_BATLAST_SHIFT))

#define  HIPWM6_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT18_BATSIGN_MASK) >> HIPWM6_HBAT18_BATSIGN_SHIFT)
#define  HIPWM6_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT18_BATSIGN_SHIFT))

#define  HIPWM6_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT18_BATSHIFT_MASK) >> HIPWM6_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT18_BATFRAC_MASK) >> HIPWM6_HBAT18_BATFRAC_SHIFT)
#define  HIPWM6_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM6_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT19_RESERVED1_MASK) >> HIPWM6_HBAT19_RESERVED1_SHIFT)
#define  HIPWM6_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT19_RESERVED1_SHIFT))

#define  HIPWM6_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT19_BATLAST_SHIFT 19
#define  HIPWM6_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT19_BATLAST_MASK) >> HIPWM6_HBAT19_BATLAST_SHIFT)
#define  HIPWM6_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT19_BATLAST_SHIFT))

#define  HIPWM6_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT19_BATSIGN_MASK) >> HIPWM6_HBAT19_BATSIGN_SHIFT)
#define  HIPWM6_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT19_BATSIGN_SHIFT))

#define  HIPWM6_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT19_BATSHIFT_MASK) >> HIPWM6_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT19_BATFRAC_MASK) >> HIPWM6_HBAT19_BATFRAC_SHIFT)
#define  HIPWM6_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM6_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT20_RESERVED1_MASK) >> HIPWM6_HBAT20_RESERVED1_SHIFT)
#define  HIPWM6_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT20_RESERVED1_SHIFT))

#define  HIPWM6_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT20_BATLAST_SHIFT 19
#define  HIPWM6_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT20_BATLAST_MASK) >> HIPWM6_HBAT20_BATLAST_SHIFT)
#define  HIPWM6_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT20_BATLAST_SHIFT))

#define  HIPWM6_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT20_BATSIGN_MASK) >> HIPWM6_HBAT20_BATSIGN_SHIFT)
#define  HIPWM6_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT20_BATSIGN_SHIFT))

#define  HIPWM6_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT20_BATSHIFT_MASK) >> HIPWM6_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT20_BATFRAC_MASK) >> HIPWM6_HBAT20_BATFRAC_SHIFT)
#define  HIPWM6_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM6_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT21_RESERVED1_MASK) >> HIPWM6_HBAT21_RESERVED1_SHIFT)
#define  HIPWM6_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT21_RESERVED1_SHIFT))

#define  HIPWM6_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT21_BATLAST_SHIFT 19
#define  HIPWM6_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT21_BATLAST_MASK) >> HIPWM6_HBAT21_BATLAST_SHIFT)
#define  HIPWM6_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT21_BATLAST_SHIFT))

#define  HIPWM6_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT21_BATSIGN_MASK) >> HIPWM6_HBAT21_BATSIGN_SHIFT)
#define  HIPWM6_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT21_BATSIGN_SHIFT))

#define  HIPWM6_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT21_BATSHIFT_MASK) >> HIPWM6_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT21_BATFRAC_MASK) >> HIPWM6_HBAT21_BATFRAC_SHIFT)
#define  HIPWM6_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM6_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT22_RESERVED1_MASK) >> HIPWM6_HBAT22_RESERVED1_SHIFT)
#define  HIPWM6_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT22_RESERVED1_SHIFT))

#define  HIPWM6_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT22_BATLAST_SHIFT 19
#define  HIPWM6_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT22_BATLAST_MASK) >> HIPWM6_HBAT22_BATLAST_SHIFT)
#define  HIPWM6_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT22_BATLAST_SHIFT))

#define  HIPWM6_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT22_BATSIGN_MASK) >> HIPWM6_HBAT22_BATSIGN_SHIFT)
#define  HIPWM6_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT22_BATSIGN_SHIFT))

#define  HIPWM6_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT22_BATSHIFT_MASK) >> HIPWM6_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT22_BATFRAC_MASK) >> HIPWM6_HBAT22_BATFRAC_SHIFT)
#define  HIPWM6_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM6_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT23_RESERVED1_MASK) >> HIPWM6_HBAT23_RESERVED1_SHIFT)
#define  HIPWM6_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT23_RESERVED1_SHIFT))

#define  HIPWM6_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT23_BATLAST_SHIFT 19
#define  HIPWM6_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT23_BATLAST_MASK) >> HIPWM6_HBAT23_BATLAST_SHIFT)
#define  HIPWM6_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT23_BATLAST_SHIFT))

#define  HIPWM6_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT23_BATSIGN_MASK) >> HIPWM6_HBAT23_BATSIGN_SHIFT)
#define  HIPWM6_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT23_BATSIGN_SHIFT))

#define  HIPWM6_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT23_BATSHIFT_MASK) >> HIPWM6_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT23_BATFRAC_MASK) >> HIPWM6_HBAT23_BATFRAC_SHIFT)
#define  HIPWM6_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM6_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT24_RESERVED1_MASK) >> HIPWM6_HBAT24_RESERVED1_SHIFT)
#define  HIPWM6_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT24_RESERVED1_SHIFT))

#define  HIPWM6_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT24_BATLAST_SHIFT 19
#define  HIPWM6_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT24_BATLAST_MASK) >> HIPWM6_HBAT24_BATLAST_SHIFT)
#define  HIPWM6_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT24_BATLAST_SHIFT))

#define  HIPWM6_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT24_BATSIGN_MASK) >> HIPWM6_HBAT24_BATSIGN_SHIFT)
#define  HIPWM6_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT24_BATSIGN_SHIFT))

#define  HIPWM6_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT24_BATSHIFT_MASK) >> HIPWM6_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT24_BATFRAC_MASK) >> HIPWM6_HBAT24_BATFRAC_SHIFT)
#define  HIPWM6_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM6_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT25_RESERVED1_MASK) >> HIPWM6_HBAT25_RESERVED1_SHIFT)
#define  HIPWM6_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT25_RESERVED1_SHIFT))

#define  HIPWM6_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT25_BATLAST_SHIFT 19
#define  HIPWM6_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT25_BATLAST_MASK) >> HIPWM6_HBAT25_BATLAST_SHIFT)
#define  HIPWM6_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT25_BATLAST_SHIFT))

#define  HIPWM6_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT25_BATSIGN_MASK) >> HIPWM6_HBAT25_BATSIGN_SHIFT)
#define  HIPWM6_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT25_BATSIGN_SHIFT))

#define  HIPWM6_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT25_BATSHIFT_MASK) >> HIPWM6_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT25_BATFRAC_MASK) >> HIPWM6_HBAT25_BATFRAC_SHIFT)
#define  HIPWM6_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM6_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT26_RESERVED1_MASK) >> HIPWM6_HBAT26_RESERVED1_SHIFT)
#define  HIPWM6_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT26_RESERVED1_SHIFT))

#define  HIPWM6_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT26_BATLAST_SHIFT 19
#define  HIPWM6_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT26_BATLAST_MASK) >> HIPWM6_HBAT26_BATLAST_SHIFT)
#define  HIPWM6_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT26_BATLAST_SHIFT))

#define  HIPWM6_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT26_BATSIGN_MASK) >> HIPWM6_HBAT26_BATSIGN_SHIFT)
#define  HIPWM6_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT26_BATSIGN_SHIFT))

#define  HIPWM6_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT26_BATSHIFT_MASK) >> HIPWM6_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT26_BATFRAC_MASK) >> HIPWM6_HBAT26_BATFRAC_SHIFT)
#define  HIPWM6_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM6_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT27_RESERVED1_MASK) >> HIPWM6_HBAT27_RESERVED1_SHIFT)
#define  HIPWM6_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT27_RESERVED1_SHIFT))

#define  HIPWM6_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT27_BATLAST_SHIFT 19
#define  HIPWM6_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT27_BATLAST_MASK) >> HIPWM6_HBAT27_BATLAST_SHIFT)
#define  HIPWM6_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT27_BATLAST_SHIFT))

#define  HIPWM6_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT27_BATSIGN_MASK) >> HIPWM6_HBAT27_BATSIGN_SHIFT)
#define  HIPWM6_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT27_BATSIGN_SHIFT))

#define  HIPWM6_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT27_BATSHIFT_MASK) >> HIPWM6_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT27_BATFRAC_MASK) >> HIPWM6_HBAT27_BATFRAC_SHIFT)
#define  HIPWM6_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM6_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT28_RESERVED1_MASK) >> HIPWM6_HBAT28_RESERVED1_SHIFT)
#define  HIPWM6_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT28_RESERVED1_SHIFT))

#define  HIPWM6_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT28_BATLAST_SHIFT 19
#define  HIPWM6_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT28_BATLAST_MASK) >> HIPWM6_HBAT28_BATLAST_SHIFT)
#define  HIPWM6_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT28_BATLAST_SHIFT))

#define  HIPWM6_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT28_BATSIGN_MASK) >> HIPWM6_HBAT28_BATSIGN_SHIFT)
#define  HIPWM6_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT28_BATSIGN_SHIFT))

#define  HIPWM6_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT28_BATSHIFT_MASK) >> HIPWM6_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT28_BATFRAC_MASK) >> HIPWM6_HBAT28_BATFRAC_SHIFT)
#define  HIPWM6_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM6_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT29_RESERVED1_MASK) >> HIPWM6_HBAT29_RESERVED1_SHIFT)
#define  HIPWM6_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT29_RESERVED1_SHIFT))

#define  HIPWM6_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT29_BATLAST_SHIFT 19
#define  HIPWM6_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT29_BATLAST_MASK) >> HIPWM6_HBAT29_BATLAST_SHIFT)
#define  HIPWM6_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT29_BATLAST_SHIFT))

#define  HIPWM6_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT29_BATSIGN_MASK) >> HIPWM6_HBAT29_BATSIGN_SHIFT)
#define  HIPWM6_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT29_BATSIGN_SHIFT))

#define  HIPWM6_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT29_BATSHIFT_MASK) >> HIPWM6_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT29_BATFRAC_MASK) >> HIPWM6_HBAT29_BATFRAC_SHIFT)
#define  HIPWM6_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM6_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT30_RESERVED1_MASK) >> HIPWM6_HBAT30_RESERVED1_SHIFT)
#define  HIPWM6_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT30_RESERVED1_SHIFT))

#define  HIPWM6_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT30_BATLAST_SHIFT 19
#define  HIPWM6_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT30_BATLAST_MASK) >> HIPWM6_HBAT30_BATLAST_SHIFT)
#define  HIPWM6_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT30_BATLAST_SHIFT))

#define  HIPWM6_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT30_BATSIGN_MASK) >> HIPWM6_HBAT30_BATSIGN_SHIFT)
#define  HIPWM6_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT30_BATSIGN_SHIFT))

#define  HIPWM6_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT30_BATSHIFT_MASK) >> HIPWM6_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT30_BATFRAC_MASK) >> HIPWM6_HBAT30_BATFRAC_SHIFT)
#define  HIPWM6_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM6_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT31_RESERVED1_MASK) >> HIPWM6_HBAT31_RESERVED1_SHIFT)
#define  HIPWM6_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT31_RESERVED1_SHIFT))

#define  HIPWM6_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT31_BATLAST_SHIFT 19
#define  HIPWM6_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT31_BATLAST_MASK) >> HIPWM6_HBAT31_BATLAST_SHIFT)
#define  HIPWM6_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT31_BATLAST_SHIFT))

#define  HIPWM6_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT31_BATSIGN_MASK) >> HIPWM6_HBAT31_BATSIGN_SHIFT)
#define  HIPWM6_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT31_BATSIGN_SHIFT))

#define  HIPWM6_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT31_BATSHIFT_MASK) >> HIPWM6_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT31_BATFRAC_MASK) >> HIPWM6_HBAT31_BATFRAC_SHIFT)
#define  HIPWM6_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM6_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT32_RESERVED1_MASK) >> HIPWM6_HBAT32_RESERVED1_SHIFT)
#define  HIPWM6_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT32_RESERVED1_SHIFT))

#define  HIPWM6_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT32_BATLAST_SHIFT 19
#define  HIPWM6_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT32_BATLAST_MASK) >> HIPWM6_HBAT32_BATLAST_SHIFT)
#define  HIPWM6_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT32_BATLAST_SHIFT))

#define  HIPWM6_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT32_BATSIGN_MASK) >> HIPWM6_HBAT32_BATSIGN_SHIFT)
#define  HIPWM6_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT32_BATSIGN_SHIFT))

#define  HIPWM6_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT32_BATSHIFT_MASK) >> HIPWM6_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT32_BATFRAC_MASK) >> HIPWM6_HBAT32_BATFRAC_SHIFT)
#define  HIPWM6_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM6_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT33_RESERVED1_MASK) >> HIPWM6_HBAT33_RESERVED1_SHIFT)
#define  HIPWM6_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT33_RESERVED1_SHIFT))

#define  HIPWM6_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT33_BATLAST_SHIFT 19
#define  HIPWM6_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT33_BATLAST_MASK) >> HIPWM6_HBAT33_BATLAST_SHIFT)
#define  HIPWM6_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT33_BATLAST_SHIFT))

#define  HIPWM6_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT33_BATSIGN_MASK) >> HIPWM6_HBAT33_BATSIGN_SHIFT)
#define  HIPWM6_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT33_BATSIGN_SHIFT))

#define  HIPWM6_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT33_BATSHIFT_MASK) >> HIPWM6_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT33_BATFRAC_MASK) >> HIPWM6_HBAT33_BATFRAC_SHIFT)
#define  HIPWM6_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM6_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT34_RESERVED1_MASK) >> HIPWM6_HBAT34_RESERVED1_SHIFT)
#define  HIPWM6_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT34_RESERVED1_SHIFT))

#define  HIPWM6_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT34_BATLAST_SHIFT 19
#define  HIPWM6_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT34_BATLAST_MASK) >> HIPWM6_HBAT34_BATLAST_SHIFT)
#define  HIPWM6_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT34_BATLAST_SHIFT))

#define  HIPWM6_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT34_BATSIGN_MASK) >> HIPWM6_HBAT34_BATSIGN_SHIFT)
#define  HIPWM6_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT34_BATSIGN_SHIFT))

#define  HIPWM6_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT34_BATSHIFT_MASK) >> HIPWM6_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT34_BATFRAC_MASK) >> HIPWM6_HBAT34_BATFRAC_SHIFT)
#define  HIPWM6_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM6_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT35_RESERVED1_MASK) >> HIPWM6_HBAT35_RESERVED1_SHIFT)
#define  HIPWM6_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT35_RESERVED1_SHIFT))

#define  HIPWM6_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT35_BATLAST_SHIFT 19
#define  HIPWM6_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT35_BATLAST_MASK) >> HIPWM6_HBAT35_BATLAST_SHIFT)
#define  HIPWM6_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT35_BATLAST_SHIFT))

#define  HIPWM6_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT35_BATSIGN_MASK) >> HIPWM6_HBAT35_BATSIGN_SHIFT)
#define  HIPWM6_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT35_BATSIGN_SHIFT))

#define  HIPWM6_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT35_BATSHIFT_MASK) >> HIPWM6_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT35_BATFRAC_MASK) >> HIPWM6_HBAT35_BATFRAC_SHIFT)
#define  HIPWM6_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM6_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT36_RESERVED1_MASK) >> HIPWM6_HBAT36_RESERVED1_SHIFT)
#define  HIPWM6_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT36_RESERVED1_SHIFT))

#define  HIPWM6_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT36_BATLAST_SHIFT 19
#define  HIPWM6_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT36_BATLAST_MASK) >> HIPWM6_HBAT36_BATLAST_SHIFT)
#define  HIPWM6_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT36_BATLAST_SHIFT))

#define  HIPWM6_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT36_BATSIGN_MASK) >> HIPWM6_HBAT36_BATSIGN_SHIFT)
#define  HIPWM6_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT36_BATSIGN_SHIFT))

#define  HIPWM6_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT36_BATSHIFT_MASK) >> HIPWM6_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT36_BATFRAC_MASK) >> HIPWM6_HBAT36_BATFRAC_SHIFT)
#define  HIPWM6_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM6_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT37_RESERVED1_MASK) >> HIPWM6_HBAT37_RESERVED1_SHIFT)
#define  HIPWM6_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT37_RESERVED1_SHIFT))

#define  HIPWM6_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT37_BATLAST_SHIFT 19
#define  HIPWM6_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT37_BATLAST_MASK) >> HIPWM6_HBAT37_BATLAST_SHIFT)
#define  HIPWM6_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT37_BATLAST_SHIFT))

#define  HIPWM6_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT37_BATSIGN_MASK) >> HIPWM6_HBAT37_BATSIGN_SHIFT)
#define  HIPWM6_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT37_BATSIGN_SHIFT))

#define  HIPWM6_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT37_BATSHIFT_MASK) >> HIPWM6_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT37_BATFRAC_MASK) >> HIPWM6_HBAT37_BATFRAC_SHIFT)
#define  HIPWM6_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM6_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT38_RESERVED1_MASK) >> HIPWM6_HBAT38_RESERVED1_SHIFT)
#define  HIPWM6_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT38_RESERVED1_SHIFT))

#define  HIPWM6_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT38_BATLAST_SHIFT 19
#define  HIPWM6_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT38_BATLAST_MASK) >> HIPWM6_HBAT38_BATLAST_SHIFT)
#define  HIPWM6_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT38_BATLAST_SHIFT))

#define  HIPWM6_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT38_BATSIGN_MASK) >> HIPWM6_HBAT38_BATSIGN_SHIFT)
#define  HIPWM6_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT38_BATSIGN_SHIFT))

#define  HIPWM6_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT38_BATSHIFT_MASK) >> HIPWM6_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT38_BATFRAC_MASK) >> HIPWM6_HBAT38_BATFRAC_SHIFT)
#define  HIPWM6_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM6_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT39_RESERVED1_MASK) >> HIPWM6_HBAT39_RESERVED1_SHIFT)
#define  HIPWM6_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT39_RESERVED1_SHIFT))

#define  HIPWM6_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT39_BATLAST_SHIFT 19
#define  HIPWM6_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT39_BATLAST_MASK) >> HIPWM6_HBAT39_BATLAST_SHIFT)
#define  HIPWM6_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT39_BATLAST_SHIFT))

#define  HIPWM6_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT39_BATSIGN_MASK) >> HIPWM6_HBAT39_BATSIGN_SHIFT)
#define  HIPWM6_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT39_BATSIGN_SHIFT))

#define  HIPWM6_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT39_BATSHIFT_MASK) >> HIPWM6_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT39_BATFRAC_MASK) >> HIPWM6_HBAT39_BATFRAC_SHIFT)
#define  HIPWM6_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM6_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT40_RESERVED1_MASK) >> HIPWM6_HBAT40_RESERVED1_SHIFT)
#define  HIPWM6_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT40_RESERVED1_SHIFT))

#define  HIPWM6_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT40_BATLAST_SHIFT 19
#define  HIPWM6_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT40_BATLAST_MASK) >> HIPWM6_HBAT40_BATLAST_SHIFT)
#define  HIPWM6_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT40_BATLAST_SHIFT))

#define  HIPWM6_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT40_BATSIGN_MASK) >> HIPWM6_HBAT40_BATSIGN_SHIFT)
#define  HIPWM6_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT40_BATSIGN_SHIFT))

#define  HIPWM6_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT40_BATSHIFT_MASK) >> HIPWM6_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT40_BATFRAC_MASK) >> HIPWM6_HBAT40_BATFRAC_SHIFT)
#define  HIPWM6_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM6_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT41_RESERVED1_MASK) >> HIPWM6_HBAT41_RESERVED1_SHIFT)
#define  HIPWM6_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT41_RESERVED1_SHIFT))

#define  HIPWM6_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT41_BATLAST_SHIFT 19
#define  HIPWM6_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT41_BATLAST_MASK) >> HIPWM6_HBAT41_BATLAST_SHIFT)
#define  HIPWM6_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT41_BATLAST_SHIFT))

#define  HIPWM6_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT41_BATSIGN_MASK) >> HIPWM6_HBAT41_BATSIGN_SHIFT)
#define  HIPWM6_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT41_BATSIGN_SHIFT))

#define  HIPWM6_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT41_BATSHIFT_MASK) >> HIPWM6_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT41_BATFRAC_MASK) >> HIPWM6_HBAT41_BATFRAC_SHIFT)
#define  HIPWM6_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM6_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT42_RESERVED1_MASK) >> HIPWM6_HBAT42_RESERVED1_SHIFT)
#define  HIPWM6_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT42_RESERVED1_SHIFT))

#define  HIPWM6_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT42_BATLAST_SHIFT 19
#define  HIPWM6_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT42_BATLAST_MASK) >> HIPWM6_HBAT42_BATLAST_SHIFT)
#define  HIPWM6_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT42_BATLAST_SHIFT))

#define  HIPWM6_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT42_BATSIGN_MASK) >> HIPWM6_HBAT42_BATSIGN_SHIFT)
#define  HIPWM6_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT42_BATSIGN_SHIFT))

#define  HIPWM6_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT42_BATSHIFT_MASK) >> HIPWM6_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT42_BATFRAC_MASK) >> HIPWM6_HBAT42_BATFRAC_SHIFT)
#define  HIPWM6_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM6_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT43_RESERVED1_MASK) >> HIPWM6_HBAT43_RESERVED1_SHIFT)
#define  HIPWM6_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT43_RESERVED1_SHIFT))

#define  HIPWM6_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT43_BATLAST_SHIFT 19
#define  HIPWM6_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT43_BATLAST_MASK) >> HIPWM6_HBAT43_BATLAST_SHIFT)
#define  HIPWM6_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT43_BATLAST_SHIFT))

#define  HIPWM6_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT43_BATSIGN_MASK) >> HIPWM6_HBAT43_BATSIGN_SHIFT)
#define  HIPWM6_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT43_BATSIGN_SHIFT))

#define  HIPWM6_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT43_BATSHIFT_MASK) >> HIPWM6_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT43_BATFRAC_MASK) >> HIPWM6_HBAT43_BATFRAC_SHIFT)
#define  HIPWM6_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM6_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT44_RESERVED1_MASK) >> HIPWM6_HBAT44_RESERVED1_SHIFT)
#define  HIPWM6_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT44_RESERVED1_SHIFT))

#define  HIPWM6_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT44_BATLAST_SHIFT 19
#define  HIPWM6_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT44_BATLAST_MASK) >> HIPWM6_HBAT44_BATLAST_SHIFT)
#define  HIPWM6_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT44_BATLAST_SHIFT))

#define  HIPWM6_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT44_BATSIGN_MASK) >> HIPWM6_HBAT44_BATSIGN_SHIFT)
#define  HIPWM6_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT44_BATSIGN_SHIFT))

#define  HIPWM6_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT44_BATSHIFT_MASK) >> HIPWM6_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT44_BATFRAC_MASK) >> HIPWM6_HBAT44_BATFRAC_SHIFT)
#define  HIPWM6_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM6_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT45_RESERVED1_MASK) >> HIPWM6_HBAT45_RESERVED1_SHIFT)
#define  HIPWM6_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT45_RESERVED1_SHIFT))

#define  HIPWM6_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT45_BATLAST_SHIFT 19
#define  HIPWM6_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT45_BATLAST_MASK) >> HIPWM6_HBAT45_BATLAST_SHIFT)
#define  HIPWM6_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT45_BATLAST_SHIFT))

#define  HIPWM6_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT45_BATSIGN_MASK) >> HIPWM6_HBAT45_BATSIGN_SHIFT)
#define  HIPWM6_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT45_BATSIGN_SHIFT))

#define  HIPWM6_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT45_BATSHIFT_MASK) >> HIPWM6_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT45_BATFRAC_MASK) >> HIPWM6_HBAT45_BATFRAC_SHIFT)
#define  HIPWM6_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM6_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT46_RESERVED1_MASK) >> HIPWM6_HBAT46_RESERVED1_SHIFT)
#define  HIPWM6_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT46_RESERVED1_SHIFT))

#define  HIPWM6_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT46_BATLAST_SHIFT 19
#define  HIPWM6_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT46_BATLAST_MASK) >> HIPWM6_HBAT46_BATLAST_SHIFT)
#define  HIPWM6_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT46_BATLAST_SHIFT))

#define  HIPWM6_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT46_BATSIGN_MASK) >> HIPWM6_HBAT46_BATSIGN_SHIFT)
#define  HIPWM6_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT46_BATSIGN_SHIFT))

#define  HIPWM6_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT46_BATSHIFT_MASK) >> HIPWM6_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT46_BATFRAC_MASK) >> HIPWM6_HBAT46_BATFRAC_SHIFT)
#define  HIPWM6_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM6_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT47_RESERVED1_MASK) >> HIPWM6_HBAT47_RESERVED1_SHIFT)
#define  HIPWM6_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT47_RESERVED1_SHIFT))

#define  HIPWM6_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT47_BATLAST_SHIFT 19
#define  HIPWM6_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT47_BATLAST_MASK) >> HIPWM6_HBAT47_BATLAST_SHIFT)
#define  HIPWM6_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT47_BATLAST_SHIFT))

#define  HIPWM6_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT47_BATSIGN_MASK) >> HIPWM6_HBAT47_BATSIGN_SHIFT)
#define  HIPWM6_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT47_BATSIGN_SHIFT))

#define  HIPWM6_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT47_BATSHIFT_MASK) >> HIPWM6_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT47_BATFRAC_MASK) >> HIPWM6_HBAT47_BATFRAC_SHIFT)
#define  HIPWM6_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM6_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT48_RESERVED1_MASK) >> HIPWM6_HBAT48_RESERVED1_SHIFT)
#define  HIPWM6_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT48_RESERVED1_SHIFT))

#define  HIPWM6_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT48_BATLAST_SHIFT 19
#define  HIPWM6_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT48_BATLAST_MASK) >> HIPWM6_HBAT48_BATLAST_SHIFT)
#define  HIPWM6_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT48_BATLAST_SHIFT))

#define  HIPWM6_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT48_BATSIGN_MASK) >> HIPWM6_HBAT48_BATSIGN_SHIFT)
#define  HIPWM6_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT48_BATSIGN_SHIFT))

#define  HIPWM6_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT48_BATSHIFT_MASK) >> HIPWM6_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT48_BATFRAC_MASK) >> HIPWM6_HBAT48_BATFRAC_SHIFT)
#define  HIPWM6_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM6_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT49_RESERVED1_MASK) >> HIPWM6_HBAT49_RESERVED1_SHIFT)
#define  HIPWM6_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT49_RESERVED1_SHIFT))

#define  HIPWM6_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT49_BATLAST_SHIFT 19
#define  HIPWM6_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT49_BATLAST_MASK) >> HIPWM6_HBAT49_BATLAST_SHIFT)
#define  HIPWM6_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT49_BATLAST_SHIFT))

#define  HIPWM6_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT49_BATSIGN_MASK) >> HIPWM6_HBAT49_BATSIGN_SHIFT)
#define  HIPWM6_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT49_BATSIGN_SHIFT))

#define  HIPWM6_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT49_BATSHIFT_MASK) >> HIPWM6_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT49_BATFRAC_MASK) >> HIPWM6_HBAT49_BATFRAC_SHIFT)
#define  HIPWM6_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM6_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT50_RESERVED1_MASK) >> HIPWM6_HBAT50_RESERVED1_SHIFT)
#define  HIPWM6_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT50_RESERVED1_SHIFT))

#define  HIPWM6_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT50_BATLAST_SHIFT 19
#define  HIPWM6_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT50_BATLAST_MASK) >> HIPWM6_HBAT50_BATLAST_SHIFT)
#define  HIPWM6_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT50_BATLAST_SHIFT))

#define  HIPWM6_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT50_BATSIGN_MASK) >> HIPWM6_HBAT50_BATSIGN_SHIFT)
#define  HIPWM6_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT50_BATSIGN_SHIFT))

#define  HIPWM6_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT50_BATSHIFT_MASK) >> HIPWM6_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT50_BATFRAC_MASK) >> HIPWM6_HBAT50_BATFRAC_SHIFT)
#define  HIPWM6_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM6_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT51_RESERVED1_MASK) >> HIPWM6_HBAT51_RESERVED1_SHIFT)
#define  HIPWM6_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT51_RESERVED1_SHIFT))

#define  HIPWM6_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT51_BATLAST_SHIFT 19
#define  HIPWM6_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT51_BATLAST_MASK) >> HIPWM6_HBAT51_BATLAST_SHIFT)
#define  HIPWM6_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT51_BATLAST_SHIFT))

#define  HIPWM6_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT51_BATSIGN_MASK) >> HIPWM6_HBAT51_BATSIGN_SHIFT)
#define  HIPWM6_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT51_BATSIGN_SHIFT))

#define  HIPWM6_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT51_BATSHIFT_MASK) >> HIPWM6_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT51_BATFRAC_MASK) >> HIPWM6_HBAT51_BATFRAC_SHIFT)
#define  HIPWM6_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM6_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT52_RESERVED1_MASK) >> HIPWM6_HBAT52_RESERVED1_SHIFT)
#define  HIPWM6_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT52_RESERVED1_SHIFT))

#define  HIPWM6_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT52_BATLAST_SHIFT 19
#define  HIPWM6_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT52_BATLAST_MASK) >> HIPWM6_HBAT52_BATLAST_SHIFT)
#define  HIPWM6_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT52_BATLAST_SHIFT))

#define  HIPWM6_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT52_BATSIGN_MASK) >> HIPWM6_HBAT52_BATSIGN_SHIFT)
#define  HIPWM6_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT52_BATSIGN_SHIFT))

#define  HIPWM6_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT52_BATSHIFT_MASK) >> HIPWM6_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT52_BATFRAC_MASK) >> HIPWM6_HBAT52_BATFRAC_SHIFT)
#define  HIPWM6_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM6_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT53_RESERVED1_MASK) >> HIPWM6_HBAT53_RESERVED1_SHIFT)
#define  HIPWM6_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT53_RESERVED1_SHIFT))

#define  HIPWM6_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT53_BATLAST_SHIFT 19
#define  HIPWM6_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT53_BATLAST_MASK) >> HIPWM6_HBAT53_BATLAST_SHIFT)
#define  HIPWM6_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT53_BATLAST_SHIFT))

#define  HIPWM6_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT53_BATSIGN_MASK) >> HIPWM6_HBAT53_BATSIGN_SHIFT)
#define  HIPWM6_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT53_BATSIGN_SHIFT))

#define  HIPWM6_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT53_BATSHIFT_MASK) >> HIPWM6_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT53_BATFRAC_MASK) >> HIPWM6_HBAT53_BATFRAC_SHIFT)
#define  HIPWM6_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM6_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT54_RESERVED1_MASK) >> HIPWM6_HBAT54_RESERVED1_SHIFT)
#define  HIPWM6_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT54_RESERVED1_SHIFT))

#define  HIPWM6_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT54_BATLAST_SHIFT 19
#define  HIPWM6_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT54_BATLAST_MASK) >> HIPWM6_HBAT54_BATLAST_SHIFT)
#define  HIPWM6_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT54_BATLAST_SHIFT))

#define  HIPWM6_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT54_BATSIGN_MASK) >> HIPWM6_HBAT54_BATSIGN_SHIFT)
#define  HIPWM6_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT54_BATSIGN_SHIFT))

#define  HIPWM6_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT54_BATSHIFT_MASK) >> HIPWM6_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT54_BATFRAC_MASK) >> HIPWM6_HBAT54_BATFRAC_SHIFT)
#define  HIPWM6_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM6_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT55_RESERVED1_MASK) >> HIPWM6_HBAT55_RESERVED1_SHIFT)
#define  HIPWM6_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT55_RESERVED1_SHIFT))

#define  HIPWM6_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT55_BATLAST_SHIFT 19
#define  HIPWM6_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT55_BATLAST_MASK) >> HIPWM6_HBAT55_BATLAST_SHIFT)
#define  HIPWM6_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT55_BATLAST_SHIFT))

#define  HIPWM6_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT55_BATSIGN_MASK) >> HIPWM6_HBAT55_BATSIGN_SHIFT)
#define  HIPWM6_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT55_BATSIGN_SHIFT))

#define  HIPWM6_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT55_BATSHIFT_MASK) >> HIPWM6_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT55_BATFRAC_MASK) >> HIPWM6_HBAT55_BATFRAC_SHIFT)
#define  HIPWM6_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM6_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT56_RESERVED1_MASK) >> HIPWM6_HBAT56_RESERVED1_SHIFT)
#define  HIPWM6_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT56_RESERVED1_SHIFT))

#define  HIPWM6_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT56_BATLAST_SHIFT 19
#define  HIPWM6_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT56_BATLAST_MASK) >> HIPWM6_HBAT56_BATLAST_SHIFT)
#define  HIPWM6_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT56_BATLAST_SHIFT))

#define  HIPWM6_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT56_BATSIGN_MASK) >> HIPWM6_HBAT56_BATSIGN_SHIFT)
#define  HIPWM6_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT56_BATSIGN_SHIFT))

#define  HIPWM6_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT56_BATSHIFT_MASK) >> HIPWM6_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT56_BATFRAC_MASK) >> HIPWM6_HBAT56_BATFRAC_SHIFT)
#define  HIPWM6_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM6_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT57_RESERVED1_MASK) >> HIPWM6_HBAT57_RESERVED1_SHIFT)
#define  HIPWM6_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT57_RESERVED1_SHIFT))

#define  HIPWM6_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT57_BATLAST_SHIFT 19
#define  HIPWM6_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT57_BATLAST_MASK) >> HIPWM6_HBAT57_BATLAST_SHIFT)
#define  HIPWM6_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT57_BATLAST_SHIFT))

#define  HIPWM6_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT57_BATSIGN_MASK) >> HIPWM6_HBAT57_BATSIGN_SHIFT)
#define  HIPWM6_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT57_BATSIGN_SHIFT))

#define  HIPWM6_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT57_BATSHIFT_MASK) >> HIPWM6_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT57_BATFRAC_MASK) >> HIPWM6_HBAT57_BATFRAC_SHIFT)
#define  HIPWM6_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM6_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT58_RESERVED1_MASK) >> HIPWM6_HBAT58_RESERVED1_SHIFT)
#define  HIPWM6_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT58_RESERVED1_SHIFT))

#define  HIPWM6_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT58_BATLAST_SHIFT 19
#define  HIPWM6_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT58_BATLAST_MASK) >> HIPWM6_HBAT58_BATLAST_SHIFT)
#define  HIPWM6_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT58_BATLAST_SHIFT))

#define  HIPWM6_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT58_BATSIGN_MASK) >> HIPWM6_HBAT58_BATSIGN_SHIFT)
#define  HIPWM6_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT58_BATSIGN_SHIFT))

#define  HIPWM6_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT58_BATSHIFT_MASK) >> HIPWM6_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT58_BATFRAC_MASK) >> HIPWM6_HBAT58_BATFRAC_SHIFT)
#define  HIPWM6_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM6_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT59_RESERVED1_MASK) >> HIPWM6_HBAT59_RESERVED1_SHIFT)
#define  HIPWM6_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT59_RESERVED1_SHIFT))

#define  HIPWM6_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT59_BATLAST_SHIFT 19
#define  HIPWM6_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT59_BATLAST_MASK) >> HIPWM6_HBAT59_BATLAST_SHIFT)
#define  HIPWM6_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT59_BATLAST_SHIFT))

#define  HIPWM6_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT59_BATSIGN_MASK) >> HIPWM6_HBAT59_BATSIGN_SHIFT)
#define  HIPWM6_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT59_BATSIGN_SHIFT))

#define  HIPWM6_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT59_BATSHIFT_MASK) >> HIPWM6_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT59_BATFRAC_MASK) >> HIPWM6_HBAT59_BATFRAC_SHIFT)
#define  HIPWM6_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM6_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT60_RESERVED1_MASK) >> HIPWM6_HBAT60_RESERVED1_SHIFT)
#define  HIPWM6_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT60_RESERVED1_SHIFT))

#define  HIPWM6_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT60_BATLAST_SHIFT 19
#define  HIPWM6_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT60_BATLAST_MASK) >> HIPWM6_HBAT60_BATLAST_SHIFT)
#define  HIPWM6_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT60_BATLAST_SHIFT))

#define  HIPWM6_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT60_BATSIGN_MASK) >> HIPWM6_HBAT60_BATSIGN_SHIFT)
#define  HIPWM6_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT60_BATSIGN_SHIFT))

#define  HIPWM6_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT60_BATSHIFT_MASK) >> HIPWM6_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT60_BATFRAC_MASK) >> HIPWM6_HBAT60_BATFRAC_SHIFT)
#define  HIPWM6_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM6_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT61_RESERVED1_MASK) >> HIPWM6_HBAT61_RESERVED1_SHIFT)
#define  HIPWM6_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT61_RESERVED1_SHIFT))

#define  HIPWM6_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT61_BATLAST_SHIFT 19
#define  HIPWM6_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT61_BATLAST_MASK) >> HIPWM6_HBAT61_BATLAST_SHIFT)
#define  HIPWM6_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT61_BATLAST_SHIFT))

#define  HIPWM6_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT61_BATSIGN_MASK) >> HIPWM6_HBAT61_BATSIGN_SHIFT)
#define  HIPWM6_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT61_BATSIGN_SHIFT))

#define  HIPWM6_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT61_BATSHIFT_MASK) >> HIPWM6_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT61_BATFRAC_MASK) >> HIPWM6_HBAT61_BATFRAC_SHIFT)
#define  HIPWM6_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM6_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT62_RESERVED1_MASK) >> HIPWM6_HBAT62_RESERVED1_SHIFT)
#define  HIPWM6_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT62_RESERVED1_SHIFT))

#define  HIPWM6_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT62_BATLAST_SHIFT 19
#define  HIPWM6_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT62_BATLAST_MASK) >> HIPWM6_HBAT62_BATLAST_SHIFT)
#define  HIPWM6_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT62_BATLAST_SHIFT))

#define  HIPWM6_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT62_BATSIGN_MASK) >> HIPWM6_HBAT62_BATSIGN_SHIFT)
#define  HIPWM6_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT62_BATSIGN_SHIFT))

#define  HIPWM6_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT62_BATSHIFT_MASK) >> HIPWM6_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT62_BATFRAC_MASK) >> HIPWM6_HBAT62_BATFRAC_SHIFT)
#define  HIPWM6_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM6_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM6_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM6_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT63_RESERVED1_MASK) >> HIPWM6_HBAT63_RESERVED1_SHIFT)
#define  HIPWM6_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HBAT63_RESERVED1_SHIFT))

#define  HIPWM6_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM6_HBAT63_BATLAST_SHIFT 19
#define  HIPWM6_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT63_BATLAST_MASK) >> HIPWM6_HBAT63_BATLAST_SHIFT)
#define  HIPWM6_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM6_HBAT63_BATLAST_SHIFT))

#define  HIPWM6_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM6_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM6_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT63_BATSIGN_MASK) >> HIPWM6_HBAT63_BATSIGN_SHIFT)
#define  HIPWM6_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM6_HBAT63_BATSIGN_SHIFT))

#define  HIPWM6_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM6_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM6_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT63_BATSHIFT_MASK) >> HIPWM6_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM6_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM6_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM6_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM6_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM6_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM6_HBAT63_BATFRAC_MASK) >> HIPWM6_HBAT63_BATFRAC_SHIFT)
#define  HIPWM6_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM6_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM6_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC0_RESERVED1_MASK) >> HIPWM6_HMIC0_RESERVED1_SHIFT)
#define  HIPWM6_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC0_RESERVED1_SHIFT))

#define  HIPWM6_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC0_MICINTPIX_MASK) >> HIPWM6_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC0_MICFRACPIX_MASK) >> HIPWM6_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM6_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC1_RESERVED1_MASK) >> HIPWM6_HMIC1_RESERVED1_SHIFT)
#define  HIPWM6_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC1_RESERVED1_SHIFT))

#define  HIPWM6_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC1_MICINTPIX_MASK) >> HIPWM6_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC1_MICFRACPIX_MASK) >> HIPWM6_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM6_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC2_RESERVED1_MASK) >> HIPWM6_HMIC2_RESERVED1_SHIFT)
#define  HIPWM6_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC2_RESERVED1_SHIFT))

#define  HIPWM6_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC2_MICINTPIX_MASK) >> HIPWM6_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC2_MICFRACPIX_MASK) >> HIPWM6_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM6_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC3_RESERVED1_MASK) >> HIPWM6_HMIC3_RESERVED1_SHIFT)
#define  HIPWM6_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC3_RESERVED1_SHIFT))

#define  HIPWM6_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC3_MICINTPIX_MASK) >> HIPWM6_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC3_MICFRACPIX_MASK) >> HIPWM6_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM6_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC4_RESERVED1_MASK) >> HIPWM6_HMIC4_RESERVED1_SHIFT)
#define  HIPWM6_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC4_RESERVED1_SHIFT))

#define  HIPWM6_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC4_MICINTPIX_MASK) >> HIPWM6_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC4_MICFRACPIX_MASK) >> HIPWM6_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM6_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC5_RESERVED1_MASK) >> HIPWM6_HMIC5_RESERVED1_SHIFT)
#define  HIPWM6_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC5_RESERVED1_SHIFT))

#define  HIPWM6_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC5_MICINTPIX_MASK) >> HIPWM6_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC5_MICFRACPIX_MASK) >> HIPWM6_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM6_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC6_RESERVED1_MASK) >> HIPWM6_HMIC6_RESERVED1_SHIFT)
#define  HIPWM6_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC6_RESERVED1_SHIFT))

#define  HIPWM6_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC6_MICINTPIX_MASK) >> HIPWM6_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC6_MICFRACPIX_MASK) >> HIPWM6_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM6_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC7_RESERVED1_MASK) >> HIPWM6_HMIC7_RESERVED1_SHIFT)
#define  HIPWM6_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC7_RESERVED1_SHIFT))

#define  HIPWM6_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC7_MICINTPIX_MASK) >> HIPWM6_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC7_MICFRACPIX_MASK) >> HIPWM6_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM6_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC8_RESERVED1_MASK) >> HIPWM6_HMIC8_RESERVED1_SHIFT)
#define  HIPWM6_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC8_RESERVED1_SHIFT))

#define  HIPWM6_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC8_MICINTPIX_MASK) >> HIPWM6_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC8_MICFRACPIX_MASK) >> HIPWM6_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM6_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC9_RESERVED1_MASK) >> HIPWM6_HMIC9_RESERVED1_SHIFT)
#define  HIPWM6_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC9_RESERVED1_SHIFT))

#define  HIPWM6_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC9_MICINTPIX_MASK) >> HIPWM6_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC9_MICFRACPIX_MASK) >> HIPWM6_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM6_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC10_RESERVED1_MASK) >> HIPWM6_HMIC10_RESERVED1_SHIFT)
#define  HIPWM6_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC10_RESERVED1_SHIFT))

#define  HIPWM6_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC10_MICINTPIX_MASK) >> HIPWM6_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC10_MICFRACPIX_MASK) >> HIPWM6_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM6_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM6_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM6_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC11_RESERVED1_MASK) >> HIPWM6_HMIC11_RESERVED1_SHIFT)
#define  HIPWM6_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM6_HMIC11_RESERVED1_SHIFT))

#define  HIPWM6_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM6_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM6_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC11_MICINTPIX_MASK) >> HIPWM6_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM6_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM6_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM6_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM6_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM6_HMIC11_MICFRACPIX_MASK) >> HIPWM6_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM6_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM6_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM6_HMIC11_MICFRACPIX_SHIFT))

//====================================================================
//
//Register File: HiPWM (Instance 8 of 8) (HiPWM7)
/** \brief Top-level register file for HiPWM block*/
//
//====================================================================

//====================================================================
//Register: HiPWM Configuration Register (HCR)
/** \brief This register configures the major features of the HiPWM module*/
//====================================================================

#define  HIPWM7_HCR_RESERVED1_MASK 0xffe00000
#define  HIPWM7_HCR_RESERVED1_SHIFT 21
#define  HIPWM7_HCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_RESERVED1_MASK) >> HIPWM7_HCR_RESERVED1_SHIFT)
#define  HIPWM7_HCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HCR_RESERVED1_SHIFT))

#define  HIPWM7_HCR_EDGESEL_MASK 0x100000
#define  HIPWM7_HCR_EDGESEL_SHIFT 20
#define  HIPWM7_HCR_EDGESEL_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_EDGESEL_MASK) >> HIPWM7_HCR_EDGESEL_SHIFT)
#define  HIPWM7_HCR_EDGESEL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_EDGESEL_MASK) | (((uint32_t)val) << HIPWM7_HCR_EDGESEL_SHIFT))

#define  HIPWM7_HCR_NUMEDGE_MASK 0x80000
#define  HIPWM7_HCR_NUMEDGE_SHIFT 19
#define  HIPWM7_HCR_NUMEDGE_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_NUMEDGE_MASK) >> HIPWM7_HCR_NUMEDGE_SHIFT)
#define  HIPWM7_HCR_NUMEDGE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_NUMEDGE_MASK) | (((uint32_t)val) << HIPWM7_HCR_NUMEDGE_SHIFT))

#define  HIPWM7_HCR_CFGDECVIDEOPIGEN_MASK 0x40000
#define  HIPWM7_HCR_CFGDECVIDEOPIGEN_SHIFT 18
#define  HIPWM7_HCR_CFGDECVIDEOPIGEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CFGDECVIDEOPIGEN_MASK) >> HIPWM7_HCR_CFGDECVIDEOPIGEN_SHIFT)
#define  HIPWM7_HCR_CFGDECVIDEOPIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CFGDECVIDEOPIGEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_CFGDECVIDEOPIGEN_SHIFT))

#define  HIPWM7_HCR_CFGDECVIDEODATAEN_MASK 0x20000
#define  HIPWM7_HCR_CFGDECVIDEODATAEN_SHIFT 17
#define  HIPWM7_HCR_CFGDECVIDEODATAEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CFGDECVIDEODATAEN_MASK) >> HIPWM7_HCR_CFGDECVIDEODATAEN_SHIFT)
#define  HIPWM7_HCR_CFGDECVIDEODATAEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CFGDECVIDEODATAEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_CFGDECVIDEODATAEN_SHIFT))

#define  HIPWM7_HCR_CFGDECFORCELASERONEN_MASK 0x10000
#define  HIPWM7_HCR_CFGDECFORCELASERONEN_SHIFT 16
#define  HIPWM7_HCR_CFGDECFORCELASERONEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CFGDECFORCELASERONEN_MASK) >> HIPWM7_HCR_CFGDECFORCELASERONEN_SHIFT)
#define  HIPWM7_HCR_CFGDECFORCELASERONEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CFGDECFORCELASERONEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_CFGDECFORCELASERONEN_SHIFT))

#define  HIPWM7_HCR_NOBATLAST_MASK 0x8000
#define  HIPWM7_HCR_NOBATLAST_SHIFT 15
#define  HIPWM7_HCR_NOBATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_NOBATLAST_MASK) >> HIPWM7_HCR_NOBATLAST_SHIFT)
#define  HIPWM7_HCR_NOBATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_NOBATLAST_MASK) | (((uint32_t)val) << HIPWM7_HCR_NOBATLAST_SHIFT))

#define  HIPWM7_HCR_DUALMARGIN_MASK 0x4000
#define  HIPWM7_HCR_DUALMARGIN_SHIFT 14
#define  HIPWM7_HCR_DUALMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_DUALMARGIN_MASK) >> HIPWM7_HCR_DUALMARGIN_SHIFT)
#define  HIPWM7_HCR_DUALMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_DUALMARGIN_MASK) | (((uint32_t)val) << HIPWM7_HCR_DUALMARGIN_SHIFT))

#define  HIPWM7_HCR_FILTERPULSES_MASK 0x2000
#define  HIPWM7_HCR_FILTERPULSES_SHIFT 13
#define  HIPWM7_HCR_FILTERPULSES_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_FILTERPULSES_MASK) >> HIPWM7_HCR_FILTERPULSES_SHIFT)
#define  HIPWM7_HCR_FILTERPULSES_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_FILTERPULSES_MASK) | (((uint32_t)val) << HIPWM7_HCR_FILTERPULSES_SHIFT))

#define  HIPWM7_HCR_CRCRST_MASK 0x1000
#define  HIPWM7_HCR_CRCRST_SHIFT 12
#define  HIPWM7_HCR_CRCRST_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CRCRST_MASK) >> HIPWM7_HCR_CRCRST_SHIFT)
#define  HIPWM7_HCR_CRCRST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CRCRST_MASK) | (((uint32_t)val) << HIPWM7_HCR_CRCRST_SHIFT))

#define  HIPWM7_HCR_HIPSDIR_MASK 0x800
#define  HIPWM7_HCR_HIPSDIR_SHIFT 11
#define  HIPWM7_HCR_HIPSDIR_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_HIPSDIR_MASK) >> HIPWM7_HCR_HIPSDIR_SHIFT)
#define  HIPWM7_HCR_HIPSDIR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_HIPSDIR_MASK) | (((uint32_t)val) << HIPWM7_HCR_HIPSDIR_SHIFT))

#define  HIPWM7_HCR_PTWIDTH_MASK 0x400
#define  HIPWM7_HCR_PTWIDTH_SHIFT 10
#define  HIPWM7_HCR_PTWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_PTWIDTH_MASK) >> HIPWM7_HCR_PTWIDTH_SHIFT)
#define  HIPWM7_HCR_PTWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_PTWIDTH_MASK) | (((uint32_t)val) << HIPWM7_HCR_PTWIDTH_SHIFT))

#define  HIPWM7_HCR_TESTMODE_MASK 0x200
#define  HIPWM7_HCR_TESTMODE_SHIFT 9
#define  HIPWM7_HCR_TESTMODE_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_TESTMODE_MASK) >> HIPWM7_HCR_TESTMODE_SHIFT)
#define  HIPWM7_HCR_TESTMODE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_TESTMODE_MASK) | (((uint32_t)val) << HIPWM7_HCR_TESTMODE_SHIFT))

#define  HIPWM7_HCR_CHANZERO_MASK 0x100
#define  HIPWM7_HCR_CHANZERO_SHIFT 8
#define  HIPWM7_HCR_CHANZERO_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CHANZERO_MASK) >> HIPWM7_HCR_CHANZERO_SHIFT)
#define  HIPWM7_HCR_CHANZERO_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CHANZERO_MASK) | (((uint32_t)val) << HIPWM7_HCR_CHANZERO_SHIFT))

#define  HIPWM7_HCR_INVPT_MASK 0x80
#define  HIPWM7_HCR_INVPT_SHIFT 7
#define  HIPWM7_HCR_INVPT_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_INVPT_MASK) >> HIPWM7_HCR_INVPT_SHIFT)
#define  HIPWM7_HCR_INVPT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_INVPT_MASK) | (((uint32_t)val) << HIPWM7_HCR_INVPT_SHIFT))

#define  HIPWM7_HCR_CPUACCESS_MASK 0x40
#define  HIPWM7_HCR_CPUACCESS_SHIFT 6
#define  HIPWM7_HCR_CPUACCESS_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_CPUACCESS_MASK) >> HIPWM7_HCR_CPUACCESS_SHIFT)
#define  HIPWM7_HCR_CPUACCESS_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_CPUACCESS_MASK) | (((uint32_t)val) << HIPWM7_HCR_CPUACCESS_SHIFT))

#define  HIPWM7_HCR_PECEN_MASK 0x20
#define  HIPWM7_HCR_PECEN_SHIFT 5
#define  HIPWM7_HCR_PECEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_PECEN_MASK) >> HIPWM7_HCR_PECEN_SHIFT)
#define  HIPWM7_HCR_PECEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_PECEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_PECEN_SHIFT))

#define  HIPWM7_HCR_PIGTOPHSYNC_MASK 0x10
#define  HIPWM7_HCR_PIGTOPHSYNC_SHIFT 4
#define  HIPWM7_HCR_PIGTOPHSYNC_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_PIGTOPHSYNC_MASK) >> HIPWM7_HCR_PIGTOPHSYNC_SHIFT)
#define  HIPWM7_HCR_PIGTOPHSYNC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_PIGTOPHSYNC_MASK) | (((uint32_t)val) << HIPWM7_HCR_PIGTOPHSYNC_SHIFT))

#define  HIPWM7_HCR_PIGEN_MASK 0x8
#define  HIPWM7_HCR_PIGEN_SHIFT 3
#define  HIPWM7_HCR_PIGEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_PIGEN_MASK) >> HIPWM7_HCR_PIGEN_SHIFT)
#define  HIPWM7_HCR_PIGEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_PIGEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_PIGEN_SHIFT))

#define  HIPWM7_HCR_BENDEREN_MASK 0x4
#define  HIPWM7_HCR_BENDEREN_SHIFT 2
#define  HIPWM7_HCR_BENDEREN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_BENDEREN_MASK) >> HIPWM7_HCR_BENDEREN_SHIFT)
#define  HIPWM7_HCR_BENDEREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_BENDEREN_MASK) | (((uint32_t)val) << HIPWM7_HCR_BENDEREN_SHIFT))

#define  HIPWM7_HCR_SYNTHHSYNCEN_MASK 0x2
#define  HIPWM7_HCR_SYNTHHSYNCEN_SHIFT 1
#define  HIPWM7_HCR_SYNTHHSYNCEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_SYNTHHSYNCEN_MASK) >> HIPWM7_HCR_SYNTHHSYNCEN_SHIFT)
#define  HIPWM7_HCR_SYNTHHSYNCEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_SYNTHHSYNCEN_MASK) | (((uint32_t)val) << HIPWM7_HCR_SYNTHHSYNCEN_SHIFT))

#define  HIPWM7_HCR_ENABLE_MASK 0x1
#define  HIPWM7_HCR_ENABLE_SHIFT 0
#define  HIPWM7_HCR_ENABLE_MASK_SHIFT(reg) (((reg) & HIPWM7_HCR_ENABLE_MASK) >> HIPWM7_HCR_ENABLE_SHIFT)
#define  HIPWM7_HCR_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCR_ENABLE_MASK) | (((uint32_t)val) << HIPWM7_HCR_ENABLE_SHIFT))

//====================================================================
//Register: HiPWM Side Margins Register (HSMR)
/** \brief HiPWM Side Margin*/
//====================================================================

#define  HIPWM7_HSMR_OPPSIDEMARGIN_MASK 0xffff0000
#define  HIPWM7_HSMR_OPPSIDEMARGIN_SHIFT 16
#define  HIPWM7_HSMR_OPPSIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM7_HSMR_OPPSIDEMARGIN_MASK) >> HIPWM7_HSMR_OPPSIDEMARGIN_SHIFT)
#define  HIPWM7_HSMR_OPPSIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSMR_OPPSIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM7_HSMR_OPPSIDEMARGIN_SHIFT))

#define  HIPWM7_HSMR_SIDEMARGIN_MASK 0xffff
#define  HIPWM7_HSMR_SIDEMARGIN_SHIFT 0
#define  HIPWM7_HSMR_SIDEMARGIN_MASK_SHIFT(reg) (((reg) & HIPWM7_HSMR_SIDEMARGIN_MASK) >> HIPWM7_HSMR_SIDEMARGIN_SHIFT)
#define  HIPWM7_HSMR_SIDEMARGIN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSMR_SIDEMARGIN_MASK) | (((uint32_t)val) << HIPWM7_HSMR_SIDEMARGIN_SHIFT))

//====================================================================
//Register: HiPWM Top Skew Register (HTSR)
/** \brief HiPWM Top Skew Register is used to allow small adjustments (up to 63 lines) to the Top Margin for
        this video channel. The value in this register may be modified while the HiPWM is enabled.*/
//====================================================================

#define  HIPWM7_HTSR_RESERVED1_MASK 0xffffff00
#define  HIPWM7_HTSR_RESERVED1_SHIFT 8
#define  HIPWM7_HTSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HTSR_RESERVED1_MASK) >> HIPWM7_HTSR_RESERVED1_SHIFT)
#define  HIPWM7_HTSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HTSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HTSR_RESERVED1_SHIFT))

#define  HIPWM7_HTSR_TOPSKEW_MASK 0xff
#define  HIPWM7_HTSR_TOPSKEW_SHIFT 0
#define  HIPWM7_HTSR_TOPSKEW_MASK_SHIFT(reg) (((reg) & HIPWM7_HTSR_TOPSKEW_MASK) >> HIPWM7_HTSR_TOPSKEW_SHIFT)
#define  HIPWM7_HTSR_TOPSKEW_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HTSR_TOPSKEW_MASK) | (((uint32_t)val) << HIPWM7_HTSR_TOPSKEW_SHIFT))

//====================================================================
//Register: HiPWM Status Register (HSR)
//====================================================================

#define  HIPWM7_HSR_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HSR_RESERVED1_SHIFT 12
#define  HIPWM7_HSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_RESERVED1_MASK) >> HIPWM7_HSR_RESERVED1_SHIFT)
#define  HIPWM7_HSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HSR_RESERVED1_SHIFT))

#define  HIPWM7_HSR_INDEX_MASK 0xf00
#define  HIPWM7_HSR_INDEX_SHIFT 8
#define  HIPWM7_HSR_INDEX_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_INDEX_MASK) >> HIPWM7_HSR_INDEX_SHIFT)
#define  HIPWM7_HSR_INDEX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_INDEX_MASK) | (((uint32_t)val) << HIPWM7_HSR_INDEX_SHIFT))

#define  HIPWM7_HSR_DIRRTOL_MASK 0x80
#define  HIPWM7_HSR_DIRRTOL_SHIFT 7
#define  HIPWM7_HSR_DIRRTOL_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_DIRRTOL_MASK) >> HIPWM7_HSR_DIRRTOL_SHIFT)
#define  HIPWM7_HSR_DIRRTOL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_DIRRTOL_MASK) | (((uint32_t)val) << HIPWM7_HSR_DIRRTOL_SHIFT))

#define  HIPWM7_HSR_PAGE_STATE_MASK 0x70
#define  HIPWM7_HSR_PAGE_STATE_SHIFT 4
#define  HIPWM7_HSR_PAGE_STATE_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_PAGE_STATE_MASK) >> HIPWM7_HSR_PAGE_STATE_SHIFT)
#define  HIPWM7_HSR_PAGE_STATE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_PAGE_STATE_MASK) | (((uint32_t)val) << HIPWM7_HSR_PAGE_STATE_SHIFT))

#define  HIPWM7_HSR_RESERVED2_MASK 0x8
#define  HIPWM7_HSR_RESERVED2_SHIFT 3
#define  HIPWM7_HSR_RESERVED2_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_RESERVED2_MASK) >> HIPWM7_HSR_RESERVED2_SHIFT)
#define  HIPWM7_HSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_RESERVED2_MASK) | (((uint32_t)val) << HIPWM7_HSR_RESERVED2_SHIFT))

#define  HIPWM7_HSR_READY_IN_MASK 0x4
#define  HIPWM7_HSR_READY_IN_SHIFT 2
#define  HIPWM7_HSR_READY_IN_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_READY_IN_MASK) >> HIPWM7_HSR_READY_IN_SHIFT)
#define  HIPWM7_HSR_READY_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_READY_IN_MASK) | (((uint32_t)val) << HIPWM7_HSR_READY_IN_SHIFT))

#define  HIPWM7_HSR_VALID_IN_MASK 0x2
#define  HIPWM7_HSR_VALID_IN_SHIFT 1
#define  HIPWM7_HSR_VALID_IN_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_VALID_IN_MASK) >> HIPWM7_HSR_VALID_IN_SHIFT)
#define  HIPWM7_HSR_VALID_IN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_VALID_IN_MASK) | (((uint32_t)val) << HIPWM7_HSR_VALID_IN_SHIFT))

#define  HIPWM7_HSR_BAT_TABLE_ERROR_MASK 0x1
#define  HIPWM7_HSR_BAT_TABLE_ERROR_SHIFT 0
#define  HIPWM7_HSR_BAT_TABLE_ERROR_MASK_SHIFT(reg) (((reg) & HIPWM7_HSR_BAT_TABLE_ERROR_MASK) >> HIPWM7_HSR_BAT_TABLE_ERROR_SHIFT)
#define  HIPWM7_HSR_BAT_TABLE_ERROR_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSR_BAT_TABLE_ERROR_MASK) | (((uint32_t)val) << HIPWM7_HSR_BAT_TABLE_ERROR_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Pulse Width Register (HSPWR)
/** \brief Sets the pulse width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM7_HSPWR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HSPWR_RESERVED1_SHIFT 16
#define  HIPWM7_HSPWR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HSPWR_RESERVED1_MASK) >> HIPWM7_HSPWR_RESERVED1_SHIFT)
#define  HIPWM7_HSPWR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSPWR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HSPWR_RESERVED1_SHIFT))

#define  HIPWM7_HSPWR_SYNTHPULSEWID_MASK 0xffff
#define  HIPWM7_HSPWR_SYNTHPULSEWID_SHIFT 0
#define  HIPWM7_HSPWR_SYNTHPULSEWID_MASK_SHIFT(reg) (((reg) & HIPWM7_HSPWR_SYNTHPULSEWID_MASK) >> HIPWM7_HSPWR_SYNTHPULSEWID_SHIFT)
#define  HIPWM7_HSPWR_SYNTHPULSEWID_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSPWR_SYNTHPULSEWID_MASK) | (((uint32_t)val) << HIPWM7_HSPWR_SYNTHPULSEWID_SHIFT))

//====================================================================
//Register: HiPWM Synth HSYNC Quiescent Register (HSQR)
/** \brief Sets the Quiescent Time width of the HiPWM Synthetic HSYNC*/
//====================================================================

#define  HIPWM7_HSQR_RESERVED1_MASK 0xff000000
#define  HIPWM7_HSQR_RESERVED1_SHIFT 24
#define  HIPWM7_HSQR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HSQR_RESERVED1_MASK) >> HIPWM7_HSQR_RESERVED1_SHIFT)
#define  HIPWM7_HSQR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSQR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HSQR_RESERVED1_SHIFT))

#define  HIPWM7_HSQR_QUIWIDTH_MASK 0xffffff
#define  HIPWM7_HSQR_QUIWIDTH_SHIFT 0
#define  HIPWM7_HSQR_QUIWIDTH_MASK_SHIFT(reg) (((reg) & HIPWM7_HSQR_QUIWIDTH_MASK) >> HIPWM7_HSQR_QUIWIDTH_SHIFT)
#define  HIPWM7_HSQR_QUIWIDTH_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HSQR_QUIWIDTH_MASK) | (((uint32_t)val) << HIPWM7_HSQR_QUIWIDTH_SHIFT))

//====================================================================
//Register: HiPWM PEC Results Register (PRRA)
/** \brief Pixel Edge Count valid at end of image interrupt*/
//====================================================================

#define  HIPWM7_PRRA_PEC_VALUE_MASK 0xffffffff
#define  HIPWM7_PRRA_PEC_VALUE_SHIFT 0
#define  HIPWM7_PRRA_PEC_VALUE_MASK_SHIFT(reg) (((reg) & HIPWM7_PRRA_PEC_VALUE_MASK) >> HIPWM7_PRRA_PEC_VALUE_SHIFT)
#define  HIPWM7_PRRA_PEC_VALUE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_PRRA_PEC_VALUE_MASK) | (((uint32_t)val) << HIPWM7_PRRA_PEC_VALUE_SHIFT))

//====================================================================
//Register: HiPWM PIG Edge Pixel Value Register (HPPVR)
/** \brief Pixel Insertion Generator (PIG) leading edge pixel pulse train value*/
//====================================================================

#define  HIPWM7_HPPVR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPPVR_RESERVED1_SHIFT 16
#define  HIPWM7_HPPVR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPVR_RESERVED1_MASK) >> HIPWM7_HPPVR_RESERVED1_SHIFT)
#define  HIPWM7_HPPVR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPVR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPPVR_RESERVED1_SHIFT))

#define  HIPWM7_HPPVR_PIGPTVAL_MASK 0xffff
#define  HIPWM7_HPPVR_PIGPTVAL_SHIFT 0
#define  HIPWM7_HPPVR_PIGPTVAL_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPVR_PIGPTVAL_MASK) >> HIPWM7_HPPVR_PIGPTVAL_SHIFT)
#define  HIPWM7_HPPVR_PIGPTVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPVR_PIGPTVAL_MASK) | (((uint32_t)val) << HIPWM7_HPPVR_PIGPTVAL_SHIFT))

//====================================================================
//Register: HiPWM PIG Size Register (HPSR)
/** \brief Pixel Insertion Generation (PIG) Pixel Size*/
//====================================================================

#define  HIPWM7_HPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPSR_RESERVED1_SHIFT 16
#define  HIPWM7_HPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPSR_RESERVED1_MASK) >> HIPWM7_HPSR_RESERVED1_SHIFT)
#define  HIPWM7_HPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPSR_RESERVED1_SHIFT))

#define  HIPWM7_HPSR_PIGPIXSZ_MASK 0xffff
#define  HIPWM7_HPSR_PIGPIXSZ_SHIFT 0
#define  HIPWM7_HPSR_PIGPIXSZ_MASK_SHIFT(reg) (((reg) & HIPWM7_HPSR_PIGPIXSZ_MASK) >> HIPWM7_HPSR_PIGPIXSZ_SHIFT)
#define  HIPWM7_HPSR_PIGPIXSZ_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPSR_PIGPIXSZ_MASK) | (((uint32_t)val) << HIPWM7_HPSR_PIGPIXSZ_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Count Register (HPCR)
/** \brief Pixel Insertion Generation (PIG) Pixel Count per line*/
//====================================================================

#define  HIPWM7_HPCR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPCR_RESERVED1_SHIFT 16
#define  HIPWM7_HPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPCR_RESERVED1_MASK) >> HIPWM7_HPCR_RESERVED1_SHIFT)
#define  HIPWM7_HPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPCR_RESERVED1_SHIFT))

#define  HIPWM7_HPCR_PIGPIXCNT_MASK 0xffff
#define  HIPWM7_HPCR_PIGPIXCNT_SHIFT 0
#define  HIPWM7_HPCR_PIGPIXCNT_MASK_SHIFT(reg) (((reg) & HIPWM7_HPCR_PIGPIXCNT_MASK) >> HIPWM7_HPCR_PIGPIXCNT_SHIFT)
#define  HIPWM7_HPCR_PIGPIXCNT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPCR_PIGPIXCNT_MASK) | (((uint32_t)val) << HIPWM7_HPCR_PIGPIXCNT_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Spacing Register (HPPSR)
//====================================================================

#define  HIPWM7_HPPSR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPPSR_RESERVED1_SHIFT 16
#define  HIPWM7_HPPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPSR_RESERVED1_MASK) >> HIPWM7_HPPSR_RESERVED1_SHIFT)
#define  HIPWM7_HPPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPPSR_RESERVED1_SHIFT))

#define  HIPWM7_HPPSR_PIGPIXSPACE_MASK 0xffff
#define  HIPWM7_HPPSR_PIGPIXSPACE_SHIFT 0
#define  HIPWM7_HPPSR_PIGPIXSPACE_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPSR_PIGPIXSPACE_MASK) >> HIPWM7_HPPSR_PIGPIXSPACE_SHIFT)
#define  HIPWM7_HPPSR_PIGPIXSPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPSR_PIGPIXSPACE_MASK) | (((uint32_t)val) << HIPWM7_HPPSR_PIGPIXSPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Spacing Register (HPLSR)
/** \brief Pixel Insertion Generation (PIG) spacing between pixels in lines*/
//====================================================================

#define  HIPWM7_HPLSR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPLSR_RESERVED1_SHIFT 16
#define  HIPWM7_HPLSR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPLSR_RESERVED1_MASK) >> HIPWM7_HPLSR_RESERVED1_SHIFT)
#define  HIPWM7_HPLSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPLSR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPLSR_RESERVED1_SHIFT))

#define  HIPWM7_HPLSR_PIGLINESPACE_MASK 0xffff
#define  HIPWM7_HPLSR_PIGLINESPACE_SHIFT 0
#define  HIPWM7_HPLSR_PIGLINESPACE_MASK_SHIFT(reg) (((reg) & HIPWM7_HPLSR_PIGLINESPACE_MASK) >> HIPWM7_HPLSR_PIGLINESPACE_SHIFT)
#define  HIPWM7_HPLSR_PIGLINESPACE_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPLSR_PIGLINESPACE_MASK) | (((uint32_t)val) << HIPWM7_HPLSR_PIGLINESPACE_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Even Register (HPPOER)
/** \brief Pixel Insertion Generation (PIG) Pixel even line offset pixels in HiPWM clock cycles. This value will be used for the first PIG generated line of pixels and the odd line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM7_HPPOER_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPPOER_RESERVED1_SHIFT 16
#define  HIPWM7_HPPOER_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPOER_RESERVED1_MASK) >> HIPWM7_HPPOER_RESERVED1_SHIFT)
#define  HIPWM7_HPPOER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPOER_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPPOER_RESERVED1_SHIFT))

#define  HIPWM7_HPPOER_PIGOFFSETEVEN_MASK 0xffff
#define  HIPWM7_HPPOER_PIGOFFSETEVEN_SHIFT 0
#define  HIPWM7_HPPOER_PIGOFFSETEVEN_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPOER_PIGOFFSETEVEN_MASK) >> HIPWM7_HPPOER_PIGOFFSETEVEN_SHIFT)
#define  HIPWM7_HPPOER_PIGOFFSETEVEN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPOER_PIGOFFSETEVEN_MASK) | (((uint32_t)val) << HIPWM7_HPPOER_PIGOFFSETEVEN_SHIFT))

//====================================================================
//Register: HiPWM PIG Pixel Offset Odd Register (HPPOOR)
/** \brief Pixel Insertion Generation (PIG) Pixel odd line offset pixels in HiPWM clock cycles. This value will be used for the second PIG generated line of pixels and the even line value will be used for the next generated line of pixels. The hardware will toggle between the even and odd line value.
        <br>
        Note that if the line spacing register is set to 1 the following sequence would occur: The first PIG generated line of pixels would use the even line offset value, the subsequent line would not generate any PIG pixels, and the next line would use the odd line offset value. This sequence would repeat for the length of the page.*/
//====================================================================

#define  HIPWM7_HPPOOR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPPOOR_RESERVED1_SHIFT 16
#define  HIPWM7_HPPOOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPOOR_RESERVED1_MASK) >> HIPWM7_HPPOOR_RESERVED1_SHIFT)
#define  HIPWM7_HPPOOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPOOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPPOOR_RESERVED1_SHIFT))

#define  HIPWM7_HPPOOR_PIGOFFSETODD_MASK 0xffff
#define  HIPWM7_HPPOOR_PIGOFFSETODD_SHIFT 0
#define  HIPWM7_HPPOOR_PIGOFFSETODD_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPOOR_PIGOFFSETODD_MASK) >> HIPWM7_HPPOOR_PIGOFFSETODD_SHIFT)
#define  HIPWM7_HPPOOR_PIGOFFSETODD_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPOOR_PIGOFFSETODD_MASK) | (((uint32_t)val) << HIPWM7_HPPOOR_PIGOFFSETODD_SHIFT))

//====================================================================
//Register: HiPWM PIG Line Offset Register (HPPLOR)
/** \brief Pixel Insertion Generation (PIG) Line offset pixels in lines*/
//====================================================================

#define  HIPWM7_HPPLOR_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HPPLOR_RESERVED1_SHIFT 16
#define  HIPWM7_HPPLOR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPLOR_RESERVED1_MASK) >> HIPWM7_HPPLOR_RESERVED1_SHIFT)
#define  HIPWM7_HPPLOR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPLOR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HPPLOR_RESERVED1_SHIFT))

#define  HIPWM7_HPPLOR_PIGLINEOFFSET_MASK 0xffff
#define  HIPWM7_HPPLOR_PIGLINEOFFSET_SHIFT 0
#define  HIPWM7_HPPLOR_PIGLINEOFFSET_MASK_SHIFT(reg) (((reg) & HIPWM7_HPPLOR_PIGLINEOFFSET_MASK) >> HIPWM7_HPPLOR_PIGLINEOFFSET_SHIFT)
#define  HIPWM7_HPPLOR_PIGLINEOFFSET_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HPPLOR_PIGLINEOFFSET_MASK) | (((uint32_t)val) << HIPWM7_HPPLOR_PIGLINEOFFSET_SHIFT))

//====================================================================
//Register: HiPWM CRC Register (HCRC)
/** \brief Contents of the 32-bit CRC generator. The CRC generator uses the Ethernet 32-bit CRC algorithm.
        The CRC generator is reset at power up or by toggling the CrcRst bit in the HiPWM Configuration Register.
        This register should only be read when not actively printing in order to obtain a stable value.*/
//====================================================================

#define  HIPWM7_HCRC_CRC_MASK 0xffffffff
#define  HIPWM7_HCRC_CRC_SHIFT 0
#define  HIPWM7_HCRC_CRC_MASK_SHIFT(reg) (((reg) & HIPWM7_HCRC_CRC_MASK) >> HIPWM7_HCRC_CRC_SHIFT)
#define  HIPWM7_HCRC_CRC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HCRC_CRC_MASK) | (((uint32_t)val) << HIPWM7_HCRC_CRC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Configuration Register (HBCR)
/** \brief The register sets the length, in HiPWM clock cycles, each HBAT entry is used. This length applies to all
        segments.*/
//====================================================================

#define  HIPWM7_HBCR_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HBCR_RESERVED1_SHIFT 12
#define  HIPWM7_HBCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBCR_RESERVED1_MASK) >> HIPWM7_HBCR_RESERVED1_SHIFT)
#define  HIPWM7_HBCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBCR_RESERVED1_SHIFT))

#define  HIPWM7_HBCR_SAMPLESPERSEG_MASK 0xfff
#define  HIPWM7_HBCR_SAMPLESPERSEG_SHIFT 0
#define  HIPWM7_HBCR_SAMPLESPERSEG_MASK_SHIFT(reg) (((reg) & HIPWM7_HBCR_SAMPLESPERSEG_MASK) >> HIPWM7_HBCR_SAMPLESPERSEG_SHIFT)
#define  HIPWM7_HBCR_SAMPLESPERSEG_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBCR_SAMPLESPERSEG_MASK) | (((uint32_t)val) << HIPWM7_HBCR_SAMPLESPERSEG_SHIFT))

//====================================================================
//Register: HiPWM Left Side BENDER Default Register (HLBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits.
        <br>
        The BENDER Default value is calculated as follows:
        <br>
        BENDER_default_value = (HiPS_Width x Pixel_freq x Num_taps) / HiPS_freq
        <br>
        where the HiPS_Width = 16, HiPS_freq = 2.5GHz, Pixel_freq is the desired video frequency, and Num_taps
        is either 32 or 64. Num_taps is controlled by the PTwidth bit in the HiPWM Configuration register.
        <br>
        Example: Pixel Frequency = 25.02MHz, Num_taps = 64
        <br>
        real BENDER_default_value = (16 x 25.020e6 x 64)/2.5e9 = 10.248192
        <br>
        hex BENDER_default_value = dec2hex(10.248192 x 2^19) = 0x51FC4C
        <br>
        The Left Side BENDER Default Register value is used when printing from left to right.
        <br>*/
//====================================================================

#define  HIPWM7_HLBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM7_HLBDR_RESERVED1_SHIFT 25
#define  HIPWM7_HLBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HLBDR_RESERVED1_MASK) >> HIPWM7_HLBDR_RESERVED1_SHIFT)
#define  HIPWM7_HLBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HLBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HLBDR_RESERVED1_SHIFT))

#define  HIPWM7_HLBDR_LBDRINT_MASK 0x1f80000
#define  HIPWM7_HLBDR_LBDRINT_SHIFT 19
#define  HIPWM7_HLBDR_LBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM7_HLBDR_LBDRINT_MASK) >> HIPWM7_HLBDR_LBDRINT_SHIFT)
#define  HIPWM7_HLBDR_LBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HLBDR_LBDRINT_MASK) | (((uint32_t)val) << HIPWM7_HLBDR_LBDRINT_SHIFT))

#define  HIPWM7_HLBDR_LBDRFRAC_MASK 0x7ffff
#define  HIPWM7_HLBDR_LBDRFRAC_SHIFT 0
#define  HIPWM7_HLBDR_LBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HLBDR_LBDRFRAC_MASK) >> HIPWM7_HLBDR_LBDRFRAC_SHIFT)
#define  HIPWM7_HLBDR_LBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HLBDR_LBDRFRAC_MASK) | (((uint32_t)val) << HIPWM7_HLBDR_LBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM Right Side BENDER Default Register (HRBDR)
/** \brief BENDER controls the pulse train increment value sent to HiPS Pulse Train Generator.
        The BENDER default value represents a positive 25-bit fractional number consisting of 19
        fractional and 6 integer bits. It's value is calculated
        in the same manner as the HiPWM Left Side BENDER Default.
        <br>
        The Right Side BENDER Default Register value is used when printing from right to left.
        It is only used if the DualMargin bit is set in the HiPWM Configuration
        Register.*/
//====================================================================

#define  HIPWM7_HRBDR_RESERVED1_MASK 0xfe000000
#define  HIPWM7_HRBDR_RESERVED1_SHIFT 25
#define  HIPWM7_HRBDR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HRBDR_RESERVED1_MASK) >> HIPWM7_HRBDR_RESERVED1_SHIFT)
#define  HIPWM7_HRBDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HRBDR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HRBDR_RESERVED1_SHIFT))

#define  HIPWM7_HRBDR_RBDRINT_MASK 0x1f80000
#define  HIPWM7_HRBDR_RBDRINT_SHIFT 19
#define  HIPWM7_HRBDR_RBDRINT_MASK_SHIFT(reg) (((reg) & HIPWM7_HRBDR_RBDRINT_MASK) >> HIPWM7_HRBDR_RBDRINT_SHIFT)
#define  HIPWM7_HRBDR_RBDRINT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HRBDR_RBDRINT_MASK) | (((uint32_t)val) << HIPWM7_HRBDR_RBDRINT_SHIFT))

#define  HIPWM7_HRBDR_RBDRFRAC_MASK 0x7ffff
#define  HIPWM7_HRBDR_RBDRFRAC_SHIFT 0
#define  HIPWM7_HRBDR_RBDRFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HRBDR_RBDRFRAC_MASK) >> HIPWM7_HRBDR_RBDRFRAC_SHIFT)
#define  HIPWM7_HRBDR_RBDRFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HRBDR_RBDRFRAC_MASK) | (((uint32_t)val) << HIPWM7_HRBDR_RBDRFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Normalization Configuration Register (HBNCR)
/** \brief It's possible for the HiPS Pulse Train quantization to cause similar errors in the same locations. 
        If they line up with some particular printed patterns it may become visible. To break up any patterning,
        injection of some noise with the LFSR could cause the errors to no longer be aligned or periodic.*/
//====================================================================

#define  HIPWM7_HBNCR_RESERVED1_MASK 0xffffff80
#define  HIPWM7_HBNCR_RESERVED1_SHIFT 7
#define  HIPWM7_HBNCR_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCR_RESERVED1_MASK) >> HIPWM7_HBNCR_RESERVED1_SHIFT)
#define  HIPWM7_HBNCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCR_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBNCR_RESERVED1_SHIFT))

#define  HIPWM7_HBNCR_LFSRINITCNTL_MASK 0x40
#define  HIPWM7_HBNCR_LFSRINITCNTL_SHIFT 6
#define  HIPWM7_HBNCR_LFSRINITCNTL_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCR_LFSRINITCNTL_MASK) >> HIPWM7_HBNCR_LFSRINITCNTL_SHIFT)
#define  HIPWM7_HBNCR_LFSRINITCNTL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCR_LFSRINITCNTL_MASK) | (((uint32_t)val) << HIPWM7_HBNCR_LFSRINITCNTL_SHIFT))

#define  HIPWM7_HBNCR_BENDERLFSREN_MASK 0x20
#define  HIPWM7_HBNCR_BENDERLFSREN_SHIFT 5
#define  HIPWM7_HBNCR_BENDERLFSREN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCR_BENDERLFSREN_MASK) >> HIPWM7_HBNCR_BENDERLFSREN_SHIFT)
#define  HIPWM7_HBNCR_BENDERLFSREN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCR_BENDERLFSREN_MASK) | (((uint32_t)val) << HIPWM7_HBNCR_BENDERLFSREN_SHIFT))

#define  HIPWM7_HBNCR_BENDERLFSRMASK_MASK 0x1f
#define  HIPWM7_HBNCR_BENDERLFSRMASK_SHIFT 0
#define  HIPWM7_HBNCR_BENDERLFSRMASK_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCR_BENDERLFSRMASK_MASK) >> HIPWM7_HBNCR_BENDERLFSRMASK_SHIFT)
#define  HIPWM7_HBNCR_BENDERLFSRMASK_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCR_BENDERLFSRMASK_MASK) | (((uint32_t)val) << HIPWM7_HBNCR_BENDERLFSRMASK_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Initialization Register (HBNINIT)
/** \brief Value used to initialize the BENDER LFSR at the first pixel of an image. This
        register should only be written when the HiPWM is disabled.*/
//====================================================================

#define  HIPWM7_HBNINIT_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HBNINIT_RESERVED1_SHIFT 16
#define  HIPWM7_HBNINIT_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNINIT_RESERVED1_MASK) >> HIPWM7_HBNINIT_RESERVED1_SHIFT)
#define  HIPWM7_HBNINIT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNINIT_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBNINIT_RESERVED1_SHIFT))

#define  HIPWM7_HBNINIT_BENDERLFSRINIT_MASK 0xffff
#define  HIPWM7_HBNINIT_BENDERLFSRINIT_SHIFT 0
#define  HIPWM7_HBNINIT_BENDERLFSRINIT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNINIT_BENDERLFSRINIT_MASK) >> HIPWM7_HBNINIT_BENDERLFSRINIT_SHIFT)
#define  HIPWM7_HBNINIT_BENDERLFSRINIT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNINIT_BENDERLFSRINIT_MASK) | (((uint32_t)val) << HIPWM7_HBNINIT_BENDERLFSRINIT_SHIFT))

//====================================================================
//Register: HiPWM BENDER LFSR Current Value Register (HBNCV)
//====================================================================

#define  HIPWM7_HBNCV_RESERVED1_MASK 0xffff0000
#define  HIPWM7_HBNCV_RESERVED1_SHIFT 16
#define  HIPWM7_HBNCV_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCV_RESERVED1_MASK) >> HIPWM7_HBNCV_RESERVED1_SHIFT)
#define  HIPWM7_HBNCV_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCV_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBNCV_RESERVED1_SHIFT))

#define  HIPWM7_HBNCV_BENDERLFSRVAL_MASK 0xffff
#define  HIPWM7_HBNCV_BENDERLFSRVAL_SHIFT 0
#define  HIPWM7_HBNCV_BENDERLFSRVAL_MASK_SHIFT(reg) (((reg) & HIPWM7_HBNCV_BENDERLFSRVAL_MASK) >> HIPWM7_HBNCV_BENDERLFSRVAL_SHIFT)
#define  HIPWM7_HBNCV_BENDERLFSRVAL_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBNCV_BENDERLFSRVAL_MASK) | (((uint32_t)val) << HIPWM7_HBNCV_BENDERLFSRVAL_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 1 of 64) (HBAT0)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 1 of 64)*/
//====================================================================

#define  HIPWM7_HBAT0_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT0_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT0_RESERVED1_MASK) >> HIPWM7_HBAT0_RESERVED1_SHIFT)
#define  HIPWM7_HBAT0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT0_RESERVED1_SHIFT))

#define  HIPWM7_HBAT0_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT0_BATLAST_SHIFT 19
#define  HIPWM7_HBAT0_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT0_BATLAST_MASK) >> HIPWM7_HBAT0_BATLAST_SHIFT)
#define  HIPWM7_HBAT0_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT0_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT0_BATLAST_SHIFT))

#define  HIPWM7_HBAT0_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT0_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT0_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT0_BATSIGN_MASK) >> HIPWM7_HBAT0_BATSIGN_SHIFT)
#define  HIPWM7_HBAT0_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT0_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT0_BATSIGN_SHIFT))

#define  HIPWM7_HBAT0_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT0_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT0_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT0_BATSHIFT_MASK) >> HIPWM7_HBAT0_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT0_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT0_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT0_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT0_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT0_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT0_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT0_BATFRAC_MASK) >> HIPWM7_HBAT0_BATFRAC_SHIFT)
#define  HIPWM7_HBAT0_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT0_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT0_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 2 of 64) (HBAT1)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 2 of 64)*/
//====================================================================

#define  HIPWM7_HBAT1_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT1_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT1_RESERVED1_MASK) >> HIPWM7_HBAT1_RESERVED1_SHIFT)
#define  HIPWM7_HBAT1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT1_RESERVED1_SHIFT))

#define  HIPWM7_HBAT1_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT1_BATLAST_SHIFT 19
#define  HIPWM7_HBAT1_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT1_BATLAST_MASK) >> HIPWM7_HBAT1_BATLAST_SHIFT)
#define  HIPWM7_HBAT1_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT1_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT1_BATLAST_SHIFT))

#define  HIPWM7_HBAT1_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT1_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT1_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT1_BATSIGN_MASK) >> HIPWM7_HBAT1_BATSIGN_SHIFT)
#define  HIPWM7_HBAT1_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT1_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT1_BATSIGN_SHIFT))

#define  HIPWM7_HBAT1_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT1_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT1_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT1_BATSHIFT_MASK) >> HIPWM7_HBAT1_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT1_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT1_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT1_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT1_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT1_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT1_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT1_BATFRAC_MASK) >> HIPWM7_HBAT1_BATFRAC_SHIFT)
#define  HIPWM7_HBAT1_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT1_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT1_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 3 of 64) (HBAT2)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 3 of 64)*/
//====================================================================

#define  HIPWM7_HBAT2_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT2_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT2_RESERVED1_MASK) >> HIPWM7_HBAT2_RESERVED1_SHIFT)
#define  HIPWM7_HBAT2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT2_RESERVED1_SHIFT))

#define  HIPWM7_HBAT2_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT2_BATLAST_SHIFT 19
#define  HIPWM7_HBAT2_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT2_BATLAST_MASK) >> HIPWM7_HBAT2_BATLAST_SHIFT)
#define  HIPWM7_HBAT2_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT2_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT2_BATLAST_SHIFT))

#define  HIPWM7_HBAT2_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT2_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT2_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT2_BATSIGN_MASK) >> HIPWM7_HBAT2_BATSIGN_SHIFT)
#define  HIPWM7_HBAT2_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT2_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT2_BATSIGN_SHIFT))

#define  HIPWM7_HBAT2_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT2_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT2_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT2_BATSHIFT_MASK) >> HIPWM7_HBAT2_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT2_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT2_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT2_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT2_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT2_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT2_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT2_BATFRAC_MASK) >> HIPWM7_HBAT2_BATFRAC_SHIFT)
#define  HIPWM7_HBAT2_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT2_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT2_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 4 of 64) (HBAT3)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 4 of 64)*/
//====================================================================

#define  HIPWM7_HBAT3_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT3_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT3_RESERVED1_MASK) >> HIPWM7_HBAT3_RESERVED1_SHIFT)
#define  HIPWM7_HBAT3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT3_RESERVED1_SHIFT))

#define  HIPWM7_HBAT3_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT3_BATLAST_SHIFT 19
#define  HIPWM7_HBAT3_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT3_BATLAST_MASK) >> HIPWM7_HBAT3_BATLAST_SHIFT)
#define  HIPWM7_HBAT3_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT3_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT3_BATLAST_SHIFT))

#define  HIPWM7_HBAT3_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT3_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT3_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT3_BATSIGN_MASK) >> HIPWM7_HBAT3_BATSIGN_SHIFT)
#define  HIPWM7_HBAT3_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT3_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT3_BATSIGN_SHIFT))

#define  HIPWM7_HBAT3_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT3_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT3_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT3_BATSHIFT_MASK) >> HIPWM7_HBAT3_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT3_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT3_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT3_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT3_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT3_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT3_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT3_BATFRAC_MASK) >> HIPWM7_HBAT3_BATFRAC_SHIFT)
#define  HIPWM7_HBAT3_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT3_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT3_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 5 of 64) (HBAT4)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 5 of 64)*/
//====================================================================

#define  HIPWM7_HBAT4_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT4_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT4_RESERVED1_MASK) >> HIPWM7_HBAT4_RESERVED1_SHIFT)
#define  HIPWM7_HBAT4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT4_RESERVED1_SHIFT))

#define  HIPWM7_HBAT4_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT4_BATLAST_SHIFT 19
#define  HIPWM7_HBAT4_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT4_BATLAST_MASK) >> HIPWM7_HBAT4_BATLAST_SHIFT)
#define  HIPWM7_HBAT4_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT4_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT4_BATLAST_SHIFT))

#define  HIPWM7_HBAT4_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT4_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT4_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT4_BATSIGN_MASK) >> HIPWM7_HBAT4_BATSIGN_SHIFT)
#define  HIPWM7_HBAT4_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT4_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT4_BATSIGN_SHIFT))

#define  HIPWM7_HBAT4_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT4_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT4_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT4_BATSHIFT_MASK) >> HIPWM7_HBAT4_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT4_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT4_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT4_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT4_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT4_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT4_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT4_BATFRAC_MASK) >> HIPWM7_HBAT4_BATFRAC_SHIFT)
#define  HIPWM7_HBAT4_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT4_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT4_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 6 of 64) (HBAT5)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 6 of 64)*/
//====================================================================

#define  HIPWM7_HBAT5_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT5_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT5_RESERVED1_MASK) >> HIPWM7_HBAT5_RESERVED1_SHIFT)
#define  HIPWM7_HBAT5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT5_RESERVED1_SHIFT))

#define  HIPWM7_HBAT5_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT5_BATLAST_SHIFT 19
#define  HIPWM7_HBAT5_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT5_BATLAST_MASK) >> HIPWM7_HBAT5_BATLAST_SHIFT)
#define  HIPWM7_HBAT5_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT5_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT5_BATLAST_SHIFT))

#define  HIPWM7_HBAT5_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT5_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT5_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT5_BATSIGN_MASK) >> HIPWM7_HBAT5_BATSIGN_SHIFT)
#define  HIPWM7_HBAT5_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT5_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT5_BATSIGN_SHIFT))

#define  HIPWM7_HBAT5_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT5_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT5_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT5_BATSHIFT_MASK) >> HIPWM7_HBAT5_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT5_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT5_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT5_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT5_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT5_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT5_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT5_BATFRAC_MASK) >> HIPWM7_HBAT5_BATFRAC_SHIFT)
#define  HIPWM7_HBAT5_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT5_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT5_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 7 of 64) (HBAT6)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 7 of 64)*/
//====================================================================

#define  HIPWM7_HBAT6_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT6_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT6_RESERVED1_MASK) >> HIPWM7_HBAT6_RESERVED1_SHIFT)
#define  HIPWM7_HBAT6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT6_RESERVED1_SHIFT))

#define  HIPWM7_HBAT6_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT6_BATLAST_SHIFT 19
#define  HIPWM7_HBAT6_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT6_BATLAST_MASK) >> HIPWM7_HBAT6_BATLAST_SHIFT)
#define  HIPWM7_HBAT6_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT6_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT6_BATLAST_SHIFT))

#define  HIPWM7_HBAT6_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT6_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT6_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT6_BATSIGN_MASK) >> HIPWM7_HBAT6_BATSIGN_SHIFT)
#define  HIPWM7_HBAT6_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT6_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT6_BATSIGN_SHIFT))

#define  HIPWM7_HBAT6_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT6_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT6_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT6_BATSHIFT_MASK) >> HIPWM7_HBAT6_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT6_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT6_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT6_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT6_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT6_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT6_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT6_BATFRAC_MASK) >> HIPWM7_HBAT6_BATFRAC_SHIFT)
#define  HIPWM7_HBAT6_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT6_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT6_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 8 of 64) (HBAT7)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 8 of 64)*/
//====================================================================

#define  HIPWM7_HBAT7_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT7_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT7_RESERVED1_MASK) >> HIPWM7_HBAT7_RESERVED1_SHIFT)
#define  HIPWM7_HBAT7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT7_RESERVED1_SHIFT))

#define  HIPWM7_HBAT7_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT7_BATLAST_SHIFT 19
#define  HIPWM7_HBAT7_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT7_BATLAST_MASK) >> HIPWM7_HBAT7_BATLAST_SHIFT)
#define  HIPWM7_HBAT7_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT7_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT7_BATLAST_SHIFT))

#define  HIPWM7_HBAT7_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT7_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT7_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT7_BATSIGN_MASK) >> HIPWM7_HBAT7_BATSIGN_SHIFT)
#define  HIPWM7_HBAT7_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT7_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT7_BATSIGN_SHIFT))

#define  HIPWM7_HBAT7_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT7_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT7_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT7_BATSHIFT_MASK) >> HIPWM7_HBAT7_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT7_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT7_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT7_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT7_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT7_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT7_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT7_BATFRAC_MASK) >> HIPWM7_HBAT7_BATFRAC_SHIFT)
#define  HIPWM7_HBAT7_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT7_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT7_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 9 of 64) (HBAT8)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 9 of 64)*/
//====================================================================

#define  HIPWM7_HBAT8_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT8_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT8_RESERVED1_MASK) >> HIPWM7_HBAT8_RESERVED1_SHIFT)
#define  HIPWM7_HBAT8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT8_RESERVED1_SHIFT))

#define  HIPWM7_HBAT8_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT8_BATLAST_SHIFT 19
#define  HIPWM7_HBAT8_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT8_BATLAST_MASK) >> HIPWM7_HBAT8_BATLAST_SHIFT)
#define  HIPWM7_HBAT8_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT8_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT8_BATLAST_SHIFT))

#define  HIPWM7_HBAT8_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT8_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT8_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT8_BATSIGN_MASK) >> HIPWM7_HBAT8_BATSIGN_SHIFT)
#define  HIPWM7_HBAT8_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT8_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT8_BATSIGN_SHIFT))

#define  HIPWM7_HBAT8_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT8_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT8_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT8_BATSHIFT_MASK) >> HIPWM7_HBAT8_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT8_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT8_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT8_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT8_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT8_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT8_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT8_BATFRAC_MASK) >> HIPWM7_HBAT8_BATFRAC_SHIFT)
#define  HIPWM7_HBAT8_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT8_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT8_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 10 of 64) (HBAT9)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 10 of 64)*/
//====================================================================

#define  HIPWM7_HBAT9_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT9_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT9_RESERVED1_MASK) >> HIPWM7_HBAT9_RESERVED1_SHIFT)
#define  HIPWM7_HBAT9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT9_RESERVED1_SHIFT))

#define  HIPWM7_HBAT9_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT9_BATLAST_SHIFT 19
#define  HIPWM7_HBAT9_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT9_BATLAST_MASK) >> HIPWM7_HBAT9_BATLAST_SHIFT)
#define  HIPWM7_HBAT9_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT9_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT9_BATLAST_SHIFT))

#define  HIPWM7_HBAT9_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT9_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT9_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT9_BATSIGN_MASK) >> HIPWM7_HBAT9_BATSIGN_SHIFT)
#define  HIPWM7_HBAT9_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT9_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT9_BATSIGN_SHIFT))

#define  HIPWM7_HBAT9_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT9_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT9_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT9_BATSHIFT_MASK) >> HIPWM7_HBAT9_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT9_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT9_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT9_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT9_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT9_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT9_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT9_BATFRAC_MASK) >> HIPWM7_HBAT9_BATFRAC_SHIFT)
#define  HIPWM7_HBAT9_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT9_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT9_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 11 of 64) (HBAT10)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 11 of 64)*/
//====================================================================

#define  HIPWM7_HBAT10_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT10_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT10_RESERVED1_MASK) >> HIPWM7_HBAT10_RESERVED1_SHIFT)
#define  HIPWM7_HBAT10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT10_RESERVED1_SHIFT))

#define  HIPWM7_HBAT10_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT10_BATLAST_SHIFT 19
#define  HIPWM7_HBAT10_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT10_BATLAST_MASK) >> HIPWM7_HBAT10_BATLAST_SHIFT)
#define  HIPWM7_HBAT10_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT10_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT10_BATLAST_SHIFT))

#define  HIPWM7_HBAT10_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT10_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT10_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT10_BATSIGN_MASK) >> HIPWM7_HBAT10_BATSIGN_SHIFT)
#define  HIPWM7_HBAT10_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT10_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT10_BATSIGN_SHIFT))

#define  HIPWM7_HBAT10_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT10_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT10_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT10_BATSHIFT_MASK) >> HIPWM7_HBAT10_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT10_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT10_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT10_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT10_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT10_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT10_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT10_BATFRAC_MASK) >> HIPWM7_HBAT10_BATFRAC_SHIFT)
#define  HIPWM7_HBAT10_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT10_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT10_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 12 of 64) (HBAT11)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 12 of 64)*/
//====================================================================

#define  HIPWM7_HBAT11_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT11_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT11_RESERVED1_MASK) >> HIPWM7_HBAT11_RESERVED1_SHIFT)
#define  HIPWM7_HBAT11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT11_RESERVED1_SHIFT))

#define  HIPWM7_HBAT11_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT11_BATLAST_SHIFT 19
#define  HIPWM7_HBAT11_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT11_BATLAST_MASK) >> HIPWM7_HBAT11_BATLAST_SHIFT)
#define  HIPWM7_HBAT11_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT11_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT11_BATLAST_SHIFT))

#define  HIPWM7_HBAT11_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT11_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT11_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT11_BATSIGN_MASK) >> HIPWM7_HBAT11_BATSIGN_SHIFT)
#define  HIPWM7_HBAT11_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT11_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT11_BATSIGN_SHIFT))

#define  HIPWM7_HBAT11_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT11_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT11_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT11_BATSHIFT_MASK) >> HIPWM7_HBAT11_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT11_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT11_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT11_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT11_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT11_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT11_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT11_BATFRAC_MASK) >> HIPWM7_HBAT11_BATFRAC_SHIFT)
#define  HIPWM7_HBAT11_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT11_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT11_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 13 of 64) (HBAT12)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 13 of 64)*/
//====================================================================

#define  HIPWM7_HBAT12_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT12_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT12_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT12_RESERVED1_MASK) >> HIPWM7_HBAT12_RESERVED1_SHIFT)
#define  HIPWM7_HBAT12_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT12_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT12_RESERVED1_SHIFT))

#define  HIPWM7_HBAT12_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT12_BATLAST_SHIFT 19
#define  HIPWM7_HBAT12_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT12_BATLAST_MASK) >> HIPWM7_HBAT12_BATLAST_SHIFT)
#define  HIPWM7_HBAT12_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT12_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT12_BATLAST_SHIFT))

#define  HIPWM7_HBAT12_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT12_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT12_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT12_BATSIGN_MASK) >> HIPWM7_HBAT12_BATSIGN_SHIFT)
#define  HIPWM7_HBAT12_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT12_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT12_BATSIGN_SHIFT))

#define  HIPWM7_HBAT12_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT12_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT12_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT12_BATSHIFT_MASK) >> HIPWM7_HBAT12_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT12_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT12_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT12_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT12_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT12_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT12_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT12_BATFRAC_MASK) >> HIPWM7_HBAT12_BATFRAC_SHIFT)
#define  HIPWM7_HBAT12_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT12_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT12_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 14 of 64) (HBAT13)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 14 of 64)*/
//====================================================================

#define  HIPWM7_HBAT13_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT13_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT13_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT13_RESERVED1_MASK) >> HIPWM7_HBAT13_RESERVED1_SHIFT)
#define  HIPWM7_HBAT13_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT13_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT13_RESERVED1_SHIFT))

#define  HIPWM7_HBAT13_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT13_BATLAST_SHIFT 19
#define  HIPWM7_HBAT13_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT13_BATLAST_MASK) >> HIPWM7_HBAT13_BATLAST_SHIFT)
#define  HIPWM7_HBAT13_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT13_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT13_BATLAST_SHIFT))

#define  HIPWM7_HBAT13_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT13_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT13_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT13_BATSIGN_MASK) >> HIPWM7_HBAT13_BATSIGN_SHIFT)
#define  HIPWM7_HBAT13_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT13_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT13_BATSIGN_SHIFT))

#define  HIPWM7_HBAT13_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT13_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT13_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT13_BATSHIFT_MASK) >> HIPWM7_HBAT13_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT13_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT13_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT13_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT13_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT13_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT13_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT13_BATFRAC_MASK) >> HIPWM7_HBAT13_BATFRAC_SHIFT)
#define  HIPWM7_HBAT13_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT13_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT13_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 15 of 64) (HBAT14)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 15 of 64)*/
//====================================================================

#define  HIPWM7_HBAT14_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT14_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT14_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT14_RESERVED1_MASK) >> HIPWM7_HBAT14_RESERVED1_SHIFT)
#define  HIPWM7_HBAT14_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT14_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT14_RESERVED1_SHIFT))

#define  HIPWM7_HBAT14_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT14_BATLAST_SHIFT 19
#define  HIPWM7_HBAT14_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT14_BATLAST_MASK) >> HIPWM7_HBAT14_BATLAST_SHIFT)
#define  HIPWM7_HBAT14_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT14_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT14_BATLAST_SHIFT))

#define  HIPWM7_HBAT14_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT14_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT14_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT14_BATSIGN_MASK) >> HIPWM7_HBAT14_BATSIGN_SHIFT)
#define  HIPWM7_HBAT14_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT14_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT14_BATSIGN_SHIFT))

#define  HIPWM7_HBAT14_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT14_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT14_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT14_BATSHIFT_MASK) >> HIPWM7_HBAT14_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT14_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT14_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT14_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT14_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT14_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT14_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT14_BATFRAC_MASK) >> HIPWM7_HBAT14_BATFRAC_SHIFT)
#define  HIPWM7_HBAT14_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT14_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT14_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 16 of 64) (HBAT15)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 16 of 64)*/
//====================================================================

#define  HIPWM7_HBAT15_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT15_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT15_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT15_RESERVED1_MASK) >> HIPWM7_HBAT15_RESERVED1_SHIFT)
#define  HIPWM7_HBAT15_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT15_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT15_RESERVED1_SHIFT))

#define  HIPWM7_HBAT15_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT15_BATLAST_SHIFT 19
#define  HIPWM7_HBAT15_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT15_BATLAST_MASK) >> HIPWM7_HBAT15_BATLAST_SHIFT)
#define  HIPWM7_HBAT15_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT15_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT15_BATLAST_SHIFT))

#define  HIPWM7_HBAT15_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT15_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT15_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT15_BATSIGN_MASK) >> HIPWM7_HBAT15_BATSIGN_SHIFT)
#define  HIPWM7_HBAT15_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT15_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT15_BATSIGN_SHIFT))

#define  HIPWM7_HBAT15_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT15_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT15_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT15_BATSHIFT_MASK) >> HIPWM7_HBAT15_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT15_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT15_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT15_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT15_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT15_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT15_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT15_BATFRAC_MASK) >> HIPWM7_HBAT15_BATFRAC_SHIFT)
#define  HIPWM7_HBAT15_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT15_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT15_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 17 of 64) (HBAT16)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 17 of 64)*/
//====================================================================

#define  HIPWM7_HBAT16_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT16_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT16_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT16_RESERVED1_MASK) >> HIPWM7_HBAT16_RESERVED1_SHIFT)
#define  HIPWM7_HBAT16_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT16_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT16_RESERVED1_SHIFT))

#define  HIPWM7_HBAT16_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT16_BATLAST_SHIFT 19
#define  HIPWM7_HBAT16_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT16_BATLAST_MASK) >> HIPWM7_HBAT16_BATLAST_SHIFT)
#define  HIPWM7_HBAT16_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT16_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT16_BATLAST_SHIFT))

#define  HIPWM7_HBAT16_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT16_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT16_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT16_BATSIGN_MASK) >> HIPWM7_HBAT16_BATSIGN_SHIFT)
#define  HIPWM7_HBAT16_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT16_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT16_BATSIGN_SHIFT))

#define  HIPWM7_HBAT16_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT16_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT16_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT16_BATSHIFT_MASK) >> HIPWM7_HBAT16_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT16_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT16_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT16_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT16_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT16_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT16_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT16_BATFRAC_MASK) >> HIPWM7_HBAT16_BATFRAC_SHIFT)
#define  HIPWM7_HBAT16_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT16_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT16_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 18 of 64) (HBAT17)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 18 of 64)*/
//====================================================================

#define  HIPWM7_HBAT17_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT17_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT17_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT17_RESERVED1_MASK) >> HIPWM7_HBAT17_RESERVED1_SHIFT)
#define  HIPWM7_HBAT17_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT17_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT17_RESERVED1_SHIFT))

#define  HIPWM7_HBAT17_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT17_BATLAST_SHIFT 19
#define  HIPWM7_HBAT17_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT17_BATLAST_MASK) >> HIPWM7_HBAT17_BATLAST_SHIFT)
#define  HIPWM7_HBAT17_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT17_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT17_BATLAST_SHIFT))

#define  HIPWM7_HBAT17_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT17_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT17_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT17_BATSIGN_MASK) >> HIPWM7_HBAT17_BATSIGN_SHIFT)
#define  HIPWM7_HBAT17_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT17_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT17_BATSIGN_SHIFT))

#define  HIPWM7_HBAT17_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT17_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT17_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT17_BATSHIFT_MASK) >> HIPWM7_HBAT17_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT17_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT17_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT17_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT17_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT17_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT17_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT17_BATFRAC_MASK) >> HIPWM7_HBAT17_BATFRAC_SHIFT)
#define  HIPWM7_HBAT17_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT17_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT17_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 19 of 64) (HBAT18)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 19 of 64)*/
//====================================================================

#define  HIPWM7_HBAT18_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT18_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT18_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT18_RESERVED1_MASK) >> HIPWM7_HBAT18_RESERVED1_SHIFT)
#define  HIPWM7_HBAT18_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT18_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT18_RESERVED1_SHIFT))

#define  HIPWM7_HBAT18_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT18_BATLAST_SHIFT 19
#define  HIPWM7_HBAT18_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT18_BATLAST_MASK) >> HIPWM7_HBAT18_BATLAST_SHIFT)
#define  HIPWM7_HBAT18_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT18_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT18_BATLAST_SHIFT))

#define  HIPWM7_HBAT18_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT18_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT18_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT18_BATSIGN_MASK) >> HIPWM7_HBAT18_BATSIGN_SHIFT)
#define  HIPWM7_HBAT18_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT18_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT18_BATSIGN_SHIFT))

#define  HIPWM7_HBAT18_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT18_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT18_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT18_BATSHIFT_MASK) >> HIPWM7_HBAT18_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT18_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT18_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT18_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT18_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT18_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT18_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT18_BATFRAC_MASK) >> HIPWM7_HBAT18_BATFRAC_SHIFT)
#define  HIPWM7_HBAT18_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT18_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT18_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 20 of 64) (HBAT19)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 20 of 64)*/
//====================================================================

#define  HIPWM7_HBAT19_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT19_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT19_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT19_RESERVED1_MASK) >> HIPWM7_HBAT19_RESERVED1_SHIFT)
#define  HIPWM7_HBAT19_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT19_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT19_RESERVED1_SHIFT))

#define  HIPWM7_HBAT19_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT19_BATLAST_SHIFT 19
#define  HIPWM7_HBAT19_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT19_BATLAST_MASK) >> HIPWM7_HBAT19_BATLAST_SHIFT)
#define  HIPWM7_HBAT19_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT19_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT19_BATLAST_SHIFT))

#define  HIPWM7_HBAT19_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT19_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT19_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT19_BATSIGN_MASK) >> HIPWM7_HBAT19_BATSIGN_SHIFT)
#define  HIPWM7_HBAT19_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT19_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT19_BATSIGN_SHIFT))

#define  HIPWM7_HBAT19_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT19_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT19_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT19_BATSHIFT_MASK) >> HIPWM7_HBAT19_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT19_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT19_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT19_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT19_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT19_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT19_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT19_BATFRAC_MASK) >> HIPWM7_HBAT19_BATFRAC_SHIFT)
#define  HIPWM7_HBAT19_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT19_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT19_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 21 of 64) (HBAT20)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 21 of 64)*/
//====================================================================

#define  HIPWM7_HBAT20_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT20_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT20_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT20_RESERVED1_MASK) >> HIPWM7_HBAT20_RESERVED1_SHIFT)
#define  HIPWM7_HBAT20_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT20_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT20_RESERVED1_SHIFT))

#define  HIPWM7_HBAT20_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT20_BATLAST_SHIFT 19
#define  HIPWM7_HBAT20_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT20_BATLAST_MASK) >> HIPWM7_HBAT20_BATLAST_SHIFT)
#define  HIPWM7_HBAT20_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT20_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT20_BATLAST_SHIFT))

#define  HIPWM7_HBAT20_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT20_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT20_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT20_BATSIGN_MASK) >> HIPWM7_HBAT20_BATSIGN_SHIFT)
#define  HIPWM7_HBAT20_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT20_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT20_BATSIGN_SHIFT))

#define  HIPWM7_HBAT20_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT20_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT20_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT20_BATSHIFT_MASK) >> HIPWM7_HBAT20_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT20_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT20_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT20_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT20_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT20_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT20_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT20_BATFRAC_MASK) >> HIPWM7_HBAT20_BATFRAC_SHIFT)
#define  HIPWM7_HBAT20_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT20_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT20_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 22 of 64) (HBAT21)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 22 of 64)*/
//====================================================================

#define  HIPWM7_HBAT21_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT21_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT21_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT21_RESERVED1_MASK) >> HIPWM7_HBAT21_RESERVED1_SHIFT)
#define  HIPWM7_HBAT21_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT21_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT21_RESERVED1_SHIFT))

#define  HIPWM7_HBAT21_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT21_BATLAST_SHIFT 19
#define  HIPWM7_HBAT21_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT21_BATLAST_MASK) >> HIPWM7_HBAT21_BATLAST_SHIFT)
#define  HIPWM7_HBAT21_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT21_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT21_BATLAST_SHIFT))

#define  HIPWM7_HBAT21_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT21_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT21_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT21_BATSIGN_MASK) >> HIPWM7_HBAT21_BATSIGN_SHIFT)
#define  HIPWM7_HBAT21_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT21_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT21_BATSIGN_SHIFT))

#define  HIPWM7_HBAT21_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT21_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT21_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT21_BATSHIFT_MASK) >> HIPWM7_HBAT21_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT21_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT21_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT21_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT21_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT21_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT21_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT21_BATFRAC_MASK) >> HIPWM7_HBAT21_BATFRAC_SHIFT)
#define  HIPWM7_HBAT21_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT21_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT21_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 23 of 64) (HBAT22)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 23 of 64)*/
//====================================================================

#define  HIPWM7_HBAT22_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT22_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT22_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT22_RESERVED1_MASK) >> HIPWM7_HBAT22_RESERVED1_SHIFT)
#define  HIPWM7_HBAT22_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT22_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT22_RESERVED1_SHIFT))

#define  HIPWM7_HBAT22_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT22_BATLAST_SHIFT 19
#define  HIPWM7_HBAT22_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT22_BATLAST_MASK) >> HIPWM7_HBAT22_BATLAST_SHIFT)
#define  HIPWM7_HBAT22_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT22_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT22_BATLAST_SHIFT))

#define  HIPWM7_HBAT22_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT22_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT22_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT22_BATSIGN_MASK) >> HIPWM7_HBAT22_BATSIGN_SHIFT)
#define  HIPWM7_HBAT22_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT22_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT22_BATSIGN_SHIFT))

#define  HIPWM7_HBAT22_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT22_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT22_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT22_BATSHIFT_MASK) >> HIPWM7_HBAT22_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT22_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT22_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT22_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT22_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT22_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT22_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT22_BATFRAC_MASK) >> HIPWM7_HBAT22_BATFRAC_SHIFT)
#define  HIPWM7_HBAT22_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT22_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT22_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 24 of 64) (HBAT23)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 24 of 64)*/
//====================================================================

#define  HIPWM7_HBAT23_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT23_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT23_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT23_RESERVED1_MASK) >> HIPWM7_HBAT23_RESERVED1_SHIFT)
#define  HIPWM7_HBAT23_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT23_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT23_RESERVED1_SHIFT))

#define  HIPWM7_HBAT23_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT23_BATLAST_SHIFT 19
#define  HIPWM7_HBAT23_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT23_BATLAST_MASK) >> HIPWM7_HBAT23_BATLAST_SHIFT)
#define  HIPWM7_HBAT23_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT23_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT23_BATLAST_SHIFT))

#define  HIPWM7_HBAT23_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT23_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT23_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT23_BATSIGN_MASK) >> HIPWM7_HBAT23_BATSIGN_SHIFT)
#define  HIPWM7_HBAT23_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT23_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT23_BATSIGN_SHIFT))

#define  HIPWM7_HBAT23_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT23_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT23_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT23_BATSHIFT_MASK) >> HIPWM7_HBAT23_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT23_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT23_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT23_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT23_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT23_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT23_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT23_BATFRAC_MASK) >> HIPWM7_HBAT23_BATFRAC_SHIFT)
#define  HIPWM7_HBAT23_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT23_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT23_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 25 of 64) (HBAT24)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 25 of 64)*/
//====================================================================

#define  HIPWM7_HBAT24_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT24_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT24_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT24_RESERVED1_MASK) >> HIPWM7_HBAT24_RESERVED1_SHIFT)
#define  HIPWM7_HBAT24_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT24_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT24_RESERVED1_SHIFT))

#define  HIPWM7_HBAT24_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT24_BATLAST_SHIFT 19
#define  HIPWM7_HBAT24_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT24_BATLAST_MASK) >> HIPWM7_HBAT24_BATLAST_SHIFT)
#define  HIPWM7_HBAT24_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT24_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT24_BATLAST_SHIFT))

#define  HIPWM7_HBAT24_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT24_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT24_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT24_BATSIGN_MASK) >> HIPWM7_HBAT24_BATSIGN_SHIFT)
#define  HIPWM7_HBAT24_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT24_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT24_BATSIGN_SHIFT))

#define  HIPWM7_HBAT24_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT24_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT24_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT24_BATSHIFT_MASK) >> HIPWM7_HBAT24_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT24_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT24_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT24_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT24_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT24_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT24_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT24_BATFRAC_MASK) >> HIPWM7_HBAT24_BATFRAC_SHIFT)
#define  HIPWM7_HBAT24_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT24_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT24_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 26 of 64) (HBAT25)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 26 of 64)*/
//====================================================================

#define  HIPWM7_HBAT25_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT25_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT25_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT25_RESERVED1_MASK) >> HIPWM7_HBAT25_RESERVED1_SHIFT)
#define  HIPWM7_HBAT25_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT25_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT25_RESERVED1_SHIFT))

#define  HIPWM7_HBAT25_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT25_BATLAST_SHIFT 19
#define  HIPWM7_HBAT25_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT25_BATLAST_MASK) >> HIPWM7_HBAT25_BATLAST_SHIFT)
#define  HIPWM7_HBAT25_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT25_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT25_BATLAST_SHIFT))

#define  HIPWM7_HBAT25_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT25_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT25_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT25_BATSIGN_MASK) >> HIPWM7_HBAT25_BATSIGN_SHIFT)
#define  HIPWM7_HBAT25_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT25_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT25_BATSIGN_SHIFT))

#define  HIPWM7_HBAT25_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT25_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT25_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT25_BATSHIFT_MASK) >> HIPWM7_HBAT25_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT25_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT25_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT25_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT25_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT25_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT25_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT25_BATFRAC_MASK) >> HIPWM7_HBAT25_BATFRAC_SHIFT)
#define  HIPWM7_HBAT25_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT25_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT25_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 27 of 64) (HBAT26)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 27 of 64)*/
//====================================================================

#define  HIPWM7_HBAT26_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT26_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT26_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT26_RESERVED1_MASK) >> HIPWM7_HBAT26_RESERVED1_SHIFT)
#define  HIPWM7_HBAT26_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT26_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT26_RESERVED1_SHIFT))

#define  HIPWM7_HBAT26_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT26_BATLAST_SHIFT 19
#define  HIPWM7_HBAT26_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT26_BATLAST_MASK) >> HIPWM7_HBAT26_BATLAST_SHIFT)
#define  HIPWM7_HBAT26_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT26_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT26_BATLAST_SHIFT))

#define  HIPWM7_HBAT26_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT26_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT26_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT26_BATSIGN_MASK) >> HIPWM7_HBAT26_BATSIGN_SHIFT)
#define  HIPWM7_HBAT26_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT26_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT26_BATSIGN_SHIFT))

#define  HIPWM7_HBAT26_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT26_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT26_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT26_BATSHIFT_MASK) >> HIPWM7_HBAT26_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT26_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT26_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT26_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT26_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT26_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT26_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT26_BATFRAC_MASK) >> HIPWM7_HBAT26_BATFRAC_SHIFT)
#define  HIPWM7_HBAT26_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT26_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT26_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 28 of 64) (HBAT27)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 28 of 64)*/
//====================================================================

#define  HIPWM7_HBAT27_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT27_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT27_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT27_RESERVED1_MASK) >> HIPWM7_HBAT27_RESERVED1_SHIFT)
#define  HIPWM7_HBAT27_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT27_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT27_RESERVED1_SHIFT))

#define  HIPWM7_HBAT27_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT27_BATLAST_SHIFT 19
#define  HIPWM7_HBAT27_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT27_BATLAST_MASK) >> HIPWM7_HBAT27_BATLAST_SHIFT)
#define  HIPWM7_HBAT27_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT27_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT27_BATLAST_SHIFT))

#define  HIPWM7_HBAT27_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT27_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT27_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT27_BATSIGN_MASK) >> HIPWM7_HBAT27_BATSIGN_SHIFT)
#define  HIPWM7_HBAT27_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT27_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT27_BATSIGN_SHIFT))

#define  HIPWM7_HBAT27_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT27_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT27_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT27_BATSHIFT_MASK) >> HIPWM7_HBAT27_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT27_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT27_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT27_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT27_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT27_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT27_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT27_BATFRAC_MASK) >> HIPWM7_HBAT27_BATFRAC_SHIFT)
#define  HIPWM7_HBAT27_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT27_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT27_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 29 of 64) (HBAT28)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 29 of 64)*/
//====================================================================

#define  HIPWM7_HBAT28_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT28_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT28_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT28_RESERVED1_MASK) >> HIPWM7_HBAT28_RESERVED1_SHIFT)
#define  HIPWM7_HBAT28_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT28_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT28_RESERVED1_SHIFT))

#define  HIPWM7_HBAT28_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT28_BATLAST_SHIFT 19
#define  HIPWM7_HBAT28_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT28_BATLAST_MASK) >> HIPWM7_HBAT28_BATLAST_SHIFT)
#define  HIPWM7_HBAT28_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT28_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT28_BATLAST_SHIFT))

#define  HIPWM7_HBAT28_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT28_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT28_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT28_BATSIGN_MASK) >> HIPWM7_HBAT28_BATSIGN_SHIFT)
#define  HIPWM7_HBAT28_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT28_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT28_BATSIGN_SHIFT))

#define  HIPWM7_HBAT28_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT28_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT28_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT28_BATSHIFT_MASK) >> HIPWM7_HBAT28_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT28_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT28_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT28_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT28_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT28_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT28_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT28_BATFRAC_MASK) >> HIPWM7_HBAT28_BATFRAC_SHIFT)
#define  HIPWM7_HBAT28_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT28_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT28_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 30 of 64) (HBAT29)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 30 of 64)*/
//====================================================================

#define  HIPWM7_HBAT29_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT29_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT29_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT29_RESERVED1_MASK) >> HIPWM7_HBAT29_RESERVED1_SHIFT)
#define  HIPWM7_HBAT29_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT29_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT29_RESERVED1_SHIFT))

#define  HIPWM7_HBAT29_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT29_BATLAST_SHIFT 19
#define  HIPWM7_HBAT29_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT29_BATLAST_MASK) >> HIPWM7_HBAT29_BATLAST_SHIFT)
#define  HIPWM7_HBAT29_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT29_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT29_BATLAST_SHIFT))

#define  HIPWM7_HBAT29_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT29_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT29_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT29_BATSIGN_MASK) >> HIPWM7_HBAT29_BATSIGN_SHIFT)
#define  HIPWM7_HBAT29_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT29_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT29_BATSIGN_SHIFT))

#define  HIPWM7_HBAT29_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT29_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT29_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT29_BATSHIFT_MASK) >> HIPWM7_HBAT29_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT29_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT29_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT29_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT29_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT29_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT29_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT29_BATFRAC_MASK) >> HIPWM7_HBAT29_BATFRAC_SHIFT)
#define  HIPWM7_HBAT29_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT29_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT29_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 31 of 64) (HBAT30)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 31 of 64)*/
//====================================================================

#define  HIPWM7_HBAT30_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT30_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT30_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT30_RESERVED1_MASK) >> HIPWM7_HBAT30_RESERVED1_SHIFT)
#define  HIPWM7_HBAT30_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT30_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT30_RESERVED1_SHIFT))

#define  HIPWM7_HBAT30_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT30_BATLAST_SHIFT 19
#define  HIPWM7_HBAT30_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT30_BATLAST_MASK) >> HIPWM7_HBAT30_BATLAST_SHIFT)
#define  HIPWM7_HBAT30_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT30_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT30_BATLAST_SHIFT))

#define  HIPWM7_HBAT30_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT30_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT30_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT30_BATSIGN_MASK) >> HIPWM7_HBAT30_BATSIGN_SHIFT)
#define  HIPWM7_HBAT30_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT30_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT30_BATSIGN_SHIFT))

#define  HIPWM7_HBAT30_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT30_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT30_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT30_BATSHIFT_MASK) >> HIPWM7_HBAT30_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT30_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT30_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT30_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT30_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT30_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT30_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT30_BATFRAC_MASK) >> HIPWM7_HBAT30_BATFRAC_SHIFT)
#define  HIPWM7_HBAT30_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT30_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT30_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 32 of 64) (HBAT31)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 32 of 64)*/
//====================================================================

#define  HIPWM7_HBAT31_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT31_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT31_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT31_RESERVED1_MASK) >> HIPWM7_HBAT31_RESERVED1_SHIFT)
#define  HIPWM7_HBAT31_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT31_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT31_RESERVED1_SHIFT))

#define  HIPWM7_HBAT31_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT31_BATLAST_SHIFT 19
#define  HIPWM7_HBAT31_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT31_BATLAST_MASK) >> HIPWM7_HBAT31_BATLAST_SHIFT)
#define  HIPWM7_HBAT31_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT31_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT31_BATLAST_SHIFT))

#define  HIPWM7_HBAT31_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT31_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT31_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT31_BATSIGN_MASK) >> HIPWM7_HBAT31_BATSIGN_SHIFT)
#define  HIPWM7_HBAT31_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT31_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT31_BATSIGN_SHIFT))

#define  HIPWM7_HBAT31_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT31_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT31_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT31_BATSHIFT_MASK) >> HIPWM7_HBAT31_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT31_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT31_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT31_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT31_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT31_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT31_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT31_BATFRAC_MASK) >> HIPWM7_HBAT31_BATFRAC_SHIFT)
#define  HIPWM7_HBAT31_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT31_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT31_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 33 of 64) (HBAT32)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 33 of 64)*/
//====================================================================

#define  HIPWM7_HBAT32_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT32_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT32_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT32_RESERVED1_MASK) >> HIPWM7_HBAT32_RESERVED1_SHIFT)
#define  HIPWM7_HBAT32_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT32_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT32_RESERVED1_SHIFT))

#define  HIPWM7_HBAT32_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT32_BATLAST_SHIFT 19
#define  HIPWM7_HBAT32_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT32_BATLAST_MASK) >> HIPWM7_HBAT32_BATLAST_SHIFT)
#define  HIPWM7_HBAT32_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT32_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT32_BATLAST_SHIFT))

#define  HIPWM7_HBAT32_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT32_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT32_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT32_BATSIGN_MASK) >> HIPWM7_HBAT32_BATSIGN_SHIFT)
#define  HIPWM7_HBAT32_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT32_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT32_BATSIGN_SHIFT))

#define  HIPWM7_HBAT32_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT32_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT32_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT32_BATSHIFT_MASK) >> HIPWM7_HBAT32_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT32_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT32_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT32_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT32_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT32_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT32_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT32_BATFRAC_MASK) >> HIPWM7_HBAT32_BATFRAC_SHIFT)
#define  HIPWM7_HBAT32_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT32_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT32_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 34 of 64) (HBAT33)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 34 of 64)*/
//====================================================================

#define  HIPWM7_HBAT33_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT33_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT33_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT33_RESERVED1_MASK) >> HIPWM7_HBAT33_RESERVED1_SHIFT)
#define  HIPWM7_HBAT33_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT33_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT33_RESERVED1_SHIFT))

#define  HIPWM7_HBAT33_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT33_BATLAST_SHIFT 19
#define  HIPWM7_HBAT33_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT33_BATLAST_MASK) >> HIPWM7_HBAT33_BATLAST_SHIFT)
#define  HIPWM7_HBAT33_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT33_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT33_BATLAST_SHIFT))

#define  HIPWM7_HBAT33_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT33_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT33_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT33_BATSIGN_MASK) >> HIPWM7_HBAT33_BATSIGN_SHIFT)
#define  HIPWM7_HBAT33_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT33_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT33_BATSIGN_SHIFT))

#define  HIPWM7_HBAT33_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT33_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT33_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT33_BATSHIFT_MASK) >> HIPWM7_HBAT33_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT33_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT33_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT33_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT33_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT33_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT33_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT33_BATFRAC_MASK) >> HIPWM7_HBAT33_BATFRAC_SHIFT)
#define  HIPWM7_HBAT33_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT33_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT33_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 35 of 64) (HBAT34)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 35 of 64)*/
//====================================================================

#define  HIPWM7_HBAT34_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT34_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT34_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT34_RESERVED1_MASK) >> HIPWM7_HBAT34_RESERVED1_SHIFT)
#define  HIPWM7_HBAT34_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT34_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT34_RESERVED1_SHIFT))

#define  HIPWM7_HBAT34_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT34_BATLAST_SHIFT 19
#define  HIPWM7_HBAT34_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT34_BATLAST_MASK) >> HIPWM7_HBAT34_BATLAST_SHIFT)
#define  HIPWM7_HBAT34_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT34_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT34_BATLAST_SHIFT))

#define  HIPWM7_HBAT34_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT34_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT34_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT34_BATSIGN_MASK) >> HIPWM7_HBAT34_BATSIGN_SHIFT)
#define  HIPWM7_HBAT34_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT34_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT34_BATSIGN_SHIFT))

#define  HIPWM7_HBAT34_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT34_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT34_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT34_BATSHIFT_MASK) >> HIPWM7_HBAT34_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT34_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT34_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT34_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT34_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT34_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT34_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT34_BATFRAC_MASK) >> HIPWM7_HBAT34_BATFRAC_SHIFT)
#define  HIPWM7_HBAT34_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT34_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT34_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 36 of 64) (HBAT35)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 36 of 64)*/
//====================================================================

#define  HIPWM7_HBAT35_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT35_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT35_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT35_RESERVED1_MASK) >> HIPWM7_HBAT35_RESERVED1_SHIFT)
#define  HIPWM7_HBAT35_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT35_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT35_RESERVED1_SHIFT))

#define  HIPWM7_HBAT35_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT35_BATLAST_SHIFT 19
#define  HIPWM7_HBAT35_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT35_BATLAST_MASK) >> HIPWM7_HBAT35_BATLAST_SHIFT)
#define  HIPWM7_HBAT35_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT35_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT35_BATLAST_SHIFT))

#define  HIPWM7_HBAT35_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT35_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT35_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT35_BATSIGN_MASK) >> HIPWM7_HBAT35_BATSIGN_SHIFT)
#define  HIPWM7_HBAT35_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT35_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT35_BATSIGN_SHIFT))

#define  HIPWM7_HBAT35_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT35_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT35_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT35_BATSHIFT_MASK) >> HIPWM7_HBAT35_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT35_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT35_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT35_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT35_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT35_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT35_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT35_BATFRAC_MASK) >> HIPWM7_HBAT35_BATFRAC_SHIFT)
#define  HIPWM7_HBAT35_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT35_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT35_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 37 of 64) (HBAT36)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 37 of 64)*/
//====================================================================

#define  HIPWM7_HBAT36_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT36_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT36_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT36_RESERVED1_MASK) >> HIPWM7_HBAT36_RESERVED1_SHIFT)
#define  HIPWM7_HBAT36_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT36_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT36_RESERVED1_SHIFT))

#define  HIPWM7_HBAT36_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT36_BATLAST_SHIFT 19
#define  HIPWM7_HBAT36_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT36_BATLAST_MASK) >> HIPWM7_HBAT36_BATLAST_SHIFT)
#define  HIPWM7_HBAT36_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT36_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT36_BATLAST_SHIFT))

#define  HIPWM7_HBAT36_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT36_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT36_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT36_BATSIGN_MASK) >> HIPWM7_HBAT36_BATSIGN_SHIFT)
#define  HIPWM7_HBAT36_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT36_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT36_BATSIGN_SHIFT))

#define  HIPWM7_HBAT36_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT36_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT36_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT36_BATSHIFT_MASK) >> HIPWM7_HBAT36_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT36_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT36_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT36_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT36_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT36_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT36_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT36_BATFRAC_MASK) >> HIPWM7_HBAT36_BATFRAC_SHIFT)
#define  HIPWM7_HBAT36_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT36_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT36_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 38 of 64) (HBAT37)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 38 of 64)*/
//====================================================================

#define  HIPWM7_HBAT37_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT37_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT37_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT37_RESERVED1_MASK) >> HIPWM7_HBAT37_RESERVED1_SHIFT)
#define  HIPWM7_HBAT37_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT37_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT37_RESERVED1_SHIFT))

#define  HIPWM7_HBAT37_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT37_BATLAST_SHIFT 19
#define  HIPWM7_HBAT37_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT37_BATLAST_MASK) >> HIPWM7_HBAT37_BATLAST_SHIFT)
#define  HIPWM7_HBAT37_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT37_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT37_BATLAST_SHIFT))

#define  HIPWM7_HBAT37_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT37_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT37_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT37_BATSIGN_MASK) >> HIPWM7_HBAT37_BATSIGN_SHIFT)
#define  HIPWM7_HBAT37_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT37_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT37_BATSIGN_SHIFT))

#define  HIPWM7_HBAT37_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT37_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT37_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT37_BATSHIFT_MASK) >> HIPWM7_HBAT37_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT37_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT37_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT37_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT37_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT37_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT37_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT37_BATFRAC_MASK) >> HIPWM7_HBAT37_BATFRAC_SHIFT)
#define  HIPWM7_HBAT37_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT37_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT37_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 39 of 64) (HBAT38)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 39 of 64)*/
//====================================================================

#define  HIPWM7_HBAT38_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT38_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT38_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT38_RESERVED1_MASK) >> HIPWM7_HBAT38_RESERVED1_SHIFT)
#define  HIPWM7_HBAT38_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT38_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT38_RESERVED1_SHIFT))

#define  HIPWM7_HBAT38_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT38_BATLAST_SHIFT 19
#define  HIPWM7_HBAT38_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT38_BATLAST_MASK) >> HIPWM7_HBAT38_BATLAST_SHIFT)
#define  HIPWM7_HBAT38_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT38_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT38_BATLAST_SHIFT))

#define  HIPWM7_HBAT38_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT38_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT38_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT38_BATSIGN_MASK) >> HIPWM7_HBAT38_BATSIGN_SHIFT)
#define  HIPWM7_HBAT38_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT38_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT38_BATSIGN_SHIFT))

#define  HIPWM7_HBAT38_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT38_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT38_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT38_BATSHIFT_MASK) >> HIPWM7_HBAT38_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT38_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT38_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT38_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT38_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT38_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT38_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT38_BATFRAC_MASK) >> HIPWM7_HBAT38_BATFRAC_SHIFT)
#define  HIPWM7_HBAT38_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT38_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT38_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 40 of 64) (HBAT39)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 40 of 64)*/
//====================================================================

#define  HIPWM7_HBAT39_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT39_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT39_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT39_RESERVED1_MASK) >> HIPWM7_HBAT39_RESERVED1_SHIFT)
#define  HIPWM7_HBAT39_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT39_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT39_RESERVED1_SHIFT))

#define  HIPWM7_HBAT39_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT39_BATLAST_SHIFT 19
#define  HIPWM7_HBAT39_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT39_BATLAST_MASK) >> HIPWM7_HBAT39_BATLAST_SHIFT)
#define  HIPWM7_HBAT39_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT39_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT39_BATLAST_SHIFT))

#define  HIPWM7_HBAT39_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT39_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT39_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT39_BATSIGN_MASK) >> HIPWM7_HBAT39_BATSIGN_SHIFT)
#define  HIPWM7_HBAT39_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT39_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT39_BATSIGN_SHIFT))

#define  HIPWM7_HBAT39_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT39_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT39_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT39_BATSHIFT_MASK) >> HIPWM7_HBAT39_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT39_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT39_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT39_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT39_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT39_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT39_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT39_BATFRAC_MASK) >> HIPWM7_HBAT39_BATFRAC_SHIFT)
#define  HIPWM7_HBAT39_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT39_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT39_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 41 of 64) (HBAT40)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 41 of 64)*/
//====================================================================

#define  HIPWM7_HBAT40_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT40_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT40_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT40_RESERVED1_MASK) >> HIPWM7_HBAT40_RESERVED1_SHIFT)
#define  HIPWM7_HBAT40_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT40_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT40_RESERVED1_SHIFT))

#define  HIPWM7_HBAT40_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT40_BATLAST_SHIFT 19
#define  HIPWM7_HBAT40_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT40_BATLAST_MASK) >> HIPWM7_HBAT40_BATLAST_SHIFT)
#define  HIPWM7_HBAT40_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT40_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT40_BATLAST_SHIFT))

#define  HIPWM7_HBAT40_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT40_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT40_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT40_BATSIGN_MASK) >> HIPWM7_HBAT40_BATSIGN_SHIFT)
#define  HIPWM7_HBAT40_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT40_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT40_BATSIGN_SHIFT))

#define  HIPWM7_HBAT40_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT40_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT40_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT40_BATSHIFT_MASK) >> HIPWM7_HBAT40_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT40_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT40_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT40_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT40_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT40_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT40_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT40_BATFRAC_MASK) >> HIPWM7_HBAT40_BATFRAC_SHIFT)
#define  HIPWM7_HBAT40_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT40_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT40_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 42 of 64) (HBAT41)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 42 of 64)*/
//====================================================================

#define  HIPWM7_HBAT41_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT41_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT41_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT41_RESERVED1_MASK) >> HIPWM7_HBAT41_RESERVED1_SHIFT)
#define  HIPWM7_HBAT41_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT41_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT41_RESERVED1_SHIFT))

#define  HIPWM7_HBAT41_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT41_BATLAST_SHIFT 19
#define  HIPWM7_HBAT41_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT41_BATLAST_MASK) >> HIPWM7_HBAT41_BATLAST_SHIFT)
#define  HIPWM7_HBAT41_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT41_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT41_BATLAST_SHIFT))

#define  HIPWM7_HBAT41_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT41_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT41_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT41_BATSIGN_MASK) >> HIPWM7_HBAT41_BATSIGN_SHIFT)
#define  HIPWM7_HBAT41_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT41_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT41_BATSIGN_SHIFT))

#define  HIPWM7_HBAT41_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT41_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT41_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT41_BATSHIFT_MASK) >> HIPWM7_HBAT41_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT41_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT41_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT41_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT41_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT41_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT41_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT41_BATFRAC_MASK) >> HIPWM7_HBAT41_BATFRAC_SHIFT)
#define  HIPWM7_HBAT41_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT41_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT41_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 43 of 64) (HBAT42)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 43 of 64)*/
//====================================================================

#define  HIPWM7_HBAT42_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT42_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT42_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT42_RESERVED1_MASK) >> HIPWM7_HBAT42_RESERVED1_SHIFT)
#define  HIPWM7_HBAT42_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT42_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT42_RESERVED1_SHIFT))

#define  HIPWM7_HBAT42_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT42_BATLAST_SHIFT 19
#define  HIPWM7_HBAT42_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT42_BATLAST_MASK) >> HIPWM7_HBAT42_BATLAST_SHIFT)
#define  HIPWM7_HBAT42_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT42_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT42_BATLAST_SHIFT))

#define  HIPWM7_HBAT42_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT42_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT42_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT42_BATSIGN_MASK) >> HIPWM7_HBAT42_BATSIGN_SHIFT)
#define  HIPWM7_HBAT42_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT42_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT42_BATSIGN_SHIFT))

#define  HIPWM7_HBAT42_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT42_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT42_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT42_BATSHIFT_MASK) >> HIPWM7_HBAT42_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT42_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT42_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT42_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT42_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT42_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT42_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT42_BATFRAC_MASK) >> HIPWM7_HBAT42_BATFRAC_SHIFT)
#define  HIPWM7_HBAT42_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT42_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT42_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 44 of 64) (HBAT43)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 44 of 64)*/
//====================================================================

#define  HIPWM7_HBAT43_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT43_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT43_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT43_RESERVED1_MASK) >> HIPWM7_HBAT43_RESERVED1_SHIFT)
#define  HIPWM7_HBAT43_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT43_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT43_RESERVED1_SHIFT))

#define  HIPWM7_HBAT43_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT43_BATLAST_SHIFT 19
#define  HIPWM7_HBAT43_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT43_BATLAST_MASK) >> HIPWM7_HBAT43_BATLAST_SHIFT)
#define  HIPWM7_HBAT43_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT43_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT43_BATLAST_SHIFT))

#define  HIPWM7_HBAT43_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT43_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT43_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT43_BATSIGN_MASK) >> HIPWM7_HBAT43_BATSIGN_SHIFT)
#define  HIPWM7_HBAT43_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT43_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT43_BATSIGN_SHIFT))

#define  HIPWM7_HBAT43_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT43_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT43_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT43_BATSHIFT_MASK) >> HIPWM7_HBAT43_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT43_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT43_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT43_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT43_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT43_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT43_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT43_BATFRAC_MASK) >> HIPWM7_HBAT43_BATFRAC_SHIFT)
#define  HIPWM7_HBAT43_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT43_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT43_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 45 of 64) (HBAT44)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 45 of 64)*/
//====================================================================

#define  HIPWM7_HBAT44_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT44_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT44_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT44_RESERVED1_MASK) >> HIPWM7_HBAT44_RESERVED1_SHIFT)
#define  HIPWM7_HBAT44_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT44_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT44_RESERVED1_SHIFT))

#define  HIPWM7_HBAT44_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT44_BATLAST_SHIFT 19
#define  HIPWM7_HBAT44_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT44_BATLAST_MASK) >> HIPWM7_HBAT44_BATLAST_SHIFT)
#define  HIPWM7_HBAT44_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT44_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT44_BATLAST_SHIFT))

#define  HIPWM7_HBAT44_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT44_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT44_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT44_BATSIGN_MASK) >> HIPWM7_HBAT44_BATSIGN_SHIFT)
#define  HIPWM7_HBAT44_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT44_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT44_BATSIGN_SHIFT))

#define  HIPWM7_HBAT44_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT44_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT44_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT44_BATSHIFT_MASK) >> HIPWM7_HBAT44_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT44_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT44_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT44_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT44_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT44_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT44_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT44_BATFRAC_MASK) >> HIPWM7_HBAT44_BATFRAC_SHIFT)
#define  HIPWM7_HBAT44_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT44_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT44_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 46 of 64) (HBAT45)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 46 of 64)*/
//====================================================================

#define  HIPWM7_HBAT45_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT45_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT45_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT45_RESERVED1_MASK) >> HIPWM7_HBAT45_RESERVED1_SHIFT)
#define  HIPWM7_HBAT45_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT45_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT45_RESERVED1_SHIFT))

#define  HIPWM7_HBAT45_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT45_BATLAST_SHIFT 19
#define  HIPWM7_HBAT45_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT45_BATLAST_MASK) >> HIPWM7_HBAT45_BATLAST_SHIFT)
#define  HIPWM7_HBAT45_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT45_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT45_BATLAST_SHIFT))

#define  HIPWM7_HBAT45_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT45_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT45_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT45_BATSIGN_MASK) >> HIPWM7_HBAT45_BATSIGN_SHIFT)
#define  HIPWM7_HBAT45_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT45_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT45_BATSIGN_SHIFT))

#define  HIPWM7_HBAT45_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT45_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT45_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT45_BATSHIFT_MASK) >> HIPWM7_HBAT45_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT45_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT45_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT45_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT45_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT45_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT45_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT45_BATFRAC_MASK) >> HIPWM7_HBAT45_BATFRAC_SHIFT)
#define  HIPWM7_HBAT45_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT45_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT45_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 47 of 64) (HBAT46)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 47 of 64)*/
//====================================================================

#define  HIPWM7_HBAT46_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT46_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT46_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT46_RESERVED1_MASK) >> HIPWM7_HBAT46_RESERVED1_SHIFT)
#define  HIPWM7_HBAT46_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT46_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT46_RESERVED1_SHIFT))

#define  HIPWM7_HBAT46_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT46_BATLAST_SHIFT 19
#define  HIPWM7_HBAT46_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT46_BATLAST_MASK) >> HIPWM7_HBAT46_BATLAST_SHIFT)
#define  HIPWM7_HBAT46_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT46_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT46_BATLAST_SHIFT))

#define  HIPWM7_HBAT46_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT46_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT46_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT46_BATSIGN_MASK) >> HIPWM7_HBAT46_BATSIGN_SHIFT)
#define  HIPWM7_HBAT46_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT46_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT46_BATSIGN_SHIFT))

#define  HIPWM7_HBAT46_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT46_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT46_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT46_BATSHIFT_MASK) >> HIPWM7_HBAT46_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT46_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT46_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT46_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT46_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT46_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT46_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT46_BATFRAC_MASK) >> HIPWM7_HBAT46_BATFRAC_SHIFT)
#define  HIPWM7_HBAT46_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT46_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT46_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 48 of 64) (HBAT47)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 48 of 64)*/
//====================================================================

#define  HIPWM7_HBAT47_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT47_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT47_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT47_RESERVED1_MASK) >> HIPWM7_HBAT47_RESERVED1_SHIFT)
#define  HIPWM7_HBAT47_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT47_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT47_RESERVED1_SHIFT))

#define  HIPWM7_HBAT47_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT47_BATLAST_SHIFT 19
#define  HIPWM7_HBAT47_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT47_BATLAST_MASK) >> HIPWM7_HBAT47_BATLAST_SHIFT)
#define  HIPWM7_HBAT47_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT47_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT47_BATLAST_SHIFT))

#define  HIPWM7_HBAT47_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT47_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT47_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT47_BATSIGN_MASK) >> HIPWM7_HBAT47_BATSIGN_SHIFT)
#define  HIPWM7_HBAT47_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT47_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT47_BATSIGN_SHIFT))

#define  HIPWM7_HBAT47_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT47_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT47_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT47_BATSHIFT_MASK) >> HIPWM7_HBAT47_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT47_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT47_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT47_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT47_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT47_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT47_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT47_BATFRAC_MASK) >> HIPWM7_HBAT47_BATFRAC_SHIFT)
#define  HIPWM7_HBAT47_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT47_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT47_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 49 of 64) (HBAT48)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 49 of 64)*/
//====================================================================

#define  HIPWM7_HBAT48_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT48_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT48_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT48_RESERVED1_MASK) >> HIPWM7_HBAT48_RESERVED1_SHIFT)
#define  HIPWM7_HBAT48_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT48_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT48_RESERVED1_SHIFT))

#define  HIPWM7_HBAT48_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT48_BATLAST_SHIFT 19
#define  HIPWM7_HBAT48_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT48_BATLAST_MASK) >> HIPWM7_HBAT48_BATLAST_SHIFT)
#define  HIPWM7_HBAT48_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT48_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT48_BATLAST_SHIFT))

#define  HIPWM7_HBAT48_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT48_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT48_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT48_BATSIGN_MASK) >> HIPWM7_HBAT48_BATSIGN_SHIFT)
#define  HIPWM7_HBAT48_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT48_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT48_BATSIGN_SHIFT))

#define  HIPWM7_HBAT48_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT48_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT48_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT48_BATSHIFT_MASK) >> HIPWM7_HBAT48_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT48_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT48_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT48_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT48_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT48_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT48_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT48_BATFRAC_MASK) >> HIPWM7_HBAT48_BATFRAC_SHIFT)
#define  HIPWM7_HBAT48_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT48_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT48_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 50 of 64) (HBAT49)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 50 of 64)*/
//====================================================================

#define  HIPWM7_HBAT49_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT49_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT49_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT49_RESERVED1_MASK) >> HIPWM7_HBAT49_RESERVED1_SHIFT)
#define  HIPWM7_HBAT49_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT49_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT49_RESERVED1_SHIFT))

#define  HIPWM7_HBAT49_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT49_BATLAST_SHIFT 19
#define  HIPWM7_HBAT49_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT49_BATLAST_MASK) >> HIPWM7_HBAT49_BATLAST_SHIFT)
#define  HIPWM7_HBAT49_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT49_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT49_BATLAST_SHIFT))

#define  HIPWM7_HBAT49_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT49_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT49_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT49_BATSIGN_MASK) >> HIPWM7_HBAT49_BATSIGN_SHIFT)
#define  HIPWM7_HBAT49_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT49_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT49_BATSIGN_SHIFT))

#define  HIPWM7_HBAT49_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT49_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT49_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT49_BATSHIFT_MASK) >> HIPWM7_HBAT49_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT49_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT49_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT49_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT49_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT49_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT49_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT49_BATFRAC_MASK) >> HIPWM7_HBAT49_BATFRAC_SHIFT)
#define  HIPWM7_HBAT49_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT49_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT49_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 51 of 64) (HBAT50)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 51 of 64)*/
//====================================================================

#define  HIPWM7_HBAT50_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT50_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT50_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT50_RESERVED1_MASK) >> HIPWM7_HBAT50_RESERVED1_SHIFT)
#define  HIPWM7_HBAT50_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT50_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT50_RESERVED1_SHIFT))

#define  HIPWM7_HBAT50_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT50_BATLAST_SHIFT 19
#define  HIPWM7_HBAT50_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT50_BATLAST_MASK) >> HIPWM7_HBAT50_BATLAST_SHIFT)
#define  HIPWM7_HBAT50_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT50_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT50_BATLAST_SHIFT))

#define  HIPWM7_HBAT50_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT50_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT50_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT50_BATSIGN_MASK) >> HIPWM7_HBAT50_BATSIGN_SHIFT)
#define  HIPWM7_HBAT50_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT50_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT50_BATSIGN_SHIFT))

#define  HIPWM7_HBAT50_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT50_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT50_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT50_BATSHIFT_MASK) >> HIPWM7_HBAT50_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT50_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT50_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT50_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT50_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT50_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT50_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT50_BATFRAC_MASK) >> HIPWM7_HBAT50_BATFRAC_SHIFT)
#define  HIPWM7_HBAT50_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT50_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT50_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 52 of 64) (HBAT51)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 52 of 64)*/
//====================================================================

#define  HIPWM7_HBAT51_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT51_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT51_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT51_RESERVED1_MASK) >> HIPWM7_HBAT51_RESERVED1_SHIFT)
#define  HIPWM7_HBAT51_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT51_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT51_RESERVED1_SHIFT))

#define  HIPWM7_HBAT51_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT51_BATLAST_SHIFT 19
#define  HIPWM7_HBAT51_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT51_BATLAST_MASK) >> HIPWM7_HBAT51_BATLAST_SHIFT)
#define  HIPWM7_HBAT51_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT51_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT51_BATLAST_SHIFT))

#define  HIPWM7_HBAT51_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT51_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT51_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT51_BATSIGN_MASK) >> HIPWM7_HBAT51_BATSIGN_SHIFT)
#define  HIPWM7_HBAT51_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT51_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT51_BATSIGN_SHIFT))

#define  HIPWM7_HBAT51_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT51_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT51_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT51_BATSHIFT_MASK) >> HIPWM7_HBAT51_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT51_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT51_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT51_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT51_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT51_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT51_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT51_BATFRAC_MASK) >> HIPWM7_HBAT51_BATFRAC_SHIFT)
#define  HIPWM7_HBAT51_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT51_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT51_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 53 of 64) (HBAT52)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 53 of 64)*/
//====================================================================

#define  HIPWM7_HBAT52_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT52_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT52_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT52_RESERVED1_MASK) >> HIPWM7_HBAT52_RESERVED1_SHIFT)
#define  HIPWM7_HBAT52_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT52_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT52_RESERVED1_SHIFT))

#define  HIPWM7_HBAT52_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT52_BATLAST_SHIFT 19
#define  HIPWM7_HBAT52_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT52_BATLAST_MASK) >> HIPWM7_HBAT52_BATLAST_SHIFT)
#define  HIPWM7_HBAT52_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT52_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT52_BATLAST_SHIFT))

#define  HIPWM7_HBAT52_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT52_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT52_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT52_BATSIGN_MASK) >> HIPWM7_HBAT52_BATSIGN_SHIFT)
#define  HIPWM7_HBAT52_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT52_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT52_BATSIGN_SHIFT))

#define  HIPWM7_HBAT52_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT52_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT52_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT52_BATSHIFT_MASK) >> HIPWM7_HBAT52_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT52_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT52_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT52_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT52_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT52_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT52_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT52_BATFRAC_MASK) >> HIPWM7_HBAT52_BATFRAC_SHIFT)
#define  HIPWM7_HBAT52_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT52_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT52_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 54 of 64) (HBAT53)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 54 of 64)*/
//====================================================================

#define  HIPWM7_HBAT53_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT53_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT53_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT53_RESERVED1_MASK) >> HIPWM7_HBAT53_RESERVED1_SHIFT)
#define  HIPWM7_HBAT53_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT53_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT53_RESERVED1_SHIFT))

#define  HIPWM7_HBAT53_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT53_BATLAST_SHIFT 19
#define  HIPWM7_HBAT53_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT53_BATLAST_MASK) >> HIPWM7_HBAT53_BATLAST_SHIFT)
#define  HIPWM7_HBAT53_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT53_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT53_BATLAST_SHIFT))

#define  HIPWM7_HBAT53_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT53_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT53_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT53_BATSIGN_MASK) >> HIPWM7_HBAT53_BATSIGN_SHIFT)
#define  HIPWM7_HBAT53_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT53_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT53_BATSIGN_SHIFT))

#define  HIPWM7_HBAT53_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT53_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT53_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT53_BATSHIFT_MASK) >> HIPWM7_HBAT53_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT53_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT53_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT53_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT53_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT53_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT53_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT53_BATFRAC_MASK) >> HIPWM7_HBAT53_BATFRAC_SHIFT)
#define  HIPWM7_HBAT53_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT53_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT53_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 55 of 64) (HBAT54)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 55 of 64)*/
//====================================================================

#define  HIPWM7_HBAT54_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT54_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT54_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT54_RESERVED1_MASK) >> HIPWM7_HBAT54_RESERVED1_SHIFT)
#define  HIPWM7_HBAT54_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT54_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT54_RESERVED1_SHIFT))

#define  HIPWM7_HBAT54_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT54_BATLAST_SHIFT 19
#define  HIPWM7_HBAT54_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT54_BATLAST_MASK) >> HIPWM7_HBAT54_BATLAST_SHIFT)
#define  HIPWM7_HBAT54_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT54_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT54_BATLAST_SHIFT))

#define  HIPWM7_HBAT54_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT54_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT54_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT54_BATSIGN_MASK) >> HIPWM7_HBAT54_BATSIGN_SHIFT)
#define  HIPWM7_HBAT54_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT54_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT54_BATSIGN_SHIFT))

#define  HIPWM7_HBAT54_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT54_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT54_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT54_BATSHIFT_MASK) >> HIPWM7_HBAT54_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT54_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT54_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT54_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT54_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT54_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT54_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT54_BATFRAC_MASK) >> HIPWM7_HBAT54_BATFRAC_SHIFT)
#define  HIPWM7_HBAT54_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT54_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT54_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 56 of 64) (HBAT55)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 56 of 64)*/
//====================================================================

#define  HIPWM7_HBAT55_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT55_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT55_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT55_RESERVED1_MASK) >> HIPWM7_HBAT55_RESERVED1_SHIFT)
#define  HIPWM7_HBAT55_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT55_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT55_RESERVED1_SHIFT))

#define  HIPWM7_HBAT55_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT55_BATLAST_SHIFT 19
#define  HIPWM7_HBAT55_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT55_BATLAST_MASK) >> HIPWM7_HBAT55_BATLAST_SHIFT)
#define  HIPWM7_HBAT55_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT55_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT55_BATLAST_SHIFT))

#define  HIPWM7_HBAT55_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT55_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT55_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT55_BATSIGN_MASK) >> HIPWM7_HBAT55_BATSIGN_SHIFT)
#define  HIPWM7_HBAT55_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT55_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT55_BATSIGN_SHIFT))

#define  HIPWM7_HBAT55_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT55_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT55_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT55_BATSHIFT_MASK) >> HIPWM7_HBAT55_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT55_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT55_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT55_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT55_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT55_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT55_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT55_BATFRAC_MASK) >> HIPWM7_HBAT55_BATFRAC_SHIFT)
#define  HIPWM7_HBAT55_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT55_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT55_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 57 of 64) (HBAT56)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 57 of 64)*/
//====================================================================

#define  HIPWM7_HBAT56_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT56_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT56_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT56_RESERVED1_MASK) >> HIPWM7_HBAT56_RESERVED1_SHIFT)
#define  HIPWM7_HBAT56_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT56_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT56_RESERVED1_SHIFT))

#define  HIPWM7_HBAT56_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT56_BATLAST_SHIFT 19
#define  HIPWM7_HBAT56_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT56_BATLAST_MASK) >> HIPWM7_HBAT56_BATLAST_SHIFT)
#define  HIPWM7_HBAT56_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT56_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT56_BATLAST_SHIFT))

#define  HIPWM7_HBAT56_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT56_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT56_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT56_BATSIGN_MASK) >> HIPWM7_HBAT56_BATSIGN_SHIFT)
#define  HIPWM7_HBAT56_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT56_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT56_BATSIGN_SHIFT))

#define  HIPWM7_HBAT56_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT56_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT56_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT56_BATSHIFT_MASK) >> HIPWM7_HBAT56_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT56_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT56_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT56_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT56_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT56_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT56_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT56_BATFRAC_MASK) >> HIPWM7_HBAT56_BATFRAC_SHIFT)
#define  HIPWM7_HBAT56_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT56_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT56_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 58 of 64) (HBAT57)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 58 of 64)*/
//====================================================================

#define  HIPWM7_HBAT57_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT57_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT57_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT57_RESERVED1_MASK) >> HIPWM7_HBAT57_RESERVED1_SHIFT)
#define  HIPWM7_HBAT57_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT57_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT57_RESERVED1_SHIFT))

#define  HIPWM7_HBAT57_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT57_BATLAST_SHIFT 19
#define  HIPWM7_HBAT57_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT57_BATLAST_MASK) >> HIPWM7_HBAT57_BATLAST_SHIFT)
#define  HIPWM7_HBAT57_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT57_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT57_BATLAST_SHIFT))

#define  HIPWM7_HBAT57_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT57_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT57_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT57_BATSIGN_MASK) >> HIPWM7_HBAT57_BATSIGN_SHIFT)
#define  HIPWM7_HBAT57_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT57_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT57_BATSIGN_SHIFT))

#define  HIPWM7_HBAT57_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT57_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT57_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT57_BATSHIFT_MASK) >> HIPWM7_HBAT57_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT57_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT57_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT57_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT57_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT57_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT57_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT57_BATFRAC_MASK) >> HIPWM7_HBAT57_BATFRAC_SHIFT)
#define  HIPWM7_HBAT57_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT57_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT57_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 59 of 64) (HBAT58)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 59 of 64)*/
//====================================================================

#define  HIPWM7_HBAT58_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT58_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT58_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT58_RESERVED1_MASK) >> HIPWM7_HBAT58_RESERVED1_SHIFT)
#define  HIPWM7_HBAT58_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT58_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT58_RESERVED1_SHIFT))

#define  HIPWM7_HBAT58_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT58_BATLAST_SHIFT 19
#define  HIPWM7_HBAT58_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT58_BATLAST_MASK) >> HIPWM7_HBAT58_BATLAST_SHIFT)
#define  HIPWM7_HBAT58_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT58_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT58_BATLAST_SHIFT))

#define  HIPWM7_HBAT58_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT58_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT58_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT58_BATSIGN_MASK) >> HIPWM7_HBAT58_BATSIGN_SHIFT)
#define  HIPWM7_HBAT58_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT58_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT58_BATSIGN_SHIFT))

#define  HIPWM7_HBAT58_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT58_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT58_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT58_BATSHIFT_MASK) >> HIPWM7_HBAT58_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT58_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT58_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT58_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT58_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT58_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT58_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT58_BATFRAC_MASK) >> HIPWM7_HBAT58_BATFRAC_SHIFT)
#define  HIPWM7_HBAT58_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT58_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT58_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 60 of 64) (HBAT59)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 60 of 64)*/
//====================================================================

#define  HIPWM7_HBAT59_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT59_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT59_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT59_RESERVED1_MASK) >> HIPWM7_HBAT59_RESERVED1_SHIFT)
#define  HIPWM7_HBAT59_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT59_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT59_RESERVED1_SHIFT))

#define  HIPWM7_HBAT59_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT59_BATLAST_SHIFT 19
#define  HIPWM7_HBAT59_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT59_BATLAST_MASK) >> HIPWM7_HBAT59_BATLAST_SHIFT)
#define  HIPWM7_HBAT59_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT59_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT59_BATLAST_SHIFT))

#define  HIPWM7_HBAT59_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT59_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT59_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT59_BATSIGN_MASK) >> HIPWM7_HBAT59_BATSIGN_SHIFT)
#define  HIPWM7_HBAT59_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT59_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT59_BATSIGN_SHIFT))

#define  HIPWM7_HBAT59_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT59_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT59_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT59_BATSHIFT_MASK) >> HIPWM7_HBAT59_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT59_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT59_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT59_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT59_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT59_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT59_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT59_BATFRAC_MASK) >> HIPWM7_HBAT59_BATFRAC_SHIFT)
#define  HIPWM7_HBAT59_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT59_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT59_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 61 of 64) (HBAT60)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 61 of 64)*/
//====================================================================

#define  HIPWM7_HBAT60_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT60_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT60_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT60_RESERVED1_MASK) >> HIPWM7_HBAT60_RESERVED1_SHIFT)
#define  HIPWM7_HBAT60_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT60_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT60_RESERVED1_SHIFT))

#define  HIPWM7_HBAT60_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT60_BATLAST_SHIFT 19
#define  HIPWM7_HBAT60_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT60_BATLAST_MASK) >> HIPWM7_HBAT60_BATLAST_SHIFT)
#define  HIPWM7_HBAT60_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT60_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT60_BATLAST_SHIFT))

#define  HIPWM7_HBAT60_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT60_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT60_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT60_BATSIGN_MASK) >> HIPWM7_HBAT60_BATSIGN_SHIFT)
#define  HIPWM7_HBAT60_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT60_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT60_BATSIGN_SHIFT))

#define  HIPWM7_HBAT60_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT60_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT60_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT60_BATSHIFT_MASK) >> HIPWM7_HBAT60_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT60_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT60_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT60_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT60_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT60_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT60_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT60_BATFRAC_MASK) >> HIPWM7_HBAT60_BATFRAC_SHIFT)
#define  HIPWM7_HBAT60_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT60_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT60_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 62 of 64) (HBAT61)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 62 of 64)*/
//====================================================================

#define  HIPWM7_HBAT61_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT61_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT61_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT61_RESERVED1_MASK) >> HIPWM7_HBAT61_RESERVED1_SHIFT)
#define  HIPWM7_HBAT61_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT61_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT61_RESERVED1_SHIFT))

#define  HIPWM7_HBAT61_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT61_BATLAST_SHIFT 19
#define  HIPWM7_HBAT61_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT61_BATLAST_MASK) >> HIPWM7_HBAT61_BATLAST_SHIFT)
#define  HIPWM7_HBAT61_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT61_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT61_BATLAST_SHIFT))

#define  HIPWM7_HBAT61_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT61_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT61_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT61_BATSIGN_MASK) >> HIPWM7_HBAT61_BATSIGN_SHIFT)
#define  HIPWM7_HBAT61_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT61_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT61_BATSIGN_SHIFT))

#define  HIPWM7_HBAT61_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT61_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT61_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT61_BATSHIFT_MASK) >> HIPWM7_HBAT61_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT61_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT61_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT61_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT61_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT61_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT61_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT61_BATFRAC_MASK) >> HIPWM7_HBAT61_BATFRAC_SHIFT)
#define  HIPWM7_HBAT61_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT61_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT61_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 63 of 64) (HBAT62)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 63 of 64)*/
//====================================================================

#define  HIPWM7_HBAT62_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT62_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT62_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT62_RESERVED1_MASK) >> HIPWM7_HBAT62_RESERVED1_SHIFT)
#define  HIPWM7_HBAT62_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT62_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT62_RESERVED1_SHIFT))

#define  HIPWM7_HBAT62_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT62_BATLAST_SHIFT 19
#define  HIPWM7_HBAT62_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT62_BATLAST_MASK) >> HIPWM7_HBAT62_BATLAST_SHIFT)
#define  HIPWM7_HBAT62_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT62_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT62_BATLAST_SHIFT))

#define  HIPWM7_HBAT62_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT62_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT62_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT62_BATSIGN_MASK) >> HIPWM7_HBAT62_BATSIGN_SHIFT)
#define  HIPWM7_HBAT62_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT62_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT62_BATSIGN_SHIFT))

#define  HIPWM7_HBAT62_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT62_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT62_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT62_BATSHIFT_MASK) >> HIPWM7_HBAT62_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT62_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT62_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT62_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT62_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT62_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT62_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT62_BATFRAC_MASK) >> HIPWM7_HBAT62_BATFRAC_SHIFT)
#define  HIPWM7_HBAT62_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT62_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT62_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM BENDER Acceleration Table (Instance 64 of 64) (HBAT63)
/** \brief The HiPWM BENDER Acceleration Table (HBAT) consists of 64 entries. (Instance 64 of 64)*/
//====================================================================

#define  HIPWM7_HBAT63_RESERVED1_MASK 0xfff00000
#define  HIPWM7_HBAT63_RESERVED1_SHIFT 20
#define  HIPWM7_HBAT63_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT63_RESERVED1_MASK) >> HIPWM7_HBAT63_RESERVED1_SHIFT)
#define  HIPWM7_HBAT63_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT63_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HBAT63_RESERVED1_SHIFT))

#define  HIPWM7_HBAT63_BATLAST_MASK 0x80000
#define  HIPWM7_HBAT63_BATLAST_SHIFT 19
#define  HIPWM7_HBAT63_BATLAST_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT63_BATLAST_MASK) >> HIPWM7_HBAT63_BATLAST_SHIFT)
#define  HIPWM7_HBAT63_BATLAST_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT63_BATLAST_MASK) | (((uint32_t)val) << HIPWM7_HBAT63_BATLAST_SHIFT))

#define  HIPWM7_HBAT63_BATSIGN_MASK 0x40000
#define  HIPWM7_HBAT63_BATSIGN_SHIFT 18
#define  HIPWM7_HBAT63_BATSIGN_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT63_BATSIGN_MASK) >> HIPWM7_HBAT63_BATSIGN_SHIFT)
#define  HIPWM7_HBAT63_BATSIGN_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT63_BATSIGN_MASK) | (((uint32_t)val) << HIPWM7_HBAT63_BATSIGN_SHIFT))

#define  HIPWM7_HBAT63_BATSHIFT_MASK 0x3c000
#define  HIPWM7_HBAT63_BATSHIFT_SHIFT 14
#define  HIPWM7_HBAT63_BATSHIFT_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT63_BATSHIFT_MASK) >> HIPWM7_HBAT63_BATSHIFT_SHIFT)
#define  HIPWM7_HBAT63_BATSHIFT_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT63_BATSHIFT_MASK) | (((uint32_t)val) << HIPWM7_HBAT63_BATSHIFT_SHIFT))

#define  HIPWM7_HBAT63_BATFRAC_MASK 0x3fff
#define  HIPWM7_HBAT63_BATFRAC_SHIFT 0
#define  HIPWM7_HBAT63_BATFRAC_MASK_SHIFT(reg) (((reg) & HIPWM7_HBAT63_BATFRAC_MASK) >> HIPWM7_HBAT63_BATFRAC_SHIFT)
#define  HIPWM7_HBAT63_BATFRAC_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HBAT63_BATFRAC_MASK) | (((uint32_t)val) << HIPWM7_HBAT63_BATFRAC_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 1 of 12) (HMIC0)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 1 of 12)*/
//====================================================================

#define  HIPWM7_HMIC0_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC0_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC0_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC0_RESERVED1_MASK) >> HIPWM7_HMIC0_RESERVED1_SHIFT)
#define  HIPWM7_HMIC0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC0_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC0_RESERVED1_SHIFT))

#define  HIPWM7_HMIC0_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC0_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC0_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC0_MICINTPIX_MASK) >> HIPWM7_HMIC0_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC0_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC0_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC0_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC0_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC0_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC0_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC0_MICFRACPIX_MASK) >> HIPWM7_HMIC0_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC0_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC0_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC0_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 2 of 12) (HMIC1)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 2 of 12)*/
//====================================================================

#define  HIPWM7_HMIC1_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC1_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC1_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC1_RESERVED1_MASK) >> HIPWM7_HMIC1_RESERVED1_SHIFT)
#define  HIPWM7_HMIC1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC1_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC1_RESERVED1_SHIFT))

#define  HIPWM7_HMIC1_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC1_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC1_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC1_MICINTPIX_MASK) >> HIPWM7_HMIC1_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC1_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC1_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC1_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC1_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC1_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC1_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC1_MICFRACPIX_MASK) >> HIPWM7_HMIC1_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC1_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC1_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC1_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 3 of 12) (HMIC2)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 3 of 12)*/
//====================================================================

#define  HIPWM7_HMIC2_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC2_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC2_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC2_RESERVED1_MASK) >> HIPWM7_HMIC2_RESERVED1_SHIFT)
#define  HIPWM7_HMIC2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC2_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC2_RESERVED1_SHIFT))

#define  HIPWM7_HMIC2_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC2_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC2_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC2_MICINTPIX_MASK) >> HIPWM7_HMIC2_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC2_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC2_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC2_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC2_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC2_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC2_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC2_MICFRACPIX_MASK) >> HIPWM7_HMIC2_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC2_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC2_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC2_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 4 of 12) (HMIC3)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 4 of 12)*/
//====================================================================

#define  HIPWM7_HMIC3_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC3_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC3_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC3_RESERVED1_MASK) >> HIPWM7_HMIC3_RESERVED1_SHIFT)
#define  HIPWM7_HMIC3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC3_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC3_RESERVED1_SHIFT))

#define  HIPWM7_HMIC3_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC3_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC3_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC3_MICINTPIX_MASK) >> HIPWM7_HMIC3_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC3_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC3_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC3_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC3_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC3_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC3_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC3_MICFRACPIX_MASK) >> HIPWM7_HMIC3_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC3_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC3_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC3_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 5 of 12) (HMIC4)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 5 of 12)*/
//====================================================================

#define  HIPWM7_HMIC4_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC4_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC4_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC4_RESERVED1_MASK) >> HIPWM7_HMIC4_RESERVED1_SHIFT)
#define  HIPWM7_HMIC4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC4_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC4_RESERVED1_SHIFT))

#define  HIPWM7_HMIC4_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC4_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC4_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC4_MICINTPIX_MASK) >> HIPWM7_HMIC4_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC4_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC4_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC4_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC4_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC4_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC4_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC4_MICFRACPIX_MASK) >> HIPWM7_HMIC4_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC4_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC4_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC4_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 6 of 12) (HMIC5)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 6 of 12)*/
//====================================================================

#define  HIPWM7_HMIC5_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC5_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC5_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC5_RESERVED1_MASK) >> HIPWM7_HMIC5_RESERVED1_SHIFT)
#define  HIPWM7_HMIC5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC5_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC5_RESERVED1_SHIFT))

#define  HIPWM7_HMIC5_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC5_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC5_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC5_MICINTPIX_MASK) >> HIPWM7_HMIC5_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC5_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC5_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC5_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC5_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC5_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC5_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC5_MICFRACPIX_MASK) >> HIPWM7_HMIC5_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC5_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC5_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC5_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 7 of 12) (HMIC6)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 7 of 12)*/
//====================================================================

#define  HIPWM7_HMIC6_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC6_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC6_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC6_RESERVED1_MASK) >> HIPWM7_HMIC6_RESERVED1_SHIFT)
#define  HIPWM7_HMIC6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC6_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC6_RESERVED1_SHIFT))

#define  HIPWM7_HMIC6_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC6_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC6_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC6_MICINTPIX_MASK) >> HIPWM7_HMIC6_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC6_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC6_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC6_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC6_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC6_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC6_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC6_MICFRACPIX_MASK) >> HIPWM7_HMIC6_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC6_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC6_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC6_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 8 of 12) (HMIC7)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 8 of 12)*/
//====================================================================

#define  HIPWM7_HMIC7_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC7_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC7_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC7_RESERVED1_MASK) >> HIPWM7_HMIC7_RESERVED1_SHIFT)
#define  HIPWM7_HMIC7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC7_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC7_RESERVED1_SHIFT))

#define  HIPWM7_HMIC7_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC7_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC7_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC7_MICINTPIX_MASK) >> HIPWM7_HMIC7_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC7_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC7_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC7_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC7_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC7_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC7_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC7_MICFRACPIX_MASK) >> HIPWM7_HMIC7_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC7_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC7_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC7_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 9 of 12) (HMIC8)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 9 of 12)*/
//====================================================================

#define  HIPWM7_HMIC8_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC8_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC8_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC8_RESERVED1_MASK) >> HIPWM7_HMIC8_RESERVED1_SHIFT)
#define  HIPWM7_HMIC8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC8_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC8_RESERVED1_SHIFT))

#define  HIPWM7_HMIC8_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC8_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC8_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC8_MICINTPIX_MASK) >> HIPWM7_HMIC8_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC8_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC8_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC8_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC8_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC8_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC8_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC8_MICFRACPIX_MASK) >> HIPWM7_HMIC8_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC8_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC8_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC8_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 10 of 12) (HMIC9)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 10 of 12)*/
//====================================================================

#define  HIPWM7_HMIC9_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC9_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC9_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC9_RESERVED1_MASK) >> HIPWM7_HMIC9_RESERVED1_SHIFT)
#define  HIPWM7_HMIC9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC9_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC9_RESERVED1_SHIFT))

#define  HIPWM7_HMIC9_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC9_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC9_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC9_MICINTPIX_MASK) >> HIPWM7_HMIC9_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC9_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC9_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC9_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC9_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC9_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC9_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC9_MICFRACPIX_MASK) >> HIPWM7_HMIC9_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC9_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC9_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC9_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 11 of 12) (HMIC10)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 11 of 12)*/
//====================================================================

#define  HIPWM7_HMIC10_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC10_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC10_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC10_RESERVED1_MASK) >> HIPWM7_HMIC10_RESERVED1_SHIFT)
#define  HIPWM7_HMIC10_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC10_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC10_RESERVED1_SHIFT))

#define  HIPWM7_HMIC10_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC10_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC10_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC10_MICINTPIX_MASK) >> HIPWM7_HMIC10_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC10_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC10_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC10_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC10_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC10_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC10_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC10_MICFRACPIX_MASK) >> HIPWM7_HMIC10_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC10_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC10_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC10_MICFRACPIX_SHIFT))

//====================================================================
//Register: HiPWM Mirror Correction Margin Registers (Instance 12 of 12) (HMIC11)
/** \brief The HiPWM Mirror Correction Margin Registers are provided to allow for periodic line based image transformations.
        The number of the HMIC registers used is controlled by the numFacets field in the HVSync Configuration Register.
        For example if the numFacets field is set to 3, which indicates a 4 facet mirror, 4 HMIC registers will be used by
        the hardware.
        <br>
        If any sub-pixel or fractional margin is required, it's value is programmed into these registers. Again for the 
        case of a 4 facet mirror 4 HMIC registers will be used by the hardware. Even if the fractional margin is the same
        for every line, all 4 HMIC registers must be programmed with the desired sub-pixel margin. The 6-bit fraction allows
        for 1/64 pixel control if the PTwidth field in the HiPWM Configuration Register is set to 64 bits (a value of 0). If
        the PTwidth field is set to 32 bits (a value of 1) the least significant bit is ignored which allows for 1/32 pixel
        control.
        <br>
        The value in these registers is used in concert with the value in the Side Margins register. Due to the nature of
        the hardware, this register is subtracted from the value in the Side Margins Register.
        <br>
        Example: The Side Margins register has a value of 100 (integer pixels) and the HMiC Register has a value of 0x90.
        0x90 indicates an integer value of 2 and a fractional value of 24 which converts to 0.375 (24/2^6). Therefore the
        side margin would equal 100 - 2.375 = 97.625 pixels. (Instance 12 of 12)*/
//====================================================================

#define  HIPWM7_HMIC11_RESERVED1_MASK 0xfffff000
#define  HIPWM7_HMIC11_RESERVED1_SHIFT 12
#define  HIPWM7_HMIC11_RESERVED1_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC11_RESERVED1_MASK) >> HIPWM7_HMIC11_RESERVED1_SHIFT)
#define  HIPWM7_HMIC11_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC11_RESERVED1_MASK) | (((uint32_t)val) << HIPWM7_HMIC11_RESERVED1_SHIFT))

#define  HIPWM7_HMIC11_MICINTPIX_MASK 0xfc0
#define  HIPWM7_HMIC11_MICINTPIX_SHIFT 6
#define  HIPWM7_HMIC11_MICINTPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC11_MICINTPIX_MASK) >> HIPWM7_HMIC11_MICINTPIX_SHIFT)
#define  HIPWM7_HMIC11_MICINTPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC11_MICINTPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC11_MICINTPIX_SHIFT))

#define  HIPWM7_HMIC11_MICFRACPIX_MASK 0x3f
#define  HIPWM7_HMIC11_MICFRACPIX_SHIFT 0
#define  HIPWM7_HMIC11_MICFRACPIX_MASK_SHIFT(reg) (((reg) & HIPWM7_HMIC11_MICFRACPIX_MASK) >> HIPWM7_HMIC11_MICFRACPIX_SHIFT)
#define  HIPWM7_HMIC11_MICFRACPIX_REPLACE_VAL(reg,val) (((reg) & ~HIPWM7_HMIC11_MICFRACPIX_MASK) | (((uint32_t)val) << HIPWM7_HMIC11_MICFRACPIX_SHIFT))

#endif // MVDO
