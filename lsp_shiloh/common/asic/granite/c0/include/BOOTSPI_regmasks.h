 /*
 *************************************************************************
 *
 * Copyright (c) 2009 Marvell International, Ltd. All Rights Reserved
 *
 *                       Marvell Confidential
 *
 *************************************************************************
 */
/**
 * \file BOOTSPI_regmasks.h
 * Generated using RegBuild 1.6.1
 *
 *************************************************************************
 */

#ifndef _BOOTSPI_REGMASKS_H_
#define _BOOTSPI_REGMASKS_H_

#include <stdint.h>

//====================================================================
//
//Register File: Bootspi module registers (BOOTSPI)
/** \brief Registers for the bootspi module.*/
//
//====================================================================

//====================================================================
//Register: Bootspi configuration register (BSCR)
/** \brief Various bitfields used to configure the bootspi module.*/
//====================================================================

#define  BOOTSPI_BSCR_SETUPHOLDDELAY_MASK 0xff000000
#define  BOOTSPI_BSCR_SETUPHOLDDELAY_SHIFT 24
#define  BOOTSPI_BSCR_SETUPHOLDDELAY_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_SETUPHOLDDELAY_MASK) >> BOOTSPI_BSCR_SETUPHOLDDELAY_SHIFT)
#define  BOOTSPI_BSCR_SETUPHOLDDELAY_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_SETUPHOLDDELAY_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_SETUPHOLDDELAY_SHIFT))

#define  BOOTSPI_BSCR_DESELDELAY_MASK 0xff0000
#define  BOOTSPI_BSCR_DESELDELAY_SHIFT 16
#define  BOOTSPI_BSCR_DESELDELAY_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_DESELDELAY_MASK) >> BOOTSPI_BSCR_DESELDELAY_SHIFT)
#define  BOOTSPI_BSCR_DESELDELAY_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_DESELDELAY_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_DESELDELAY_SHIFT))

#define  BOOTSPI_BSCR_CACHEENABLE_MASK 0x8000
#define  BOOTSPI_BSCR_CACHEENABLE_SHIFT 15
#define  BOOTSPI_BSCR_CACHEENABLE_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_CACHEENABLE_MASK) >> BOOTSPI_BSCR_CACHEENABLE_SHIFT)
#define  BOOTSPI_BSCR_CACHEENABLE_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_CACHEENABLE_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_CACHEENABLE_SHIFT))

#define  BOOTSPI_BSCR_BSPIACTIVE_MASK 0x4000
#define  BOOTSPI_BSCR_BSPIACTIVE_SHIFT 14
#define  BOOTSPI_BSCR_BSPIACTIVE_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_BSPIACTIVE_MASK) >> BOOTSPI_BSCR_BSPIACTIVE_SHIFT)
#define  BOOTSPI_BSCR_BSPIACTIVE_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_BSPIACTIVE_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_BSPIACTIVE_SHIFT))

#define  BOOTSPI_BSCR_NUMDUMMYBYTES_MASK 0x3000
#define  BOOTSPI_BSCR_NUMDUMMYBYTES_SHIFT 12
#define  BOOTSPI_BSCR_NUMDUMMYBYTES_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_NUMDUMMYBYTES_MASK) >> BOOTSPI_BSCR_NUMDUMMYBYTES_SHIFT)
#define  BOOTSPI_BSCR_NUMDUMMYBYTES_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_NUMDUMMYBYTES_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_NUMDUMMYBYTES_SHIFT))

#define  BOOTSPI_BSCR_PARTTYPE_MASK 0xc00
#define  BOOTSPI_BSCR_PARTTYPE_SHIFT 10
#define  BOOTSPI_BSCR_PARTTYPE_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_PARTTYPE_MASK) >> BOOTSPI_BSCR_PARTTYPE_SHIFT)
#define  BOOTSPI_BSCR_PARTTYPE_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_PARTTYPE_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_PARTTYPE_SHIFT))

#define  BOOTSPI_BSCR_INTERFACEMODE_MASK 0x300
#define  BOOTSPI_BSCR_INTERFACEMODE_SHIFT 8
#define  BOOTSPI_BSCR_INTERFACEMODE_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_INTERFACEMODE_MASK) >> BOOTSPI_BSCR_INTERFACEMODE_SHIFT)
#define  BOOTSPI_BSCR_INTERFACEMODE_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_INTERFACEMODE_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_INTERFACEMODE_SHIFT))

#define  BOOTSPI_BSCR_CLKDIVISOR_MASK 0xff
#define  BOOTSPI_BSCR_CLKDIVISOR_SHIFT 0
#define  BOOTSPI_BSCR_CLKDIVISOR_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCR_CLKDIVISOR_MASK) >> BOOTSPI_BSCR_CLKDIVISOR_SHIFT)
#define  BOOTSPI_BSCR_CLKDIVISOR_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCR_CLKDIVISOR_MASK) | (((uint32_t)val) << BOOTSPI_BSCR_CLKDIVISOR_SHIFT))

//====================================================================
//Register: Bootspi Bypass Register (BSBR)
/** \brief This register directly controls the output pins when in BYPASS mode.*/
//====================================================================

#define  BOOTSPI_BSBR_RESERVED1_MASK 0xffffc000
#define  BOOTSPI_BSBR_RESERVED1_SHIFT 14
#define  BOOTSPI_BSBR_RESERVED1_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_RESERVED1_MASK) >> BOOTSPI_BSBR_RESERVED1_SHIFT)
#define  BOOTSPI_BSBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_RESERVED1_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_RESERVED1_SHIFT))

#define  BOOTSPI_BSBR_NCS_MASK 0x3f00
#define  BOOTSPI_BSBR_NCS_SHIFT 8
#define  BOOTSPI_BSBR_NCS_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_NCS_MASK) >> BOOTSPI_BSBR_NCS_SHIFT)
#define  BOOTSPI_BSBR_NCS_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_NCS_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_NCS_SHIFT))

#define  BOOTSPI_BSBR_RESERVED2_MASK 0xe0
#define  BOOTSPI_BSBR_RESERVED2_SHIFT 5
#define  BOOTSPI_BSBR_RESERVED2_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_RESERVED2_MASK) >> BOOTSPI_BSBR_RESERVED2_SHIFT)
#define  BOOTSPI_BSBR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_RESERVED2_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_RESERVED2_SHIFT))

#define  BOOTSPI_BSBR_TXD_MASK 0x10
#define  BOOTSPI_BSBR_TXD_SHIFT 4
#define  BOOTSPI_BSBR_TXD_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_TXD_MASK) >> BOOTSPI_BSBR_TXD_SHIFT)
#define  BOOTSPI_BSBR_TXD_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_TXD_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_TXD_SHIFT))

#define  BOOTSPI_BSBR_RESERVED3_MASK 0xe
#define  BOOTSPI_BSBR_RESERVED3_SHIFT 1
#define  BOOTSPI_BSBR_RESERVED3_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_RESERVED3_MASK) >> BOOTSPI_BSBR_RESERVED3_SHIFT)
#define  BOOTSPI_BSBR_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_RESERVED3_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_RESERVED3_SHIFT))

#define  BOOTSPI_BSBR_CLK_MASK 0x1
#define  BOOTSPI_BSBR_CLK_SHIFT 0
#define  BOOTSPI_BSBR_CLK_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSBR_CLK_MASK) >> BOOTSPI_BSBR_CLK_SHIFT)
#define  BOOTSPI_BSBR_CLK_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSBR_CLK_MASK) | (((uint32_t)val) << BOOTSPI_BSBR_CLK_SHIFT))

//====================================================================
//Register: Bootspi Command Register (BSCMDR)
/** \brief This register is used only in "manual half duplex mode". It should be written only when the "CommandBusy" bit is clear in the status register. The CommandBusy bit returns low after the command has completed.*/
//====================================================================

#define  BOOTSPI_BSCMDR_RESERVED1_MASK 0xfffff000
#define  BOOTSPI_BSCMDR_RESERVED1_SHIFT 12
#define  BOOTSPI_BSCMDR_RESERVED1_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCMDR_RESERVED1_MASK) >> BOOTSPI_BSCMDR_RESERVED1_SHIFT)
#define  BOOTSPI_BSCMDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCMDR_RESERVED1_MASK) | (((uint32_t)val) << BOOTSPI_BSCMDR_RESERVED1_SHIFT))

#define  BOOTSPI_BSCMDR_COMMAND_MASK 0xf00
#define  BOOTSPI_BSCMDR_COMMAND_SHIFT 8
#define  BOOTSPI_BSCMDR_COMMAND_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCMDR_COMMAND_MASK) >> BOOTSPI_BSCMDR_COMMAND_SHIFT)
#define  BOOTSPI_BSCMDR_COMMAND_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCMDR_COMMAND_MASK) | (((uint32_t)val) << BOOTSPI_BSCMDR_COMMAND_SHIFT))

#define  BOOTSPI_BSCMDR_DATA_MASK 0xff
#define  BOOTSPI_BSCMDR_DATA_SHIFT 0
#define  BOOTSPI_BSCMDR_DATA_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSCMDR_DATA_MASK) >> BOOTSPI_BSCMDR_DATA_SHIFT)
#define  BOOTSPI_BSCMDR_DATA_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSCMDR_DATA_MASK) | (((uint32_t)val) << BOOTSPI_BSCMDR_DATA_SHIFT))

//====================================================================
//Register: Bootspi Status Register (BSSR)
/** \brief Bootable SPI status register*/
//====================================================================

#define  BOOTSPI_BSSR_RESERVED1_MASK 0xf8000000
#define  BOOTSPI_BSSR_RESERVED1_SHIFT 27
#define  BOOTSPI_BSSR_RESERVED1_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_RESERVED1_MASK) >> BOOTSPI_BSSR_RESERVED1_SHIFT)
#define  BOOTSPI_BSSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_RESERVED1_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_RESERVED1_SHIFT))

#define  BOOTSPI_BSSR_DETECTEDBOOTBANK_MASK 0x7000000
#define  BOOTSPI_BSSR_DETECTEDBOOTBANK_SHIFT 24
#define  BOOTSPI_BSSR_DETECTEDBOOTBANK_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_DETECTEDBOOTBANK_MASK) >> BOOTSPI_BSSR_DETECTEDBOOTBANK_SHIFT)
#define  BOOTSPI_BSSR_DETECTEDBOOTBANK_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_DETECTEDBOOTBANK_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_DETECTEDBOOTBANK_SHIFT))

#define  BOOTSPI_BSSR_RESERVED2_MASK 0xf80000
#define  BOOTSPI_BSSR_RESERVED2_SHIFT 19
#define  BOOTSPI_BSSR_RESERVED2_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_RESERVED2_MASK) >> BOOTSPI_BSSR_RESERVED2_SHIFT)
#define  BOOTSPI_BSSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_RESERVED2_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_RESERVED2_SHIFT))

#define  BOOTSPI_BSSR_NBOOT_DIMM_MASK 0x60000
#define  BOOTSPI_BSSR_NBOOT_DIMM_SHIFT 17
#define  BOOTSPI_BSSR_NBOOT_DIMM_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_NBOOT_DIMM_MASK) >> BOOTSPI_BSSR_NBOOT_DIMM_SHIFT)
#define  BOOTSPI_BSSR_NBOOT_DIMM_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_NBOOT_DIMM_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_NBOOT_DIMM_SHIFT))

#define  BOOTSPI_BSSR_EEPROM_MASK 0x10000
#define  BOOTSPI_BSSR_EEPROM_SHIFT 16
#define  BOOTSPI_BSSR_EEPROM_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_EEPROM_MASK) >> BOOTSPI_BSSR_EEPROM_SHIFT)
#define  BOOTSPI_BSSR_EEPROM_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_EEPROM_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_EEPROM_SHIFT))

#define  BOOTSPI_BSSR_RESERVED3_MASK 0xe000
#define  BOOTSPI_BSSR_RESERVED3_SHIFT 13
#define  BOOTSPI_BSSR_RESERVED3_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_RESERVED3_MASK) >> BOOTSPI_BSSR_RESERVED3_SHIFT)
#define  BOOTSPI_BSSR_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_RESERVED3_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_RESERVED3_SHIFT))

#define  BOOTSPI_BSSR_RXD_MASK 0x1000
#define  BOOTSPI_BSSR_RXD_SHIFT 12
#define  BOOTSPI_BSSR_RXD_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_RXD_MASK) >> BOOTSPI_BSSR_RXD_SHIFT)
#define  BOOTSPI_BSSR_RXD_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_RXD_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_RXD_SHIFT))

#define  BOOTSPI_BSSR_RESERVED4_MASK 0xe00
#define  BOOTSPI_BSSR_RESERVED4_SHIFT 9
#define  BOOTSPI_BSSR_RESERVED4_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_RESERVED4_MASK) >> BOOTSPI_BSSR_RESERVED4_SHIFT)
#define  BOOTSPI_BSSR_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_RESERVED4_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_RESERVED4_SHIFT))

#define  BOOTSPI_BSSR_COMMANDBUSY_MASK 0x100
#define  BOOTSPI_BSSR_COMMANDBUSY_SHIFT 8
#define  BOOTSPI_BSSR_COMMANDBUSY_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_COMMANDBUSY_MASK) >> BOOTSPI_BSSR_COMMANDBUSY_SHIFT)
#define  BOOTSPI_BSSR_COMMANDBUSY_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_COMMANDBUSY_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_COMMANDBUSY_SHIFT))

#define  BOOTSPI_BSSR_DATA_MASK 0xff
#define  BOOTSPI_BSSR_DATA_SHIFT 0
#define  BOOTSPI_BSSR_DATA_MASK_SHIFT(reg) (((reg) & BOOTSPI_BSSR_DATA_MASK) >> BOOTSPI_BSSR_DATA_SHIFT)
#define  BOOTSPI_BSSR_DATA_REPLACE_VAL(reg,val) (((reg) & ~BOOTSPI_BSSR_DATA_MASK) | (((uint32_t)val) << BOOTSPI_BSSR_DATA_SHIFT))

#endif // BOOTSPI
