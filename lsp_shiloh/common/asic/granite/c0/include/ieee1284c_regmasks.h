 /*
 **************************************************************************************
 *
 * Copyright (c) 2010 Marvell International, Ltd.
 *
 **************************************************************************************
 *
 * Marvell Commercial License Option
 *
 * If you received this File from Marvell as part of a proprietary software release,
 * the File is considered Marvell Proprietary and Confidential Information, and is
 * licensed to you under the terms of the applicable Commercial License.
 *
 **************************************************************************************
 *
 * Marvell GPL License Option
 *
 * If you received this File from Marvell as part of a Linux distribution, this File
 * is licensed to you in accordance with the terms and conditions of the General Public
 * License Version 2, June 1991 (the "GPL License").  You can redistribute it and/or
 * modify it under the terms of the GPL License; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GPL License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see http://www.gnu.org/licenses/.
 *
 **************************************************************************************
 *
 * \file ieee1284c_regmasks.h
 * Generated using RegBuild 1.6.1
 *
 *************************************************************************
 */

#ifndef _IEEE1284_REG_REGMASKS_H_
#define _IEEE1284_REG_REGMASKS_H_

#include <stdint.h>

//====================================================================
//
//Register File: IEEE1284c Parellel Port Registers (ieee1284_reg)
/** \brief Registers for the IEEE 1284c Parallel Port module.*/
//
//====================================================================

//====================================================================
//Register: Parallel Port Configuration Register (PPCR)
/** \brief This register is used to configure and enable the hardware data transfer modes.*/
//====================================================================

#define  IEEE1284_REG_PPCR_RESERVED1_MASK 0xffff0000
#define  IEEE1284_REG_PPCR_RESERVED1_SHIFT 16
#define  IEEE1284_REG_PPCR_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_RESERVED1_MASK) >> IEEE1284_REG_PPCR_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPCR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_RESERVED1_SHIFT))

#define  IEEE1284_REG_PPCR_NACK_PW_MASK 0xff00
#define  IEEE1284_REG_PPCR_NACK_PW_SHIFT 8
#define  IEEE1284_REG_PPCR_NACK_PW_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_NACK_PW_MASK) >> IEEE1284_REG_PPCR_NACK_PW_SHIFT)
#define  IEEE1284_REG_PPCR_NACK_PW_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_NACK_PW_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_NACK_PW_SHIFT))

#define  IEEE1284_REG_PPCR_RESERVED2_MASK 0xc0
#define  IEEE1284_REG_PPCR_RESERVED2_SHIFT 6
#define  IEEE1284_REG_PPCR_RESERVED2_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_RESERVED2_MASK) >> IEEE1284_REG_PPCR_RESERVED2_SHIFT)
#define  IEEE1284_REG_PPCR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_RESERVED2_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_RESERVED2_SHIFT))

#define  IEEE1284_REG_PPCR_SELINQUAL_MASK 0x20
#define  IEEE1284_REG_PPCR_SELINQUAL_SHIFT 5
#define  IEEE1284_REG_PPCR_SELINQUAL_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_SELINQUAL_MASK) >> IEEE1284_REG_PPCR_SELINQUAL_SHIFT)
#define  IEEE1284_REG_PPCR_SELINQUAL_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_SELINQUAL_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_SELINQUAL_SHIFT))

#define  IEEE1284_REG_PPCR_AUTOHIDRIVE_MASK 0x10
#define  IEEE1284_REG_PPCR_AUTOHIDRIVE_SHIFT 4
#define  IEEE1284_REG_PPCR_AUTOHIDRIVE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_AUTOHIDRIVE_MASK) >> IEEE1284_REG_PPCR_AUTOHIDRIVE_SHIFT)
#define  IEEE1284_REG_PPCR_AUTOHIDRIVE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_AUTOHIDRIVE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_AUTOHIDRIVE_SHIFT))

#define  IEEE1284_REG_PPCR_HWMODE_MASK 0x8
#define  IEEE1284_REG_PPCR_HWMODE_SHIFT 3
#define  IEEE1284_REG_PPCR_HWMODE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_HWMODE_MASK) >> IEEE1284_REG_PPCR_HWMODE_SHIFT)
#define  IEEE1284_REG_PPCR_HWMODE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_HWMODE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_HWMODE_SHIFT))

#define  IEEE1284_REG_PPCR_BYPASS_MASK 0x4
#define  IEEE1284_REG_PPCR_BYPASS_SHIFT 2
#define  IEEE1284_REG_PPCR_BYPASS_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_BYPASS_MASK) >> IEEE1284_REG_PPCR_BYPASS_SHIFT)
#define  IEEE1284_REG_PPCR_BYPASS_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_BYPASS_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_BYPASS_SHIFT))

#define  IEEE1284_REG_PPCR_FIFOFLUSH_MASK 0x2
#define  IEEE1284_REG_PPCR_FIFOFLUSH_SHIFT 1
#define  IEEE1284_REG_PPCR_FIFOFLUSH_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_FIFOFLUSH_MASK) >> IEEE1284_REG_PPCR_FIFOFLUSH_SHIFT)
#define  IEEE1284_REG_PPCR_FIFOFLUSH_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_FIFOFLUSH_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_FIFOFLUSH_SHIFT))

#define  IEEE1284_REG_PPCR_FIFOENABLE_MASK 0x1
#define  IEEE1284_REG_PPCR_FIFOENABLE_SHIFT 0
#define  IEEE1284_REG_PPCR_FIFOENABLE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPCR_FIFOENABLE_MASK) >> IEEE1284_REG_PPCR_FIFOENABLE_SHIFT)
#define  IEEE1284_REG_PPCR_FIFOENABLE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPCR_FIFOENABLE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPCR_FIFOENABLE_SHIFT))

//====================================================================
//Register: Parallel Port Data Register (PPDR)
/** \brief Reading from this register dequeues one byte from the hardware interface FIFO. It should only be read when the Ready bit in the Parallel Port Status Register is set. When the AlmostFull bit is set in the Parallel Port Status Register, up to eight bytes can be read without checking status. When using DMA, this register is programmed as the source address.*/
//====================================================================

#define  IEEE1284_REG_PPDR_RESERVED1_MASK 0xffffff00
#define  IEEE1284_REG_PPDR_RESERVED1_SHIFT 8
#define  IEEE1284_REG_PPDR_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPDR_RESERVED1_MASK) >> IEEE1284_REG_PPDR_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPDR_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPDR_RESERVED1_SHIFT))

#define  IEEE1284_REG_PPDR_DATA_MASK 0xff
#define  IEEE1284_REG_PPDR_DATA_SHIFT 0
#define  IEEE1284_REG_PPDR_DATA_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPDR_DATA_MASK) >> IEEE1284_REG_PPDR_DATA_SHIFT)
#define  IEEE1284_REG_PPDR_DATA_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPDR_DATA_MASK) | (((uint32_t)val) << IEEE1284_REG_PPDR_DATA_SHIFT))

//====================================================================
//Register: Parallel Port Status Register (PPSR)
/** \brief The IEEE1284 interface input signals can be observed via this register. This register also provides status information on the hardware state machine and FIFO.
An interrupt is requested when the Ready bit is true. A DMA transfer is requested when the Ready bit is true.*/
//====================================================================

#define  IEEE1284_REG_PPSR_IRQ_MASK 0x80000000
#define  IEEE1284_REG_PPSR_IRQ_SHIFT 31
#define  IEEE1284_REG_PPSR_IRQ_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_IRQ_MASK) >> IEEE1284_REG_PPSR_IRQ_SHIFT)
#define  IEEE1284_REG_PPSR_IRQ_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_IRQ_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_IRQ_SHIFT))

#define  IEEE1284_REG_PPSR_RESERVED1_MASK 0x70000000
#define  IEEE1284_REG_PPSR_RESERVED1_SHIFT 28
#define  IEEE1284_REG_PPSR_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_RESERVED1_MASK) >> IEEE1284_REG_PPSR_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPSR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_RESERVED1_SHIFT))

#define  IEEE1284_REG_PPSR_FIFOFULL_MASK 0x8000000
#define  IEEE1284_REG_PPSR_FIFOFULL_SHIFT 27
#define  IEEE1284_REG_PPSR_FIFOFULL_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_FIFOFULL_MASK) >> IEEE1284_REG_PPSR_FIFOFULL_SHIFT)
#define  IEEE1284_REG_PPSR_FIFOFULL_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_FIFOFULL_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_FIFOFULL_SHIFT))

#define  IEEE1284_REG_PPSR_FIFOEMPTY_MASK 0x4000000
#define  IEEE1284_REG_PPSR_FIFOEMPTY_SHIFT 26
#define  IEEE1284_REG_PPSR_FIFOEMPTY_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_FIFOEMPTY_MASK) >> IEEE1284_REG_PPSR_FIFOEMPTY_SHIFT)
#define  IEEE1284_REG_PPSR_FIFOEMPTY_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_FIFOEMPTY_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_FIFOEMPTY_SHIFT))

#define  IEEE1284_REG_PPSR_FIFOALMOSTFULL_MASK 0x2000000
#define  IEEE1284_REG_PPSR_FIFOALMOSTFULL_SHIFT 25
#define  IEEE1284_REG_PPSR_FIFOALMOSTFULL_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_FIFOALMOSTFULL_MASK) >> IEEE1284_REG_PPSR_FIFOALMOSTFULL_SHIFT)
#define  IEEE1284_REG_PPSR_FIFOALMOSTFULL_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_FIFOALMOSTFULL_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_FIFOALMOSTFULL_SHIFT))

#define  IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_MASK 0x1000000
#define  IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_SHIFT 24
#define  IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_MASK) >> IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_SHIFT)
#define  IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_FIFOALMOSTEMPTY_SHIFT))

#define  IEEE1284_REG_PPSR_RESERVED2_MASK 0xc00000
#define  IEEE1284_REG_PPSR_RESERVED2_SHIFT 22
#define  IEEE1284_REG_PPSR_RESERVED2_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_RESERVED2_MASK) >> IEEE1284_REG_PPSR_RESERVED2_SHIFT)
#define  IEEE1284_REG_PPSR_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_RESERVED2_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_RESERVED2_SHIFT))

#define  IEEE1284_REG_PPSR_FIFOURUN_MASK 0x200000
#define  IEEE1284_REG_PPSR_FIFOURUN_SHIFT 21
#define  IEEE1284_REG_PPSR_FIFOURUN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_FIFOURUN_MASK) >> IEEE1284_REG_PPSR_FIFOURUN_SHIFT)
#define  IEEE1284_REG_PPSR_FIFOURUN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_FIFOURUN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_FIFOURUN_SHIFT))

#define  IEEE1284_REG_PPSR_READY_MASK 0x100000
#define  IEEE1284_REG_PPSR_READY_SHIFT 20
#define  IEEE1284_REG_PPSR_READY_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_READY_MASK) >> IEEE1284_REG_PPSR_READY_SHIFT)
#define  IEEE1284_REG_PPSR_READY_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_READY_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_READY_SHIFT))

#define  IEEE1284_REG_PPSR_RESERVED3_MASK 0xe0000
#define  IEEE1284_REG_PPSR_RESERVED3_SHIFT 17
#define  IEEE1284_REG_PPSR_RESERVED3_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_RESERVED3_MASK) >> IEEE1284_REG_PPSR_RESERVED3_SHIFT)
#define  IEEE1284_REG_PPSR_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_RESERVED3_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_RESERVED3_SHIFT))

#define  IEEE1284_REG_PPSR_NEGOREQUEST_MASK 0x10000
#define  IEEE1284_REG_PPSR_NEGOREQUEST_SHIFT 16
#define  IEEE1284_REG_PPSR_NEGOREQUEST_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_NEGOREQUEST_MASK) >> IEEE1284_REG_PPSR_NEGOREQUEST_SHIFT)
#define  IEEE1284_REG_PPSR_NEGOREQUEST_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_NEGOREQUEST_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_NEGOREQUEST_SHIFT))

#define  IEEE1284_REG_PPSR_ECPHOSTRECREQ_MASK 0x8000
#define  IEEE1284_REG_PPSR_ECPHOSTRECREQ_SHIFT 15
#define  IEEE1284_REG_PPSR_ECPHOSTRECREQ_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_ECPHOSTRECREQ_MASK) >> IEEE1284_REG_PPSR_ECPHOSTRECREQ_SHIFT)
#define  IEEE1284_REG_PPSR_ECPHOSTRECREQ_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_ECPHOSTRECREQ_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_ECPHOSTRECREQ_SHIFT))

#define  IEEE1284_REG_PPSR_ECPCOMMANDREQ_MASK 0x4000
#define  IEEE1284_REG_PPSR_ECPCOMMANDREQ_SHIFT 14
#define  IEEE1284_REG_PPSR_ECPCOMMANDREQ_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_ECPCOMMANDREQ_MASK) >> IEEE1284_REG_PPSR_ECPCOMMANDREQ_SHIFT)
#define  IEEE1284_REG_PPSR_ECPCOMMANDREQ_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_ECPCOMMANDREQ_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_ECPCOMMANDREQ_SHIFT))

#define  IEEE1284_REG_PPSR_ECPF2RREQ_MASK 0x2000
#define  IEEE1284_REG_PPSR_ECPF2RREQ_SHIFT 13
#define  IEEE1284_REG_PPSR_ECPF2RREQ_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_ECPF2RREQ_MASK) >> IEEE1284_REG_PPSR_ECPF2RREQ_SHIFT)
#define  IEEE1284_REG_PPSR_ECPF2RREQ_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_ECPF2RREQ_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_ECPF2RREQ_SHIFT))

#define  IEEE1284_REG_PPSR_ECPTERMREQ_MASK 0x1000
#define  IEEE1284_REG_PPSR_ECPTERMREQ_SHIFT 12
#define  IEEE1284_REG_PPSR_ECPTERMREQ_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_ECPTERMREQ_MASK) >> IEEE1284_REG_PPSR_ECPTERMREQ_SHIFT)
#define  IEEE1284_REG_PPSR_ECPTERMREQ_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_ECPTERMREQ_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_ECPTERMREQ_SHIFT))

#define  IEEE1284_REG_PPSR_NINIT_MASK 0x800
#define  IEEE1284_REG_PPSR_NINIT_SHIFT 11
#define  IEEE1284_REG_PPSR_NINIT_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_NINIT_MASK) >> IEEE1284_REG_PPSR_NINIT_SHIFT)
#define  IEEE1284_REG_PPSR_NINIT_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_NINIT_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_NINIT_SHIFT))

#define  IEEE1284_REG_PPSR_NSELIN_MASK 0x400
#define  IEEE1284_REG_PPSR_NSELIN_SHIFT 10
#define  IEEE1284_REG_PPSR_NSELIN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_NSELIN_MASK) >> IEEE1284_REG_PPSR_NSELIN_SHIFT)
#define  IEEE1284_REG_PPSR_NSELIN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_NSELIN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_NSELIN_SHIFT))

#define  IEEE1284_REG_PPSR_NAFEED_MASK 0x200
#define  IEEE1284_REG_PPSR_NAFEED_SHIFT 9
#define  IEEE1284_REG_PPSR_NAFEED_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_NAFEED_MASK) >> IEEE1284_REG_PPSR_NAFEED_SHIFT)
#define  IEEE1284_REG_PPSR_NAFEED_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_NAFEED_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_NAFEED_SHIFT))

#define  IEEE1284_REG_PPSR_NSTROBE_MASK 0x100
#define  IEEE1284_REG_PPSR_NSTROBE_SHIFT 8
#define  IEEE1284_REG_PPSR_NSTROBE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_NSTROBE_MASK) >> IEEE1284_REG_PPSR_NSTROBE_SHIFT)
#define  IEEE1284_REG_PPSR_NSTROBE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_NSTROBE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_NSTROBE_SHIFT))

#define  IEEE1284_REG_PPSR_DATA_MASK 0xff
#define  IEEE1284_REG_PPSR_DATA_SHIFT 0
#define  IEEE1284_REG_PPSR_DATA_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPSR_DATA_MASK) >> IEEE1284_REG_PPSR_DATA_SHIFT)
#define  IEEE1284_REG_PPSR_DATA_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPSR_DATA_MASK) | (((uint32_t)val) << IEEE1284_REG_PPSR_DATA_SHIFT))

//====================================================================
//Register: Parallel Port Bypass Register (PPBR)
/** \brief The IEEE1284 client interface output signals are directly controlled by this register when the interface is in "bypass" mode (Bypass bit set in the Parallel Port Configuration Register).*/
//====================================================================

#define  IEEE1284_REG_PPBR_RESERVED1_MASK 0xffff8000
#define  IEEE1284_REG_PPBR_RESERVED1_SHIFT 15
#define  IEEE1284_REG_PPBR_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_RESERVED1_MASK) >> IEEE1284_REG_PPBR_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPBR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_RESERVED1_SHIFT))

#define  IEEE1284_REG_PPBR_KICK_MASK 0x4000
#define  IEEE1284_REG_PPBR_KICK_SHIFT 14
#define  IEEE1284_REG_PPBR_KICK_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_KICK_MASK) >> IEEE1284_REG_PPBR_KICK_SHIFT)
#define  IEEE1284_REG_PPBR_KICK_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_KICK_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_KICK_SHIFT))

#define  IEEE1284_REG_PPBR_NFAULT_MASK 0x2000
#define  IEEE1284_REG_PPBR_NFAULT_SHIFT 13
#define  IEEE1284_REG_PPBR_NFAULT_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_NFAULT_MASK) >> IEEE1284_REG_PPBR_NFAULT_SHIFT)
#define  IEEE1284_REG_PPBR_NFAULT_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_NFAULT_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_NFAULT_SHIFT))

#define  IEEE1284_REG_PPBR_SELECT_MASK 0x1000
#define  IEEE1284_REG_PPBR_SELECT_SHIFT 12
#define  IEEE1284_REG_PPBR_SELECT_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_SELECT_MASK) >> IEEE1284_REG_PPBR_SELECT_SHIFT)
#define  IEEE1284_REG_PPBR_SELECT_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_SELECT_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_SELECT_SHIFT))

#define  IEEE1284_REG_PPBR_PE_MASK 0x800
#define  IEEE1284_REG_PPBR_PE_SHIFT 11
#define  IEEE1284_REG_PPBR_PE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_PE_MASK) >> IEEE1284_REG_PPBR_PE_SHIFT)
#define  IEEE1284_REG_PPBR_PE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_PE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_PE_SHIFT))

#define  IEEE1284_REG_PPBR_BUSY_MASK 0x400
#define  IEEE1284_REG_PPBR_BUSY_SHIFT 10
#define  IEEE1284_REG_PPBR_BUSY_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_BUSY_MASK) >> IEEE1284_REG_PPBR_BUSY_SHIFT)
#define  IEEE1284_REG_PPBR_BUSY_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_BUSY_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_BUSY_SHIFT))

#define  IEEE1284_REG_PPBR_NACK_MASK 0x200
#define  IEEE1284_REG_PPBR_NACK_SHIFT 9
#define  IEEE1284_REG_PPBR_NACK_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_NACK_MASK) >> IEEE1284_REG_PPBR_NACK_SHIFT)
#define  IEEE1284_REG_PPBR_NACK_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_NACK_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_NACK_SHIFT))

#define  IEEE1284_REG_PPBR_DATAOE_MASK 0x100
#define  IEEE1284_REG_PPBR_DATAOE_SHIFT 8
#define  IEEE1284_REG_PPBR_DATAOE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_DATAOE_MASK) >> IEEE1284_REG_PPBR_DATAOE_SHIFT)
#define  IEEE1284_REG_PPBR_DATAOE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_DATAOE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_DATAOE_SHIFT))

#define  IEEE1284_REG_PPBR_DATA_MASK 0xff
#define  IEEE1284_REG_PPBR_DATA_SHIFT 0
#define  IEEE1284_REG_PPBR_DATA_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPBR_DATA_MASK) >> IEEE1284_REG_PPBR_DATA_SHIFT)
#define  IEEE1284_REG_PPBR_DATA_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPBR_DATA_MASK) | (((uint32_t)val) << IEEE1284_REG_PPBR_DATA_SHIFT))

//====================================================================
//Register: Parllel Port Interrupt Enable Register (PPIER)
/** \brief The register specifies which interrupt sources will be enabled. The following interrupt sources are supported:
* FIFO status (ready, almostfull)
* Service Request (Termination, Fwd2Rev, Cmd, HostRecovery, Negotiation)
* Rising/Falling edges on nStrobe, nAfeed, nSelIn, and/or nInit
* Specific state on nStrobe, nAfeed, nSelIn, and/or nInit (state match is asserted when all selected bits match, or when no bits are selected)
For edge-detect and state-match interrupts, they must be acknowledged/cleared by writing to the Parallel Port Interrupt Acknowledge Register*/
//====================================================================

#define  IEEE1284_REG_PPIER_RESERVED1_MASK 0xff000000
#define  IEEE1284_REG_PPIER_RESERVED1_SHIFT 24
#define  IEEE1284_REG_PPIER_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_RESERVED1_MASK) >> IEEE1284_REG_PPIER_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPIER_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_RESERVED1_SHIFT))

#define  IEEE1284_REG_PPIER_NINITME_MASK 0x800000
#define  IEEE1284_REG_PPIER_NINITME_SHIFT 23
#define  IEEE1284_REG_PPIER_NINITME_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NINITME_MASK) >> IEEE1284_REG_PPIER_NINITME_SHIFT)
#define  IEEE1284_REG_PPIER_NINITME_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NINITME_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NINITME_SHIFT))

#define  IEEE1284_REG_PPIER_NSELINME_MASK 0x400000
#define  IEEE1284_REG_PPIER_NSELINME_SHIFT 22
#define  IEEE1284_REG_PPIER_NSELINME_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSELINME_MASK) >> IEEE1284_REG_PPIER_NSELINME_SHIFT)
#define  IEEE1284_REG_PPIER_NSELINME_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSELINME_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSELINME_SHIFT))

#define  IEEE1284_REG_PPIER_NAFEEDME_MASK 0x200000
#define  IEEE1284_REG_PPIER_NAFEEDME_SHIFT 21
#define  IEEE1284_REG_PPIER_NAFEEDME_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NAFEEDME_MASK) >> IEEE1284_REG_PPIER_NAFEEDME_SHIFT)
#define  IEEE1284_REG_PPIER_NAFEEDME_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NAFEEDME_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NAFEEDME_SHIFT))

#define  IEEE1284_REG_PPIER_NSTROBEME_MASK 0x100000
#define  IEEE1284_REG_PPIER_NSTROBEME_SHIFT 20
#define  IEEE1284_REG_PPIER_NSTROBEME_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSTROBEME_MASK) >> IEEE1284_REG_PPIER_NSTROBEME_SHIFT)
#define  IEEE1284_REG_PPIER_NSTROBEME_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSTROBEME_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSTROBEME_SHIFT))

#define  IEEE1284_REG_PPIER_NINITEXP_MASK 0x80000
#define  IEEE1284_REG_PPIER_NINITEXP_SHIFT 19
#define  IEEE1284_REG_PPIER_NINITEXP_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NINITEXP_MASK) >> IEEE1284_REG_PPIER_NINITEXP_SHIFT)
#define  IEEE1284_REG_PPIER_NINITEXP_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NINITEXP_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NINITEXP_SHIFT))

#define  IEEE1284_REG_PPIER_NSELINEXP_MASK 0x40000
#define  IEEE1284_REG_PPIER_NSELINEXP_SHIFT 18
#define  IEEE1284_REG_PPIER_NSELINEXP_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSELINEXP_MASK) >> IEEE1284_REG_PPIER_NSELINEXP_SHIFT)
#define  IEEE1284_REG_PPIER_NSELINEXP_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSELINEXP_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSELINEXP_SHIFT))

#define  IEEE1284_REG_PPIER_NAFEEDEXP_MASK 0x20000
#define  IEEE1284_REG_PPIER_NAFEEDEXP_SHIFT 17
#define  IEEE1284_REG_PPIER_NAFEEDEXP_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NAFEEDEXP_MASK) >> IEEE1284_REG_PPIER_NAFEEDEXP_SHIFT)
#define  IEEE1284_REG_PPIER_NAFEEDEXP_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NAFEEDEXP_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NAFEEDEXP_SHIFT))

#define  IEEE1284_REG_PPIER_NSTROBEEXP_MASK 0x10000
#define  IEEE1284_REG_PPIER_NSTROBEEXP_SHIFT 16
#define  IEEE1284_REG_PPIER_NSTROBEEXP_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSTROBEEXP_MASK) >> IEEE1284_REG_PPIER_NSTROBEEXP_SHIFT)
#define  IEEE1284_REG_PPIER_NSTROBEEXP_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSTROBEEXP_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSTROBEEXP_SHIFT))

#define  IEEE1284_REG_PPIER_NINITFE_MASK 0x8000
#define  IEEE1284_REG_PPIER_NINITFE_SHIFT 15
#define  IEEE1284_REG_PPIER_NINITFE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NINITFE_MASK) >> IEEE1284_REG_PPIER_NINITFE_SHIFT)
#define  IEEE1284_REG_PPIER_NINITFE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NINITFE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NINITFE_SHIFT))

#define  IEEE1284_REG_PPIER_NSELINFE_MASK 0x4000
#define  IEEE1284_REG_PPIER_NSELINFE_SHIFT 14
#define  IEEE1284_REG_PPIER_NSELINFE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSELINFE_MASK) >> IEEE1284_REG_PPIER_NSELINFE_SHIFT)
#define  IEEE1284_REG_PPIER_NSELINFE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSELINFE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSELINFE_SHIFT))

#define  IEEE1284_REG_PPIER_NAFEEDFE_MASK 0x2000
#define  IEEE1284_REG_PPIER_NAFEEDFE_SHIFT 13
#define  IEEE1284_REG_PPIER_NAFEEDFE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NAFEEDFE_MASK) >> IEEE1284_REG_PPIER_NAFEEDFE_SHIFT)
#define  IEEE1284_REG_PPIER_NAFEEDFE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NAFEEDFE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NAFEEDFE_SHIFT))

#define  IEEE1284_REG_PPIER_NSTROBEFE_MASK 0x1000
#define  IEEE1284_REG_PPIER_NSTROBEFE_SHIFT 12
#define  IEEE1284_REG_PPIER_NSTROBEFE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSTROBEFE_MASK) >> IEEE1284_REG_PPIER_NSTROBEFE_SHIFT)
#define  IEEE1284_REG_PPIER_NSTROBEFE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSTROBEFE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSTROBEFE_SHIFT))

#define  IEEE1284_REG_PPIER_NINITRE_MASK 0x800
#define  IEEE1284_REG_PPIER_NINITRE_SHIFT 11
#define  IEEE1284_REG_PPIER_NINITRE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NINITRE_MASK) >> IEEE1284_REG_PPIER_NINITRE_SHIFT)
#define  IEEE1284_REG_PPIER_NINITRE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NINITRE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NINITRE_SHIFT))

#define  IEEE1284_REG_PPIER_NSELINRE_MASK 0x400
#define  IEEE1284_REG_PPIER_NSELINRE_SHIFT 10
#define  IEEE1284_REG_PPIER_NSELINRE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSELINRE_MASK) >> IEEE1284_REG_PPIER_NSELINRE_SHIFT)
#define  IEEE1284_REG_PPIER_NSELINRE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSELINRE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSELINRE_SHIFT))

#define  IEEE1284_REG_PPIER_NAFEEDRE_MASK 0x200
#define  IEEE1284_REG_PPIER_NAFEEDRE_SHIFT 9
#define  IEEE1284_REG_PPIER_NAFEEDRE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NAFEEDRE_MASK) >> IEEE1284_REG_PPIER_NAFEEDRE_SHIFT)
#define  IEEE1284_REG_PPIER_NAFEEDRE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NAFEEDRE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NAFEEDRE_SHIFT))

#define  IEEE1284_REG_PPIER_NSTROBERE_MASK 0x100
#define  IEEE1284_REG_PPIER_NSTROBERE_SHIFT 8
#define  IEEE1284_REG_PPIER_NSTROBERE_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_NSTROBERE_MASK) >> IEEE1284_REG_PPIER_NSTROBERE_SHIFT)
#define  IEEE1284_REG_PPIER_NSTROBERE_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_NSTROBERE_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_NSTROBERE_SHIFT))

#define  IEEE1284_REG_PPIER_RESERVED2_MASK 0xf0
#define  IEEE1284_REG_PPIER_RESERVED2_SHIFT 4
#define  IEEE1284_REG_PPIER_RESERVED2_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_RESERVED2_MASK) >> IEEE1284_REG_PPIER_RESERVED2_SHIFT)
#define  IEEE1284_REG_PPIER_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_RESERVED2_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_RESERVED2_SHIFT))

#define  IEEE1284_REG_PPIER_STATEMATCHEN_MASK 0x8
#define  IEEE1284_REG_PPIER_STATEMATCHEN_SHIFT 3
#define  IEEE1284_REG_PPIER_STATEMATCHEN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_STATEMATCHEN_MASK) >> IEEE1284_REG_PPIER_STATEMATCHEN_SHIFT)
#define  IEEE1284_REG_PPIER_STATEMATCHEN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_STATEMATCHEN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_STATEMATCHEN_SHIFT))

#define  IEEE1284_REG_PPIER_REQUESTEN_MASK 0x4
#define  IEEE1284_REG_PPIER_REQUESTEN_SHIFT 2
#define  IEEE1284_REG_PPIER_REQUESTEN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_REQUESTEN_MASK) >> IEEE1284_REG_PPIER_REQUESTEN_SHIFT)
#define  IEEE1284_REG_PPIER_REQUESTEN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_REQUESTEN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_REQUESTEN_SHIFT))

#define  IEEE1284_REG_PPIER_ALMOSTFULLEN_MASK 0x2
#define  IEEE1284_REG_PPIER_ALMOSTFULLEN_SHIFT 1
#define  IEEE1284_REG_PPIER_ALMOSTFULLEN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_ALMOSTFULLEN_MASK) >> IEEE1284_REG_PPIER_ALMOSTFULLEN_SHIFT)
#define  IEEE1284_REG_PPIER_ALMOSTFULLEN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_ALMOSTFULLEN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_ALMOSTFULLEN_SHIFT))

#define  IEEE1284_REG_PPIER_READYEN_MASK 0x1
#define  IEEE1284_REG_PPIER_READYEN_SHIFT 0
#define  IEEE1284_REG_PPIER_READYEN_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIER_READYEN_MASK) >> IEEE1284_REG_PPIER_READYEN_SHIFT)
#define  IEEE1284_REG_PPIER_READYEN_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIER_READYEN_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIER_READYEN_SHIFT))

//====================================================================
//Register: Parallel Port Interrupt Ack Register (PPIAR)
/** \brief This register is used to acknowledge and clear the edge-detect and state-match interrupts.
      Writing any value to this register clears the edge-detect and state-match interrupts.*/
//====================================================================

#define  IEEE1284_REG_PPIAR_RESERVED1_MASK 0xffffffff
#define  IEEE1284_REG_PPIAR_RESERVED1_SHIFT 0
#define  IEEE1284_REG_PPIAR_RESERVED1_MASK_SHIFT(reg) (((reg) & IEEE1284_REG_PPIAR_RESERVED1_MASK) >> IEEE1284_REG_PPIAR_RESERVED1_SHIFT)
#define  IEEE1284_REG_PPIAR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IEEE1284_REG_PPIAR_RESERVED1_MASK) | (((uint32_t)val) << IEEE1284_REG_PPIAR_RESERVED1_SHIFT))

#endif // IEEE1284_REG
