 /*
 **************************************************************************************
 *
 * Copyright (c) 2010 Marvell International, Ltd.
 *
 **************************************************************************************
 *
 * Marvell Commercial License Option
 *
 * If you received this File from Marvell as part of a proprietary software release,
 * the File is considered Marvell Proprietary and Confidential Information, and is
 * licensed to you under the terms of the applicable Commercial License.
 *
 **************************************************************************************
 *
 * Marvell GPL License Option
 *
 * If you received this File from Marvell as part of a Linux distribution, this File
 * is licensed to you in accordance with the terms and conditions of the General Public
 * License Version 2, June 1991 (the "GPL License").  You can redistribute it and/or
 * modify it under the terms of the GPL License; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GPL License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see http://www.gnu.org/licenses/.
 *
 **************************************************************************************
 *
 * \file antic_top_regmasks.h
 * Generated using RegBuild 1.6.1
 *
 *************************************************************************
 */

#ifndef _ANTIC_TOP_REGMASKS_H_
#define _ANTIC_TOP_REGMASKS_H_

#include <stdint.h>

//====================================================================
//
//Register File: Counterfeit Detection Top Registers (ANTIC_TOP)
/** \brief This register set includes all the registers that make up the counterfeit detection block.*/
//
//====================================================================

//====================================================================
//
//Register File: Counterfeit Detection Control/Status Registers (ANTIC)
/** \brief Top-level register file for the Counterfeit Detection block*/
//
//====================================================================

//====================================================================
//Register: Counterfeit Detection Control Register (anticCtrl)
/** \brief This register contains the control bits for the Anticounterfeit detector system*/
//====================================================================

#define  ANTIC_ANTICCTRL_RESERVED1_MASK 0xffff8000
#define  ANTIC_ANTICCTRL_RESERVED1_SHIFT 15
#define  ANTIC_ANTICCTRL_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_RESERVED1_MASK) >> ANTIC_ANTICCTRL_RESERVED1_SHIFT)
#define  ANTIC_ANTICCTRL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_RESERVED1_SHIFT))

#define  ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_MASK 0x7000
#define  ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_SHIFT 12
#define  ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_MASK) >> ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_SHIFT)
#define  ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_OUTPUTDATATYPECONVERSIONMODE_SHIFT))

#define  ANTIC_ANTICCTRL_RESERVED2_MASK 0x800
#define  ANTIC_ANTICCTRL_RESERVED2_SHIFT 11
#define  ANTIC_ANTICCTRL_RESERVED2_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_RESERVED2_MASK) >> ANTIC_ANTICCTRL_RESERVED2_SHIFT)
#define  ANTIC_ANTICCTRL_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_RESERVED2_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_RESERVED2_SHIFT))

#define  ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_MASK 0x700
#define  ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_SHIFT 8
#define  ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_MASK) >> ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_SHIFT)
#define  ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_INPUTDATATYPECONVERSIONMODE_SHIFT))

#define  ANTIC_ANTICCTRL_OUTPUTDATASIZE_MASK 0xc0
#define  ANTIC_ANTICCTRL_OUTPUTDATASIZE_SHIFT 6
#define  ANTIC_ANTICCTRL_OUTPUTDATASIZE_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_OUTPUTDATASIZE_MASK) >> ANTIC_ANTICCTRL_OUTPUTDATASIZE_SHIFT)
#define  ANTIC_ANTICCTRL_OUTPUTDATASIZE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_OUTPUTDATASIZE_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_OUTPUTDATASIZE_SHIFT))

#define  ANTIC_ANTICCTRL_INPUTDATASIZE_MASK 0x30
#define  ANTIC_ANTICCTRL_INPUTDATASIZE_SHIFT 4
#define  ANTIC_ANTICCTRL_INPUTDATASIZE_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_INPUTDATASIZE_MASK) >> ANTIC_ANTICCTRL_INPUTDATASIZE_SHIFT)
#define  ANTIC_ANTICCTRL_INPUTDATASIZE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_INPUTDATASIZE_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_INPUTDATASIZE_SHIFT))

#define  ANTIC_ANTICCTRL_RESERVED3_MASK 0xe
#define  ANTIC_ANTICCTRL_RESERVED3_SHIFT 1
#define  ANTIC_ANTICCTRL_RESERVED3_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_RESERVED3_MASK) >> ANTIC_ANTICCTRL_RESERVED3_SHIFT)
#define  ANTIC_ANTICCTRL_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_RESERVED3_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_RESERVED3_SHIFT))

#define  ANTIC_ANTICCTRL_PIPESEL_MASK 0x1
#define  ANTIC_ANTICCTRL_PIPESEL_SHIFT 0
#define  ANTIC_ANTICCTRL_PIPESEL_MASK_SHIFT(reg) (((reg) & ANTIC_ANTICCTRL_PIPESEL_MASK) >> ANTIC_ANTICCTRL_PIPESEL_SHIFT)
#define  ANTIC_ANTICCTRL_PIPESEL_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_ANTICCTRL_PIPESEL_MASK) | (((uint32_t)val) << ANTIC_ANTICCTRL_PIPESEL_SHIFT))

//====================================================================
//Register: Counterfeit Detection Reset Register (softReset)
/** \brief This register contains the softReset bit for the counterfeit detector*/
//====================================================================

#define  ANTIC_SOFTRESET_RESERVED1_MASK 0xfffffffe
#define  ANTIC_SOFTRESET_RESERVED1_SHIFT 1
#define  ANTIC_SOFTRESET_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_SOFTRESET_RESERVED1_MASK) >> ANTIC_SOFTRESET_RESERVED1_SHIFT)
#define  ANTIC_SOFTRESET_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SOFTRESET_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_SOFTRESET_RESERVED1_SHIFT))

#define  ANTIC_SOFTRESET_SOFTRESET_MASK 0x1
#define  ANTIC_SOFTRESET_SOFTRESET_SHIFT 0
#define  ANTIC_SOFTRESET_SOFTRESET_MASK_SHIFT(reg) (((reg) & ANTIC_SOFTRESET_SOFTRESET_MASK) >> ANTIC_SOFTRESET_SOFTRESET_SHIFT)
#define  ANTIC_SOFTRESET_SOFTRESET_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SOFTRESET_SOFTRESET_MASK) | (((uint32_t)val) << ANTIC_SOFTRESET_SOFTRESET_SHIFT))

//====================================================================
//Register: Counterfeit Detection Block Config Register (pipeBlockCfg)
/** \brief This register configures the block size header packets for the counterfeit detection pipelines*/
//====================================================================

#define  ANTIC_PIPEBLOCKCFG_RESERVED1_MASK 0xff000000
#define  ANTIC_PIPEBLOCKCFG_RESERVED1_SHIFT 24
#define  ANTIC_PIPEBLOCKCFG_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_PIPEBLOCKCFG_RESERVED1_MASK) >> ANTIC_PIPEBLOCKCFG_RESERVED1_SHIFT)
#define  ANTIC_PIPEBLOCKCFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPEBLOCKCFG_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_PIPEBLOCKCFG_RESERVED1_SHIFT))

#define  ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_MASK 0xff0000
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_SHIFT 16
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_MASK_SHIFT(reg) (((reg) & ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_MASK) >> ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_SHIFT)
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_MASK) | (((uint32_t)val) << ANTIC_PIPEBLOCKCFG_DATABLOCKHEIGHT_SHIFT))

#define  ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_MASK 0xff00
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_SHIFT 8
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_MASK_SHIFT(reg) (((reg) & ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_MASK) >> ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_SHIFT)
#define  ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_MASK) | (((uint32_t)val) << ANTIC_PIPEBLOCKCFG_DATABLOCKWIDTH_SHIFT))

#define  ANTIC_PIPEBLOCKCFG_ID_MASK 0xff
#define  ANTIC_PIPEBLOCKCFG_ID_SHIFT 0
#define  ANTIC_PIPEBLOCKCFG_ID_MASK_SHIFT(reg) (((reg) & ANTIC_PIPEBLOCKCFG_ID_MASK) >> ANTIC_PIPEBLOCKCFG_ID_SHIFT)
#define  ANTIC_PIPEBLOCKCFG_ID_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPEBLOCKCFG_ID_MASK) | (((uint32_t)val) << ANTIC_PIPEBLOCKCFG_ID_SHIFT))

//====================================================================
//Register: Counterfeit detection block pipeline mode configuration (blockPipeModeCfg)
/** \brief This register configures the block pipeline mode header packets*/
//====================================================================

#define  ANTIC_BLOCKPIPEMODECFG_RESERVED1_MASK 0xffffffe0
#define  ANTIC_BLOCKPIPEMODECFG_RESERVED1_SHIFT 5
#define  ANTIC_BLOCKPIPEMODECFG_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_BLOCKPIPEMODECFG_RESERVED1_MASK) >> ANTIC_BLOCKPIPEMODECFG_RESERVED1_SHIFT)
#define  ANTIC_BLOCKPIPEMODECFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_BLOCKPIPEMODECFG_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_BLOCKPIPEMODECFG_RESERVED1_SHIFT))

#define  ANTIC_BLOCKPIPEMODECFG_FMAGMODE_MASK 0x10
#define  ANTIC_BLOCKPIPEMODECFG_FMAGMODE_SHIFT 4
#define  ANTIC_BLOCKPIPEMODECFG_FMAGMODE_MASK_SHIFT(reg) (((reg) & ANTIC_BLOCKPIPEMODECFG_FMAGMODE_MASK) >> ANTIC_BLOCKPIPEMODECFG_FMAGMODE_SHIFT)
#define  ANTIC_BLOCKPIPEMODECFG_FMAGMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_BLOCKPIPEMODECFG_FMAGMODE_MASK) | (((uint32_t)val) << ANTIC_BLOCKPIPEMODECFG_FMAGMODE_SHIFT))

#define  ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_MASK 0xc
#define  ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_SHIFT 2
#define  ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_MASK_SHIFT(reg) (((reg) & ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_MASK) >> ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_SHIFT)
#define  ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_MASK) | (((uint32_t)val) << ANTIC_BLOCKPIPEMODECFG_FFT2DMODE_SHIFT))

#define  ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_MASK 0x2
#define  ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_SHIFT 1
#define  ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_MASK_SHIFT(reg) (((reg) & ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_MASK) >> ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_SHIFT)
#define  ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_MASK) | (((uint32_t)val) << ANTIC_BLOCKPIPEMODECFG_WINDOWMODE_SHIFT))

#define  ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_MASK 0x1
#define  ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_SHIFT 0
#define  ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_MASK_SHIFT(reg) (((reg) & ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_MASK) >> ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_SHIFT)
#define  ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_MASK) | (((uint32_t)val) << ANTIC_BLOCKPIPEMODECFG_OCTAXISFILTERMODE_SHIFT))

//====================================================================
//Register: Counterfeit detection section pipeline mode configuration (sectionPipeModeCfg)
/** \brief This register configures the section pipeline mode header packets*/
//====================================================================

#define  ANTIC_SECTIONPIPEMODECFG_RESERVED1_MASK 0xffffff00
#define  ANTIC_SECTIONPIPEMODECFG_RESERVED1_SHIFT 8
#define  ANTIC_SECTIONPIPEMODECFG_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_SECTIONPIPEMODECFG_RESERVED1_MASK) >> ANTIC_SECTIONPIPEMODECFG_RESERVED1_SHIFT)
#define  ANTIC_SECTIONPIPEMODECFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SECTIONPIPEMODECFG_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_SECTIONPIPEMODECFG_RESERVED1_SHIFT))

#define  ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_MASK 0xc0
#define  ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_SHIFT 6
#define  ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_MASK_SHIFT(reg) (((reg) & ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_MASK) >> ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_SHIFT)
#define  ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_MASK) | (((uint32_t)val) << ANTIC_SECTIONPIPEMODECFG_FINDPEAKSMODE_SHIFT))

#define  ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_MASK 0x20
#define  ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_SHIFT 5
#define  ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_MASK_SHIFT(reg) (((reg) & ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_MASK) >> ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_SHIFT)
#define  ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_MASK) | (((uint32_t)val) << ANTIC_SECTIONPIPEMODECFG_LOGPOLARIMFMODE_SHIFT))

#define  ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_MASK 0x10
#define  ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_SHIFT 4
#define  ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_MASK_SHIFT(reg) (((reg) & ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_MASK) >> ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_SHIFT)
#define  ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_MASK) | (((uint32_t)val) << ANTIC_SECTIONPIPEMODECFG_FILTERFMAGMODE_SHIFT))

#define  ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_MASK 0xf
#define  ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_SHIFT 0
#define  ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_MASK_SHIFT(reg) (((reg) & ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_MASK) >> ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_SHIFT)
#define  ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_MASK) | (((uint32_t)val) << ANTIC_SECTIONPIPEMODECFG_ACCUMFMAGMODE_SHIFT))

//====================================================================
//Register: Counterfeit Detection Pipeline Start Register (pipeStart)
/** \brief This register contains the start bit for the counterfeit detector.*/
//====================================================================

#define  ANTIC_PIPESTART_RESERVED1_MASK 0xfffffffe
#define  ANTIC_PIPESTART_RESERVED1_SHIFT 1
#define  ANTIC_PIPESTART_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTART_RESERVED1_MASK) >> ANTIC_PIPESTART_RESERVED1_SHIFT)
#define  ANTIC_PIPESTART_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTART_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_PIPESTART_RESERVED1_SHIFT))

#define  ANTIC_PIPESTART_RUN_MASK 0x1
#define  ANTIC_PIPESTART_RUN_SHIFT 0
#define  ANTIC_PIPESTART_RUN_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTART_RUN_MASK) >> ANTIC_PIPESTART_RUN_SHIFT)
#define  ANTIC_PIPESTART_RUN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTART_RUN_MASK) | (((uint32_t)val) << ANTIC_PIPESTART_RUN_SHIFT))

//====================================================================
//Register: Counterfeit Detection Pipeline Status Register (pipeStat)
/** \brief This register stores the status of the selected pipeline*/
//====================================================================

#define  ANTIC_PIPESTAT_RESERVED1_MASK 0xfffffc00
#define  ANTIC_PIPESTAT_RESERVED1_SHIFT 10
#define  ANTIC_PIPESTAT_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTAT_RESERVED1_MASK) >> ANTIC_PIPESTAT_RESERVED1_SHIFT)
#define  ANTIC_PIPESTAT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTAT_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_PIPESTAT_RESERVED1_SHIFT))

#define  ANTIC_PIPESTAT_TX_BUSY_MASK 0x200
#define  ANTIC_PIPESTAT_TX_BUSY_SHIFT 9
#define  ANTIC_PIPESTAT_TX_BUSY_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTAT_TX_BUSY_MASK) >> ANTIC_PIPESTAT_TX_BUSY_SHIFT)
#define  ANTIC_PIPESTAT_TX_BUSY_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTAT_TX_BUSY_MASK) | (((uint32_t)val) << ANTIC_PIPESTAT_TX_BUSY_SHIFT))

#define  ANTIC_PIPESTAT_RX_BUSY_MASK 0x100
#define  ANTIC_PIPESTAT_RX_BUSY_SHIFT 8
#define  ANTIC_PIPESTAT_RX_BUSY_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTAT_RX_BUSY_MASK) >> ANTIC_PIPESTAT_RX_BUSY_SHIFT)
#define  ANTIC_PIPESTAT_RX_BUSY_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTAT_RX_BUSY_MASK) | (((uint32_t)val) << ANTIC_PIPESTAT_RX_BUSY_SHIFT))

#define  ANTIC_PIPESTAT_ID_MASK 0xff
#define  ANTIC_PIPESTAT_ID_SHIFT 0
#define  ANTIC_PIPESTAT_ID_MASK_SHIFT(reg) (((reg) & ANTIC_PIPESTAT_ID_MASK) >> ANTIC_PIPESTAT_ID_SHIFT)
#define  ANTIC_PIPESTAT_ID_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_PIPESTAT_ID_MASK) | (((uint32_t)val) << ANTIC_PIPESTAT_ID_SHIFT))

//====================================================================
//Register: Interrupt Enable Register (int_en)
//====================================================================

#define  ANTIC_INT_EN_RESERVED1_MASK 0xffffff00
#define  ANTIC_INT_EN_RESERVED1_SHIFT 8
#define  ANTIC_INT_EN_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_RESERVED1_MASK) >> ANTIC_INT_EN_RESERVED1_SHIFT)
#define  ANTIC_INT_EN_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_INT_EN_RESERVED1_SHIFT))

#define  ANTIC_INT_EN_ODMA_INT_EN_MASK 0x80
#define  ANTIC_INT_EN_ODMA_INT_EN_SHIFT 7
#define  ANTIC_INT_EN_ODMA_INT_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_ODMA_INT_EN_MASK) >> ANTIC_INT_EN_ODMA_INT_EN_SHIFT)
#define  ANTIC_INT_EN_ODMA_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_ODMA_INT_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_ODMA_INT_EN_SHIFT))

#define  ANTIC_INT_EN_IDMA_INT_EN_MASK 0x40
#define  ANTIC_INT_EN_IDMA_INT_EN_SHIFT 6
#define  ANTIC_INT_EN_IDMA_INT_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_IDMA_INT_EN_MASK) >> ANTIC_INT_EN_IDMA_INT_EN_SHIFT)
#define  ANTIC_INT_EN_IDMA_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_IDMA_INT_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_IDMA_INT_EN_SHIFT))

#define  ANTIC_INT_EN_SATURATION_EN_MASK 0x20
#define  ANTIC_INT_EN_SATURATION_EN_SHIFT 5
#define  ANTIC_INT_EN_SATURATION_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_SATURATION_EN_MASK) >> ANTIC_INT_EN_SATURATION_EN_SHIFT)
#define  ANTIC_INT_EN_SATURATION_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_SATURATION_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_SATURATION_EN_SHIFT))

#define  ANTIC_INT_EN_FLAT_BLOCK_EN_MASK 0x10
#define  ANTIC_INT_EN_FLAT_BLOCK_EN_SHIFT 4
#define  ANTIC_INT_EN_FLAT_BLOCK_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_FLAT_BLOCK_EN_MASK) >> ANTIC_INT_EN_FLAT_BLOCK_EN_SHIFT)
#define  ANTIC_INT_EN_FLAT_BLOCK_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_FLAT_BLOCK_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_FLAT_BLOCK_EN_SHIFT))

#define  ANTIC_INT_EN_DATA_AFTER_EOF_EN_MASK 0x8
#define  ANTIC_INT_EN_DATA_AFTER_EOF_EN_SHIFT 3
#define  ANTIC_INT_EN_DATA_AFTER_EOF_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_DATA_AFTER_EOF_EN_MASK) >> ANTIC_INT_EN_DATA_AFTER_EOF_EN_SHIFT)
#define  ANTIC_INT_EN_DATA_AFTER_EOF_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_DATA_AFTER_EOF_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_DATA_AFTER_EOF_EN_SHIFT))

#define  ANTIC_INT_EN_FIFO_OVERFLOW_EN_MASK 0x4
#define  ANTIC_INT_EN_FIFO_OVERFLOW_EN_SHIFT 2
#define  ANTIC_INT_EN_FIFO_OVERFLOW_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_FIFO_OVERFLOW_EN_MASK) >> ANTIC_INT_EN_FIFO_OVERFLOW_EN_SHIFT)
#define  ANTIC_INT_EN_FIFO_OVERFLOW_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_FIFO_OVERFLOW_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_FIFO_OVERFLOW_EN_SHIFT))

#define  ANTIC_INT_EN_SHORT_PKT_EN_MASK 0x2
#define  ANTIC_INT_EN_SHORT_PKT_EN_SHIFT 1
#define  ANTIC_INT_EN_SHORT_PKT_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_SHORT_PKT_EN_MASK) >> ANTIC_INT_EN_SHORT_PKT_EN_SHIFT)
#define  ANTIC_INT_EN_SHORT_PKT_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_SHORT_PKT_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_SHORT_PKT_EN_SHIFT))

#define  ANTIC_INT_EN_LONG_PKT_EN_MASK 0x1
#define  ANTIC_INT_EN_LONG_PKT_EN_SHIFT 0
#define  ANTIC_INT_EN_LONG_PKT_EN_MASK_SHIFT(reg) (((reg) & ANTIC_INT_EN_LONG_PKT_EN_MASK) >> ANTIC_INT_EN_LONG_PKT_EN_SHIFT)
#define  ANTIC_INT_EN_LONG_PKT_EN_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_EN_LONG_PKT_EN_MASK) | (((uint32_t)val) << ANTIC_INT_EN_LONG_PKT_EN_SHIFT))

//====================================================================
//Register: Interrupt Pending Register (int_pend)
//====================================================================

#define  ANTIC_INT_PEND_RESERVED1_MASK 0xffffff00
#define  ANTIC_INT_PEND_RESERVED1_SHIFT 8
#define  ANTIC_INT_PEND_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_RESERVED1_MASK) >> ANTIC_INT_PEND_RESERVED1_SHIFT)
#define  ANTIC_INT_PEND_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_RESERVED1_SHIFT))

#define  ANTIC_INT_PEND_ODMA_INT_PEND_MASK 0x80
#define  ANTIC_INT_PEND_ODMA_INT_PEND_SHIFT 7
#define  ANTIC_INT_PEND_ODMA_INT_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_ODMA_INT_PEND_MASK) >> ANTIC_INT_PEND_ODMA_INT_PEND_SHIFT)
#define  ANTIC_INT_PEND_ODMA_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_ODMA_INT_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_ODMA_INT_PEND_SHIFT))

#define  ANTIC_INT_PEND_IDMA_INT_PEND_MASK 0x40
#define  ANTIC_INT_PEND_IDMA_INT_PEND_SHIFT 6
#define  ANTIC_INT_PEND_IDMA_INT_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_IDMA_INT_PEND_MASK) >> ANTIC_INT_PEND_IDMA_INT_PEND_SHIFT)
#define  ANTIC_INT_PEND_IDMA_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_IDMA_INT_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_IDMA_INT_PEND_SHIFT))

#define  ANTIC_INT_PEND_SATURATION_PEND_MASK 0x20
#define  ANTIC_INT_PEND_SATURATION_PEND_SHIFT 5
#define  ANTIC_INT_PEND_SATURATION_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_SATURATION_PEND_MASK) >> ANTIC_INT_PEND_SATURATION_PEND_SHIFT)
#define  ANTIC_INT_PEND_SATURATION_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_SATURATION_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_SATURATION_PEND_SHIFT))

#define  ANTIC_INT_PEND_FLAT_BLOCK_PEND_MASK 0x10
#define  ANTIC_INT_PEND_FLAT_BLOCK_PEND_SHIFT 4
#define  ANTIC_INT_PEND_FLAT_BLOCK_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_FLAT_BLOCK_PEND_MASK) >> ANTIC_INT_PEND_FLAT_BLOCK_PEND_SHIFT)
#define  ANTIC_INT_PEND_FLAT_BLOCK_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_FLAT_BLOCK_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_FLAT_BLOCK_PEND_SHIFT))

#define  ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_MASK 0x8
#define  ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_SHIFT 3
#define  ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_MASK) >> ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_SHIFT)
#define  ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_DATA_AFTER_EOF_PEND_SHIFT))

#define  ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_MASK 0x4
#define  ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_SHIFT 2
#define  ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_MASK) >> ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_SHIFT)
#define  ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_FIFO_OVERFLOW_PEND_SHIFT))

#define  ANTIC_INT_PEND_SHORT_PKT_PEND_MASK 0x2
#define  ANTIC_INT_PEND_SHORT_PKT_PEND_SHIFT 1
#define  ANTIC_INT_PEND_SHORT_PKT_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_SHORT_PKT_PEND_MASK) >> ANTIC_INT_PEND_SHORT_PKT_PEND_SHIFT)
#define  ANTIC_INT_PEND_SHORT_PKT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_SHORT_PKT_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_SHORT_PKT_PEND_SHIFT))

#define  ANTIC_INT_PEND_LONG_PKT_PEND_MASK 0x1
#define  ANTIC_INT_PEND_LONG_PKT_PEND_SHIFT 0
#define  ANTIC_INT_PEND_LONG_PKT_PEND_MASK_SHIFT(reg) (((reg) & ANTIC_INT_PEND_LONG_PKT_PEND_MASK) >> ANTIC_INT_PEND_LONG_PKT_PEND_SHIFT)
#define  ANTIC_INT_PEND_LONG_PKT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_PEND_LONG_PKT_PEND_MASK) | (((uint32_t)val) << ANTIC_INT_PEND_LONG_PKT_PEND_SHIFT))

//====================================================================
//Register: Interrupt Acknowledge Register (int_ack)
//====================================================================

#define  ANTIC_INT_ACK_RESERVED1_MASK 0xffffff00
#define  ANTIC_INT_ACK_RESERVED1_SHIFT 8
#define  ANTIC_INT_ACK_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_RESERVED1_MASK) >> ANTIC_INT_ACK_RESERVED1_SHIFT)
#define  ANTIC_INT_ACK_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_RESERVED1_SHIFT))

#define  ANTIC_INT_ACK_ODMA_INT_ACK_MASK 0x80
#define  ANTIC_INT_ACK_ODMA_INT_ACK_SHIFT 7
#define  ANTIC_INT_ACK_ODMA_INT_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_ODMA_INT_ACK_MASK) >> ANTIC_INT_ACK_ODMA_INT_ACK_SHIFT)
#define  ANTIC_INT_ACK_ODMA_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_ODMA_INT_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_ODMA_INT_ACK_SHIFT))

#define  ANTIC_INT_ACK_IDMA_INT_ACK_MASK 0x40
#define  ANTIC_INT_ACK_IDMA_INT_ACK_SHIFT 6
#define  ANTIC_INT_ACK_IDMA_INT_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_IDMA_INT_ACK_MASK) >> ANTIC_INT_ACK_IDMA_INT_ACK_SHIFT)
#define  ANTIC_INT_ACK_IDMA_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_IDMA_INT_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_IDMA_INT_ACK_SHIFT))

#define  ANTIC_INT_ACK_SATURATION_ACK_MASK 0x20
#define  ANTIC_INT_ACK_SATURATION_ACK_SHIFT 5
#define  ANTIC_INT_ACK_SATURATION_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_SATURATION_ACK_MASK) >> ANTIC_INT_ACK_SATURATION_ACK_SHIFT)
#define  ANTIC_INT_ACK_SATURATION_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_SATURATION_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_SATURATION_ACK_SHIFT))

#define  ANTIC_INT_ACK_FLAT_BLOCK_ACK_MASK 0x10
#define  ANTIC_INT_ACK_FLAT_BLOCK_ACK_SHIFT 4
#define  ANTIC_INT_ACK_FLAT_BLOCK_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_FLAT_BLOCK_ACK_MASK) >> ANTIC_INT_ACK_FLAT_BLOCK_ACK_SHIFT)
#define  ANTIC_INT_ACK_FLAT_BLOCK_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_FLAT_BLOCK_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_FLAT_BLOCK_ACK_SHIFT))

#define  ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_MASK 0x8
#define  ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_SHIFT 3
#define  ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_MASK) >> ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_SHIFT)
#define  ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_DATA_AFTER_EOF_ACK_SHIFT))

#define  ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_MASK 0x4
#define  ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_SHIFT 2
#define  ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_MASK) >> ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_SHIFT)
#define  ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_FIFO_OVERFLOW_ACK_SHIFT))

#define  ANTIC_INT_ACK_SHORT_PKT_ACK_MASK 0x2
#define  ANTIC_INT_ACK_SHORT_PKT_ACK_SHIFT 1
#define  ANTIC_INT_ACK_SHORT_PKT_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_SHORT_PKT_ACK_MASK) >> ANTIC_INT_ACK_SHORT_PKT_ACK_SHIFT)
#define  ANTIC_INT_ACK_SHORT_PKT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_SHORT_PKT_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_SHORT_PKT_ACK_SHIFT))

#define  ANTIC_INT_ACK_LONG_PKT_ACK_MASK 0x1
#define  ANTIC_INT_ACK_LONG_PKT_ACK_SHIFT 0
#define  ANTIC_INT_ACK_LONG_PKT_ACK_MASK_SHIFT(reg) (((reg) & ANTIC_INT_ACK_LONG_PKT_ACK_MASK) >> ANTIC_INT_ACK_LONG_PKT_ACK_SHIFT)
#define  ANTIC_INT_ACK_LONG_PKT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_ACK_LONG_PKT_ACK_MASK) | (((uint32_t)val) << ANTIC_INT_ACK_LONG_PKT_ACK_SHIFT))

//====================================================================
//Register: Interrupt Force Register (int_fo)
//====================================================================

#define  ANTIC_INT_FO_RESERVED1_MASK 0xffffff00
#define  ANTIC_INT_FO_RESERVED1_SHIFT 8
#define  ANTIC_INT_FO_RESERVED1_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_RESERVED1_MASK) >> ANTIC_INT_FO_RESERVED1_SHIFT)
#define  ANTIC_INT_FO_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_RESERVED1_MASK) | (((uint32_t)val) << ANTIC_INT_FO_RESERVED1_SHIFT))

#define  ANTIC_INT_FO_ODMA_INT_FO_MASK 0x80
#define  ANTIC_INT_FO_ODMA_INT_FO_SHIFT 7
#define  ANTIC_INT_FO_ODMA_INT_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_ODMA_INT_FO_MASK) >> ANTIC_INT_FO_ODMA_INT_FO_SHIFT)
#define  ANTIC_INT_FO_ODMA_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_ODMA_INT_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_ODMA_INT_FO_SHIFT))

#define  ANTIC_INT_FO_IDMA_INT_FO_MASK 0x40
#define  ANTIC_INT_FO_IDMA_INT_FO_SHIFT 6
#define  ANTIC_INT_FO_IDMA_INT_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_IDMA_INT_FO_MASK) >> ANTIC_INT_FO_IDMA_INT_FO_SHIFT)
#define  ANTIC_INT_FO_IDMA_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_IDMA_INT_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_IDMA_INT_FO_SHIFT))

#define  ANTIC_INT_FO_SATURATION_FO_MASK 0x20
#define  ANTIC_INT_FO_SATURATION_FO_SHIFT 5
#define  ANTIC_INT_FO_SATURATION_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_SATURATION_FO_MASK) >> ANTIC_INT_FO_SATURATION_FO_SHIFT)
#define  ANTIC_INT_FO_SATURATION_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_SATURATION_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_SATURATION_FO_SHIFT))

#define  ANTIC_INT_FO_FLAT_BLOCK_FO_MASK 0x10
#define  ANTIC_INT_FO_FLAT_BLOCK_FO_SHIFT 4
#define  ANTIC_INT_FO_FLAT_BLOCK_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_FLAT_BLOCK_FO_MASK) >> ANTIC_INT_FO_FLAT_BLOCK_FO_SHIFT)
#define  ANTIC_INT_FO_FLAT_BLOCK_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_FLAT_BLOCK_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_FLAT_BLOCK_FO_SHIFT))

#define  ANTIC_INT_FO_DATA_AFTER_EOF_FO_MASK 0x8
#define  ANTIC_INT_FO_DATA_AFTER_EOF_FO_SHIFT 3
#define  ANTIC_INT_FO_DATA_AFTER_EOF_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_DATA_AFTER_EOF_FO_MASK) >> ANTIC_INT_FO_DATA_AFTER_EOF_FO_SHIFT)
#define  ANTIC_INT_FO_DATA_AFTER_EOF_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_DATA_AFTER_EOF_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_DATA_AFTER_EOF_FO_SHIFT))

#define  ANTIC_INT_FO_FIFO_OVERFLOW_FO_MASK 0x4
#define  ANTIC_INT_FO_FIFO_OVERFLOW_FO_SHIFT 2
#define  ANTIC_INT_FO_FIFO_OVERFLOW_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_FIFO_OVERFLOW_FO_MASK) >> ANTIC_INT_FO_FIFO_OVERFLOW_FO_SHIFT)
#define  ANTIC_INT_FO_FIFO_OVERFLOW_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_FIFO_OVERFLOW_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_FIFO_OVERFLOW_FO_SHIFT))

#define  ANTIC_INT_FO_SHORT_PKT_FO_MASK 0x2
#define  ANTIC_INT_FO_SHORT_PKT_FO_SHIFT 1
#define  ANTIC_INT_FO_SHORT_PKT_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_SHORT_PKT_FO_MASK) >> ANTIC_INT_FO_SHORT_PKT_FO_SHIFT)
#define  ANTIC_INT_FO_SHORT_PKT_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_SHORT_PKT_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_SHORT_PKT_FO_SHIFT))

#define  ANTIC_INT_FO_LONG_PKT_FO_MASK 0x1
#define  ANTIC_INT_FO_LONG_PKT_FO_SHIFT 0
#define  ANTIC_INT_FO_LONG_PKT_FO_MASK_SHIFT(reg) (((reg) & ANTIC_INT_FO_LONG_PKT_FO_MASK) >> ANTIC_INT_FO_LONG_PKT_FO_SHIFT)
#define  ANTIC_INT_FO_LONG_PKT_FO_REPLACE_VAL(reg,val) (((reg) & ~ANTIC_INT_FO_LONG_PKT_FO_MASK) | (((uint32_t)val) << ANTIC_INT_FO_LONG_PKT_FO_SHIFT))

//====================================================================
//
//Register File: Input dma (IDMA_AXI_ANTIC)
//
//====================================================================

//====================================================================
//Register: Configuration register (cfg)
//====================================================================

#define  IDMA_AXI_ANTIC_CFG_RESERVED1_MASK 0xfe000000
#define  IDMA_AXI_ANTIC_CFG_RESERVED1_SHIFT 25
#define  IDMA_AXI_ANTIC_CFG_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_RESERVED1_MASK) >> IDMA_AXI_ANTIC_CFG_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_REPLICATE_MASK 0x1000000
#define  IDMA_AXI_ANTIC_CFG_REPLICATE_SHIFT 24
#define  IDMA_AXI_ANTIC_CFG_REPLICATE_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_REPLICATE_MASK) >> IDMA_AXI_ANTIC_CFG_REPLICATE_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_REPLICATE_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_REPLICATE_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_REPLICATE_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_RESERVED2_MASK 0xc00000
#define  IDMA_AXI_ANTIC_CFG_RESERVED2_SHIFT 22
#define  IDMA_AXI_ANTIC_CFG_RESERVED2_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_RESERVED2_MASK) >> IDMA_AXI_ANTIC_CFG_RESERVED2_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_RESERVED2_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_RESERVED2_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_MODE_MASK 0x300000
#define  IDMA_AXI_ANTIC_CFG_MODE_SHIFT 20
#define  IDMA_AXI_ANTIC_CFG_MODE_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_MODE_MASK) >> IDMA_AXI_ANTIC_CFG_MODE_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_MODE_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_MODE_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_MODE_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_RESERVED3_MASK 0xe0000
#define  IDMA_AXI_ANTIC_CFG_RESERVED3_SHIFT 17
#define  IDMA_AXI_ANTIC_CFG_RESERVED3_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_RESERVED3_MASK) >> IDMA_AXI_ANTIC_CFG_RESERVED3_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_RESERVED3_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_RESERVED3_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_ENABLE_MASK 0x10000
#define  IDMA_AXI_ANTIC_CFG_ENABLE_SHIFT 16
#define  IDMA_AXI_ANTIC_CFG_ENABLE_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_ENABLE_MASK) >> IDMA_AXI_ANTIC_CFG_ENABLE_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_ENABLE_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_ENABLE_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_RESERVED4_MASK 0xf800
#define  IDMA_AXI_ANTIC_CFG_RESERVED4_SHIFT 11
#define  IDMA_AXI_ANTIC_CFG_RESERVED4_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_RESERVED4_MASK) >> IDMA_AXI_ANTIC_CFG_RESERVED4_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_RESERVED4_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_RESERVED4_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_OUT_WIDTH_MASK 0x700
#define  IDMA_AXI_ANTIC_CFG_OUT_WIDTH_SHIFT 8
#define  IDMA_AXI_ANTIC_CFG_OUT_WIDTH_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_OUT_WIDTH_MASK) >> IDMA_AXI_ANTIC_CFG_OUT_WIDTH_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_OUT_WIDTH_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_OUT_WIDTH_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_OUT_WIDTH_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_RESERVED5_MASK 0xfc
#define  IDMA_AXI_ANTIC_CFG_RESERVED5_SHIFT 2
#define  IDMA_AXI_ANTIC_CFG_RESERVED5_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_RESERVED5_MASK) >> IDMA_AXI_ANTIC_CFG_RESERVED5_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_RESERVED5_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_RESERVED5_SHIFT))

#define  IDMA_AXI_ANTIC_CFG_BURST_LEN_MASK 0x3
#define  IDMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT 0
#define  IDMA_AXI_ANTIC_CFG_BURST_LEN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CFG_BURST_LEN_MASK) >> IDMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT)
#define  IDMA_AXI_ANTIC_CFG_BURST_LEN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CFG_BURST_LEN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT))

//====================================================================
//Register: Status register (status)
//====================================================================

#define  IDMA_AXI_ANTIC_STATUS_RESERVED1_MASK 0xfffffe00
#define  IDMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT 9
#define  IDMA_AXI_ANTIC_STATUS_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_RESERVED1_MASK) >> IDMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_SOI_MASK 0x100
#define  IDMA_AXI_ANTIC_STATUS_SOI_SHIFT 8
#define  IDMA_AXI_ANTIC_STATUS_SOI_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_SOI_MASK) >> IDMA_AXI_ANTIC_STATUS_SOI_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_SOI_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_SOI_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_SOI_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_EOI_MASK 0x80
#define  IDMA_AXI_ANTIC_STATUS_EOI_SHIFT 7
#define  IDMA_AXI_ANTIC_STATUS_EOI_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_EOI_MASK) >> IDMA_AXI_ANTIC_STATUS_EOI_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_EOI_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_EOI_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_EOI_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_SOFTRESET_MASK 0x40
#define  IDMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT 6
#define  IDMA_AXI_ANTIC_STATUS_SOFTRESET_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_SOFTRESET_MASK) >> IDMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_SOFTRESET_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_SOFTRESET_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK 0x20
#define  IDMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT 5
#define  IDMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK) >> IDMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_FULL_CBUF_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK 0x10
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT 4
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK) >> IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK 0x8
#define  IDMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT 3
#define  IDMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK) >> IDMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_FULL_DBUF_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK 0x4
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT 2
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK) >> IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK 0x2
#define  IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT 1
#define  IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK) >> IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT))

#define  IDMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK 0x1
#define  IDMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT 0
#define  IDMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK) >> IDMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT)
#define  IDMA_AXI_ANTIC_STATUS_DMA_BUSY_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT))

//====================================================================
//Register: Line Width register (line_width)
//====================================================================

#define  IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_MASK 0xffff0000
#define  IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_SHIFT 16
#define  IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_MASK) >> IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_LINE_WIDTH_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_MASK 0xffff
#define  IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_SHIFT 0
#define  IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_MASK) >> IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_SHIFT)
#define  IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_LINE_WIDTH_LINE_WIDTH_SHIFT))

//====================================================================
//Register: Interrupt Enable Register (int_en)
//====================================================================

#define  IDMA_AXI_ANTIC_INT_EN_RESERVED1_MASK 0xffffffc0
#define  IDMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT 6
#define  IDMA_AXI_ANTIC_INT_EN_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_RESERVED1_MASK) >> IDMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK 0x20
#define  IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT 5
#define  IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK 0x10
#define  IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT 4
#define  IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK 0x8
#define  IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT 3
#define  IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK 0x4
#define  IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT 2
#define  IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK 0x2
#define  IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT 1
#define  IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT))

#define  IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK 0x1
#define  IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT 0
#define  IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK) >> IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT)
#define  IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT))

//====================================================================
//Register: Interrupt Pending Register (int_st)
//====================================================================

#define  IDMA_AXI_ANTIC_INT_ST_RESERVED1_MASK 0xffffffc0
#define  IDMA_AXI_ANTIC_INT_ST_RESERVED1_SHIFT 6
#define  IDMA_AXI_ANTIC_INT_ST_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_RESERVED1_MASK) >> IDMA_AXI_ANTIC_INT_ST_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_MASK 0x20
#define  IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_SHIFT 5
#define  IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_RRESP_INT_ST_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_MASK 0x10
#define  IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_SHIFT 4
#define  IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_BRESP_INT_ST_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_MASK 0x8
#define  IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_SHIFT 3
#define  IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_RST_INT_ST_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_MASK 0x4
#define  IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_SHIFT 2
#define  IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_EOI_INT_ST_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_MASK 0x2
#define  IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_SHIFT 1
#define  IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_FIN_INT_ST_SHIFT))

#define  IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_MASK 0x1
#define  IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_SHIFT 0
#define  IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_MASK) >> IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_SHIFT)
#define  IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_ST_WHO_INT_ST_SHIFT))

//====================================================================
//Register: Interrupt Clear Register (int_cl)
//====================================================================

#define  IDMA_AXI_ANTIC_INT_CL_RESERVED1_MASK 0xffffffc0
#define  IDMA_AXI_ANTIC_INT_CL_RESERVED1_SHIFT 6
#define  IDMA_AXI_ANTIC_INT_CL_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_RESERVED1_MASK) >> IDMA_AXI_ANTIC_INT_CL_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_MASK 0x20
#define  IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_SHIFT 5
#define  IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_RRESP_INT_CL_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_MASK 0x10
#define  IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_SHIFT 4
#define  IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_BRESP_INT_CL_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_MASK 0x8
#define  IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_SHIFT 3
#define  IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_RST_INT_CL_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_MASK 0x4
#define  IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_SHIFT 2
#define  IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_EOI_INT_CL_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_MASK 0x2
#define  IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_SHIFT 1
#define  IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_FIN_INT_CL_SHIFT))

#define  IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_MASK 0x1
#define  IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_SHIFT 0
#define  IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_MASK) >> IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_SHIFT)
#define  IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_CL_WHO_INT_CL_SHIFT))

//====================================================================
//Register: Interrupt Force Register (int_fo)
//====================================================================

#define  IDMA_AXI_ANTIC_INT_FO_RESERVED1_MASK 0xffffffc0
#define  IDMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT 6
#define  IDMA_AXI_ANTIC_INT_FO_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_RESERVED1_MASK) >> IDMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK 0x20
#define  IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT 5
#define  IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK 0x10
#define  IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT 4
#define  IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK 0x8
#define  IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT 3
#define  IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK 0x4
#define  IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT 2
#define  IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK 0x2
#define  IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT 1
#define  IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT))

#define  IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK 0x1
#define  IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT 0
#define  IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK) >> IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT)
#define  IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT))

//====================================================================
//Register: Descriptor Write Register (desc_write)
//====================================================================

#define  IDMA_AXI_ANTIC_DESC_WRITE_DESC_MASK 0xffffffff
#define  IDMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT 0
#define  IDMA_AXI_ANTIC_DESC_WRITE_DESC_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_DESC_WRITE_DESC_MASK) >> IDMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT)
#define  IDMA_AXI_ANTIC_DESC_WRITE_DESC_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_DESC_WRITE_DESC_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT))

//====================================================================
//Register: Descriptor Read Register (desc_read)
//====================================================================

#define  IDMA_AXI_ANTIC_DESC_READ_DESC_MASK 0xffffffff
#define  IDMA_AXI_ANTIC_DESC_READ_DESC_SHIFT 0
#define  IDMA_AXI_ANTIC_DESC_READ_DESC_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_DESC_READ_DESC_MASK) >> IDMA_AXI_ANTIC_DESC_READ_DESC_SHIFT)
#define  IDMA_AXI_ANTIC_DESC_READ_DESC_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_DESC_READ_DESC_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_DESC_READ_DESC_SHIFT))

//====================================================================
//Register: Descriptor Transfer Length Register (xfer_length)
//====================================================================

#define  IDMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK 0xffffffff
#define  IDMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT 0
#define  IDMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK) >> IDMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT)
#define  IDMA_AXI_ANTIC_XFER_LENGTH_LEN_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT))

//====================================================================
//Register: Descriptor Transfer Address Register (xfer_addr)
//====================================================================

#define  IDMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK 0xffffffff
#define  IDMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT 0
#define  IDMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK) >> IDMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT)
#define  IDMA_AXI_ANTIC_XFER_ADDR_ADDR_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT))

//====================================================================
//Register: Descriptor Control Word Register (ctrl_word)
//====================================================================

#define  IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_MASK 0xffffffff
#define  IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_SHIFT 0
#define  IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_MASK) >> IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_SHIFT)
#define  IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_CTRL_WORD_CTRL_WORD_SHIFT))

//====================================================================
//Register: Soft Reset register (reset)
//====================================================================

#define  IDMA_AXI_ANTIC_RESET_RESERVED1_MASK 0xfffffffe
#define  IDMA_AXI_ANTIC_RESET_RESERVED1_SHIFT 1
#define  IDMA_AXI_ANTIC_RESET_RESERVED1_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_RESET_RESERVED1_MASK) >> IDMA_AXI_ANTIC_RESET_RESERVED1_SHIFT)
#define  IDMA_AXI_ANTIC_RESET_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_RESET_RESERVED1_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_RESET_RESERVED1_SHIFT))

#define  IDMA_AXI_ANTIC_RESET_SOFT_RESET_MASK 0x1
#define  IDMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT 0
#define  IDMA_AXI_ANTIC_RESET_SOFT_RESET_MASK_SHIFT(reg) (((reg) & IDMA_AXI_ANTIC_RESET_SOFT_RESET_MASK) >> IDMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT)
#define  IDMA_AXI_ANTIC_RESET_SOFT_RESET_REPLACE_VAL(reg,val) (((reg) & ~IDMA_AXI_ANTIC_RESET_SOFT_RESET_MASK) | (((uint32_t)val) << IDMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT))

//====================================================================
//
//Register File: Output dma (ODMA_AXI_ANTIC)
//
//====================================================================

//====================================================================
//Register: Configuration register (cfg)
//====================================================================

#define  ODMA_AXI_ANTIC_CFG_RESERVED1_MASK 0xff800000
#define  ODMA_AXI_ANTIC_CFG_RESERVED1_SHIFT 23
#define  ODMA_AXI_ANTIC_CFG_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_RESERVED1_MASK) >> ODMA_AXI_ANTIC_CFG_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_MASK 0x400000
#define  ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_SHIFT 22
#define  ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_MASK) >> ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_OWNWRITEDISABLE_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_SERPENTINE_MASK 0x200000
#define  ODMA_AXI_ANTIC_CFG_SERPENTINE_SHIFT 21
#define  ODMA_AXI_ANTIC_CFG_SERPENTINE_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_SERPENTINE_MASK) >> ODMA_AXI_ANTIC_CFG_SERPENTINE_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_SERPENTINE_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_SERPENTINE_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_SERPENTINE_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_LINE_REV_MASK 0x100000
#define  ODMA_AXI_ANTIC_CFG_LINE_REV_SHIFT 20
#define  ODMA_AXI_ANTIC_CFG_LINE_REV_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_LINE_REV_MASK) >> ODMA_AXI_ANTIC_CFG_LINE_REV_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_LINE_REV_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_LINE_REV_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_LINE_REV_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_TRAN_REV_MASK 0x80000
#define  ODMA_AXI_ANTIC_CFG_TRAN_REV_SHIFT 19
#define  ODMA_AXI_ANTIC_CFG_TRAN_REV_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_TRAN_REV_MASK) >> ODMA_AXI_ANTIC_CFG_TRAN_REV_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_TRAN_REV_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_TRAN_REV_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_TRAN_REV_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_UPPER_HALF_MASK 0x40000
#define  ODMA_AXI_ANTIC_CFG_UPPER_HALF_SHIFT 18
#define  ODMA_AXI_ANTIC_CFG_UPPER_HALF_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_UPPER_HALF_MASK) >> ODMA_AXI_ANTIC_CFG_UPPER_HALF_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_UPPER_HALF_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_UPPER_HALF_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_UPPER_HALF_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_MSB_IN_MASK 0x20000
#define  ODMA_AXI_ANTIC_CFG_MSB_IN_SHIFT 17
#define  ODMA_AXI_ANTIC_CFG_MSB_IN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_MSB_IN_MASK) >> ODMA_AXI_ANTIC_CFG_MSB_IN_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_MSB_IN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_MSB_IN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_MSB_IN_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_ENABLE_MASK 0x10000
#define  ODMA_AXI_ANTIC_CFG_ENABLE_SHIFT 16
#define  ODMA_AXI_ANTIC_CFG_ENABLE_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_ENABLE_MASK) >> ODMA_AXI_ANTIC_CFG_ENABLE_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_ENABLE_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_ENABLE_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_ENABLE_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_RESERVED2_MASK 0xf800
#define  ODMA_AXI_ANTIC_CFG_RESERVED2_SHIFT 11
#define  ODMA_AXI_ANTIC_CFG_RESERVED2_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_RESERVED2_MASK) >> ODMA_AXI_ANTIC_CFG_RESERVED2_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_RESERVED2_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_RESERVED2_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_IN_WIDTH_MASK 0x700
#define  ODMA_AXI_ANTIC_CFG_IN_WIDTH_SHIFT 8
#define  ODMA_AXI_ANTIC_CFG_IN_WIDTH_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_IN_WIDTH_MASK) >> ODMA_AXI_ANTIC_CFG_IN_WIDTH_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_IN_WIDTH_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_IN_WIDTH_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_IN_WIDTH_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_RESERVED3_MASK 0xfc
#define  ODMA_AXI_ANTIC_CFG_RESERVED3_SHIFT 2
#define  ODMA_AXI_ANTIC_CFG_RESERVED3_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_RESERVED3_MASK) >> ODMA_AXI_ANTIC_CFG_RESERVED3_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_RESERVED3_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_RESERVED3_SHIFT))

#define  ODMA_AXI_ANTIC_CFG_BURST_LEN_MASK 0x3
#define  ODMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT 0
#define  ODMA_AXI_ANTIC_CFG_BURST_LEN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_CFG_BURST_LEN_MASK) >> ODMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT)
#define  ODMA_AXI_ANTIC_CFG_BURST_LEN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_CFG_BURST_LEN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_CFG_BURST_LEN_SHIFT))

//====================================================================
//Register: Status register (status)
//====================================================================

#define  ODMA_AXI_ANTIC_STATUS_RESERVED1_MASK 0xfffff800
#define  ODMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT 11
#define  ODMA_AXI_ANTIC_STATUS_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_RESERVED1_MASK) >> ODMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_DESC_OWN_MASK 0x400
#define  ODMA_AXI_ANTIC_STATUS_DESC_OWN_SHIFT 10
#define  ODMA_AXI_ANTIC_STATUS_DESC_OWN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_DESC_OWN_MASK) >> ODMA_AXI_ANTIC_STATUS_DESC_OWN_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_DESC_OWN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_DESC_OWN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_DESC_OWN_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_DESC_EOI_MASK 0x200
#define  ODMA_AXI_ANTIC_STATUS_DESC_EOI_SHIFT 9
#define  ODMA_AXI_ANTIC_STATUS_DESC_EOI_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_DESC_EOI_MASK) >> ODMA_AXI_ANTIC_STATUS_DESC_EOI_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_DESC_EOI_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_DESC_EOI_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_DESC_EOI_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_DESC_SOI_MASK 0x100
#define  ODMA_AXI_ANTIC_STATUS_DESC_SOI_SHIFT 8
#define  ODMA_AXI_ANTIC_STATUS_DESC_SOI_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_DESC_SOI_MASK) >> ODMA_AXI_ANTIC_STATUS_DESC_SOI_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_DESC_SOI_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_DESC_SOI_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_DESC_SOI_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_REVERSE_MASK 0x80
#define  ODMA_AXI_ANTIC_STATUS_REVERSE_SHIFT 7
#define  ODMA_AXI_ANTIC_STATUS_REVERSE_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_REVERSE_MASK) >> ODMA_AXI_ANTIC_STATUS_REVERSE_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_REVERSE_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_REVERSE_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_REVERSE_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_SOFTRESET_MASK 0x40
#define  ODMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT 6
#define  ODMA_AXI_ANTIC_STATUS_SOFTRESET_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_SOFTRESET_MASK) >> ODMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_SOFTRESET_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_SOFTRESET_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_SOFTRESET_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK 0x20
#define  ODMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT 5
#define  ODMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK) >> ODMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_FULL_CBUF_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_FULL_CBUF_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_FULL_CBUF_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK 0x10
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT 4
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK) >> ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_EMPTY_CBUF_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK 0x8
#define  ODMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT 3
#define  ODMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK) >> ODMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_FULL_DBUF_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_FULL_DBUF_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_FULL_DBUF_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK 0x4
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT 2
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK) >> ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_EMPTY_DBUF_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK 0x2
#define  ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT 1
#define  ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK) >> ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_PACKER_EMPTY_SHIFT))

#define  ODMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK 0x1
#define  ODMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT 0
#define  ODMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK) >> ODMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT)
#define  ODMA_AXI_ANTIC_STATUS_DMA_BUSY_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_STATUS_DMA_BUSY_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_STATUS_DMA_BUSY_SHIFT))

//====================================================================
//Register: Line Size Register (line_size)
//====================================================================

#define  ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_MASK 0xfffc0000
#define  ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_SHIFT 18
#define  ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_MASK) >> ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_LINE_SIZE_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_MASK 0x3ffff
#define  ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_SHIFT 0
#define  ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_MASK) >> ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_SHIFT)
#define  ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_LINE_SIZE_LINE_SIZE_SHIFT))

//====================================================================
//Register: Interrupt Enable Register (int_en)
//====================================================================

#define  ODMA_AXI_ANTIC_INT_EN_RESERVED1_MASK 0xfffff800
#define  ODMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT 11
#define  ODMA_AXI_ANTIC_INT_EN_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_RESERVED1_MASK) >> ODMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK 0x400
#define  ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT 10
#define  ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_RRESP_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK 0x200
#define  ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT 9
#define  ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_BRESP_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK 0x100
#define  ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT 8
#define  ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_RST_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK 0x80
#define  ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT 7
#define  ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_EOI_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_MASK 0x40
#define  ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_SHIFT 6
#define  ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_DIR_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_MASK 0x20
#define  ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_SHIFT 5
#define  ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_CL_ALI_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_MASK 0x10
#define  ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_SHIFT 4
#define  ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_EOL_ALI_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_MASK 0x8
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_SHIFT 3
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_EOI_ALI_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_MASK 0x4
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_SHIFT 2
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_EOI_ERR_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK 0x2
#define  ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT 1
#define  ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_FIN_INT_EN_SHIFT))

#define  ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK 0x1
#define  ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT 0
#define  ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK) >> ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT)
#define  ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_EN_WHO_INT_EN_SHIFT))

//====================================================================
//Register: Interrupt Pending Register (int_pend)
//====================================================================

#define  ODMA_AXI_ANTIC_INT_PEND_RESERVED1_MASK 0xfffff800
#define  ODMA_AXI_ANTIC_INT_PEND_RESERVED1_SHIFT 11
#define  ODMA_AXI_ANTIC_INT_PEND_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_RESERVED1_MASK) >> ODMA_AXI_ANTIC_INT_PEND_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_MASK 0x400
#define  ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_SHIFT 10
#define  ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_RRESP_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_MASK 0x200
#define  ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_SHIFT 9
#define  ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_BRESP_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_MASK 0x100
#define  ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_SHIFT 8
#define  ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_RST_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_MASK 0x80
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_SHIFT 7
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_EOI_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_MASK 0x40
#define  ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_SHIFT 6
#define  ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_DIR_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_MASK 0x20
#define  ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_SHIFT 5
#define  ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_CL_ALI_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_MASK 0x10
#define  ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_SHIFT 4
#define  ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_EOL_ALI_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_MASK 0x8
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_SHIFT 3
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_EOI_ALI_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_MASK 0x4
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_SHIFT 2
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_EOI_ERR_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_MASK 0x2
#define  ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_SHIFT 1
#define  ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_FIN_INT_PEND_SHIFT))

#define  ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_MASK 0x1
#define  ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_SHIFT 0
#define  ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_MASK) >> ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_SHIFT)
#define  ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_PEND_WHO_INT_PEND_SHIFT))

//====================================================================
//Register: Interrupt Acknowledge Register (int_ack)
//====================================================================

#define  ODMA_AXI_ANTIC_INT_ACK_RESERVED1_MASK 0xfffff800
#define  ODMA_AXI_ANTIC_INT_ACK_RESERVED1_SHIFT 11
#define  ODMA_AXI_ANTIC_INT_ACK_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_RESERVED1_MASK) >> ODMA_AXI_ANTIC_INT_ACK_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_MASK 0x400
#define  ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_SHIFT 10
#define  ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_RRESP_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_MASK 0x200
#define  ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_SHIFT 9
#define  ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_BRESP_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_MASK 0x100
#define  ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_SHIFT 8
#define  ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_RST_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_MASK 0x80
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_SHIFT 7
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_EOI_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_MASK 0x40
#define  ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_SHIFT 6
#define  ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_DIR_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_MASK 0x20
#define  ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_SHIFT 5
#define  ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_CL_ALI_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_MASK 0x10
#define  ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_SHIFT 4
#define  ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_EOL_ALI_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_MASK 0x8
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_SHIFT 3
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_EOI_ALI_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_MASK 0x4
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_SHIFT 2
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_EOI_ERR_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_MASK 0x2
#define  ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_SHIFT 1
#define  ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_FIN_INT_ACK_SHIFT))

#define  ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_MASK 0x1
#define  ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_SHIFT 0
#define  ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_MASK) >> ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_SHIFT)
#define  ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_ACK_WHO_INT_ACK_SHIFT))

//====================================================================
//Register: Interrupt Force Register (int_fo)
//====================================================================

#define  ODMA_AXI_ANTIC_INT_FO_RESERVED1_MASK 0xfffff800
#define  ODMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT 11
#define  ODMA_AXI_ANTIC_INT_FO_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_RESERVED1_MASK) >> ODMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK 0x400
#define  ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT 10
#define  ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_RRESP_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK 0x200
#define  ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT 9
#define  ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_BRESP_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK 0x100
#define  ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT 8
#define  ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_RST_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK 0x80
#define  ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT 7
#define  ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_EOI_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_MASK 0x40
#define  ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_SHIFT 6
#define  ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_DIR_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_MASK 0x20
#define  ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_SHIFT 5
#define  ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_CL_ALI_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_MASK 0x10
#define  ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_SHIFT 4
#define  ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_EOL_ALI_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_MASK 0x8
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_SHIFT 3
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_EOI_ALI_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_MASK 0x4
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_SHIFT 2
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_EOI_ERR_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK 0x2
#define  ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT 1
#define  ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_FIN_INT_FO_SHIFT))

#define  ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK 0x1
#define  ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT 0
#define  ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK) >> ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT)
#define  ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_INT_FO_WHO_INT_FO_SHIFT))

//====================================================================
//Register: Descriptor Write Register (desc_write)
//====================================================================

#define  ODMA_AXI_ANTIC_DESC_WRITE_DESC_MASK 0xfffffffc
#define  ODMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT 2
#define  ODMA_AXI_ANTIC_DESC_WRITE_DESC_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_DESC_WRITE_DESC_MASK) >> ODMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT)
#define  ODMA_AXI_ANTIC_DESC_WRITE_DESC_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_DESC_WRITE_DESC_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_DESC_WRITE_DESC_SHIFT))

#define  ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_MASK 0x3
#define  ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_SHIFT 0
#define  ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_MASK) >> ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_DESC_WRITE_RESERVED1_SHIFT))

//====================================================================
//Register: Descriptor Read Register (desc_read)
//====================================================================

#define  ODMA_AXI_ANTIC_DESC_READ_DESC_MASK 0xffffffff
#define  ODMA_AXI_ANTIC_DESC_READ_DESC_SHIFT 0
#define  ODMA_AXI_ANTIC_DESC_READ_DESC_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_DESC_READ_DESC_MASK) >> ODMA_AXI_ANTIC_DESC_READ_DESC_SHIFT)
#define  ODMA_AXI_ANTIC_DESC_READ_DESC_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_DESC_READ_DESC_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_DESC_READ_DESC_SHIFT))

//====================================================================
//Register: Descriptor Transfer Length Register (xfer_length)
//====================================================================

#define  ODMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK 0xffffffff
#define  ODMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT 0
#define  ODMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK) >> ODMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT)
#define  ODMA_AXI_ANTIC_XFER_LENGTH_LEN_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_XFER_LENGTH_LEN_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_XFER_LENGTH_LEN_SHIFT))

//====================================================================
//Register: Descriptor Transfer Address Register (xfer_addr)
//====================================================================

#define  ODMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK 0xffffffff
#define  ODMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT 0
#define  ODMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK) >> ODMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT)
#define  ODMA_AXI_ANTIC_XFER_ADDR_ADDR_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_XFER_ADDR_ADDR_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_XFER_ADDR_ADDR_SHIFT))

//====================================================================
//Register: Descriptor Transfer Burst Register (xfer_burst)
//====================================================================

#define  ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_MASK 0xffffffe0
#define  ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_SHIFT 5
#define  ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_MASK) >> ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_XFER_BURST_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_XFER_BURST_BURST_MASK 0x1f
#define  ODMA_AXI_ANTIC_XFER_BURST_BURST_SHIFT 0
#define  ODMA_AXI_ANTIC_XFER_BURST_BURST_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_XFER_BURST_BURST_MASK) >> ODMA_AXI_ANTIC_XFER_BURST_BURST_SHIFT)
#define  ODMA_AXI_ANTIC_XFER_BURST_BURST_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_XFER_BURST_BURST_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_XFER_BURST_BURST_SHIFT))

//====================================================================
//Register: Soft Reset register (reset)
//====================================================================

#define  ODMA_AXI_ANTIC_RESET_RESERVED1_MASK 0xfffffffe
#define  ODMA_AXI_ANTIC_RESET_RESERVED1_SHIFT 1
#define  ODMA_AXI_ANTIC_RESET_RESERVED1_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_RESET_RESERVED1_MASK) >> ODMA_AXI_ANTIC_RESET_RESERVED1_SHIFT)
#define  ODMA_AXI_ANTIC_RESET_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_RESET_RESERVED1_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_RESET_RESERVED1_SHIFT))

#define  ODMA_AXI_ANTIC_RESET_SOFT_RESET_MASK 0x1
#define  ODMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT 0
#define  ODMA_AXI_ANTIC_RESET_SOFT_RESET_MASK_SHIFT(reg) (((reg) & ODMA_AXI_ANTIC_RESET_SOFT_RESET_MASK) >> ODMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT)
#define  ODMA_AXI_ANTIC_RESET_SOFT_RESET_REPLACE_VAL(reg,val) (((reg) & ~ODMA_AXI_ANTIC_RESET_SOFT_RESET_MASK) | (((uint32_t)val) << ODMA_AXI_ANTIC_RESET_SOFT_RESET_SHIFT))

#endif // ANTIC_TOP
