 /*
 **************************************************************************************
 *
 * Copyright (c) 2010 Marvell International, Ltd.
 *
 **************************************************************************************
 *
 * Marvell Commercial License Option
 *
 * If you received this File from Marvell as part of a proprietary software release,
 * the File is considered Marvell Proprietary and Confidential Information, and is
 * licensed to you under the terms of the applicable Commercial License.
 *
 **************************************************************************************
 *
 * Marvell GPL License Option
 *
 * If you received this File from Marvell as part of a Linux distribution, this File
 * is licensed to you in accordance with the terms and conditions of the General Public
 * License Version 2, June 1991 (the "GPL License").  You can redistribute it and/or
 * modify it under the terms of the GPL License; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GPL License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see http://www.gnu.org/licenses/.
 *
 **************************************************************************************
 *
 * \file asela_regmasks.h
 * Generated using RegBuild 1.6.1
 *
 *************************************************************************
 */

#ifndef _ASELA_REGMASKS_H_
#define _ASELA_REGMASKS_H_

#include <stdint.h>

//====================================================================
//
//Register File: Application Specific ELA (ASELA) (asela)
/** \brief Top-level register file for the Asela block*/
//
//====================================================================

//====================================================================
//Register: Asela Control Register (AselaCtrl)
/** \brief This register contains the main control bits for the ASELA scope.*/
//====================================================================

#define  ASELA_ASELACTRL_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELACTRL_RESERVED1_SHIFT 30
#define  ASELA_ASELACTRL_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED1_MASK) >> ASELA_ASELACTRL_RESERVED1_SHIFT)
#define  ASELA_ASELACTRL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED1_SHIFT))

#define  ASELA_ASELACTRL_NUM_SIGS_MASK 0x3f000000
#define  ASELA_ASELACTRL_NUM_SIGS_SHIFT 24
#define  ASELA_ASELACTRL_NUM_SIGS_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_NUM_SIGS_MASK) >> ASELA_ASELACTRL_NUM_SIGS_SHIFT)
#define  ASELA_ASELACTRL_NUM_SIGS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_NUM_SIGS_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_NUM_SIGS_SHIFT))

#define  ASELA_ASELACTRL_RESERVED2_MASK 0x800000
#define  ASELA_ASELACTRL_RESERVED2_SHIFT 23
#define  ASELA_ASELACTRL_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED2_MASK) >> ASELA_ASELACTRL_RESERVED2_SHIFT)
#define  ASELA_ASELACTRL_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED2_SHIFT))

#define  ASELA_ASELACTRL_PRETRIG_SAMPONCE_MASK 0x400000
#define  ASELA_ASELACTRL_PRETRIG_SAMPONCE_SHIFT 22
#define  ASELA_ASELACTRL_PRETRIG_SAMPONCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_PRETRIG_SAMPONCE_MASK) >> ASELA_ASELACTRL_PRETRIG_SAMPONCE_SHIFT)
#define  ASELA_ASELACTRL_PRETRIG_SAMPONCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_PRETRIG_SAMPONCE_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_PRETRIG_SAMPONCE_SHIFT))

#define  ASELA_ASELACTRL_RESERVED3_MASK 0x200000
#define  ASELA_ASELACTRL_RESERVED3_SHIFT 21
#define  ASELA_ASELACTRL_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED3_MASK) >> ASELA_ASELACTRL_RESERVED3_SHIFT)
#define  ASELA_ASELACTRL_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED3_SHIFT))

#define  ASELA_ASELACTRL_STORE_DATA2MEM_MASK 0x100000
#define  ASELA_ASELACTRL_STORE_DATA2MEM_SHIFT 20
#define  ASELA_ASELACTRL_STORE_DATA2MEM_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_STORE_DATA2MEM_MASK) >> ASELA_ASELACTRL_STORE_DATA2MEM_SHIFT)
#define  ASELA_ASELACTRL_STORE_DATA2MEM_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_STORE_DATA2MEM_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_STORE_DATA2MEM_SHIFT))

#define  ASELA_ASELACTRL_RESERVED4_MASK 0x80000
#define  ASELA_ASELACTRL_RESERVED4_SHIFT 19
#define  ASELA_ASELACTRL_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED4_MASK) >> ASELA_ASELACTRL_RESERVED4_SHIFT)
#define  ASELA_ASELACTRL_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED4_SHIFT))

#define  ASELA_ASELACTRL_CURRENT_STATE_MASK 0x70000
#define  ASELA_ASELACTRL_CURRENT_STATE_SHIFT 16
#define  ASELA_ASELACTRL_CURRENT_STATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_CURRENT_STATE_MASK) >> ASELA_ASELACTRL_CURRENT_STATE_SHIFT)
#define  ASELA_ASELACTRL_CURRENT_STATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_CURRENT_STATE_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_CURRENT_STATE_SHIFT))

#define  ASELA_ASELACTRL_SAMPLE_RATE_MASK 0xff00
#define  ASELA_ASELACTRL_SAMPLE_RATE_SHIFT 8
#define  ASELA_ASELACTRL_SAMPLE_RATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_SAMPLE_RATE_MASK) >> ASELA_ASELACTRL_SAMPLE_RATE_SHIFT)
#define  ASELA_ASELACTRL_SAMPLE_RATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_SAMPLE_RATE_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_SAMPLE_RATE_SHIFT))

#define  ASELA_ASELACTRL_RESERVED5_MASK 0x80
#define  ASELA_ASELACTRL_RESERVED5_SHIFT 7
#define  ASELA_ASELACTRL_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED5_MASK) >> ASELA_ASELACTRL_RESERVED5_SHIFT)
#define  ASELA_ASELACTRL_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED5_SHIFT))

#define  ASELA_ASELACTRL_STOP_UP_MASK 0x40
#define  ASELA_ASELACTRL_STOP_UP_SHIFT 6
#define  ASELA_ASELACTRL_STOP_UP_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_STOP_UP_MASK) >> ASELA_ASELACTRL_STOP_UP_SHIFT)
#define  ASELA_ASELACTRL_STOP_UP_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_STOP_UP_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_STOP_UP_SHIFT))

#define  ASELA_ASELACTRL_STOP_DMA_MASK 0x20
#define  ASELA_ASELACTRL_STOP_DMA_SHIFT 5
#define  ASELA_ASELACTRL_STOP_DMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_STOP_DMA_MASK) >> ASELA_ASELACTRL_STOP_DMA_SHIFT)
#define  ASELA_ASELACTRL_STOP_DMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_STOP_DMA_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_STOP_DMA_SHIFT))

#define  ASELA_ASELACTRL_TRIG_PROG_CMPLTE_MASK 0x10
#define  ASELA_ASELACTRL_TRIG_PROG_CMPLTE_SHIFT 4
#define  ASELA_ASELACTRL_TRIG_PROG_CMPLTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_TRIG_PROG_CMPLTE_MASK) >> ASELA_ASELACTRL_TRIG_PROG_CMPLTE_SHIFT)
#define  ASELA_ASELACTRL_TRIG_PROG_CMPLTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_TRIG_PROG_CMPLTE_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_TRIG_PROG_CMPLTE_SHIFT))

#define  ASELA_ASELACTRL_SOFTRESET_MASK 0x8
#define  ASELA_ASELACTRL_SOFTRESET_SHIFT 3
#define  ASELA_ASELACTRL_SOFTRESET_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_SOFTRESET_MASK) >> ASELA_ASELACTRL_SOFTRESET_SHIFT)
#define  ASELA_ASELACTRL_SOFTRESET_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_SOFTRESET_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_SOFTRESET_SHIFT))

#define  ASELA_ASELACTRL_RESERVED6_MASK 0x6
#define  ASELA_ASELACTRL_RESERVED6_SHIFT 1
#define  ASELA_ASELACTRL_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_RESERVED6_MASK) >> ASELA_ASELACTRL_RESERVED6_SHIFT)
#define  ASELA_ASELACTRL_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_RESERVED6_SHIFT))

#define  ASELA_ASELACTRL_ASELA_ARM_MASK 0x1
#define  ASELA_ASELACTRL_ASELA_ARM_SHIFT 0
#define  ASELA_ASELACTRL_ASELA_ARM_MASK_SHIFT(reg) (((reg) & ASELA_ASELACTRL_ASELA_ARM_MASK) >> ASELA_ASELACTRL_ASELA_ARM_SHIFT)
#define  ASELA_ASELACTRL_ASELA_ARM_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACTRL_ASELA_ARM_MASK) | (((uint32_t)val) << ASELA_ASELACTRL_ASELA_ARM_SHIFT))

//====================================================================
//Register: Number of Pre-Trigger Samples (AselaPreTrigSample)
/** \brief This register specifies the number of pre-trigger samples to be taken.*/
//====================================================================

#define  ASELA_ASELAPRETRIGSAMPLE_RESERVED1_MASK 0xff000000
#define  ASELA_ASELAPRETRIGSAMPLE_RESERVED1_SHIFT 24
#define  ASELA_ASELAPRETRIGSAMPLE_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRETRIGSAMPLE_RESERVED1_MASK) >> ASELA_ASELAPRETRIGSAMPLE_RESERVED1_SHIFT)
#define  ASELA_ASELAPRETRIGSAMPLE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRETRIGSAMPLE_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRETRIGSAMPLE_RESERVED1_SHIFT))

#define  ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_MASK 0xffffff
#define  ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_SHIFT 0
#define  ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_MASK) >> ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_SHIFT)
#define  ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_MASK) | (((uint32_t)val) << ASELA_ASELAPRETRIGSAMPLE_PRETRIG_SAMPLES_SHIFT))

//====================================================================
//Register: Number of Pre-Trigger Samples Taken (AselaPreTrigSamplesTaken)
/** \brief This register specifies the number of pre-trigger samples that were taken.*/
//====================================================================

#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_MASK 0xff000000
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_SHIFT 24
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_MASK) >> ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_SHIFT)
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRETRIGSAMPLESTAKEN_RESERVED1_SHIFT))

#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_MASK 0xffffff
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_SHIFT 0
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_MASK) >> ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_SHIFT)
#define  ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_MASK) | (((uint32_t)val) << ASELA_ASELAPRETRIGSAMPLESTAKEN_PRETRIG_SAMPLES_TAKEN_SHIFT))

//====================================================================
//Register: Maximum Sample Depth (AselaMaxSampleDepth)
/** \brief This register specifies the number of samples to be taken.*/
//====================================================================

#define  ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_SHIFT 25
#define  ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_MASK) >> ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_SHIFT)
#define  ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMAXSAMPLEDEPTH_RESERVED1_SHIFT))

#define  ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_MASK 0x1ffffff
#define  ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_SHIFT 0
#define  ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_MASK) >> ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_SHIFT)
#define  ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_MASK) | (((uint32_t)val) << ASELA_ASELAMAXSAMPLEDEPTH_SAMPLE_DEPTH_SHIFT))

//====================================================================
//Register: Number of Samples Taken (AselaNumSamplesTaken)
/** \brief This register specifies the number of samples that were taken.*/
//====================================================================

#define  ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_SHIFT 25
#define  ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_MASK) >> ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_SHIFT)
#define  ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELANUMSAMPLESTAKEN_RESERVED1_SHIFT))

#define  ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_MASK 0x1ffffff
#define  ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_SHIFT 0
#define  ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_MASK) >> ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_SHIFT)
#define  ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_MASK) | (((uint32_t)val) << ASELA_ASELANUMSAMPLESTAKEN_TOTAL_SAMPLES_TAKEN_SHIFT))

//====================================================================
//Register: Buffer Depth (AselaBufferDepth)
/** \brief This register contains the buffer depth for storing samples.*/
//====================================================================

#define  ASELA_ASELABUFFERDEPTH_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELABUFFERDEPTH_RESERVED1_SHIFT 25
#define  ASELA_ASELABUFFERDEPTH_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELABUFFERDEPTH_RESERVED1_MASK) >> ASELA_ASELABUFFERDEPTH_RESERVED1_SHIFT)
#define  ASELA_ASELABUFFERDEPTH_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABUFFERDEPTH_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELABUFFERDEPTH_RESERVED1_SHIFT))

#define  ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_MASK 0x1ffffff
#define  ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_SHIFT 0
#define  ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_MASK_SHIFT(reg) (((reg) & ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_MASK) >> ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_SHIFT)
#define  ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_MASK) | (((uint32_t)val) << ASELA_ASELABUFFERDEPTH_BUFFER_DEPTH_SHIFT))

//====================================================================
//Register: Trigger Start Point Address (AselaTrigStartAddr)
/** \brief This register specifies the address for where the Trigger happened within the sampled data.*/
//====================================================================

#define  ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_MASK 0x80000000
#define  ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_SHIFT 31
#define  ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_MASK_SHIFT(reg) (((reg) & ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_MASK) >> ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_SHIFT)
#define  ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_MASK) | (((uint32_t)val) << ASELA_ASELATRIGSTARTADDR_SAMPLE_ROLLOVER_SHIFT))

#define  ASELA_ASELATRIGSTARTADDR_RESERVED1_MASK 0x7e000000
#define  ASELA_ASELATRIGSTARTADDR_RESERVED1_SHIFT 25
#define  ASELA_ASELATRIGSTARTADDR_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELATRIGSTARTADDR_RESERVED1_MASK) >> ASELA_ASELATRIGSTARTADDR_RESERVED1_SHIFT)
#define  ASELA_ASELATRIGSTARTADDR_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELATRIGSTARTADDR_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELATRIGSTARTADDR_RESERVED1_SHIFT))

#define  ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_MASK 0x1ffffff
#define  ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_SHIFT 0
#define  ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_MASK_SHIFT(reg) (((reg) & ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_MASK) >> ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_SHIFT)
#define  ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_MASK) | (((uint32_t)val) << ASELA_ASELATRIGSTARTADDR_TRIG_START_SAMPLE_SHIFT))

//====================================================================
//Register: Interrupt Enable Register (AselaIRQEnable)
/** \brief This register specifies which interrupts are enabled from the ASELA Scope.*/
//====================================================================

#define  ASELA_ASELAIRQENABLE_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELAIRQENABLE_RESERVED1_SHIFT 17
#define  ASELA_ASELAIRQENABLE_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_RESERVED1_MASK) >> ASELA_ASELAIRQENABLE_RESERVED1_SHIFT)
#define  ASELA_ASELAIRQENABLE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_RESERVED1_SHIFT))

#define  ASELA_ASELAIRQENABLE_ODMAIRQ_EN_MASK 0x10000
#define  ASELA_ASELAIRQENABLE_ODMAIRQ_EN_SHIFT 16
#define  ASELA_ASELAIRQENABLE_ODMAIRQ_EN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_ODMAIRQ_EN_MASK) >> ASELA_ASELAIRQENABLE_ODMAIRQ_EN_SHIFT)
#define  ASELA_ASELAIRQENABLE_ODMAIRQ_EN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_ODMAIRQ_EN_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_ODMAIRQ_EN_SHIFT))

#define  ASELA_ASELAIRQENABLE_RESERVED2_MASK 0xe000
#define  ASELA_ASELAIRQENABLE_RESERVED2_SHIFT 13
#define  ASELA_ASELAIRQENABLE_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_RESERVED2_MASK) >> ASELA_ASELAIRQENABLE_RESERVED2_SHIFT)
#define  ASELA_ASELAIRQENABLE_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_RESERVED2_SHIFT))

#define  ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_MASK 0x1000
#define  ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_SHIFT 12
#define  ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_MASK) >> ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_SHIFT)
#define  ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_IRQ_SRAMOVRF_EN_SHIFT))

#define  ASELA_ASELAIRQENABLE_RESERVED3_MASK 0xe00
#define  ASELA_ASELAIRQENABLE_RESERVED3_SHIFT 9
#define  ASELA_ASELAIRQENABLE_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_RESERVED3_MASK) >> ASELA_ASELAIRQENABLE_RESERVED3_SHIFT)
#define  ASELA_ASELAIRQENABLE_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_RESERVED3_SHIFT))

#define  ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_MASK 0x100
#define  ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_SHIFT 8
#define  ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_MASK) >> ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_SHIFT)
#define  ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_IRQ_DMASTOP_EN_SHIFT))

#define  ASELA_ASELAIRQENABLE_RESERVED4_MASK 0xe0
#define  ASELA_ASELAIRQENABLE_RESERVED4_SHIFT 5
#define  ASELA_ASELAIRQENABLE_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_RESERVED4_MASK) >> ASELA_ASELAIRQENABLE_RESERVED4_SHIFT)
#define  ASELA_ASELAIRQENABLE_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_RESERVED4_SHIFT))

#define  ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_MASK 0x10
#define  ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_SHIFT 4
#define  ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_MASK) >> ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_SHIFT)
#define  ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_IRQ_TRIGPROG_EN_SHIFT))

#define  ASELA_ASELAIRQENABLE_RESERVED5_MASK 0xe
#define  ASELA_ASELAIRQENABLE_RESERVED5_SHIFT 1
#define  ASELA_ASELAIRQENABLE_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_RESERVED5_MASK) >> ASELA_ASELAIRQENABLE_RESERVED5_SHIFT)
#define  ASELA_ASELAIRQENABLE_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_RESERVED5_SHIFT))

#define  ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_MASK 0x1
#define  ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_SHIFT 0
#define  ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_MASK) >> ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_SHIFT)
#define  ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_MASK) | (((uint32_t)val) << ASELA_ASELAIRQENABLE_IRQ_SAMPDONE_EN_SHIFT))

//====================================================================
//Register: Interrupt Pending Register (AselaIRQPend)
/** \brief This register specifies which interrupts are pending from the ASELA Scope. Only the ones enabled will be visible here.*/
//====================================================================

#define  ASELA_ASELAIRQPEND_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELAIRQPEND_RESERVED1_SHIFT 17
#define  ASELA_ASELAIRQPEND_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_RESERVED1_MASK) >> ASELA_ASELAIRQPEND_RESERVED1_SHIFT)
#define  ASELA_ASELAIRQPEND_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_RESERVED1_SHIFT))

#define  ASELA_ASELAIRQPEND_ODMAIRQ_PEND_MASK 0x10000
#define  ASELA_ASELAIRQPEND_ODMAIRQ_PEND_SHIFT 16
#define  ASELA_ASELAIRQPEND_ODMAIRQ_PEND_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_ODMAIRQ_PEND_MASK) >> ASELA_ASELAIRQPEND_ODMAIRQ_PEND_SHIFT)
#define  ASELA_ASELAIRQPEND_ODMAIRQ_PEND_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_ODMAIRQ_PEND_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_ODMAIRQ_PEND_SHIFT))

#define  ASELA_ASELAIRQPEND_RESERVED2_MASK 0xe000
#define  ASELA_ASELAIRQPEND_RESERVED2_SHIFT 13
#define  ASELA_ASELAIRQPEND_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_RESERVED2_MASK) >> ASELA_ASELAIRQPEND_RESERVED2_SHIFT)
#define  ASELA_ASELAIRQPEND_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_RESERVED2_SHIFT))

#define  ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_MASK 0x1000
#define  ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_SHIFT 12
#define  ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_MASK) >> ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_SHIFT)
#define  ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_IRQ_SRAMOVRF_PEND_SHIFT))

#define  ASELA_ASELAIRQPEND_RESERVED3_MASK 0xe00
#define  ASELA_ASELAIRQPEND_RESERVED3_SHIFT 9
#define  ASELA_ASELAIRQPEND_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_RESERVED3_MASK) >> ASELA_ASELAIRQPEND_RESERVED3_SHIFT)
#define  ASELA_ASELAIRQPEND_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_RESERVED3_SHIFT))

#define  ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_MASK 0x100
#define  ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_SHIFT 8
#define  ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_MASK) >> ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_SHIFT)
#define  ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_IRQ_DMASTOP_PEND_SHIFT))

#define  ASELA_ASELAIRQPEND_RESERVED4_MASK 0xe0
#define  ASELA_ASELAIRQPEND_RESERVED4_SHIFT 5
#define  ASELA_ASELAIRQPEND_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_RESERVED4_MASK) >> ASELA_ASELAIRQPEND_RESERVED4_SHIFT)
#define  ASELA_ASELAIRQPEND_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_RESERVED4_SHIFT))

#define  ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_MASK 0x10
#define  ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_SHIFT 4
#define  ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_MASK) >> ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_SHIFT)
#define  ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_IRQ_TRIGPROG_PEND_SHIFT))

#define  ASELA_ASELAIRQPEND_RESERVED5_MASK 0xe
#define  ASELA_ASELAIRQPEND_RESERVED5_SHIFT 1
#define  ASELA_ASELAIRQPEND_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_RESERVED5_MASK) >> ASELA_ASELAIRQPEND_RESERVED5_SHIFT)
#define  ASELA_ASELAIRQPEND_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_RESERVED5_SHIFT))

#define  ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_MASK 0x1
#define  ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_SHIFT 0
#define  ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_MASK) >> ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_SHIFT)
#define  ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_MASK) | (((uint32_t)val) << ASELA_ASELAIRQPEND_IRQ_SAMPDONE_PEND_SHIFT))

//====================================================================
//Register: Interrupt Acknowledge Register (AselaIRQAck)
/** \brief This register is where you acknowledge / clear a pending interrupt. Writing a 1 to any of these fields clears the
pending interrupt.*/
//====================================================================

#define  ASELA_ASELAIRQACK_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELAIRQACK_RESERVED1_SHIFT 17
#define  ASELA_ASELAIRQACK_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_RESERVED1_MASK) >> ASELA_ASELAIRQACK_RESERVED1_SHIFT)
#define  ASELA_ASELAIRQACK_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_RESERVED1_SHIFT))

#define  ASELA_ASELAIRQACK_ODMAIRQ_ACK_MASK 0x10000
#define  ASELA_ASELAIRQACK_ODMAIRQ_ACK_SHIFT 16
#define  ASELA_ASELAIRQACK_ODMAIRQ_ACK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_ODMAIRQ_ACK_MASK) >> ASELA_ASELAIRQACK_ODMAIRQ_ACK_SHIFT)
#define  ASELA_ASELAIRQACK_ODMAIRQ_ACK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_ODMAIRQ_ACK_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_ODMAIRQ_ACK_SHIFT))

#define  ASELA_ASELAIRQACK_RESERVED2_MASK 0xe000
#define  ASELA_ASELAIRQACK_RESERVED2_SHIFT 13
#define  ASELA_ASELAIRQACK_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_RESERVED2_MASK) >> ASELA_ASELAIRQACK_RESERVED2_SHIFT)
#define  ASELA_ASELAIRQACK_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_RESERVED2_SHIFT))

#define  ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_MASK 0x1000
#define  ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_SHIFT 12
#define  ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_MASK) >> ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_SHIFT)
#define  ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_IRQ_SRAMOVRF_ACK_SHIFT))

#define  ASELA_ASELAIRQACK_RESERVED3_MASK 0xe00
#define  ASELA_ASELAIRQACK_RESERVED3_SHIFT 9
#define  ASELA_ASELAIRQACK_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_RESERVED3_MASK) >> ASELA_ASELAIRQACK_RESERVED3_SHIFT)
#define  ASELA_ASELAIRQACK_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_RESERVED3_SHIFT))

#define  ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_MASK 0x100
#define  ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_SHIFT 8
#define  ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_MASK) >> ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_SHIFT)
#define  ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_IRQ_DMASTOP_ACK_SHIFT))

#define  ASELA_ASELAIRQACK_RESERVED4_MASK 0xe0
#define  ASELA_ASELAIRQACK_RESERVED4_SHIFT 5
#define  ASELA_ASELAIRQACK_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_RESERVED4_MASK) >> ASELA_ASELAIRQACK_RESERVED4_SHIFT)
#define  ASELA_ASELAIRQACK_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_RESERVED4_SHIFT))

#define  ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_MASK 0x10
#define  ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_SHIFT 4
#define  ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_MASK) >> ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_SHIFT)
#define  ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_IRQ_TRIGPROG_ACK_SHIFT))

#define  ASELA_ASELAIRQACK_RESERVED5_MASK 0xe
#define  ASELA_ASELAIRQACK_RESERVED5_SHIFT 1
#define  ASELA_ASELAIRQACK_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_RESERVED5_MASK) >> ASELA_ASELAIRQACK_RESERVED5_SHIFT)
#define  ASELA_ASELAIRQACK_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_RESERVED5_SHIFT))

#define  ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_MASK 0x1
#define  ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_SHIFT 0
#define  ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_MASK) >> ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_SHIFT)
#define  ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_MASK) | (((uint32_t)val) << ASELA_ASELAIRQACK_IRQ_SAMPDONE_ACK_SHIFT))

//====================================================================
//Register: Interrupt Force Register (AselaIRQForce)
/** \brief This register is where you can force a pending interrupt. Writing a 1 to any of these fields forces the
corresponding interrupt.*/
//====================================================================

#define  ASELA_ASELAIRQFORCE_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELAIRQFORCE_RESERVED1_SHIFT 17
#define  ASELA_ASELAIRQFORCE_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_RESERVED1_MASK) >> ASELA_ASELAIRQFORCE_RESERVED1_SHIFT)
#define  ASELA_ASELAIRQFORCE_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_RESERVED1_SHIFT))

#define  ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_MASK 0x10000
#define  ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_SHIFT 16
#define  ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_MASK) >> ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_SHIFT)
#define  ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_ODMAIRQ_FORCE_SHIFT))

#define  ASELA_ASELAIRQFORCE_RESERVED2_MASK 0xe000
#define  ASELA_ASELAIRQFORCE_RESERVED2_SHIFT 13
#define  ASELA_ASELAIRQFORCE_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_RESERVED2_MASK) >> ASELA_ASELAIRQFORCE_RESERVED2_SHIFT)
#define  ASELA_ASELAIRQFORCE_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_RESERVED2_SHIFT))

#define  ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_MASK 0x1000
#define  ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_SHIFT 12
#define  ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_MASK) >> ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_SHIFT)
#define  ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_IRQ_SRAMOVRF_FORCE_SHIFT))

#define  ASELA_ASELAIRQFORCE_RESERVED3_MASK 0xe00
#define  ASELA_ASELAIRQFORCE_RESERVED3_SHIFT 9
#define  ASELA_ASELAIRQFORCE_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_RESERVED3_MASK) >> ASELA_ASELAIRQFORCE_RESERVED3_SHIFT)
#define  ASELA_ASELAIRQFORCE_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_RESERVED3_SHIFT))

#define  ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_MASK 0x100
#define  ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_SHIFT 8
#define  ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_MASK) >> ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_SHIFT)
#define  ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_IRQ_DMASTOP_FORCE_SHIFT))

#define  ASELA_ASELAIRQFORCE_RESERVED4_MASK 0xe0
#define  ASELA_ASELAIRQFORCE_RESERVED4_SHIFT 5
#define  ASELA_ASELAIRQFORCE_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_RESERVED4_MASK) >> ASELA_ASELAIRQFORCE_RESERVED4_SHIFT)
#define  ASELA_ASELAIRQFORCE_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_RESERVED4_SHIFT))

#define  ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_MASK 0x10
#define  ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_SHIFT 4
#define  ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_MASK) >> ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_SHIFT)
#define  ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_IRQ_TRIGPROG_FORCE_SHIFT))

#define  ASELA_ASELAIRQFORCE_RESERVED5_MASK 0xe
#define  ASELA_ASELAIRQFORCE_RESERVED5_SHIFT 1
#define  ASELA_ASELAIRQFORCE_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_RESERVED5_MASK) >> ASELA_ASELAIRQFORCE_RESERVED5_SHIFT)
#define  ASELA_ASELAIRQFORCE_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_RESERVED5_SHIFT))

#define  ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_MASK 0x1
#define  ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_SHIFT 0
#define  ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_MASK) >> ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_SHIFT)
#define  ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_MASK) | (((uint32_t)val) << ASELA_ASELAIRQFORCE_IRQ_SAMPDONE_FORCE_SHIFT))

//====================================================================
//Register: Firmware State Register n (Instance 1 of 4) (AselaFWStateReg0)
/** \brief This register can be used by firmware to write general information that the ASELA Scope can trigger on or sample. The contents of this register are candidate trigger and sample signals and can be found in the Signal Map. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_MASK 0xff000000
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_SHIFT 24
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_MASK) >> ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_SHIFT)
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE3_SHIFT))

#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_MASK 0xff0000
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_SHIFT 16
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_MASK) >> ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_SHIFT)
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE2_SHIFT))

#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_MASK 0xff00
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_SHIFT 8
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_MASK) >> ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_SHIFT)
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE1_SHIFT))

#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_MASK 0xff
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_SHIFT 0
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_MASK) >> ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_SHIFT)
#define  ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG0_GEN_INFO_BYTE0_SHIFT))

//====================================================================
//Register: Firmware State Register n (Instance 2 of 4) (AselaFWStateReg1)
/** \brief This register can be used by firmware to write general information that the ASELA Scope can trigger on or sample. The contents of this register are candidate trigger and sample signals and can be found in the Signal Map. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_MASK 0xff000000
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_SHIFT 24
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_MASK) >> ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_SHIFT)
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE3_SHIFT))

#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_MASK 0xff0000
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_SHIFT 16
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_MASK) >> ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_SHIFT)
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE2_SHIFT))

#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_MASK 0xff00
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_SHIFT 8
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_MASK) >> ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_SHIFT)
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE1_SHIFT))

#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_MASK 0xff
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_SHIFT 0
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_MASK) >> ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_SHIFT)
#define  ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG1_GEN_INFO_BYTE0_SHIFT))

//====================================================================
//Register: Firmware State Register n (Instance 3 of 4) (AselaFWStateReg2)
/** \brief This register can be used by firmware to write general information that the ASELA Scope can trigger on or sample. The contents of this register are candidate trigger and sample signals and can be found in the Signal Map. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_MASK 0xff000000
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_SHIFT 24
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_MASK) >> ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_SHIFT)
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE3_SHIFT))

#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_MASK 0xff0000
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_SHIFT 16
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_MASK) >> ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_SHIFT)
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE2_SHIFT))

#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_MASK 0xff00
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_SHIFT 8
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_MASK) >> ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_SHIFT)
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE1_SHIFT))

#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_MASK 0xff
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_SHIFT 0
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_MASK) >> ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_SHIFT)
#define  ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG2_GEN_INFO_BYTE0_SHIFT))

//====================================================================
//Register: Firmware State Register n (Instance 4 of 4) (AselaFWStateReg3)
/** \brief This register can be used by firmware to write general information that the ASELA Scope can trigger on or sample. The contents of this register are candidate trigger and sample signals and can be found in the Signal Map. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_MASK 0xff000000
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_SHIFT 24
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_MASK) >> ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_SHIFT)
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE3_SHIFT))

#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_MASK 0xff0000
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_SHIFT 16
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_MASK) >> ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_SHIFT)
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE2_SHIFT))

#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_MASK 0xff00
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_SHIFT 8
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_MASK) >> ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_SHIFT)
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE1_SHIFT))

#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_MASK 0xff
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_SHIFT 0
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_MASK) >> ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_SHIFT)
#define  ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_MASK) | (((uint32_t)val) << ASELA_ASELAFWSTATEREG3_GEN_INFO_BYTE0_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 1 of 8) (AselaSampSigSelN0)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 1 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN0_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN0_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN0_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN0_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN0_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN0_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN0_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN0_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN0_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN0_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN0_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN0_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 2 of 8) (AselaSampSigSelN1)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 2 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN1_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN1_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN1_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN1_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN1_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN1_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN1_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN1_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN1_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN1_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN1_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN1_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 3 of 8) (AselaSampSigSelN2)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 3 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN2_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN2_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN2_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN2_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN2_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN2_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN2_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN2_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN2_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN2_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN2_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN2_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 4 of 8) (AselaSampSigSelN3)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 4 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN3_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN3_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN3_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN3_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN3_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN3_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN3_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN3_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN3_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN3_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN3_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN3_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 5 of 8) (AselaSampSigSelN4)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 5 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN4_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN4_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN4_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN4_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN4_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN4_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN4_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN4_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN4_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN4_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN4_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN4_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN4_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN4_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN4_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN4_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN4_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 6 of 8) (AselaSampSigSelN5)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 6 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN5_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN5_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN5_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN5_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN5_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN5_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN5_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN5_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN5_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN5_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN5_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN5_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN5_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN5_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN5_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN5_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN5_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 7 of 8) (AselaSampSigSelN6)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 7 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN6_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN6_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN6_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN6_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN6_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN6_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN6_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN6_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN6_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN6_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN6_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN6_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN6_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN6_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN6_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN6_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN6_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Nibble 2n and 2n+1 (Instance 8 of 8) (AselaSampSigSelN7)
/** \brief These registers contain the selection for the first 64 signals that can be sampled (stored) to memory when triggered. The first 64 sample signals are grouped by nibbles (sixteen total nibbles) meaning that if a single signal is desired to be sampled, it and its three neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 16 nibbles. (Instance 8 of 8)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELN7_RESERVED1_MASK 0xff000000
#define  ASELA_ASELASAMPSIGSELN7_RESERVED1_SHIFT 24
#define  ASELA_ASELASAMPSIGSELN7_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN7_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELN7_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELN7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN7_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN7_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_MASK 0xff0000
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_MASK) >> ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_SHIFT)
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN7_SAMPSIGNH_SHIFT))

#define  ASELA_ASELASAMPSIGSELN7_RESERVED2_MASK 0xff00
#define  ASELA_ASELASAMPSIGSELN7_RESERVED2_SHIFT 8
#define  ASELA_ASELASAMPSIGSELN7_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN7_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELN7_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELN7_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN7_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN7_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_MASK 0xff
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_MASK) >> ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_SHIFT)
#define  ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELN7_SAMPSIGNL_SHIFT))

//====================================================================
//Register: Select Byte 2n and 2n+1 (Instance 1 of 4) (AselaSampSigSelB0)
/** \brief These registers contain the selection for the second 64 signals (signals 65 - 128) that can be sampled (stored) to memory when triggered.
The second 64 sample signals are grouped by bytes (eight total bytes) meaning that if a single signal is desired to be sampled, it and its
seven neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when
all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 8 bytes. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELB0_RESERVED1_MASK 0xff800000
#define  ASELA_ASELASAMPSIGSELB0_RESERVED1_SHIFT 23
#define  ASELA_ASELASAMPSIGSELB0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB0_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELB0_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELB0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB0_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_MASK 0x7f0000
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_MASK) >> ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_SHIFT)
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB0_SAMPSIGBH_SHIFT))

#define  ASELA_ASELASAMPSIGSELB0_RESERVED2_MASK 0xff80
#define  ASELA_ASELASAMPSIGSELB0_RESERVED2_SHIFT 7
#define  ASELA_ASELASAMPSIGSELB0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB0_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELB0_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELB0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB0_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_MASK 0x7f
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_MASK) >> ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_SHIFT)
#define  ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB0_SAMPSIGBL_SHIFT))

//====================================================================
//Register: Select Byte 2n and 2n+1 (Instance 2 of 4) (AselaSampSigSelB1)
/** \brief These registers contain the selection for the second 64 signals (signals 65 - 128) that can be sampled (stored) to memory when triggered.
The second 64 sample signals are grouped by bytes (eight total bytes) meaning that if a single signal is desired to be sampled, it and its
seven neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when
all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 8 bytes. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELB1_RESERVED1_MASK 0xff800000
#define  ASELA_ASELASAMPSIGSELB1_RESERVED1_SHIFT 23
#define  ASELA_ASELASAMPSIGSELB1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB1_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELB1_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELB1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB1_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_MASK 0x7f0000
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_MASK) >> ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_SHIFT)
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB1_SAMPSIGBH_SHIFT))

#define  ASELA_ASELASAMPSIGSELB1_RESERVED2_MASK 0xff80
#define  ASELA_ASELASAMPSIGSELB1_RESERVED2_SHIFT 7
#define  ASELA_ASELASAMPSIGSELB1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB1_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELB1_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELB1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB1_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_MASK 0x7f
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_MASK) >> ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_SHIFT)
#define  ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB1_SAMPSIGBL_SHIFT))

//====================================================================
//Register: Select Byte 2n and 2n+1 (Instance 3 of 4) (AselaSampSigSelB2)
/** \brief These registers contain the selection for the second 64 signals (signals 65 - 128) that can be sampled (stored) to memory when triggered.
The second 64 sample signals are grouped by bytes (eight total bytes) meaning that if a single signal is desired to be sampled, it and its
seven neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when
all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 8 bytes. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELB2_RESERVED1_MASK 0xff800000
#define  ASELA_ASELASAMPSIGSELB2_RESERVED1_SHIFT 23
#define  ASELA_ASELASAMPSIGSELB2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB2_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELB2_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELB2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB2_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_MASK 0x7f0000
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_MASK) >> ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_SHIFT)
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB2_SAMPSIGBH_SHIFT))

#define  ASELA_ASELASAMPSIGSELB2_RESERVED2_MASK 0xff80
#define  ASELA_ASELASAMPSIGSELB2_RESERVED2_SHIFT 7
#define  ASELA_ASELASAMPSIGSELB2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB2_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELB2_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELB2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB2_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_MASK 0x7f
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_MASK) >> ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_SHIFT)
#define  ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB2_SAMPSIGBL_SHIFT))

//====================================================================
//Register: Select Byte 2n and 2n+1 (Instance 4 of 4) (AselaSampSigSelB3)
/** \brief These registers contain the selection for the second 64 signals (signals 65 - 128) that can be sampled (stored) to memory when triggered.
The second 64 sample signals are grouped by bytes (eight total bytes) meaning that if a single signal is desired to be sampled, it and its
seven neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when
all sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 4 times to get all 8 bytes. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELB3_RESERVED1_MASK 0xff800000
#define  ASELA_ASELASAMPSIGSELB3_RESERVED1_SHIFT 23
#define  ASELA_ASELASAMPSIGSELB3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB3_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELB3_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELB3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB3_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_MASK 0x7f0000
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_MASK) >> ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_SHIFT)
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB3_SAMPSIGBH_SHIFT))

#define  ASELA_ASELASAMPSIGSELB3_RESERVED2_MASK 0xff80
#define  ASELA_ASELASAMPSIGSELB3_RESERVED2_SHIFT 7
#define  ASELA_ASELASAMPSIGSELB3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB3_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELB3_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELB3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB3_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_MASK 0x7f
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_MASK) >> ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_SHIFT)
#define  ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELB3_SAMPSIGBL_SHIFT))

//====================================================================
//Register: Select Word 2n and 2n+1 (Instance 1 of 2) (AselaSampSigSelW0)
/** \brief These registers contain the selection for the last 128 signals (signals 129 - 256) that can be sampled (stored) to memory when triggered.
The last 128 sample signals are grouped by words (four total words) meaning that if a single signal is desired to be sampled, it and its
31 neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all
sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 2 times to get all 4 words. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELW0_RESERVED1_MASK 0xffe00000
#define  ASELA_ASELASAMPSIGSELW0_RESERVED1_SHIFT 21
#define  ASELA_ASELASAMPSIGSELW0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW0_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELW0_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELW0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW0_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_MASK 0x1f0000
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_MASK) >> ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_SHIFT)
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW0_SAMPSIGWH_SHIFT))

#define  ASELA_ASELASAMPSIGSELW0_RESERVED2_MASK 0xffe0
#define  ASELA_ASELASAMPSIGSELW0_RESERVED2_SHIFT 5
#define  ASELA_ASELASAMPSIGSELW0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW0_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELW0_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELW0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW0_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_MASK 0x1f
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_MASK) >> ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_SHIFT)
#define  ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW0_SAMPSIGWL_SHIFT))

//====================================================================
//Register: Select Word 2n and 2n+1 (Instance 2 of 2) (AselaSampSigSelW1)
/** \brief These registers contain the selection for the last 128 signals (signals 129 - 256) that can be sampled (stored) to memory when triggered.
The last 128 sample signals are grouped by words (four total words) meaning that if a single signal is desired to be sampled, it and its
31 neighbors specified in the Signal Map will all be sampled. There are a maximum of 256 signals that can be sampled to memory when all
sample signal selection registers are programmed.
<br>
<br>Note: This register description is replicated 2 times to get all 4 words. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELASAMPSIGSELW1_RESERVED1_MASK 0xffe00000
#define  ASELA_ASELASAMPSIGSELW1_RESERVED1_SHIFT 21
#define  ASELA_ASELASAMPSIGSELW1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW1_RESERVED1_MASK) >> ASELA_ASELASAMPSIGSELW1_RESERVED1_SHIFT)
#define  ASELA_ASELASAMPSIGSELW1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW1_RESERVED1_SHIFT))

#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_MASK 0x1f0000
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_SHIFT 16
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_MASK) >> ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_SHIFT)
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW1_SAMPSIGWH_SHIFT))

#define  ASELA_ASELASAMPSIGSELW1_RESERVED2_MASK 0xffe0
#define  ASELA_ASELASAMPSIGSELW1_RESERVED2_SHIFT 5
#define  ASELA_ASELASAMPSIGSELW1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW1_RESERVED2_MASK) >> ASELA_ASELASAMPSIGSELW1_RESERVED2_SHIFT)
#define  ASELA_ASELASAMPSIGSELW1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW1_RESERVED2_SHIFT))

#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_MASK 0x1f
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_SHIFT 0
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_MASK_SHIFT(reg) (((reg) & ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_MASK) >> ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_SHIFT)
#define  ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_MASK) | (((uint32_t)val) << ASELA_ASELASAMPSIGSELW1_SAMPSIGWL_SHIFT))

//====================================================================
//Register: PCLK Select for Nozzle Detect Function (AselaPclkSel)
/** \brief This register contains the fields for selecting which of the LVDS PEN signals are mapped to each of 4 PCLK signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 8 LVDS pairs, ASELA needs to be programmable to match.*/
//====================================================================

#define  ASELA_ASELAPCLKSEL_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPCLKSEL_RESERVED1_SHIFT 30
#define  ASELA_ASELAPCLKSEL_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_RESERVED1_MASK) >> ASELA_ASELAPCLKSEL_RESERVED1_SHIFT)
#define  ASELA_ASELAPCLKSEL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_RESERVED1_SHIFT))

#define  ASELA_ASELAPCLKSEL_PCLK_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPCLKSEL_PCLK_SEL3_SHIFT 24
#define  ASELA_ASELAPCLKSEL_PCLK_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_PCLK_SEL3_MASK) >> ASELA_ASELAPCLKSEL_PCLK_SEL3_SHIFT)
#define  ASELA_ASELAPCLKSEL_PCLK_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_PCLK_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_PCLK_SEL3_SHIFT))

#define  ASELA_ASELAPCLKSEL_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPCLKSEL_RESERVED2_SHIFT 22
#define  ASELA_ASELAPCLKSEL_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_RESERVED2_MASK) >> ASELA_ASELAPCLKSEL_RESERVED2_SHIFT)
#define  ASELA_ASELAPCLKSEL_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_RESERVED2_SHIFT))

#define  ASELA_ASELAPCLKSEL_PCLK_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPCLKSEL_PCLK_SEL2_SHIFT 16
#define  ASELA_ASELAPCLKSEL_PCLK_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_PCLK_SEL2_MASK) >> ASELA_ASELAPCLKSEL_PCLK_SEL2_SHIFT)
#define  ASELA_ASELAPCLKSEL_PCLK_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_PCLK_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_PCLK_SEL2_SHIFT))

#define  ASELA_ASELAPCLKSEL_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPCLKSEL_RESERVED3_SHIFT 14
#define  ASELA_ASELAPCLKSEL_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_RESERVED3_MASK) >> ASELA_ASELAPCLKSEL_RESERVED3_SHIFT)
#define  ASELA_ASELAPCLKSEL_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_RESERVED3_SHIFT))

#define  ASELA_ASELAPCLKSEL_PCLK_SEL1_MASK 0x3f00
#define  ASELA_ASELAPCLKSEL_PCLK_SEL1_SHIFT 8
#define  ASELA_ASELAPCLKSEL_PCLK_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_PCLK_SEL1_MASK) >> ASELA_ASELAPCLKSEL_PCLK_SEL1_SHIFT)
#define  ASELA_ASELAPCLKSEL_PCLK_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_PCLK_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_PCLK_SEL1_SHIFT))

#define  ASELA_ASELAPCLKSEL_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPCLKSEL_RESERVED4_SHIFT 6
#define  ASELA_ASELAPCLKSEL_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_RESERVED4_MASK) >> ASELA_ASELAPCLKSEL_RESERVED4_SHIFT)
#define  ASELA_ASELAPCLKSEL_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_RESERVED4_SHIFT))

#define  ASELA_ASELAPCLKSEL_PCLK_SEL0_MASK 0x3f
#define  ASELA_ASELAPCLKSEL_PCLK_SEL0_SHIFT 0
#define  ASELA_ASELAPCLKSEL_PCLK_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPCLKSEL_PCLK_SEL0_MASK) >> ASELA_ASELAPCLKSEL_PCLK_SEL0_SHIFT)
#define  ASELA_ASELAPCLKSEL_PCLK_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPCLKSEL_PCLK_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPCLKSEL_PCLK_SEL0_SHIFT))

//====================================================================
//Register: PLOAD_N Select for Nozzle Detect Function (AselaPloadnSel)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 4 PLOAD_N signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.*/
//====================================================================

#define  ASELA_ASELAPLOADNSEL_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPLOADNSEL_RESERVED1_SHIFT 30
#define  ASELA_ASELAPLOADNSEL_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_RESERVED1_MASK) >> ASELA_ASELAPLOADNSEL_RESERVED1_SHIFT)
#define  ASELA_ASELAPLOADNSEL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_RESERVED1_SHIFT))

#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_SHIFT 24
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_MASK) >> ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_SHIFT)
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_PLOAD_N_SEL3_SHIFT))

#define  ASELA_ASELAPLOADNSEL_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPLOADNSEL_RESERVED2_SHIFT 22
#define  ASELA_ASELAPLOADNSEL_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_RESERVED2_MASK) >> ASELA_ASELAPLOADNSEL_RESERVED2_SHIFT)
#define  ASELA_ASELAPLOADNSEL_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_RESERVED2_SHIFT))

#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_SHIFT 16
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_MASK) >> ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_SHIFT)
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_PLOAD_N_SEL2_SHIFT))

#define  ASELA_ASELAPLOADNSEL_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPLOADNSEL_RESERVED3_SHIFT 14
#define  ASELA_ASELAPLOADNSEL_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_RESERVED3_MASK) >> ASELA_ASELAPLOADNSEL_RESERVED3_SHIFT)
#define  ASELA_ASELAPLOADNSEL_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_RESERVED3_SHIFT))

#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_MASK 0x3f00
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_SHIFT 8
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_MASK) >> ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_SHIFT)
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_PLOAD_N_SEL1_SHIFT))

#define  ASELA_ASELAPLOADNSEL_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPLOADNSEL_RESERVED4_SHIFT 6
#define  ASELA_ASELAPLOADNSEL_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_RESERVED4_MASK) >> ASELA_ASELAPLOADNSEL_RESERVED4_SHIFT)
#define  ASELA_ASELAPLOADNSEL_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_RESERVED4_SHIFT))

#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_MASK 0x3f
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_SHIFT 0
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_MASK) >> ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_SHIFT)
#define  ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPLOADNSEL_PLOAD_N_SEL0_SHIFT))

//====================================================================
//Register: ADATA Select for Nozzle Detect Function (AselaAdataSel)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 4 ADATA for signals inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.*/
//====================================================================

#define  ASELA_ASELAADATASEL_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAADATASEL_RESERVED1_SHIFT 30
#define  ASELA_ASELAADATASEL_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_RESERVED1_MASK) >> ASELA_ASELAADATASEL_RESERVED1_SHIFT)
#define  ASELA_ASELAADATASEL_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_RESERVED1_SHIFT))

#define  ASELA_ASELAADATASEL_ADATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAADATASEL_ADATA_SEL3_SHIFT 24
#define  ASELA_ASELAADATASEL_ADATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_ADATA_SEL3_MASK) >> ASELA_ASELAADATASEL_ADATA_SEL3_SHIFT)
#define  ASELA_ASELAADATASEL_ADATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_ADATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_ADATA_SEL3_SHIFT))

#define  ASELA_ASELAADATASEL_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAADATASEL_RESERVED2_SHIFT 22
#define  ASELA_ASELAADATASEL_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_RESERVED2_MASK) >> ASELA_ASELAADATASEL_RESERVED2_SHIFT)
#define  ASELA_ASELAADATASEL_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_RESERVED2_SHIFT))

#define  ASELA_ASELAADATASEL_ADATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAADATASEL_ADATA_SEL2_SHIFT 16
#define  ASELA_ASELAADATASEL_ADATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_ADATA_SEL2_MASK) >> ASELA_ASELAADATASEL_ADATA_SEL2_SHIFT)
#define  ASELA_ASELAADATASEL_ADATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_ADATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_ADATA_SEL2_SHIFT))

#define  ASELA_ASELAADATASEL_RESERVED3_MASK 0xc000
#define  ASELA_ASELAADATASEL_RESERVED3_SHIFT 14
#define  ASELA_ASELAADATASEL_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_RESERVED3_MASK) >> ASELA_ASELAADATASEL_RESERVED3_SHIFT)
#define  ASELA_ASELAADATASEL_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_RESERVED3_SHIFT))

#define  ASELA_ASELAADATASEL_ADATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAADATASEL_ADATA_SEL1_SHIFT 8
#define  ASELA_ASELAADATASEL_ADATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_ADATA_SEL1_MASK) >> ASELA_ASELAADATASEL_ADATA_SEL1_SHIFT)
#define  ASELA_ASELAADATASEL_ADATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_ADATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_ADATA_SEL1_SHIFT))

#define  ASELA_ASELAADATASEL_RESERVED4_MASK 0xc0
#define  ASELA_ASELAADATASEL_RESERVED4_SHIFT 6
#define  ASELA_ASELAADATASEL_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_RESERVED4_MASK) >> ASELA_ASELAADATASEL_RESERVED4_SHIFT)
#define  ASELA_ASELAADATASEL_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_RESERVED4_SHIFT))

#define  ASELA_ASELAADATASEL_ADATA_SEL0_MASK 0x3f
#define  ASELA_ASELAADATASEL_ADATA_SEL0_SHIFT 0
#define  ASELA_ASELAADATASEL_ADATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAADATASEL_ADATA_SEL0_MASK) >> ASELA_ASELAADATASEL_ADATA_SEL0_SHIFT)
#define  ASELA_ASELAADATASEL_ADATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAADATASEL_ADATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAADATASEL_ADATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 1 of 8) (AselaPdataSel0)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 1 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL0_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL0_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_RESERVED1_MASK) >> ASELA_ASELAPDATASEL0_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL0_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL0_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL0_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL0_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL0_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL0_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL0_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_RESERVED2_MASK) >> ASELA_ASELAPDATASEL0_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL0_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL0_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL0_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL0_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL0_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL0_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL0_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_RESERVED3_MASK) >> ASELA_ASELAPDATASEL0_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL0_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL0_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL0_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL0_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL0_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL0_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL0_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL0_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_RESERVED4_MASK) >> ASELA_ASELAPDATASEL0_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL0_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL0_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL0_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL0_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL0_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL0_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL0_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL0_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL0_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 2 of 8) (AselaPdataSel1)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 2 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL1_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL1_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_RESERVED1_MASK) >> ASELA_ASELAPDATASEL1_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL1_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL1_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL1_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL1_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL1_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL1_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL1_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_RESERVED2_MASK) >> ASELA_ASELAPDATASEL1_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL1_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL1_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL1_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL1_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL1_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL1_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL1_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_RESERVED3_MASK) >> ASELA_ASELAPDATASEL1_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL1_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL1_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL1_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL1_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL1_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL1_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL1_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL1_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_RESERVED4_MASK) >> ASELA_ASELAPDATASEL1_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL1_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL1_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL1_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL1_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL1_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL1_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL1_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL1_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL1_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 3 of 8) (AselaPdataSel2)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 3 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL2_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL2_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_RESERVED1_MASK) >> ASELA_ASELAPDATASEL2_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL2_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL2_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL2_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL2_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL2_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL2_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL2_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_RESERVED2_MASK) >> ASELA_ASELAPDATASEL2_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL2_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL2_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL2_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL2_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL2_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL2_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL2_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL2_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_RESERVED3_MASK) >> ASELA_ASELAPDATASEL2_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL2_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL2_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL2_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL2_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL2_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL2_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL2_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL2_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_RESERVED4_MASK) >> ASELA_ASELAPDATASEL2_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL2_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL2_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL2_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL2_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL2_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL2_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL2_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL2_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL2_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 4 of 8) (AselaPdataSel3)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 4 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL3_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL3_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_RESERVED1_MASK) >> ASELA_ASELAPDATASEL3_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL3_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL3_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL3_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL3_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL3_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL3_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL3_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_RESERVED2_MASK) >> ASELA_ASELAPDATASEL3_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL3_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL3_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL3_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL3_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL3_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL3_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL3_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL3_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_RESERVED3_MASK) >> ASELA_ASELAPDATASEL3_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL3_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL3_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL3_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL3_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL3_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL3_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL3_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL3_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_RESERVED4_MASK) >> ASELA_ASELAPDATASEL3_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL3_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL3_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL3_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL3_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL3_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL3_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL3_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL3_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL3_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 5 of 8) (AselaPdataSel4)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 5 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL4_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL4_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL4_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_RESERVED1_MASK) >> ASELA_ASELAPDATASEL4_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL4_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL4_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL4_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL4_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL4_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL4_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL4_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL4_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_RESERVED2_MASK) >> ASELA_ASELAPDATASEL4_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL4_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL4_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL4_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL4_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL4_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL4_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL4_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL4_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL4_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_RESERVED3_MASK) >> ASELA_ASELAPDATASEL4_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL4_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL4_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL4_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL4_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL4_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL4_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL4_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL4_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL4_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_RESERVED4_MASK) >> ASELA_ASELAPDATASEL4_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL4_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL4_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL4_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL4_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL4_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL4_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL4_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL4_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL4_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 6 of 8) (AselaPdataSel5)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 6 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL5_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL5_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL5_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_RESERVED1_MASK) >> ASELA_ASELAPDATASEL5_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL5_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL5_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL5_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL5_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL5_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL5_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL5_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL5_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_RESERVED2_MASK) >> ASELA_ASELAPDATASEL5_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL5_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL5_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL5_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL5_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL5_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL5_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL5_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL5_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL5_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_RESERVED3_MASK) >> ASELA_ASELAPDATASEL5_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL5_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL5_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL5_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL5_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL5_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL5_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL5_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL5_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL5_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_RESERVED4_MASK) >> ASELA_ASELAPDATASEL5_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL5_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL5_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL5_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL5_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL5_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL5_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL5_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL5_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL5_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 7 of 8) (AselaPdataSel6)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 7 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL6_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL6_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL6_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_RESERVED1_MASK) >> ASELA_ASELAPDATASEL6_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL6_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL6_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL6_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL6_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL6_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL6_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL6_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL6_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_RESERVED2_MASK) >> ASELA_ASELAPDATASEL6_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL6_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL6_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL6_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL6_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL6_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL6_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL6_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL6_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL6_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_RESERVED3_MASK) >> ASELA_ASELAPDATASEL6_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL6_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL6_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL6_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL6_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL6_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL6_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL6_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL6_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL6_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_RESERVED4_MASK) >> ASELA_ASELAPDATASEL6_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL6_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL6_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL6_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL6_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL6_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL6_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL6_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL6_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL6_PDATA_SEL0_SHIFT))

//====================================================================
//Register: PDATA Select for Nozzle Detect Function (Instance 8 of 8) (AselaPdataSel7)
/** \brief This register contains the fields for selecting which of the 48 PEN signals are mapped to each of 32 PDATA signals for inkjet nozzle detect functionality.
Since the chip has the ability to select between 48 GPIO, ASELA needs to be programmable to match.
<br>
<br>Note: This register description is replicated 6 times to get all 32 possible PDATA signals. (Instance 8 of 8)*/
//====================================================================

#define  ASELA_ASELAPDATASEL7_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELAPDATASEL7_RESERVED1_SHIFT 30
#define  ASELA_ASELAPDATASEL7_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_RESERVED1_MASK) >> ASELA_ASELAPDATASEL7_RESERVED1_SHIFT)
#define  ASELA_ASELAPDATASEL7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_RESERVED1_SHIFT))

#define  ASELA_ASELAPDATASEL7_PDATA_SEL3_MASK 0x3f000000
#define  ASELA_ASELAPDATASEL7_PDATA_SEL3_SHIFT 24
#define  ASELA_ASELAPDATASEL7_PDATA_SEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_PDATA_SEL3_MASK) >> ASELA_ASELAPDATASEL7_PDATA_SEL3_SHIFT)
#define  ASELA_ASELAPDATASEL7_PDATA_SEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_PDATA_SEL3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_PDATA_SEL3_SHIFT))

#define  ASELA_ASELAPDATASEL7_RESERVED2_MASK 0xc00000
#define  ASELA_ASELAPDATASEL7_RESERVED2_SHIFT 22
#define  ASELA_ASELAPDATASEL7_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_RESERVED2_MASK) >> ASELA_ASELAPDATASEL7_RESERVED2_SHIFT)
#define  ASELA_ASELAPDATASEL7_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_RESERVED2_SHIFT))

#define  ASELA_ASELAPDATASEL7_PDATA_SEL2_MASK 0x3f0000
#define  ASELA_ASELAPDATASEL7_PDATA_SEL2_SHIFT 16
#define  ASELA_ASELAPDATASEL7_PDATA_SEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_PDATA_SEL2_MASK) >> ASELA_ASELAPDATASEL7_PDATA_SEL2_SHIFT)
#define  ASELA_ASELAPDATASEL7_PDATA_SEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_PDATA_SEL2_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_PDATA_SEL2_SHIFT))

#define  ASELA_ASELAPDATASEL7_RESERVED3_MASK 0xc000
#define  ASELA_ASELAPDATASEL7_RESERVED3_SHIFT 14
#define  ASELA_ASELAPDATASEL7_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_RESERVED3_MASK) >> ASELA_ASELAPDATASEL7_RESERVED3_SHIFT)
#define  ASELA_ASELAPDATASEL7_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_RESERVED3_SHIFT))

#define  ASELA_ASELAPDATASEL7_PDATA_SEL1_MASK 0x3f00
#define  ASELA_ASELAPDATASEL7_PDATA_SEL1_SHIFT 8
#define  ASELA_ASELAPDATASEL7_PDATA_SEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_PDATA_SEL1_MASK) >> ASELA_ASELAPDATASEL7_PDATA_SEL1_SHIFT)
#define  ASELA_ASELAPDATASEL7_PDATA_SEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_PDATA_SEL1_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_PDATA_SEL1_SHIFT))

#define  ASELA_ASELAPDATASEL7_RESERVED4_MASK 0xc0
#define  ASELA_ASELAPDATASEL7_RESERVED4_SHIFT 6
#define  ASELA_ASELAPDATASEL7_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_RESERVED4_MASK) >> ASELA_ASELAPDATASEL7_RESERVED4_SHIFT)
#define  ASELA_ASELAPDATASEL7_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_RESERVED4_SHIFT))

#define  ASELA_ASELAPDATASEL7_PDATA_SEL0_MASK 0x3f
#define  ASELA_ASELAPDATASEL7_PDATA_SEL0_SHIFT 0
#define  ASELA_ASELAPDATASEL7_PDATA_SEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPDATASEL7_PDATA_SEL0_MASK) >> ASELA_ASELAPDATASEL7_PDATA_SEL0_SHIFT)
#define  ASELA_ASELAPDATASEL7_PDATA_SEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPDATASEL7_PDATA_SEL0_MASK) | (((uint32_t)val) << ASELA_ASELAPDATASEL7_PDATA_SEL0_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 1 of 8) (Asela8BitEventSigSel0)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL0_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL0_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL0_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL0_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 2 of 8) (Asela8BitEventSigSel1)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL1_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL1_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL1_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL1_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 3 of 8) (Asela8BitEventSigSel2)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL2_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL2_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL2_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL2_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 4 of 8) (Asela8BitEventSigSel3)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL3_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL3_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL3_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL3_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 5 of 8) (Asela8BitEventSigSel4)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 5 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL4_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL4_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL4_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL4_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 6 of 8) (Asela8BitEventSigSel5)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 6 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL5_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL5_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL5_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL5_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 7 of 8) (Asela8BitEventSigSel6)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 7 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL6_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL6_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL6_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL6_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Signal Select (Instance 8 of 8) (Asela8BitEventSigSel7)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 8-bit event modules, 8 signals (2 nibbles) can be input. Signals are grouped by nibbles meaning that if a single signal is desired to be input into an event module, it and its three neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 8 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_MASK 0xff800000
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_SHIFT 23
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL7_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_MASK 0x7f0000
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_SHIFT 16
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL7_TRIGUPPERNIB_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_MASK 0xff80
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_SHIFT 7
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL7_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_MASK 0x7f
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_SHIFT 0
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_MASK) >> ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_SHIFT)
#define  ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTSIGSEL7_TRIGLOWERNIB_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 1 of 8) (Asela8BitEventCntrl0)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 2 of 8) (Asela8BitEventCntrl1)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 3 of 8) (Asela8BitEventCntrl2)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 4 of 8) (Asela8BitEventCntrl3)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 5 of 8) (Asela8BitEventCntrl4)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 5 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL4_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 6 of 8) (Asela8BitEventCntrl5)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 6 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL5_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 7 of 8) (Asela8BitEventCntrl6)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 7 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL6_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 8-Bit Event Module n Control (Instance 8 of 8) (Asela8BitEventCntrl7)
/** \brief This register contains the control and setup for the respective 8-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 8 of 8)*/
//====================================================================

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_MASK 0xc0000000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_SHIFT 30
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG8PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_MASK 0x30000000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_SHIFT 28
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG7PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_MASK 0xc000000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_SHIFT 26
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG6PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_MASK 0x3000000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_SHIFT 24
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG5PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_MASK 0xc00000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_SHIFT 22
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG4PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_MASK 0x300000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_SHIFT 20
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG3PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_MASK 0xc0000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_SHIFT 18
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG2PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_MASK 0x30000
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_SHIFT 16
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_SIG1PMATCH_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_MASK 0xc000
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_SHIFT 14
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_RESERVED1_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_SHIFT 12
#define  ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_EDGETYPE_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_MASK 0xe00
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_SHIFT 9
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_RESERVED2_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_MASK 0xe0
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_SHIFT 5
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_RESERVED3_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_MASK 0xe
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_SHIFT 1
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_RESERVED4_SHIFT))

#define  ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA8BITEVENTCNTRL7_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select A (Instance 1 of 4) (Asela32BitEventSigSelA0)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA0_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA0_TRIGSECONDBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA0_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA0_TRIGFIRSTBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select A (Instance 2 of 4) (Asela32BitEventSigSelA1)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA1_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA1_TRIGSECONDBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA1_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA1_TRIGFIRSTBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select A (Instance 3 of 4) (Asela32BitEventSigSelA2)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA2_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA2_TRIGSECONDBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA2_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA2_TRIGFIRSTBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select A (Instance 4 of 4) (Asela32BitEventSigSelA3)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA3_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA3_TRIGSECONDBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA3_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELA3_TRIGFIRSTBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select B (Instance 1 of 4) (Asela32BitEventSigSelB0)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB0_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB0_TRIGFOURTHBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB0_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB0_TRIGTHIRDBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select B (Instance 2 of 4) (Asela32BitEventSigSelB1)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB1_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB1_TRIGFOURTHBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB1_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB1_TRIGTHIRDBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select B (Instance 3 of 4) (Asela32BitEventSigSelB2)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB2_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB2_TRIGFOURTHBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB2_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB2_TRIGTHIRDBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Signal Select B (Instance 4 of 4) (Asela32BitEventSigSelB3)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_MASK 0xffc00000
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_SHIFT 22
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB3_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_MASK 0x3f0000
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_SHIFT 16
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB3_TRIGFOURTHBYTE_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_MASK 0xffc0
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_SHIFT 6
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB3_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_MASK 0x3f
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_SHIFT 0
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_MASK) >> ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_SHIFT)
#define  ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTSIGSELB3_TRIGTHIRDBYTE_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Compare Value (Instance 1 of 4) (Asela32BitEventComp0)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCOMP0_COMPVAL_MASK 0xffffffff
#define  ASELA_ASELA32BITEVENTCOMP0_COMPVAL_SHIFT 0
#define  ASELA_ASELA32BITEVENTCOMP0_COMPVAL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCOMP0_COMPVAL_MASK) >> ASELA_ASELA32BITEVENTCOMP0_COMPVAL_SHIFT)
#define  ASELA_ASELA32BITEVENTCOMP0_COMPVAL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCOMP0_COMPVAL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCOMP0_COMPVAL_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Compare Value (Instance 2 of 4) (Asela32BitEventComp1)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCOMP1_COMPVAL_MASK 0xffffffff
#define  ASELA_ASELA32BITEVENTCOMP1_COMPVAL_SHIFT 0
#define  ASELA_ASELA32BITEVENTCOMP1_COMPVAL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCOMP1_COMPVAL_MASK) >> ASELA_ASELA32BITEVENTCOMP1_COMPVAL_SHIFT)
#define  ASELA_ASELA32BITEVENTCOMP1_COMPVAL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCOMP1_COMPVAL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCOMP1_COMPVAL_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Compare Value (Instance 3 of 4) (Asela32BitEventComp2)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCOMP2_COMPVAL_MASK 0xffffffff
#define  ASELA_ASELA32BITEVENTCOMP2_COMPVAL_SHIFT 0
#define  ASELA_ASELA32BITEVENTCOMP2_COMPVAL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCOMP2_COMPVAL_MASK) >> ASELA_ASELA32BITEVENTCOMP2_COMPVAL_SHIFT)
#define  ASELA_ASELA32BITEVENTCOMP2_COMPVAL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCOMP2_COMPVAL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCOMP2_COMPVAL_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Compare Value (Instance 4 of 4) (Asela32BitEventComp3)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 32-bit event modules, 32 signals (4 bytes) can be input. Signals are grouped by bytes, meaning that if a single signal is desired to be input into an event module, it and its seven neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCOMP3_COMPVAL_MASK 0xffffffff
#define  ASELA_ASELA32BITEVENTCOMP3_COMPVAL_SHIFT 0
#define  ASELA_ASELA32BITEVENTCOMP3_COMPVAL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCOMP3_COMPVAL_MASK) >> ASELA_ASELA32BITEVENTCOMP3_COMPVAL_SHIFT)
#define  ASELA_ASELA32BITEVENTCOMP3_COMPVAL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCOMP3_COMPVAL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCOMP3_COMPVAL_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Control (Instance 1 of 4) (Asela32BitEventCntrl0)
/** \brief This register contains the control and setup for each respective 32-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_SHIFT 25
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_MASK 0x1000000
#define  ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_SHIFT 24
#define  ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_DLYOUTSIGSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_SHIFT 22
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_MASK 0x300000
#define  ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_SHIFT 20
#define  ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_INCNTRSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_MASK 0x80000
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_SHIFT 19
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED3_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_MASK 0x70000
#define  ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_SHIFT 16
#define  ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_COMPTYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_MASK 0xc000
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_SHIFT 14
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED4_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_SHIFT 12
#define  ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_EDGETYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_MASK 0xe00
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_SHIFT 9
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED5_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_MASK 0xe0
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_SHIFT 5
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED6_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_MASK 0xe
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_SHIFT 1
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_RESERVED7_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Control (Instance 2 of 4) (Asela32BitEventCntrl1)
/** \brief This register contains the control and setup for each respective 32-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_SHIFT 25
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_MASK 0x1000000
#define  ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_SHIFT 24
#define  ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_DLYOUTSIGSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_SHIFT 22
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_MASK 0x300000
#define  ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_SHIFT 20
#define  ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_INCNTRSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_MASK 0x80000
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_SHIFT 19
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED3_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_MASK 0x70000
#define  ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_SHIFT 16
#define  ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_COMPTYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_MASK 0xc000
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_SHIFT 14
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED4_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_SHIFT 12
#define  ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_EDGETYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_MASK 0xe00
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_SHIFT 9
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED5_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_MASK 0xe0
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_SHIFT 5
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED6_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_MASK 0xe
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_SHIFT 1
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_RESERVED7_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Control (Instance 3 of 4) (Asela32BitEventCntrl2)
/** \brief This register contains the control and setup for each respective 32-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_SHIFT 25
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_MASK 0x1000000
#define  ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_SHIFT 24
#define  ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_DLYOUTSIGSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_SHIFT 22
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_MASK 0x300000
#define  ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_SHIFT 20
#define  ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_INCNTRSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_MASK 0x80000
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_SHIFT 19
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED3_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_MASK 0x70000
#define  ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_SHIFT 16
#define  ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_COMPTYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_MASK 0xc000
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_SHIFT 14
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED4_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_SHIFT 12
#define  ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_EDGETYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_MASK 0xe00
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_SHIFT 9
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED5_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_MASK 0xe0
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_SHIFT 5
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED6_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_MASK 0xe
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_SHIFT 1
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_RESERVED7_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL2_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Control (Instance 4 of 4) (Asela32BitEventCntrl3)
/** \brief This register contains the control and setup for each respective 32-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_MASK 0xfe000000
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_SHIFT 25
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED1_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_MASK 0x1000000
#define  ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_SHIFT 24
#define  ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_DLYOUTSIGSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_SHIFT 22
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED2_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_MASK 0x300000
#define  ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_SHIFT 20
#define  ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_INCNTRSEL_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_MASK 0x80000
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_SHIFT 19
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED3_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_MASK 0x70000
#define  ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_SHIFT 16
#define  ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_COMPTYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_MASK 0xc000
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_SHIFT 14
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED4_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_SHIFT 12
#define  ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_EDGETYPE_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_MASK 0xe00
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_SHIFT 9
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED5_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_MASK 0xe0
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_SHIFT 5
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED6_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_MASK 0xe
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_SHIFT 1
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_RESERVED7_SHIFT))

#define  ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTCNTRL3_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match A (Instance 1 of 4) (Asela32BitEventPMatchA0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA0_SIGPMATCHA0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match A (Instance 2 of 4) (Asela32BitEventPMatchA1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA1_SIGPMATCHA0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match A (Instance 3 of 4) (Asela32BitEventPMatchA2)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA2_SIGPMATCHA0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match A (Instance 4 of 4) (Asela32BitEventPMatchA3)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHA3_SIGPMATCHA0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match B (Instance 1 of 4) (Asela32BitEventPMatchB0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB0_SIGPMATCHB0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match B (Instance 2 of 4) (Asela32BitEventPMatchB1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB1_SIGPMATCHB0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match B (Instance 3 of 4) (Asela32BitEventPMatchB2)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB2_SIGPMATCHB0_0_SHIFT))

//====================================================================
//Register: 32-Bit Event Module n Pattern Match B (Instance 4 of 4) (Asela32BitEventPMatchB3)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_MASK 0xc0000000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_SHIFT 30
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_MASK 0x30000000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_SHIFT 28
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_MASK 0xc000000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_SHIFT 26
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_MASK 0x3000000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_SHIFT 24
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_MASK 0xc00000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_SHIFT 22
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_MASK 0x300000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_SHIFT 20
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_MASK 0xc0000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_SHIFT 18
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_MASK 0x30000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_SHIFT 16
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB1_0_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_MASK 0xc000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_SHIFT 14
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_7_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_MASK 0x3000
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_SHIFT 12
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_6_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_MASK 0xc00
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_SHIFT 10
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_5_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_MASK 0x300
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_SHIFT 8
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_4_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_MASK 0xc0
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_SHIFT 6
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_3_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_MASK 0x30
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_SHIFT 4
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_2_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_MASK 0xc
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_SHIFT 2
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_1_SHIFT))

#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_MASK 0x3
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_SHIFT 0
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_MASK) >> ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_SHIFT)
#define  ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_MASK) | (((uint32_t)val) << ASELA_ASELA32BITEVENTPMATCHB3_SIGPMATCHB0_0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Signal Select (Instance 1 of 2) (Asela64BitEventSigSel0)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 64-bit event modules, 64 signals (2 words) can be input. Signals are grouped by words meaning that if a single signal is desired to be input into an event module, it and its 31 neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_MASK 0xfffff000
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_SHIFT 12
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_MASK) >> ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL0_RESERVED1_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_MASK 0xf00
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_SHIFT 8
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_MASK) >> ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL0_TRIGSECONDWORD_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_MASK 0xf0
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_SHIFT 4
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_MASK) >> ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL0_RESERVED2_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_MASK 0xf
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_SHIFT 0
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_MASK) >> ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL0_TRIGFIRSTWORD_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Signal Select (Instance 2 of 2) (Asela64BitEventSigSel1)
/** \brief This register contains the selection for the signals that will be input to the respective event module. For the 64-bit event modules, 64 signals (2 words) can be input. Signals are grouped by words meaning that if a single signal is desired to be input into an event module, it and its 31 neighbors specified in the Signal Map will all be input. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_MASK 0xfffff000
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_SHIFT 12
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_MASK) >> ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL1_RESERVED1_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_MASK 0xf00
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_SHIFT 8
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_MASK) >> ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL1_TRIGSECONDWORD_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_MASK 0xf0
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_SHIFT 4
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_MASK) >> ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL1_RESERVED2_SHIFT))

#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_MASK 0xf
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_SHIFT 0
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_MASK) >> ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_SHIFT)
#define  ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTSIGSEL1_TRIGFIRSTWORD_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Control (Instance 1 of 2) (Asela64BitEventCntrl0)
/** \brief These registers contain the control and setup for each respective 64-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Each 64-bit trigger event module has a unique operation not available to other event modules; an OR gate can be placed between the pattern match results of the first 32-bits and the second 32-bits. This is equivalent to ORing two 32-bit busses to determine if either is true. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_SHIFT 17
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_RESERVED1_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_MASK 0x10000
#define  ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_SHIFT 16
#define  ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_ORPMATCH32_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_MASK 0xc000
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_SHIFT 14
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_RESERVED2_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_SHIFT 12
#define  ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_EDGETYPE_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_MASK 0xe00
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_SHIFT 9
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_RESERVED3_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_MASK 0xe0
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_SHIFT 5
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_RESERVED4_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_MASK 0xe
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_SHIFT 1
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_RESERVED5_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL0_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Control (Instance 2 of 2) (Asela64BitEventCntrl1)
/** \brief These registers contain the control and setup for each respective 64-bit trigger event module. The setup contained in these registers will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Each 64-bit trigger event module has a unique operation not available to other event modules; an OR gate can be placed between the pattern match results of the first 32-bits and the second 32-bits. This is equivalent to ORing two 32-bit busses to determine if either is true. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_MASK 0xfffe0000
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_SHIFT 17
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_RESERVED1_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_MASK 0x10000
#define  ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_SHIFT 16
#define  ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_ORPMATCH32_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_MASK 0xc000
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_SHIFT 14
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_RESERVED2_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_MASK 0x3000
#define  ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_SHIFT 12
#define  ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_EDGETYPE_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_MASK 0xe00
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_SHIFT 9
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_RESERVED3_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_MASK 0x100
#define  ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_SHIFT 8
#define  ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_MASK 0xe0
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_SHIFT 5
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_RESERVED4_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_MASK 0x10
#define  ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_SHIFT 4
#define  ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_ANDORSIGOBS_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_MASK 0xe
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_SHIFT 1
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_RESERVED5_SHIFT))

#define  ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK 0x1
#define  ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT 0
#define  ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) >> ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT)
#define  ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTCNTRL1_UNIQUEBUSEVENT_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match A (Instance 1 of 2) (Asela64BitEventPMatchA0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_MASK) >> ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA0_SIGPMATCHA0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match A (Instance 2 of 2) (Asela64BitEventPMatchA1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_MASK) >> ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHA1_SIGPMATCHA0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match B (Instance 1 of 2) (Asela64BitEventPMatchB0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_MASK) >> ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB0_SIGPMATCHB0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match B (Instance 2 of 2) (Asela64BitEventPMatchB1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_MASK) >> ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHB1_SIGPMATCHB0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match C (Instance 1 of 2) (Asela64BitEventPMatchC0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_MASK) >> ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC0_SIGPMATCHC0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match C (Instance 2 of 2) (Asela64BitEventPMatchC1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_MASK) >> ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHC1_SIGPMATCHC0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match D (Instance 1 of 2) (Asela64BitEventPMatchD0)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_MASK) >> ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD0_SIGPMATCHD0_SHIFT))

//====================================================================
//Register: 64-Bit Event Module n Pattern Match D (Instance 2 of 2) (Asela64BitEventPMatchD1)
/** \brief This register will determine when an event module will return an internal "true" value to the ASELA Scope indicating that the programmed event occurred. Multiple event blocks may be stacked within a single "IF" condition to create large and complex event conditions. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_MASK 0xc0000000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_SHIFT 30
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD15_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_MASK 0x30000000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_SHIFT 28
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD14_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_MASK 0xc000000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_SHIFT 26
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD13_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_MASK 0x3000000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_SHIFT 24
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD12_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_MASK 0xc00000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_SHIFT 22
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD11_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_MASK 0x300000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_SHIFT 20
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD10_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_MASK 0xc0000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_SHIFT 18
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD9_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_MASK 0x30000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_SHIFT 16
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD8_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_MASK 0xc000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_SHIFT 14
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD7_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_MASK 0x3000
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_SHIFT 12
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD6_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_MASK 0xc00
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_SHIFT 10
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD5_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_MASK 0x300
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_SHIFT 8
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD4_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_MASK 0xc0
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_SHIFT 6
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD3_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_MASK 0x30
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_SHIFT 4
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD2_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_MASK 0xc
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_SHIFT 2
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD1_SHIFT))

#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_MASK 0x3
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_SHIFT 0
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_MASK_SHIFT(reg) (((reg) & ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_MASK) >> ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_SHIFT)
#define  ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_MASK) | (((uint32_t)val) << ASELA_ASELA64BITEVENTPMATCHD1_SIGPMATCHD0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 1 of 10) (AselaIFCntrl0)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 1 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL0_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL0_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL0_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL0_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL0_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL0_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL0_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL0_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL0_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL0_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL0_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL0_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL0_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_NEXTST_MASK) >> ASELA_ASELAIFCNTRL0_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL0_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL0_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL0_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL0_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL0_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL0_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL0_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL0_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL0_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL0_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL0_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL0_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL0_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL0_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_STATEID_MASK) >> ASELA_ASELAIFCNTRL0_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL0_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL0_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL0_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL0_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL0_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL0_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL0_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL0_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL0_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL0_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL0_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL0_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 2 of 10) (AselaIFCntrl1)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 2 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL1_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL1_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL1_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL1_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL1_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL1_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL1_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL1_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL1_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL1_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL1_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL1_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL1_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_NEXTST_MASK) >> ASELA_ASELAIFCNTRL1_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL1_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL1_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL1_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL1_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL1_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL1_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL1_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL1_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL1_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL1_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL1_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL1_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL1_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL1_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_STATEID_MASK) >> ASELA_ASELAIFCNTRL1_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL1_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL1_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL1_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL1_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL1_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL1_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL1_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL1_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL1_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL1_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL1_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL1_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 3 of 10) (AselaIFCntrl2)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 3 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL2_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL2_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL2_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL2_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL2_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL2_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL2_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL2_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL2_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL2_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL2_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL2_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL2_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_NEXTST_MASK) >> ASELA_ASELAIFCNTRL2_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL2_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL2_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL2_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL2_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL2_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL2_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL2_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL2_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL2_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL2_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL2_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL2_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL2_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL2_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_STATEID_MASK) >> ASELA_ASELAIFCNTRL2_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL2_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL2_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL2_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL2_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL2_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL2_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL2_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL2_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL2_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL2_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL2_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL2_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 4 of 10) (AselaIFCntrl3)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 4 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL3_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL3_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL3_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL3_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL3_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL3_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL3_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL3_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL3_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL3_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL3_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL3_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL3_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_NEXTST_MASK) >> ASELA_ASELAIFCNTRL3_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL3_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL3_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL3_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL3_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL3_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL3_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL3_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL3_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL3_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL3_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL3_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL3_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL3_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL3_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_STATEID_MASK) >> ASELA_ASELAIFCNTRL3_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL3_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL3_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL3_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL3_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL3_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL3_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL3_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL3_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL3_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL3_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL3_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL3_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 5 of 10) (AselaIFCntrl4)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 5 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL4_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL4_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL4_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL4_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL4_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL4_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL4_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL4_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL4_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL4_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL4_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL4_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL4_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_NEXTST_MASK) >> ASELA_ASELAIFCNTRL4_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL4_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL4_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL4_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL4_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL4_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL4_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL4_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL4_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL4_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL4_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL4_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL4_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL4_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL4_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_STATEID_MASK) >> ASELA_ASELAIFCNTRL4_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL4_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL4_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL4_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL4_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL4_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL4_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL4_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL4_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL4_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL4_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL4_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL4_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 6 of 10) (AselaIFCntrl5)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 6 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL5_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL5_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL5_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL5_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL5_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL5_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL5_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL5_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL5_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL5_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL5_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL5_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL5_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_NEXTST_MASK) >> ASELA_ASELAIFCNTRL5_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL5_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL5_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL5_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL5_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL5_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL5_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL5_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL5_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL5_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL5_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL5_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL5_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL5_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL5_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_STATEID_MASK) >> ASELA_ASELAIFCNTRL5_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL5_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL5_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL5_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL5_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL5_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL5_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL5_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL5_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL5_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL5_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL5_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL5_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 7 of 10) (AselaIFCntrl6)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 7 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL6_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL6_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL6_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL6_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL6_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL6_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL6_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL6_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL6_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL6_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL6_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL6_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL6_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_NEXTST_MASK) >> ASELA_ASELAIFCNTRL6_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL6_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL6_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL6_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL6_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL6_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL6_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL6_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL6_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL6_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL6_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL6_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL6_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL6_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL6_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_STATEID_MASK) >> ASELA_ASELAIFCNTRL6_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL6_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL6_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL6_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL6_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL6_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL6_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL6_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL6_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL6_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL6_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL6_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL6_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 8 of 10) (AselaIFCntrl7)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 8 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL7_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL7_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL7_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL7_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL7_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL7_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL7_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL7_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL7_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL7_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL7_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL7_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL7_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_NEXTST_MASK) >> ASELA_ASELAIFCNTRL7_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL7_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL7_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL7_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL7_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL7_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL7_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL7_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL7_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL7_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL7_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL7_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL7_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL7_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL7_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_STATEID_MASK) >> ASELA_ASELAIFCNTRL7_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL7_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL7_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL7_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL7_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL7_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL7_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL7_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL7_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL7_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL7_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL7_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL7_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 9 of 10) (AselaIFCntrl8)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 9 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL8_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL8_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL8_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL8_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL8_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL8_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL8_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL8_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL8_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL8_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL8_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL8_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL8_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_NEXTST_MASK) >> ASELA_ASELAIFCNTRL8_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL8_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL8_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL8_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL8_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL8_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL8_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL8_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL8_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL8_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL8_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL8_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL8_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL8_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL8_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_STATEID_MASK) >> ASELA_ASELAIFCNTRL8_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL8_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL8_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL8_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL8_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL8_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL8_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL8_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL8_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL8_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL8_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL8_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL8_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement n Control (Instance 10 of 10) (AselaIFCntrl9)
/** \brief This register contains the control and setup for each respective programmable IF Statement module. Each IF Statement contains a condition (e.g. if (condition) ) and a set of actions (e.g. if () then action1, action2, ...). Actions include trigger all, sample once, goto state x, stop trigger program, increment/decrement counter, start/stop/reset counter, etc. Each IF Statement is associated with one of eight States. More than one IF Statement can be associated with a single state. This creates a "IF then Else IF then ?" scenario. The lowest number IF Statement has the highest priority (hardcoded). There are eight total IF Statements that can be spread amongst eight states to create complex trigger scenarios. (Instance 10 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRL9_STOPDMA_MASK 0x80000000
#define  ASELA_ASELAIFCNTRL9_STOPDMA_SHIFT 31
#define  ASELA_ASELAIFCNTRL9_STOPDMA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_STOPDMA_MASK) >> ASELA_ASELAIFCNTRL9_STOPDMA_SHIFT)
#define  ASELA_ASELAIFCNTRL9_STOPDMA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_STOPDMA_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_STOPDMA_SHIFT))

#define  ASELA_ASELAIFCNTRL9_STOPCPU_MASK 0x40000000
#define  ASELA_ASELAIFCNTRL9_STOPCPU_SHIFT 30
#define  ASELA_ASELAIFCNTRL9_STOPCPU_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_STOPCPU_MASK) >> ASELA_ASELAIFCNTRL9_STOPCPU_SHIFT)
#define  ASELA_ASELAIFCNTRL9_STOPCPU_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_STOPCPU_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_STOPCPU_SHIFT))

#define  ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_MASK 0x20000000
#define  ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_SHIFT 29
#define  ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_MASK) >> ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_SHIFT)
#define  ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_DISABLETRIGPROG_SHIFT))

#define  ASELA_ASELAIFCNTRL9_NEXTST_MASK 0x1c000000
#define  ASELA_ASELAIFCNTRL9_NEXTST_SHIFT 26
#define  ASELA_ASELAIFCNTRL9_NEXTST_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_NEXTST_MASK) >> ASELA_ASELAIFCNTRL9_NEXTST_SHIFT)
#define  ASELA_ASELAIFCNTRL9_NEXTST_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_NEXTST_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_NEXTST_SHIFT))

#define  ASELA_ASELAIFCNTRL9_TRIGACT_MASK 0x3000000
#define  ASELA_ASELAIFCNTRL9_TRIGACT_SHIFT 24
#define  ASELA_ASELAIFCNTRL9_TRIGACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_TRIGACT_MASK) >> ASELA_ASELAIFCNTRL9_TRIGACT_SHIFT)
#define  ASELA_ASELAIFCNTRL9_TRIGACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_TRIGACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_TRIGACT_SHIFT))

#define  ASELA_ASELAIFCNTRL9_SETTRIGIRQ_MASK 0x800000
#define  ASELA_ASELAIFCNTRL9_SETTRIGIRQ_SHIFT 23
#define  ASELA_ASELAIFCNTRL9_SETTRIGIRQ_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_SETTRIGIRQ_MASK) >> ASELA_ASELAIFCNTRL9_SETTRIGIRQ_SHIFT)
#define  ASELA_ASELAIFCNTRL9_SETTRIGIRQ_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_SETTRIGIRQ_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_SETTRIGIRQ_SHIFT))

#define  ASELA_ASELAIFCNTRL9_STATEID_MASK 0x700000
#define  ASELA_ASELAIFCNTRL9_STATEID_SHIFT 20
#define  ASELA_ASELAIFCNTRL9_STATEID_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_STATEID_MASK) >> ASELA_ASELAIFCNTRL9_STATEID_SHIFT)
#define  ASELA_ASELAIFCNTRL9_STATEID_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_STATEID_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_STATEID_SHIFT))

#define  ASELA_ASELAIFCNTRL9_INVERTOUTPUT_MASK 0x80000
#define  ASELA_ASELAIFCNTRL9_INVERTOUTPUT_SHIFT 19
#define  ASELA_ASELAIFCNTRL9_INVERTOUTPUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_INVERTOUTPUT_MASK) >> ASELA_ASELAIFCNTRL9_INVERTOUTPUT_SHIFT)
#define  ASELA_ASELAIFCNTRL9_INVERTOUTPUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_INVERTOUTPUT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_INVERTOUTPUT_SHIFT))

#define  ASELA_ASELAIFCNTRL9_ANDORSTRUCT_MASK 0x70000
#define  ASELA_ASELAIFCNTRL9_ANDORSTRUCT_SHIFT 16
#define  ASELA_ASELAIFCNTRL9_ANDORSTRUCT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_ANDORSTRUCT_MASK) >> ASELA_ASELAIFCNTRL9_ANDORSTRUCT_SHIFT)
#define  ASELA_ASELAIFCNTRL9_ANDORSTRUCT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_ANDORSTRUCT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_ANDORSTRUCT_SHIFT))

#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_MASK 0xf000
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_SHIFT 12
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_MASK) >> ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_SHIFT)
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_EVENTBLKSEL3_SHIFT))

#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_MASK 0xf00
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_SHIFT 8
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_MASK) >> ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_SHIFT)
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_EVENTBLKSEL2_SHIFT))

#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_MASK 0xf0
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_SHIFT 4
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_MASK) >> ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_SHIFT)
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_EVENTBLKSEL1_SHIFT))

#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_MASK 0xf
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_SHIFT 0
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_MASK) >> ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_SHIFT)
#define  ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRL9_EVENTBLKSEL0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 1 of 10) (AselaIFCntrSetup0)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 1 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP0_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP0_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP0_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP0_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP0_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP0_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP0_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP0_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP0_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP0_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP0_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP0_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP0_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP0_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 2 of 10) (AselaIFCntrSetup1)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 2 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP1_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP1_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP1_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP1_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP1_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP1_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP1_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP1_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP1_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP1_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP1_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP1_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP1_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP1_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 3 of 10) (AselaIFCntrSetup2)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 3 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP2_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP2_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP2_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP2_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP2_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP2_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP2_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP2_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP2_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP2_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP2_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP2_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP2_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP2_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 4 of 10) (AselaIFCntrSetup3)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 4 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP3_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP3_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP3_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP3_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP3_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP3_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP3_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP3_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP3_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP3_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP3_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP3_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP3_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP3_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 5 of 10) (AselaIFCntrSetup4)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 5 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP4_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP4_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP4_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP4_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP4_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP4_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP4_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP4_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP4_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP4_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP4_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP4_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP4_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP4_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 6 of 10) (AselaIFCntrSetup5)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 6 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP5_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP5_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP5_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP5_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP5_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP5_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP5_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP5_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP5_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP5_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP5_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP5_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP5_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP5_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 7 of 10) (AselaIFCntrSetup6)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 7 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP6_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP6_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP6_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP6_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP6_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP6_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP6_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP6_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP6_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP6_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP6_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP6_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP6_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP6_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 8 of 10) (AselaIFCntrSetup7)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 8 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP7_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP7_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP7_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP7_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP7_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP7_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP7_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP7_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP7_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP7_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP7_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP7_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP7_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP7_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 9 of 10) (AselaIFCntrSetup8)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 9 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP8_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP8_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP8_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP8_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP8_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP8_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP8_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP8_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP8_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP8_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP8_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP8_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP8_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP8_BWACCACT0_SHIFT))

//====================================================================
//Register: IF Statement Counter Setup (Instance 10 of 10) (AselaIFCntrSetup9)
/** \brief This register contains the IF Statement actions for the counters, timers, and bandwidth profiling accumulators. A counter/timer can be incremented (counter), decremented (counter), started (timer), stopped (timer), or cleared (both). A bandwidth profiling accumulator can be reset back to zero. These actions can be performed in parallel to other actions specified in the IF Statement Control register such as "go to next state", "sample once", etc. (Instance 10 of 10)*/
//====================================================================

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED1_MASK 0xe0000000
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED1_SHIFT 29
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED1_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_MASK 0x10000000
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_SHIFT 28
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_MASK) >> ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_ELSENEXTEN_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED2_MASK 0x8000000
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED2_SHIFT 27
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED2_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_MASK 0x7000000
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_SHIFT 24
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_MASK) >> ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_ELSENEXTSTATE_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED3_MASK 0x800000
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED3_SHIFT 23
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED3_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT3_MASK 0x700000
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT3_SHIFT 20
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_CNTRACT3_MASK) >> ASELA_ASELAIFCNTRSETUP9_CNTRACT3_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_CNTRACT3_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_CNTRACT3_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED4_MASK 0x80000
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED4_SHIFT 19
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED4_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED4_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED4_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED4_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT2_MASK 0x70000
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT2_SHIFT 16
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_CNTRACT2_MASK) >> ASELA_ASELAIFCNTRSETUP9_CNTRACT2_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_CNTRACT2_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_CNTRACT2_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED5_MASK 0x8000
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED5_SHIFT 15
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED5_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED5_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED5_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED5_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED5_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED5_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT1_MASK 0x7000
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT1_SHIFT 12
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_CNTRACT1_MASK) >> ASELA_ASELAIFCNTRSETUP9_CNTRACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_CNTRACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_CNTRACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED6_MASK 0x800
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED6_SHIFT 11
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED6_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED6_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED6_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED6_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED6_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED6_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT0_MASK 0x700
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT0_SHIFT 8
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_CNTRACT0_MASK) >> ASELA_ASELAIFCNTRSETUP9_CNTRACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_CNTRACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_CNTRACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_CNTRACT0_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_MISRACT_MASK 0xc0
#define  ASELA_ASELAIFCNTRSETUP9_MISRACT_SHIFT 6
#define  ASELA_ASELAIFCNTRSETUP9_MISRACT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_MISRACT_MASK) >> ASELA_ASELAIFCNTRSETUP9_MISRACT_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_MISRACT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_MISRACT_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_MISRACT_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_RESERVED7_MASK 0x30
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED7_SHIFT 4
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED7_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_RESERVED7_MASK) >> ASELA_ASELAIFCNTRSETUP9_RESERVED7_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_RESERVED7_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_RESERVED7_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_RESERVED7_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT1_MASK 0xc
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT1_SHIFT 2
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_BWACCACT1_MASK) >> ASELA_ASELAIFCNTRSETUP9_BWACCACT1_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_BWACCACT1_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_BWACCACT1_SHIFT))

#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT0_MASK 0x3
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT0_SHIFT 0
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT0_MASK_SHIFT(reg) (((reg) & ASELA_ASELAIFCNTRSETUP9_BWACCACT0_MASK) >> ASELA_ASELAIFCNTRSETUP9_BWACCACT0_SHIFT)
#define  ASELA_ASELAIFCNTRSETUP9_BWACCACT0_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAIFCNTRSETUP9_BWACCACT0_MASK) | (((uint32_t)val) << ASELA_ASELAIFCNTRSETUP9_BWACCACT0_SHIFT))

//====================================================================
//Register: Counter / Timer n (Instance 1 of 4) (AselaCntrTimer0)
/** \brief This register specifies the value of the corresponding counter/timer. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_MASK 0xffffffff
#define  ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_SHIFT 0
#define  ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_MASK) >> ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_SHIFT)
#define  ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_MASK) | (((uint32_t)val) << ASELA_ASELACNTRTIMER0_CNTRTIMERVALUE_SHIFT))

//====================================================================
//Register: Counter / Timer n (Instance 2 of 4) (AselaCntrTimer1)
/** \brief This register specifies the value of the corresponding counter/timer. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_MASK 0xffffffff
#define  ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_SHIFT 0
#define  ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_MASK) >> ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_SHIFT)
#define  ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_MASK) | (((uint32_t)val) << ASELA_ASELACNTRTIMER1_CNTRTIMERVALUE_SHIFT))

//====================================================================
//Register: Counter / Timer n (Instance 3 of 4) (AselaCntrTimer2)
/** \brief This register specifies the value of the corresponding counter/timer. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_MASK 0xffffffff
#define  ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_SHIFT 0
#define  ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_MASK) >> ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_SHIFT)
#define  ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_MASK) | (((uint32_t)val) << ASELA_ASELACNTRTIMER2_CNTRTIMERVALUE_SHIFT))

//====================================================================
//Register: Counter / Timer n (Instance 4 of 4) (AselaCntrTimer3)
/** \brief This register specifies the value of the corresponding counter/timer. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_MASK 0xffffffff
#define  ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_SHIFT 0
#define  ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_MASK_SHIFT(reg) (((reg) & ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_MASK) >> ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_SHIFT)
#define  ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_MASK) | (((uint32_t)val) << ASELA_ASELACNTRTIMER3_CNTRTIMERVALUE_SHIFT))

//====================================================================
//Register: BW Profiler Accumulator Setup (Instance 1 of 2) (AselaBWAccSetup0)
/** \brief This register is used to setup the bandwidth profiler accumulators. There are 2 accumulators that can each be programmed to accumulate bandwidth for a specified channel. The following is a list of channels that can be selected for profiling:
  TBD. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELABWACCSETUP0_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELABWACCSETUP0_RESERVED1_SHIFT 30
#define  ASELA_ASELABWACCSETUP0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP0_RESERVED1_MASK) >> ASELA_ASELABWACCSETUP0_RESERVED1_SHIFT)
#define  ASELA_ASELABWACCSETUP0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP0_RESERVED1_SHIFT))

#define  ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_MASK 0x3fff0000
#define  ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_SHIFT 16
#define  ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_MASK) >> ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_SHIFT)
#define  ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP0_BWACCCHNLMSK_SHIFT))

#define  ASELA_ASELABWACCSETUP0_BWACCRDOBS_MASK 0x8000
#define  ASELA_ASELABWACCSETUP0_BWACCRDOBS_SHIFT 15
#define  ASELA_ASELABWACCSETUP0_BWACCRDOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP0_BWACCRDOBS_MASK) >> ASELA_ASELABWACCSETUP0_BWACCRDOBS_SHIFT)
#define  ASELA_ASELABWACCSETUP0_BWACCRDOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP0_BWACCRDOBS_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP0_BWACCRDOBS_SHIFT))

#define  ASELA_ASELABWACCSETUP0_BWACCWROBS_MASK 0x4000
#define  ASELA_ASELABWACCSETUP0_BWACCWROBS_SHIFT 14
#define  ASELA_ASELABWACCSETUP0_BWACCWROBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP0_BWACCWROBS_MASK) >> ASELA_ASELABWACCSETUP0_BWACCWROBS_SHIFT)
#define  ASELA_ASELABWACCSETUP0_BWACCWROBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP0_BWACCWROBS_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP0_BWACCWROBS_SHIFT))

#define  ASELA_ASELABWACCSETUP0_BWACCCHNL_MASK 0x3fff
#define  ASELA_ASELABWACCSETUP0_BWACCCHNL_SHIFT 0
#define  ASELA_ASELABWACCSETUP0_BWACCCHNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP0_BWACCCHNL_MASK) >> ASELA_ASELABWACCSETUP0_BWACCCHNL_SHIFT)
#define  ASELA_ASELABWACCSETUP0_BWACCCHNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP0_BWACCCHNL_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP0_BWACCCHNL_SHIFT))

//====================================================================
//Register: BW Profiler Accumulator Setup (Instance 2 of 2) (AselaBWAccSetup1)
/** \brief This register is used to setup the bandwidth profiler accumulators. There are 2 accumulators that can each be programmed to accumulate bandwidth for a specified channel. The following is a list of channels that can be selected for profiling:
  TBD. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELABWACCSETUP1_RESERVED1_MASK 0xc0000000
#define  ASELA_ASELABWACCSETUP1_RESERVED1_SHIFT 30
#define  ASELA_ASELABWACCSETUP1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP1_RESERVED1_MASK) >> ASELA_ASELABWACCSETUP1_RESERVED1_SHIFT)
#define  ASELA_ASELABWACCSETUP1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP1_RESERVED1_SHIFT))

#define  ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_MASK 0x3fff0000
#define  ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_SHIFT 16
#define  ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_MASK) >> ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_SHIFT)
#define  ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP1_BWACCCHNLMSK_SHIFT))

#define  ASELA_ASELABWACCSETUP1_BWACCRDOBS_MASK 0x8000
#define  ASELA_ASELABWACCSETUP1_BWACCRDOBS_SHIFT 15
#define  ASELA_ASELABWACCSETUP1_BWACCRDOBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP1_BWACCRDOBS_MASK) >> ASELA_ASELABWACCSETUP1_BWACCRDOBS_SHIFT)
#define  ASELA_ASELABWACCSETUP1_BWACCRDOBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP1_BWACCRDOBS_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP1_BWACCRDOBS_SHIFT))

#define  ASELA_ASELABWACCSETUP1_BWACCWROBS_MASK 0x4000
#define  ASELA_ASELABWACCSETUP1_BWACCWROBS_SHIFT 14
#define  ASELA_ASELABWACCSETUP1_BWACCWROBS_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP1_BWACCWROBS_MASK) >> ASELA_ASELABWACCSETUP1_BWACCWROBS_SHIFT)
#define  ASELA_ASELABWACCSETUP1_BWACCWROBS_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP1_BWACCWROBS_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP1_BWACCWROBS_SHIFT))

#define  ASELA_ASELABWACCSETUP1_BWACCCHNL_MASK 0x3fff
#define  ASELA_ASELABWACCSETUP1_BWACCCHNL_SHIFT 0
#define  ASELA_ASELABWACCSETUP1_BWACCCHNL_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACCSETUP1_BWACCCHNL_MASK) >> ASELA_ASELABWACCSETUP1_BWACCCHNL_SHIFT)
#define  ASELA_ASELABWACCSETUP1_BWACCCHNL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACCSETUP1_BWACCCHNL_MASK) | (((uint32_t)val) << ASELA_ASELABWACCSETUP1_BWACCCHNL_SHIFT))

//====================================================================
//Register: BW Profiler Accumulator (Instance 1 of 2) (AselaBWAcc0)
/** \brief This registers specify the value of the corresponding bandwidth accumulator. The value represents the number of words read from/written to memory by the channel selected in the Bandwidth Accumulator Setup register. (Instance 1 of 2)*/
//====================================================================

#define  ASELA_ASELABWACC0_BWACC_MASK 0xffffffff
#define  ASELA_ASELABWACC0_BWACC_SHIFT 0
#define  ASELA_ASELABWACC0_BWACC_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACC0_BWACC_MASK) >> ASELA_ASELABWACC0_BWACC_SHIFT)
#define  ASELA_ASELABWACC0_BWACC_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACC0_BWACC_MASK) | (((uint32_t)val) << ASELA_ASELABWACC0_BWACC_SHIFT))

//====================================================================
//Register: BW Profiler Accumulator (Instance 2 of 2) (AselaBWAcc1)
/** \brief This registers specify the value of the corresponding bandwidth accumulator. The value represents the number of words read from/written to memory by the channel selected in the Bandwidth Accumulator Setup register. (Instance 2 of 2)*/
//====================================================================

#define  ASELA_ASELABWACC1_BWACC_MASK 0xffffffff
#define  ASELA_ASELABWACC1_BWACC_SHIFT 0
#define  ASELA_ASELABWACC1_BWACC_MASK_SHIFT(reg) (((reg) & ASELA_ASELABWACC1_BWACC_MASK) >> ASELA_ASELABWACC1_BWACC_SHIFT)
#define  ASELA_ASELABWACC1_BWACC_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELABWACC1_BWACC_MASK) | (((uint32_t)val) << ASELA_ASELABWACC1_BWACC_SHIFT))

//====================================================================
//Register: Print Nozzle Detect (Instance 1 of 4) (AselaPrintNozDet0)
/** \brief This registers are used to specify a specific nozzle to be detected as being addressed by the Print serial datastream. The detected nozzle is routed as a general input into the ASELA signal pool and is valid for one PCLK. (Instance 1 of 4)*/
//====================================================================

#define  ASELA_ASELAPRINTNOZDET0_ADDRMATCH_MASK 0xff000000
#define  ASELA_ASELAPRINTNOZDET0_ADDRMATCH_SHIFT 24
#define  ASELA_ASELAPRINTNOZDET0_ADDRMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_ADDRMATCH_MASK) >> ASELA_ASELAPRINTNOZDET0_ADDRMATCH_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_ADDRMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_ADDRMATCH_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_ADDRMATCH_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_RESERVED1_MASK 0xc00000
#define  ASELA_ASELAPRINTNOZDET0_RESERVED1_SHIFT 22
#define  ASELA_ASELAPRINTNOZDET0_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_RESERVED1_MASK) >> ASELA_ASELAPRINTNOZDET0_RESERVED1_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_RESERVED1_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_MASK 0x3f0000
#define  ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_SHIFT 16
#define  ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_MASK) >> ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_PCLKOFFSETCNT_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_RESERVED2_MASK 0xe000
#define  ASELA_ASELAPRINTNOZDET0_RESERVED2_SHIFT 13
#define  ASELA_ASELAPRINTNOZDET0_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_RESERVED2_MASK) >> ASELA_ASELAPRINTNOZDET0_RESERVED2_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_RESERVED2_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_DATASEL_MASK 0x1f00
#define  ASELA_ASELAPRINTNOZDET0_DATASEL_SHIFT 8
#define  ASELA_ASELAPRINTNOZDET0_DATASEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_DATASEL_MASK) >> ASELA_ASELAPRINTNOZDET0_DATASEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_DATASEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_DATASEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_DATASEL_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_RESERVED3_MASK 0xfc
#define  ASELA_ASELAPRINTNOZDET0_RESERVED3_SHIFT 2
#define  ASELA_ASELAPRINTNOZDET0_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_RESERVED3_MASK) >> ASELA_ASELAPRINTNOZDET0_RESERVED3_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_RESERVED3_SHIFT))

#define  ASELA_ASELAPRINTNOZDET0_PHSEL_MASK 0x3
#define  ASELA_ASELAPRINTNOZDET0_PHSEL_SHIFT 0
#define  ASELA_ASELAPRINTNOZDET0_PHSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET0_PHSEL_MASK) >> ASELA_ASELAPRINTNOZDET0_PHSEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET0_PHSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET0_PHSEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET0_PHSEL_SHIFT))

//====================================================================
//Register: Print Nozzle Detect (Instance 2 of 4) (AselaPrintNozDet1)
/** \brief This registers are used to specify a specific nozzle to be detected as being addressed by the Print serial datastream. The detected nozzle is routed as a general input into the ASELA signal pool and is valid for one PCLK. (Instance 2 of 4)*/
//====================================================================

#define  ASELA_ASELAPRINTNOZDET1_ADDRMATCH_MASK 0xff000000
#define  ASELA_ASELAPRINTNOZDET1_ADDRMATCH_SHIFT 24
#define  ASELA_ASELAPRINTNOZDET1_ADDRMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_ADDRMATCH_MASK) >> ASELA_ASELAPRINTNOZDET1_ADDRMATCH_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_ADDRMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_ADDRMATCH_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_ADDRMATCH_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_RESERVED1_MASK 0xc00000
#define  ASELA_ASELAPRINTNOZDET1_RESERVED1_SHIFT 22
#define  ASELA_ASELAPRINTNOZDET1_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_RESERVED1_MASK) >> ASELA_ASELAPRINTNOZDET1_RESERVED1_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_RESERVED1_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_MASK 0x3f0000
#define  ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_SHIFT 16
#define  ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_MASK) >> ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_PCLKOFFSETCNT_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_RESERVED2_MASK 0xe000
#define  ASELA_ASELAPRINTNOZDET1_RESERVED2_SHIFT 13
#define  ASELA_ASELAPRINTNOZDET1_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_RESERVED2_MASK) >> ASELA_ASELAPRINTNOZDET1_RESERVED2_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_RESERVED2_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_DATASEL_MASK 0x1f00
#define  ASELA_ASELAPRINTNOZDET1_DATASEL_SHIFT 8
#define  ASELA_ASELAPRINTNOZDET1_DATASEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_DATASEL_MASK) >> ASELA_ASELAPRINTNOZDET1_DATASEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_DATASEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_DATASEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_DATASEL_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_RESERVED3_MASK 0xfc
#define  ASELA_ASELAPRINTNOZDET1_RESERVED3_SHIFT 2
#define  ASELA_ASELAPRINTNOZDET1_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_RESERVED3_MASK) >> ASELA_ASELAPRINTNOZDET1_RESERVED3_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_RESERVED3_SHIFT))

#define  ASELA_ASELAPRINTNOZDET1_PHSEL_MASK 0x3
#define  ASELA_ASELAPRINTNOZDET1_PHSEL_SHIFT 0
#define  ASELA_ASELAPRINTNOZDET1_PHSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET1_PHSEL_MASK) >> ASELA_ASELAPRINTNOZDET1_PHSEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET1_PHSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET1_PHSEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET1_PHSEL_SHIFT))

//====================================================================
//Register: Print Nozzle Detect (Instance 3 of 4) (AselaPrintNozDet2)
/** \brief This registers are used to specify a specific nozzle to be detected as being addressed by the Print serial datastream. The detected nozzle is routed as a general input into the ASELA signal pool and is valid for one PCLK. (Instance 3 of 4)*/
//====================================================================

#define  ASELA_ASELAPRINTNOZDET2_ADDRMATCH_MASK 0xff000000
#define  ASELA_ASELAPRINTNOZDET2_ADDRMATCH_SHIFT 24
#define  ASELA_ASELAPRINTNOZDET2_ADDRMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_ADDRMATCH_MASK) >> ASELA_ASELAPRINTNOZDET2_ADDRMATCH_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_ADDRMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_ADDRMATCH_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_ADDRMATCH_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_RESERVED1_MASK 0xc00000
#define  ASELA_ASELAPRINTNOZDET2_RESERVED1_SHIFT 22
#define  ASELA_ASELAPRINTNOZDET2_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_RESERVED1_MASK) >> ASELA_ASELAPRINTNOZDET2_RESERVED1_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_RESERVED1_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_MASK 0x3f0000
#define  ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_SHIFT 16
#define  ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_MASK) >> ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_PCLKOFFSETCNT_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_RESERVED2_MASK 0xe000
#define  ASELA_ASELAPRINTNOZDET2_RESERVED2_SHIFT 13
#define  ASELA_ASELAPRINTNOZDET2_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_RESERVED2_MASK) >> ASELA_ASELAPRINTNOZDET2_RESERVED2_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_RESERVED2_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_DATASEL_MASK 0x1f00
#define  ASELA_ASELAPRINTNOZDET2_DATASEL_SHIFT 8
#define  ASELA_ASELAPRINTNOZDET2_DATASEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_DATASEL_MASK) >> ASELA_ASELAPRINTNOZDET2_DATASEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_DATASEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_DATASEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_DATASEL_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_RESERVED3_MASK 0xfc
#define  ASELA_ASELAPRINTNOZDET2_RESERVED3_SHIFT 2
#define  ASELA_ASELAPRINTNOZDET2_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_RESERVED3_MASK) >> ASELA_ASELAPRINTNOZDET2_RESERVED3_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_RESERVED3_SHIFT))

#define  ASELA_ASELAPRINTNOZDET2_PHSEL_MASK 0x3
#define  ASELA_ASELAPRINTNOZDET2_PHSEL_SHIFT 0
#define  ASELA_ASELAPRINTNOZDET2_PHSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET2_PHSEL_MASK) >> ASELA_ASELAPRINTNOZDET2_PHSEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET2_PHSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET2_PHSEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET2_PHSEL_SHIFT))

//====================================================================
//Register: Print Nozzle Detect (Instance 4 of 4) (AselaPrintNozDet3)
/** \brief This registers are used to specify a specific nozzle to be detected as being addressed by the Print serial datastream. The detected nozzle is routed as a general input into the ASELA signal pool and is valid for one PCLK. (Instance 4 of 4)*/
//====================================================================

#define  ASELA_ASELAPRINTNOZDET3_ADDRMATCH_MASK 0xff000000
#define  ASELA_ASELAPRINTNOZDET3_ADDRMATCH_SHIFT 24
#define  ASELA_ASELAPRINTNOZDET3_ADDRMATCH_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_ADDRMATCH_MASK) >> ASELA_ASELAPRINTNOZDET3_ADDRMATCH_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_ADDRMATCH_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_ADDRMATCH_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_ADDRMATCH_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_RESERVED1_MASK 0xc00000
#define  ASELA_ASELAPRINTNOZDET3_RESERVED1_SHIFT 22
#define  ASELA_ASELAPRINTNOZDET3_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_RESERVED1_MASK) >> ASELA_ASELAPRINTNOZDET3_RESERVED1_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_RESERVED1_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_MASK 0x3f0000
#define  ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_SHIFT 16
#define  ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_MASK) >> ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_PCLKOFFSETCNT_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_RESERVED2_MASK 0xe000
#define  ASELA_ASELAPRINTNOZDET3_RESERVED2_SHIFT 13
#define  ASELA_ASELAPRINTNOZDET3_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_RESERVED2_MASK) >> ASELA_ASELAPRINTNOZDET3_RESERVED2_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_RESERVED2_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_DATASEL_MASK 0x1f00
#define  ASELA_ASELAPRINTNOZDET3_DATASEL_SHIFT 8
#define  ASELA_ASELAPRINTNOZDET3_DATASEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_DATASEL_MASK) >> ASELA_ASELAPRINTNOZDET3_DATASEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_DATASEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_DATASEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_DATASEL_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_RESERVED3_MASK 0xfc
#define  ASELA_ASELAPRINTNOZDET3_RESERVED3_SHIFT 2
#define  ASELA_ASELAPRINTNOZDET3_RESERVED3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_RESERVED3_MASK) >> ASELA_ASELAPRINTNOZDET3_RESERVED3_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_RESERVED3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_RESERVED3_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_RESERVED3_SHIFT))

#define  ASELA_ASELAPRINTNOZDET3_PHSEL_MASK 0x3
#define  ASELA_ASELAPRINTNOZDET3_PHSEL_SHIFT 0
#define  ASELA_ASELAPRINTNOZDET3_PHSEL_MASK_SHIFT(reg) (((reg) & ASELA_ASELAPRINTNOZDET3_PHSEL_MASK) >> ASELA_ASELAPRINTNOZDET3_PHSEL_SHIFT)
#define  ASELA_ASELAPRINTNOZDET3_PHSEL_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAPRINTNOZDET3_PHSEL_MASK) | (((uint32_t)val) << ASELA_ASELAPRINTNOZDET3_PHSEL_SHIFT))

//====================================================================
//Register: MISR Test Signal Select A (AselaMisrTestSelA)
/** \brief This register selects which of the sampled signals will go into the lower byte of the 16 bit MISR.*/
//====================================================================

#define  ASELA_ASELAMISRTESTSELA_RESERVED1_MASK 0xff800000
#define  ASELA_ASELAMISRTESTSELA_RESERVED1_SHIFT 23
#define  ASELA_ASELAMISRTESTSELA_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELA_RESERVED1_MASK) >> ASELA_ASELAMISRTESTSELA_RESERVED1_SHIFT)
#define  ASELA_ASELAMISRTESTSELA_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELA_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELA_RESERVED1_SHIFT))

#define  ASELA_ASELAMISRTESTSELA_TEST_NIB2_MASK 0x7f0000
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB2_SHIFT 16
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELA_TEST_NIB2_MASK) >> ASELA_ASELAMISRTESTSELA_TEST_NIB2_SHIFT)
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELA_TEST_NIB2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELA_TEST_NIB2_SHIFT))

#define  ASELA_ASELAMISRTESTSELA_RESERVED2_MASK 0xff80
#define  ASELA_ASELAMISRTESTSELA_RESERVED2_SHIFT 7
#define  ASELA_ASELAMISRTESTSELA_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELA_RESERVED2_MASK) >> ASELA_ASELAMISRTESTSELA_RESERVED2_SHIFT)
#define  ASELA_ASELAMISRTESTSELA_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELA_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELA_RESERVED2_SHIFT))

#define  ASELA_ASELAMISRTESTSELA_TEST_NIB1_MASK 0x7f
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB1_SHIFT 0
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELA_TEST_NIB1_MASK) >> ASELA_ASELAMISRTESTSELA_TEST_NIB1_SHIFT)
#define  ASELA_ASELAMISRTESTSELA_TEST_NIB1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELA_TEST_NIB1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELA_TEST_NIB1_SHIFT))

//====================================================================
//Register: MISR Test Signal Select B (AselaMisrTestSelB)
/** \brief This register selects which of the sampled signals will go into the lower byte of the 16 bit MISR.*/
//====================================================================

#define  ASELA_ASELAMISRTESTSELB_RESERVED1_MASK 0xff800000
#define  ASELA_ASELAMISRTESTSELB_RESERVED1_SHIFT 23
#define  ASELA_ASELAMISRTESTSELB_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELB_RESERVED1_MASK) >> ASELA_ASELAMISRTESTSELB_RESERVED1_SHIFT)
#define  ASELA_ASELAMISRTESTSELB_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELB_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELB_RESERVED1_SHIFT))

#define  ASELA_ASELAMISRTESTSELB_TEST_NIB4_MASK 0x7f0000
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB4_SHIFT 16
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELB_TEST_NIB4_MASK) >> ASELA_ASELAMISRTESTSELB_TEST_NIB4_SHIFT)
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELB_TEST_NIB4_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELB_TEST_NIB4_SHIFT))

#define  ASELA_ASELAMISRTESTSELB_RESERVED2_MASK 0xff80
#define  ASELA_ASELAMISRTESTSELB_RESERVED2_SHIFT 7
#define  ASELA_ASELAMISRTESTSELB_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELB_RESERVED2_MASK) >> ASELA_ASELAMISRTESTSELB_RESERVED2_SHIFT)
#define  ASELA_ASELAMISRTESTSELB_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELB_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELB_RESERVED2_SHIFT))

#define  ASELA_ASELAMISRTESTSELB_TEST_NIB3_MASK 0x7f
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB3_SHIFT 0
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTESTSELB_TEST_NIB3_MASK) >> ASELA_ASELAMISRTESTSELB_TEST_NIB3_SHIFT)
#define  ASELA_ASELAMISRTESTSELB_TEST_NIB3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTESTSELB_TEST_NIB3_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTESTSELB_TEST_NIB3_SHIFT))

//====================================================================
//Register: MISR Load Signal Select A (AselaMisrLoadSelA)
/** \brief This register selects which of the sampled signals will be loaded into the lower byte of the 16 bit MISR if a load MISER action is selected.*/
//====================================================================

#define  ASELA_ASELAMISRLOADSELA_RESERVED1_MASK 0xff800000
#define  ASELA_ASELAMISRLOADSELA_RESERVED1_SHIFT 23
#define  ASELA_ASELAMISRLOADSELA_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELA_RESERVED1_MASK) >> ASELA_ASELAMISRLOADSELA_RESERVED1_SHIFT)
#define  ASELA_ASELAMISRLOADSELA_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELA_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELA_RESERVED1_SHIFT))

#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB2_MASK 0x7f0000
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB2_SHIFT 16
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELA_LOAD_NIB2_MASK) >> ASELA_ASELAMISRLOADSELA_LOAD_NIB2_SHIFT)
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELA_LOAD_NIB2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELA_LOAD_NIB2_SHIFT))

#define  ASELA_ASELAMISRLOADSELA_RESERVED2_MASK 0xff80
#define  ASELA_ASELAMISRLOADSELA_RESERVED2_SHIFT 7
#define  ASELA_ASELAMISRLOADSELA_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELA_RESERVED2_MASK) >> ASELA_ASELAMISRLOADSELA_RESERVED2_SHIFT)
#define  ASELA_ASELAMISRLOADSELA_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELA_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELA_RESERVED2_SHIFT))

#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB1_MASK 0x7f
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB1_SHIFT 0
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELA_LOAD_NIB1_MASK) >> ASELA_ASELAMISRLOADSELA_LOAD_NIB1_SHIFT)
#define  ASELA_ASELAMISRLOADSELA_LOAD_NIB1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELA_LOAD_NIB1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELA_LOAD_NIB1_SHIFT))

//====================================================================
//Register: MISR Load Signal Select B (AselaMisrLoadSelB)
/** \brief This register selects which of the sampled signals will be loaded into the lower byte of the 16 bit MISR if a load MISER action is selected.*/
//====================================================================

#define  ASELA_ASELAMISRLOADSELB_RESERVED1_MASK 0xff800000
#define  ASELA_ASELAMISRLOADSELB_RESERVED1_SHIFT 23
#define  ASELA_ASELAMISRLOADSELB_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELB_RESERVED1_MASK) >> ASELA_ASELAMISRLOADSELB_RESERVED1_SHIFT)
#define  ASELA_ASELAMISRLOADSELB_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELB_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELB_RESERVED1_SHIFT))

#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB4_MASK 0x7f0000
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB4_SHIFT 16
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB4_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELB_LOAD_NIB4_MASK) >> ASELA_ASELAMISRLOADSELB_LOAD_NIB4_SHIFT)
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB4_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELB_LOAD_NIB4_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELB_LOAD_NIB4_SHIFT))

#define  ASELA_ASELAMISRLOADSELB_RESERVED2_MASK 0xff80
#define  ASELA_ASELAMISRLOADSELB_RESERVED2_SHIFT 7
#define  ASELA_ASELAMISRLOADSELB_RESERVED2_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELB_RESERVED2_MASK) >> ASELA_ASELAMISRLOADSELB_RESERVED2_SHIFT)
#define  ASELA_ASELAMISRLOADSELB_RESERVED2_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELB_RESERVED2_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELB_RESERVED2_SHIFT))

#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB3_MASK 0x7f
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB3_SHIFT 0
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB3_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRLOADSELB_LOAD_NIB3_MASK) >> ASELA_ASELAMISRLOADSELB_LOAD_NIB3_SHIFT)
#define  ASELA_ASELAMISRLOADSELB_LOAD_NIB3_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRLOADSELB_LOAD_NIB3_MASK) | (((uint32_t)val) << ASELA_ASELAMISRLOADSELB_LOAD_NIB3_SHIFT))

//====================================================================
//Register: MISR Test Data Mask / Load Data Register (AselaMisrTstMskLdData)
/** \brief This register contains 2 fields: The test data mask register, and the load data register.*/
//====================================================================

#define  ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_MASK 0xffff0000
#define  ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_SHIFT 16
#define  ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_MASK) >> ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_SHIFT)
#define  ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTSTMSKLDDATA_LD_DATA_SHIFT))

#define  ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_MASK 0xffff
#define  ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_SHIFT 0
#define  ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_MASK) >> ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_SHIFT)
#define  ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_MASK) | (((uint32_t)val) << ASELA_ASELAMISRTSTMSKLDDATA_TST_DATA_MASK_SHIFT))

//====================================================================
//Register: MISR Result Register (AselaMisrResult)
//====================================================================

#define  ASELA_ASELAMISRRESULT_RESERVED1_MASK 0xffff0000
#define  ASELA_ASELAMISRRESULT_RESERVED1_SHIFT 16
#define  ASELA_ASELAMISRRESULT_RESERVED1_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRRESULT_RESERVED1_MASK) >> ASELA_ASELAMISRRESULT_RESERVED1_SHIFT)
#define  ASELA_ASELAMISRRESULT_RESERVED1_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRRESULT_RESERVED1_MASK) | (((uint32_t)val) << ASELA_ASELAMISRRESULT_RESERVED1_SHIFT))

#define  ASELA_ASELAMISRRESULT_MISR_OUT_MASK 0xffff
#define  ASELA_ASELAMISRRESULT_MISR_OUT_SHIFT 0
#define  ASELA_ASELAMISRRESULT_MISR_OUT_MASK_SHIFT(reg) (((reg) & ASELA_ASELAMISRRESULT_MISR_OUT_MASK) >> ASELA_ASELAMISRRESULT_MISR_OUT_SHIFT)
#define  ASELA_ASELAMISRRESULT_MISR_OUT_REPLACE_VAL(reg,val) (((reg) & ~ASELA_ASELAMISRRESULT_MISR_OUT_MASK) | (((uint32_t)val) << ASELA_ASELAMISRRESULT_MISR_OUT_SHIFT))

#endif // ASELA
