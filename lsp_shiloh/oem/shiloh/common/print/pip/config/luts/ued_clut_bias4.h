/******************************************************************************
 * Copyright (c) 2011  Marvell International, Ltd. All Rights Reserved
 *
 *                         Marvell Confidential
 ******************************************************************************/

#ifndef CLUT_BIAS4_H
#define CLUT_BIAS4_H

// Zero bias:
//   uint8_t clut_zero_bias4[256] = {0};
//   uint16_t clut_zero_thresh4[256] = {0};

uint16_t clut_thresh4[256] = {0};

// These are randomness/noise divisors:
//     3 = val + noise/8
//     2 = val + noise/4
//     1 = val + noise/2
//     0 = val + noise
// If we like the existing pattern in a tone, use 3 so little noise is added.
// If an area is troubling, use 0 to add more randomness to break up patterns.

uint8_t clut_bias4[] = {
#if 0
    0x00,
#else
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,
    0x03,  0x00,   0x03,    0x00,    0x03,    0x00,    0x03,    0x00,

#endif
};
#endif
